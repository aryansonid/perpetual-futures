{
  "address": "0xbb342B46C6F2A8d9ed140118aCc4D4A2C76e78b4",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueWETH",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CanExecuteTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "DevGovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "NftBotFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "WETHVaultFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETHVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftHolder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterface.LimitOrder",
              "name": "orderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct StorageInterface.PendingNftOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradePnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giveApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract StakingInterface",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_vaultFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_liquidatorFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_liquidationFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_parLiquidationFeeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.feeConfig",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parLiquidationFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "setCanExecuteTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setLiquidatorFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setParLiquidationFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct TradingCallbacks.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct TradingCallbacks.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setVaultFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract StakingInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8e53ec612f28ee099c8a8dd59f7ab21d26dcc483c03a9a08a98131851b327c0",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xbb342B46C6F2A8d9ed140118aCc4D4A2C76e78b4",
    "transactionIndex": 10,
    "gasUsed": "4645825",
    "logsBloom": "0x
    "blockHash": "0xebefd584e2b57e3fb913c0c809ce1e8947f9f5ca8145af4ef25bb84469e6cf80",
    "transactionHash": "0xd8e53ec612f28ee099c8a8dd59f7ab21d26dcc483c03a9a08a98131851b327c0",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 41260106,
        "transactionHash": "0xd8e53ec612f28ee099c8a8dd59f7ab21d26dcc483c03a9a08a98131851b327c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000003007c7230c338000000000000000000000000000000000000000000000000020248aac72af32510000000000000000000000000000000000000000000002ce7a30fba55b53fa210000000000000000000000000000000000000000000000001ff482e54fa2fed10000000000000000000000000000000000000000000002ce7a61036c7e602da1",
        "logIndex": 26,
        "blockHash": "0xebefd584e2b57e3fb913c0c809ce1e8947f9f5ca8145af4ef25bb84469e6cf80"
      }
    ],
    "blockNumber": 41260106,
    "cumulativeGasUsed": "5134894",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "bacb03744b47ee6ec19bffd9492e63c3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueWETH\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CanExecuteTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"DevGovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"NftBotFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"WETHVaultFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETHVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageInterface.PendingNftOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradePnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract StakingInterface\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_vaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parLiquidationFeeP\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.feeConfig\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parLiquidationFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"setCanExecuteTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setLiquidatorFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setParLiquidationFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct TradingCallbacks.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct TradingCallbacks.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setVaultFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract StakingInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingCallbacks.sol\":\"TradingCallbacks\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1.sol\\\";\\nimport \\\"./interfaces/PoolInterfaceV5.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/PausableInterfaceV5.sol\\\";\\n\\ncontract Storage is StorageInterface {\\n    // Constants\\n    uint public constant PRECISION = 1e10;\\n    bytes32 public constant MINTER_ROLE =\\n        0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\\n    TokenInterface public WETH;\\n    IOracle public oracle;\\n    TokenInterface public constant linkErc677 =\\n        TokenInterface(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\\n\\n    // Contracts (updatable)\\n    AggregatorInterfaceV1 public priceAggregator;\\n    PoolInterfaceV5 public pool;\\n    PausableInterfaceV5 public trading;\\n    PausableInterfaceV5 public callbacks;\\n    TokenInterface public token =\\n        TokenInterface(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\\n    NftInterfaceV5[5] public nfts = [\\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\\n    ];\\n    address public vault;\\n    address public tokenWETHRouter;\\n\\n    // Trading variables\\n    uint public maxTradesPerPair = 3;\\n    uint public maxTradesPerBlock = 5;\\n    uint public maxPendingMarketOrders = 5;\\n    uint public maxGainP = 900; // %\\n    uint public maxSlP = 80; // %\\n    uint public defaultLeverageUnlocked = 50; // x\\n    uint public nftSuccessTimelock = 50; // 50 blocks\\n    uint[5] public spreadReductionsP = [15, 20, 25, 30, 35]; // %\\n\\n    // Gov & dev addresses (updatable)\\n    address public gov; //TODO need to change to our\\n    address public dev; //TODO need to change to our\\n\\n    // Gov & dev fees\\n    uint public devFeesToken; // 1e18\\n    uint public devFeesWETH; // 1e18\\n    uint public govFeesToken; // 1e18\\n    uint public govFeesWETH; // 1e18\\n\\n    // Stats\\n    uint public tokensBurned; // 1e18\\n    uint public tokensMinted; // 1e18\\n    uint public nftRewards; // 1e18\\n\\n    // Enums\\n    // enum LimitOrder {\\n    //     TP,\\n    //     SL,\\n    //     LIQ,\\n    //     OPEN\\n    // }\\n\\n    // Structs\\n    struct Trader {\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal; // 1e18\\n    }\\n    // struct Trade {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint initialPosToken; // 1e18\\n    //     uint positionSizeWETH; // 1e18\\n    //     uint openPrice; // PRECISION\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION\\n    //     uint sl; // PRECISION\\n    // }\\n    // struct TradeInfo {\\n    //     uint tokenId;\\n    //     uint tokenPriceWETH; // PRECISION\\n    //     uint openInterestWETH; // 1e18\\n    //     uint tpLastUpdated;\\n    //     uint slLastUpdated;\\n    //     bool beingMarketClosed;\\n    // }\\n    // struct OpenLimitOrder {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint positionSize; // 1e18 (WETH or GFARM2)\\n    //     uint spreadReductionP;\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION (%)\\n    //     uint sl; // PRECISION (%)\\n    //     uint minPrice; // PRECISION\\n    //     uint maxPrice; // PRECISION\\n    //     uint block;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingMarketOrder {\\n    //     Trade trade;\\n    //     uint block;\\n    //     uint wantedPrice; // PRECISION\\n    //     uint slippageP; // PRECISION (%)\\n    //     uint spreadReductionP;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingNftOrder {\\n    //     address nftHolder;\\n    //     uint nftId;\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     LimitOrder orderType;\\n    // }\\n\\n    // Supported tokens to open trades with\\n    address[] public supportedTokens;\\n\\n    // User info mapping\\n    mapping(address => Trader) public traders;\\n\\n    // Trades mappings\\n    mapping(address => mapping(uint => mapping(uint => Trade)))\\n        public openTrades;\\n    mapping(address => mapping(uint => mapping(uint => TradeInfo)))\\n        public openTradesInfo;\\n    mapping(address => mapping(uint => uint)) public openTradesCount;\\n\\n    // Limit orders mappings\\n    mapping(address => mapping(uint => mapping(uint => uint)))\\n        public openLimitOrderIds;\\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\\n    OpenLimitOrder[] public openLimitOrders;\\n\\n    // Pending orders mappings\\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\\n    mapping(address => uint[]) public pendingOrderIds;\\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\\n\\n    // List of open trades & limit orders\\n    mapping(uint => address[]) public pairTraders;\\n    mapping(address => mapping(uint => uint)) public pairTradersId;\\n\\n    // Current and max open interests for each pair\\n    mapping(uint => uint[3]) public openInterestWETH; // 1e18 [long,short,max]\\n\\n    // Restrictions & Timelocks\\n    mapping(uint => uint) public tradesPerBlock;\\n    mapping(uint => uint) public nftLastSuccess;\\n\\n    // List of allowed contracts => can update storage + mint/burn tokens\\n    mapping(address => bool) public isTradingContract;\\n\\n    // Events\\n    event SupportedTokenAdded(address a);\\n    event TradingContractAdded(address a);\\n    event TradingContractRemoved(address a);\\n    event AddressUpdated(string name, address a);\\n    event NftsUpdated(NftInterfaceV5[5] nfts);\\n    event NumberUpdated(string name, uint value);\\n    event NumberUpdatedPair(string name, uint pairIndex, uint value);\\n    event SpreadReductionsUpdated(uint[5]);\\n\\n    constructor(address _WETH, address _gov, address _dev) {\\n        WETH = TokenInterface(_WETH);\\n        gov = _gov;\\n        dev = _dev;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(\\n            isTradingContract[msg.sender],\\n            // &&\\n            //     token.hasRole(MINTER_ROLE, msg.sender)\\n            \\\"here here\\\"\\n        );\\n        _;\\n    }\\n\\n    // Manage addresses\\n    function setGov(address _gov) external onlyGov {\\n        require(_gov != address(0));\\n        gov = _gov;\\n        emit AddressUpdated(\\\"gov\\\", _gov);\\n    }\\n\\n    function setDev(address _dev) external onlyGov {\\n        require(_dev != address(0));\\n        dev = _dev;\\n        emit AddressUpdated(\\\"dev\\\", _dev);\\n    }\\n\\n    function updateToken(TokenInterface _newToken) external onlyGov {\\n        require(trading.isPaused() && callbacks.isPaused(), \\\"NOT_PAUSED\\\");\\n        require(address(_newToken) != address(0));\\n        token = _newToken;\\n        emit AddressUpdated(\\\"token\\\", address(_newToken));\\n    }\\n\\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov {\\n        require(address(_nfts[0]) != address(0));\\n        nfts = _nfts;\\n        emit NftsUpdated(_nfts);\\n    }\\n\\n    // Trading + callbacks contracts\\n    function addTradingContract(address _trading) external onlyGov {\\n        // require(token.hasRole(MINTER_ROLE, _trading), \\\"NOT_MINTER\\\"); /// TODO : need to have a gtoken type token of our own\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = true;\\n        emit TradingContractAdded(_trading);\\n    }\\n\\n    function removeTradingContract(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = false;\\n        emit TradingContractRemoved(_trading);\\n    }\\n\\n    function addSupportedToken(address _token) external onlyGov {\\n        require(_token != address(0));\\n        supportedTokens.push(_token);\\n        emit SupportedTokenAdded(_token);\\n    }\\n\\n    function setPriceAggregator(address _aggregator) external onlyGov {\\n        require(_aggregator != address(0));\\n        priceAggregator = AggregatorInterfaceV1(_aggregator);\\n        emit AddressUpdated(\\\"priceAggregator\\\", _aggregator);\\n    }\\n\\n    function setPool(address _pool) external onlyGov {\\n        require(_pool != address(0));\\n        pool = PoolInterfaceV5(_pool);\\n        emit AddressUpdated(\\\"pool\\\", _pool);\\n    }\\n\\n    function setVault(address _vault) external onlyGov {\\n        require(_vault != address(0));\\n        vault = _vault;\\n        emit AddressUpdated(\\\"vault\\\", _vault);\\n    }\\n\\n    function setTrading(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        trading = PausableInterfaceV5(_trading);\\n        emit AddressUpdated(\\\"trading\\\", _trading);\\n    }\\n\\n    function setCallbacks(address _callbacks) external onlyGov {\\n        require(_callbacks != address(0));\\n        callbacks = PausableInterfaceV5(_callbacks);\\n        emit AddressUpdated(\\\"callbacks\\\", _callbacks);\\n    }\\n\\n    function setTokenWETHRouter(address _tokenWETHRouter) external onlyGov {\\n        require(_tokenWETHRouter != address(0));\\n        tokenWETHRouter = _tokenWETHRouter;\\n        emit AddressUpdated(\\\"tokenWETHRouter\\\", _tokenWETHRouter);\\n    }\\n\\n    // Manage trading variables\\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov {\\n        require(_maxTradesPerBlock > 0);\\n        maxTradesPerBlock = _maxTradesPerBlock;\\n        emit NumberUpdated(\\\"maxTradesPerBlock\\\", _maxTradesPerBlock);\\n    }\\n\\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov {\\n        require(_maxTradesPerPair > 0);\\n        maxTradesPerPair = _maxTradesPerPair;\\n        emit NumberUpdated(\\\"maxTradesPerPair\\\", _maxTradesPerPair);\\n    }\\n\\n    function setMaxPendingMarketOrders(\\n        uint _maxPendingMarketOrders\\n    ) external onlyGov {\\n        require(_maxPendingMarketOrders > 0);\\n        maxPendingMarketOrders = _maxPendingMarketOrders;\\n        emit NumberUpdated(\\\"maxPendingMarketOrders\\\", _maxPendingMarketOrders);\\n    }\\n\\n    function setMaxGainP(uint _max) external onlyGov {\\n        require(_max >= 300);\\n        maxGainP = _max;\\n        emit NumberUpdated(\\\"maxGainP\\\", _max);\\n    }\\n\\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov {\\n        require(_lev > 0);\\n        defaultLeverageUnlocked = _lev;\\n        emit NumberUpdated(\\\"defaultLeverageUnlocked\\\", _lev);\\n    }\\n\\n    function setMaxSlP(uint _max) external onlyGov {\\n        require(_max >= 50);\\n        maxSlP = _max;\\n        emit NumberUpdated(\\\"maxSlP\\\", _max);\\n    }\\n\\n    function setNftSuccessTimelock(uint _blocks) external onlyGov {\\n        nftSuccessTimelock = _blocks;\\n        emit NumberUpdated(\\\"nftSuccessTimelock\\\", _blocks);\\n    }\\n\\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov {\\n        require(\\n            _r[0] > 0 &&\\n                _r[1] > _r[0] &&\\n                _r[2] > _r[1] &&\\n                _r[3] > _r[2] &&\\n                _r[4] > _r[3]\\n        );\\n        spreadReductionsP = _r;\\n        emit SpreadReductionsUpdated(_r);\\n    }\\n\\n    function setMaxOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _newMaxOpenInterest\\n    ) external onlyGov {\\n        // Can set max open interest to 0 to pause trading on this pair only\\n        openInterestWETH[_pairIndex][2] = _newMaxOpenInterest;\\n        emit NumberUpdatedPair(\\n            \\\"maxOpenInterestWETH\\\",\\n            _pairIndex,\\n            _newMaxOpenInterest\\n        );\\n    }\\n\\n    // Manage stored trades\\n    function storeTrade(\\n        Trade memory _trade,\\n        TradeInfo memory _tradeInfo\\n    ) external onlyTrading {\\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\\n\\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\\n        tradesPerBlock[block.number]++;\\n\\n        if (openTradesCount[_trade.trader][_trade.pairIndex] == 1) {\\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[\\n                _trade.pairIndex\\n            ].length;\\n            pairTraders[_trade.pairIndex].push(_trade.trader);\\n        }\\n\\n        _tradeInfo.beingMarketClosed = false;\\n        openTradesInfo[_trade.trader][_trade.pairIndex][\\n            _trade.index\\n        ] = _tradeInfo;\\n\\n        updateOpenInterestWETH(\\n            _trade.pairIndex,\\n            _tradeInfo.openInterestWETH,\\n            true,\\n            _trade.buy\\n        );\\n    }\\n\\n    function unregisterTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[trader][pairIndex][index];\\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n\\n        updateOpenInterestWETH(pairIndex, i.openInterestWETH, false, t.buy);\\n\\n        if (openTradesCount[trader][pairIndex] == 1) {\\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\\n            address[] storage p = pairTraders[pairIndex];\\n\\n            p[_pairTradersId] = p[p.length - 1];\\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\\n\\n            delete pairTradersId[trader][pairIndex];\\n            p.pop();\\n        }\\n\\n        delete openTrades[trader][pairIndex][index];\\n        delete openTradesInfo[trader][pairIndex][index];\\n\\n        openTradesCount[trader][pairIndex]--;\\n        tradesPerBlock[block.number]++;\\n    }\\n\\n    // Manage pending market orders\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory _order,\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        pendingOrderIds[_order.trade.trader].push(_id);\\n\\n        reqID_pendingMarketOrder[_id] = _order;\\n        reqID_pendingMarketOrder[_id].block = block.number;\\n\\n        if (_open) {\\n            pendingMarketOpenCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n        } else {\\n            pendingMarketCloseCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                _order.trade.index\\n            ].beingMarketClosed = true;\\n        }\\n    }\\n\\n    function unregisterPendingMarketOrder(\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\\n\\n        for (uint i = 0; i < orderIds.length; i++) {\\n            if (orderIds[i] == _id) {\\n                if (_open) {\\n                    pendingMarketOpenCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                } else {\\n                    pendingMarketCloseCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                        _order.trade.index\\n                    ].beingMarketClosed = false;\\n                }\\n\\n                orderIds[i] = orderIds[orderIds.length - 1];\\n                orderIds.pop();\\n\\n                delete reqID_pendingMarketOrder[_id];\\n                return;\\n            }\\n        }\\n    }\\n\\n    // Manage open interest\\n    function updateOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _leveragedPosWETH,\\n        bool _open,\\n        bool _long\\n    ) private {\\n        uint index = _long ? 0 : 1;\\n        uint[3] storage o = openInterestWETH[_pairIndex];\\n        o[index] = _open\\n            ? o[index] + _leveragedPosWETH\\n            : o[index] - _leveragedPosWETH;\\n    }\\n\\n    // Manage open limit orders\\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading {\\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\\n        o.block = block.number;\\n        openLimitOrders.push(o);\\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] =\\n            openLimitOrders.length -\\n            1;\\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\\n    }\\n\\n    function updateOpenLimitOrder(\\n        OpenLimitOrder calldata _o\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)) {\\n            return;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]\\n        ];\\n        o.positionSize = _o.positionSize;\\n        o.buy = _o.buy;\\n        o.leverage = _o.leverage;\\n        o.tp = _o.tp;\\n        o.sl = _o.sl;\\n        o.minPrice = _o.minPrice;\\n        o.maxPrice = _o.maxPrice;\\n        o.block = block.number;\\n    }\\n\\n    function unregisterOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_trader, _pairIndex, _index)) {\\n            return;\\n        }\\n\\n        // Copy last order to deleted order => update id of this limit order\\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length - 1];\\n        openLimitOrderIds[openLimitOrders[id].trader][\\n            openLimitOrders[id].pairIndex\\n        ][openLimitOrders[id].index] = id;\\n\\n        // Remove\\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders.pop();\\n\\n        openLimitOrdersCount[_trader][_pairIndex]--;\\n    }\\n\\n    // Manage NFT orders\\n    function storePendingNftOrder(\\n        PendingNftOrder memory _nftOrder,\\n        uint _orderId\\n    ) external onlyTrading {\\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\\n    }\\n\\n    function unregisterPendingNftOrder(uint _order) external onlyTrading {\\n        delete reqID_pendingNftOrder[_order];\\n    }\\n\\n    // Manage open trade\\n    function updateSl(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newSl\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.sl = _newSl;\\n        i.slLastUpdated = block.number;\\n    }\\n\\n    function updateTp(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newTp\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.tp = _newTp;\\n        i.tpLastUpdated = block.number;\\n    }\\n\\n    function updateTrade(Trade memory _t) external onlyTrading {\\n        // useful when partial adding/closing\\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.initialPosToken = _t.initialPosToken;\\n        t.positionSizeWETH = _t.positionSizeWETH;\\n        t.openPrice = _t.openPrice;\\n        t.leverage = _t.leverage;\\n    }\\n\\n    // Manage referrals\\n    function storeReferral(\\n        address _trader,\\n        address _referral\\n    ) external onlyTrading {\\n        Trader storage trader = traders[_trader];\\n        trader.referral = _referral != address(0) &&\\n            trader.referral == address(0) &&\\n            _referral != _trader\\n            ? _referral\\n            : trader.referral;\\n    }\\n\\n    function increaseReferralRewards(\\n        address _referral,\\n        uint _amount\\n    ) external onlyTrading {\\n        traders[_referral].referralRewardsTotal += _amount;\\n    }\\n\\n    // Manage rewards\\n    function distributeLpRewards(uint _amount) external onlyTrading {\\n        pool.increaseAccTokensPerLp(_amount);\\n    }\\n\\n    function increaseNftRewards(\\n        uint _nftId,\\n        uint _amount\\n    ) external onlyTrading {\\n        nftLastSuccess[_nftId] = block.number;\\n        nftRewards += _amount;\\n    }\\n\\n    // Unlock next leverage\\n    function setLeverageUnlocked(\\n        address _trader,\\n        uint _newLeverage\\n    ) external onlyTrading {\\n        traders[_trader].leverageUnlocked = _newLeverage;\\n    }\\n\\n    // Manage dev & gov fees\\n    function handleDevGovFees(\\n        uint _pairIndex,\\n        uint _leveragedPositionSize,\\n        bool _WETH,\\n        bool _fullFee\\n    ) external onlyTrading returns (uint fee) {\\n        fee =\\n            (_leveragedPositionSize * priceAggregator.openFeeP(_pairIndex)) /\\n            PRECISION /\\n            100;\\n        if (!_fullFee) {\\n            fee /= 2;\\n        }\\n\\n        if (_WETH) {\\n            govFeesWETH += fee;\\n            devFeesWETH += fee;\\n        } else {\\n            govFeesToken += fee;\\n            devFeesToken += fee;\\n        }\\n\\n        fee *= 2;\\n    }\\n\\n    function claimFees() external onlyGov {\\n        token.mint(dev, devFeesToken);\\n        token.mint(gov, govFeesToken);\\n\\n        tokensMinted += devFeesToken + govFeesToken;\\n\\n        WETH.transfer(gov, govFeesWETH);\\n        WETH.transfer(dev, devFeesWETH);\\n\\n        devFeesToken = 0;\\n        govFeesToken = 0;\\n        devFeesWETH = 0;\\n        govFeesWETH = 0;\\n    }\\n\\n    // Manage tokens\\n    function handleTokens(\\n        address _a,\\n        uint _amount,\\n        bool _mint\\n    ) external onlyTrading {\\n        if (_mint) {\\n            token.mint(_a, _amount);\\n            tokensMinted += _amount;\\n        } else {\\n            token.burn(_a, _amount);\\n            tokensBurned += _amount;\\n        }\\n    }\\n\\n    function transferWETH(\\n        address _from,\\n        address _to,\\n        uint _amount\\n    ) external onlyTrading {\\n        if (_from == address(this)) {\\n            WETH.transfer(_to, _amount);\\n        } else {\\n            WETH.transferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    function mintWETH(address _to, uint _amount) external onlyTrading {\\n        WETH.mint(_to, _amount);\\n    }\\n\\n    function transferLinkToAggregator(\\n        address _from,\\n        uint _pairIndex,\\n        uint _leveragedPosWETH\\n    ) external onlyTrading {\\n        linkErc677.transferFrom(\\n            _from,\\n            address(priceAggregator),\\n            priceAggregator.linkFee(_pairIndex, _leveragedPosWETH)\\n        );\\n    }\\n\\n    // View utils functions\\n    function firstEmptyTradeIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (openTrades[trader][pairIndex][i].leverage == 0) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function firstEmptyOpenLimitIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (!hasOpenLimitOrder(trader, pairIndex, i)) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasOpenLimitOrder(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) public view returns (bool) {\\n        if (openLimitOrders.length == 0) {\\n            return false;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[trader][pairIndex][index]\\n        ];\\n        return\\n            o.trader == trader && o.pairIndex == pairIndex && o.index == index;\\n    }\\n\\n    // Additional getters\\n    function getReferral(address _trader) external view returns (address) {\\n        return traders[_trader].referral;\\n    }\\n\\n    function getLeverageUnlocked(address _trader) external view returns (uint) {\\n        return traders[_trader].leverageUnlocked;\\n    }\\n\\n    function pairTradersArray(\\n        uint _pairIndex\\n    ) external view returns (address[] memory) {\\n        return pairTraders[_pairIndex];\\n    }\\n\\n    function getPendingOrderIds(\\n        address _trader\\n    ) external view returns (uint[] memory) {\\n        return pendingOrderIds[_trader];\\n    }\\n\\n    function pendingOrderIdsCount(\\n        address _trader\\n    ) external view returns (uint) {\\n        return pendingOrderIds[_trader].length;\\n    }\\n\\n    function getOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external view returns (OpenLimitOrder memory) {\\n        require(hasOpenLimitOrder(_trader, _pairIndex, _index));\\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]];\\n    }\\n\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (OpenLimitOrder[] memory)\\n    {\\n        return openLimitOrders;\\n    }\\n\\n    function getSupportedTokens() external view returns (address[] memory) {\\n        return supportedTokens;\\n    }\\n\\n    function getSpreadReductionsArray() external view returns (uint[5] memory) {\\n        return spreadReductionsP;\\n    }\\n\\n    function getGov() external view returns (address _gov) {\\n        return gov;\\n    }\\n\\n    function setOracle(address _oracle) external {\\n        oracle = IOracle(_oracle);\\n    }\\n\\n    function getOpenTrades(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (Trade memory) {\\n        return openTrades[trader][pairIndex][index];\\n    }\\n\\n    function getOpenTradesInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (TradeInfo memory) {\\n        return openTradesInfo[trader][pairIndex][index];\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) external view returns (PendingMarketOrder memory) {\\n        return reqID_pendingMarketOrder[orderId];\\n    }\\n\\n    function getPendingNftOrder(\\n        uint orderId\\n    ) external view returns (PendingNftOrder memory) {\\n        return reqID_pendingNftOrder[orderId];\\n    }\\n}\\n\",\"keccak256\":\"0x7aa5813ed08077b048480b30432a5c3c094766b9aacd296a8780cbce3f9fbea5\",\"license\":\"MIT\"},\"contracts/TradingCallbacks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/StakingInterface.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_4.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract TradingCallbacks is Initializable {\\n    // Contracts (constant)\\n    StorageInterface public storageT;\\n    NftRewardsInterfaceV6_3_1 public nftRewards;\\n    PairInfosInterface public pairInfos;\\n    ReferralsInterface public referrals;\\n    StakingInterface public staking;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10; // 10 decimals\\n\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n    uint public vaultFeeP = 50;\\n    uint public liquidatorFeeP = 50;\\n    uint public liquidationFeeP = 5;\\n    uint public parLiquidationFeeP = 3;\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\\n        public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    BorrowingFeesInterface public borrowingFees;\\n\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\\n        public tradeData; // More storage for trades / limit orders\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posWETH;\\n        uint levPosWETH;\\n        uint tokenPriceWETH;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint WETHSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        uint spreadReductionP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    struct feeConfig {\\n        uint _vaultFeeP;\\n        uint _liquidatorFeeP;\\n        uint _liquidationFeeP;\\n        uint _parLiquidationFeeP;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterface.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit, // before fees\\n        uint WETHSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterface.Trade t,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit,\\n        uint WETHSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(\\n        uint WETHVaultFeeP,\\n        uint lpFeeP,\\n        uint sssFeeP\\n    );\\n    event CanExecuteTimeoutUpdated(uint newValue);\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n\\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\\n    event SssFeeCharged(address indexed trader, uint valueWETH);\\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\\n    event BorrowingFeeCharged(\\n        address indexed trader,\\n        uint tradeValueWETH,\\n        uint feeValueWETH\\n    );\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        StakingInterface _staking,\\n        BorrowingFeesInterface _borrowingFees,\\n        address vaultToApprove,\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout,\\n        feeConfig memory data\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n        borrowingFees = _borrowingFees;\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n        vaultFeeP = data._vaultFeeP;\\n        liquidatorFeeP = data._liquidatorFeeP;\\n        liquidationFeeP = data._liquidationFeeP;\\n        parLiquidationFeeP = data._parLiquidationFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n        TokenInterface t = storageT.WETH();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    // function initializeV2(\\n    //     BorrowingFeesInterface _borrowingFees\\n    // ) external reinitializer(2) {\\n    //     if (address(_borrowingFees) == address(0)) {\\n    //         revert WrongParams();\\n    //     }\\n    //     borrowingFees = _borrowingFees;\\n    // }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isTrading() private view {\\n        if (msg.sender != address(storageT.trading())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(\\n        uint[] calldata indices,\\n        uint[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP\\n    ) external onlyGov {\\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\\n            revert WrongParams();\\n        }\\n        canExecuteTimeout = _canExecuteTimeout;\\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n        //     a.orderId\\n        // );\\n\\n        // if (o.block == 0) {\\n        //     return;\\n        // }\\n\\n        StorageInterface.Trade memory t = o.trade;\\n\\n        (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        ) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    a.price,\\n                    o.wantedPrice,\\n                    a.price,\\n                    a.spreadP,\\n                    o.spreadReductionP,\\n                    t.buy,\\n                    t.pairIndex,\\n                    t.positionSizeWETH,\\n                    t.leverage,\\n                    o.slippageP,\\n                    t.tp,\\n                    t.sl\\n                )\\n            );\\n        t.openPrice = priceAfterImpact;\\n        if (cancelReason == CancelReason.NONE) {\\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\\n                t,\\n                1500,\\n                0\\n            );\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\\n                0,\\n                0\\n            );\\n        } else {\\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\\n            //     t.pairIndex,\\n            //     t.positionSizeWETH * t.leverage,\\n            //     true,\\n            //     true\\n            // );\\n            // transferFromStorageToAddress(\\n            //     t.trader,\\n            //     t.positionSizeWETH - devGovFeesWETH\\n            // );\\n\\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\\n            emit MarketOpenCanceled(\\n                a.orderId,\\n                t.trader,\\n                t.pairIndex,\\n                cancelReason\\n            );\\n\\n            revert(\\\"Market open order canceled\\\");\\n        }\\n\\n        // storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n        //     a.orderId\\n        // );\\n\\n        // if (o.block == 0) {\\n        //     return;\\n        // }\\n\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trade.trader,\\n            o.trade.pairIndex,\\n            o.trade.index\\n        );\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n            AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n                address(storageT.priceAggregator())\\n            );\\n\\n            Values memory v;\\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    a.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.posWETH = v.levPosWETH / t.leverage;\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    // (v.levPosWETH *\\n                    //     aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\\n                    //     100 /\\n                    //     PRECISION,\\n                    // (v.levPosWETH *\\n                    //     aggregator.pairsStorage().pairNftLimitOrderFeeP(\\n                    //         t.pairIndex\\n                    //     )) /\\n                    //     100 /\\n                    //     PRECISION\\n                    0,\\n                    0\\n                );\\n\\n                emit MarketExecuted(\\n                    a.orderId,\\n                    t,\\n                    false,\\n                    a.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader\\n                );\\n            } else {\\n                // Dev / gov rewards to pay for oracle cost\\n                // Charge in WETH if collateral in storage or token if collateral in vault\\n                // v.reward1 = t.positionSizeWETH > 0\\n                //     ? storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         v.levPosWETH,\\n                //         true,\\n                //         true\\n                //     )\\n                //     : (storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\\n                //         false,\\n                //         true\\n                //     ) * v.tokenPriceWETH) / PRECISION;\\n\\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\\n                // storageT.updateTrade(t);\\n\\n                emit DevGovFeeCharged(t.trader, v.reward1);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(\\n                a.orderId,\\n                o.trade.trader,\\n                o.trade.pairIndex,\\n                o.trade.index,\\n                cancelReason\\n            );\\n            revert(\\\"Market close order canceled\\\");\\n        }\\n\\n        // storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    // function executeNftOpenOrderCallback(\\n    //     AggregatorAnswer memory a\\n    // ) external onlyPriceAggregator notDone {\\n    //     StorageInterface.PendingNftOrder memory n = storageT\\n    //         .reqID_pendingNftOrder(a.orderId);\\n\\n    //     CancelReason cancelReason = !storageT.hasOpenLimitOrder(\\n    //         n.trader,\\n    //         n.pairIndex,\\n    //         n.index\\n    //     )\\n    //         ? CancelReason.NO_TRADE\\n    //         : CancelReason.NONE;\\n\\n    //     if (cancelReason == CancelReason.NONE) {\\n    //         StorageInterface.OpenLimitOrder memory o = storageT\\n    //             .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n    //         NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\\n    //             .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n    //         cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\\n    //             ? CancelReason.NONE\\n    //             : CancelReason.NOT_HIT;\\n\\n    //         // Note: o.minPrice always equals o.maxPrice so can use either\\n    //         (\\n    //             uint priceImpactP,\\n    //             uint priceAfterImpact,\\n    //             CancelReason _cancelReason\\n    //         ) = _openTradePrep(\\n    //                 OpenTradePrepInput(\\n    //                     cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n    //                     o.maxPrice,\\n    //                     a.open,\\n    //                     a.spreadP,\\n    //                     o.spreadReductionP,\\n    //                     o.buy,\\n    //                     o.pairIndex,\\n    //                     o.positionSize,\\n    //                     o.leverage,\\n    //                     tradeData[o.trader][o.pairIndex][o.index][\\n    //                         TradeType.LIMIT\\n    //                     ].maxSlippageP,\\n    //                     o.tp,\\n    //                     o.sl\\n    //                 )\\n    //             );\\n\\n    //         bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n    //         cancelReason = !exactExecution &&\\n    //             (\\n    //                 o.maxPrice == 0 ||\\n    //                     t ==\\n    //                     NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\\n    //                     ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n    //                     : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n    //             )\\n    //             ? CancelReason.NOT_HIT\\n    //             : _cancelReason;\\n\\n    //         if (cancelReason == CancelReason.NONE) {\\n    //             (\\n    //                 StorageInterface.Trade memory finalTrade,\\n    //                 uint tokenPriceWETH\\n    //             ) = registerTrade(\\n    //                     StorageInterface.Trade(\\n    //                         o.trader,\\n    //                         o.pairIndex,\\n    //                         0,\\n    //                         0,\\n    //                         o.positionSize,\\n    //                         priceAfterImpact,\\n    //                         o.buy,\\n    //                         o.leverage,\\n    //                         o.tp,\\n    //                         o.sl\\n    //                     ),\\n    //                     n.nftId,\\n    //                     n.index\\n    //                 );\\n\\n    //             storageT.unregisterOpenLimitOrder(\\n    //                 o.trader,\\n    //                 o.pairIndex,\\n    //                 o.index\\n    //             );\\n\\n    //             emit LimitExecuted(\\n    //                 a.orderId,\\n    //                 n.index,\\n    //                 finalTrade,\\n    //                 n.nftHolder,\\n    //                 StorageInterface.LimitOrder.OPEN,\\n    //                 finalTrade.openPrice,\\n    //                 priceImpactP,\\n    //                 (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\\n    //                 0,\\n    //                 0,\\n    //                 exactExecution\\n    //             );\\n    //         }\\n    //     }\\n\\n    //     if (cancelReason != CancelReason.NONE) {\\n    //         emit NftOrderCanceled(\\n    //             a.orderId,\\n    //             n.nftHolder,\\n    //             StorageInterface.LimitOrder.OPEN,\\n    //             cancelReason\\n    //         );\\n    //     }\\n\\n    //     nftRewards.unregisterTrigger(\\n    //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n    //             n.trader,\\n    //             n.pairIndex,\\n    //             n.index,\\n    //             n.orderType\\n    //         )\\n    //     );\\n\\n    //     storageT.unregisterPendingNftOrder(a.orderId);\\n    // }\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingNftOrder memory o = storageT\\n        //     .reqID_pendingNftOrder(a.orderId);\\n\\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n        //         .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trader,\\n            o.pairIndex,\\n            o.index\\n        );\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n\\n        CancelReason cancelReason = a.price == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosWETH = t.positionSizeWETH * t.leverage;\\n            v.posWETH = v.levPosWETH / t.leverage;\\n\\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            if (o.orderType == StorageInterface.LimitOrder.PAR_LIQ) {\\n                v.liqPrice = borrowingFees.getTradePartialLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\\n                ? t.tp\\n                : (\\n                    o.orderType == StorageInterface.LimitOrder.SL\\n                        ? t.sl\\n                        : v.liqPrice\\n                );\\n\\n            v.exactExecution =\\n                // v.price > 0 &&\\n                // a.low <= v.price &&\\n                // a.high >= v.price;\\n                v.price == a.price;\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (v.posWETH * liquidationFeeP) / uint256(100)\\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\\n                    ? (v.posWETH * parLiquidationFeeP) / uint256(100)\\n                    : (v.levPosWETH *\\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION;\\n            } else {\\n                // revert(\\\"only exact execution allowed\\\");\\n                v.price = a.price;\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (\\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\\n                            ? (v.posWETH * liquidationFeeP) / uint256(100)\\n                            : 0\\n                    )\\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\\n                    ? (\\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\\n                            ? (v.posWETH * parLiquidationFeeP) / uint256(100)\\n                            : 0\\n                    )\\n                    : (\\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosWETH *\\n                                pairsStored.pairNftLimitOrderFeeP(\\n                                    t.pairIndex\\n                                )) /\\n                                100 /\\n                                PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0\\n                ? CancelReason.NOT_HIT\\n                : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    v.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n                v.WETHSentToTrader = o.orderType !=\\n                    StorageInterface.LimitOrder.PAR_LIQ\\n                    ? unregisterTrade(\\n                        t,\\n                        false,\\n                        v.profitP,\\n                        v.posWETH,\\n                        i.openInterestWETH,\\n                        o.orderType == StorageInterface.LimitOrder.LIQ\\n                            ? v.reward1\\n                            : (v.levPosWETH *\\n                                pairsStored.pairCloseFeeP(t.pairIndex)) /\\n                                100 /\\n                                PRECISION,\\n                        v.reward1\\n                    )\\n                    : updateTrade(\\n                        t,\\n                        v.profitP,\\n                        v.posWETH,\\n                        i.openInterestWETH,\\n                        v.reward1,\\n                        v.reward1,\\n                        a.price\\n                    );\\n\\n                // Convert NFT bot fee from WETH to token value\\n                // v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\\n\\n                // nftRewards.distributeNftReward(\\n                //     triggeredLimitId,\\n                //     v.reward2,\\n                //     v.tokenPriceWETH\\n                // );\\n\\n                // storageT.increaseNftRewards(o.nftId, v.reward2);\\n\\n                emit NftBotFeeCharged(t.trader, v.reward1);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                o.nftHolder,\\n                o.orderType,\\n                cancelReason\\n            );\\n        }\\n\\n        // nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function registerTrade(\\n        StorageInterface.Trade memory trade,\\n        uint nftId,\\n        uint limitIndex\\n    ) private returns (StorageInterface.Trade memory, uint) {\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\\n        //     // and before volumeReferredWETH increases\\n        //     v.posWETH =\\n        //         (v.levPosWETH *\\n        //             (100 *\\n        //                 PRECISION -\\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\\n        //         100 /\\n        //         PRECISION;\\n\\n        //     v.reward1 = referrals.distributePotentialReward(\\n        //         trade.trader,\\n        //         v.levPosWETH,\\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\\n        //         v.tokenPriceWETH\\n        //     );\\n\\n        //     sendToVault(v.reward1, trade.trader);\\n        //     trade.positionSizeWETH -= v.reward1;\\n\\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\\n        // }\\n\\n        // // 2. Charge opening fee - referral fee (if applicable)\\n        // v.reward2 = storageT.handleDevGovFees(\\n        //     trade.pairIndex,\\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\\n        //     true,\\n        //     true\\n        // );\\n\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\\n\\n        // // 3. Charge NFT / SSS fee\\n        // v.reward2 =\\n        //     (v.levPosWETH *\\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\\n        //     100 /\\n        //     PRECISION;\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\\n        // if (nftId < 1500) {\\n        //     sendToVault(v.reward2, trade.trader);\\n\\n        //     // Convert NFT bot fee from WETH to token value\\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\\n\\n        //     nftRewards.distributeNftReward(\\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n        //             trade.trader,\\n        //             trade.pairIndex,\\n        //             limitIndex,\\n        //             StorageInterface.LimitOrder.OPEN\\n        //         ),\\n        //         v.reward3,\\n        //         v.tokenPriceWETH\\n        //     );\\n        //     storageT.increaseNftRewards(nftId, v.reward3);\\n\\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\\n\\n        //     // 3.2 Distribute SSS fee (if applicable)\\n        // } else {\\n        //     distributeStakingReward(trade.trader, v.reward2);\\n        // }\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n\\n        // trade.initialPosToken =\\n        //     (trade.positionSizeWETH * PRECISION) /\\n        //     v.tokenPriceWETH;\\n\\n        trade.tp = correctTp(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.tp,\\n            trade.buy\\n        );\\n        trade.sl = correctSl(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.sl,\\n            trade.buy\\n        );\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            trade.pairIndex,\\n            trade.positionSizeWETH,\\n            trade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeWETH * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterface.TradeInfo(\\n                0,\\n                v.tokenPriceWETH,\\n                trade.positionSizeWETH * trade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\\n            trade.pairIndex\\n        ][trade.index][TradeType.MARKET];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceWETH);\\n    }\\n\\n    function unregisterTrade(\\n        StorageInterface.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\\n    ) private returns (uint WETHSentToTrader) {\\n        IToken vault = IToken(storageT.vault());\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentWETHPos,\\n            percentProfit,\\n            closingFeeWETH + nftFeeWETH\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestWETH,\\n            false,\\n            trade.buy\\n        );\\n        getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            openInterestWETH / trade.leverage,\\n            trade.buy,\\n            false\\n        );\\n\\n        // 3. Unregister trade from storage\\n\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n        // 4.1 If collateral in storage (opened after update)\\n        if (trade.positionSizeWETH > 0) {\\n            Values memory v;\\n\\n            // 4.1.1 WETH vault reward\\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\\n            // transferFromStorageToAddress(address(this), v.reward2);\\n            // vault.distributeReward(v.reward2);\\n\\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 4.1.2 SSS reward\\n            // v.reward3 = marketOrder\\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\\n            //     : (closingFeeWETH * sssFeeP) / 100;\\n\\n            // distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 4.1.3 Take WETH from vault if winning trade\\n            // or send WETH to vault if losing trade\\n\\n            if (!marketOrder) {\\n                v.reward2 = (nftFeeWETH * vaultFeeP) / 100;\\n                sendToVault(v.reward2, trade.trader);\\n\\n                v.reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\\n                transferFromStorageToAddress(msg.sender, v.reward3);\\n            }\\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\\n            if (WETHSentToTrader > WETHLeftInStorage) {\\n                vault.sendAssets(\\n                    WETHSentToTrader - WETHLeftInStorage,\\n                    trade.trader\\n                );\\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\\n            } else {\\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault (opened before update)\\n        } else {\\n            vault.sendAssets(WETHSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    function updateTrade(\\n        StorageInterface.Trade memory trade,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH, // 1e18 (= SSS reward if market order)\\n        uint currentPice\\n    ) private returns (uint WETHSentToTrader) {\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentWETHPos,\\n            percentProfit,\\n            0\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestWETH,\\n            true,\\n            trade.buy\\n        );\\n        getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            (openInterestWETH / trade.leverage) - WETHSentToTrader,\\n            trade.buy,\\n            false\\n        );\\n\\n        // send fee\\n        uint256 reward2 = (nftFeeWETH * vaultFeeP) / 100;\\n        sendToVault(reward2, trade.trader);\\n\\n        uint256 reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\\n        transferFromStorageToAddress(msg.sender, reward3);\\n\\n        // 3. Unregister trade from storage\\n\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // create new trade\\n        StorageInterface.Trade memory newTrade;\\n\\n        newTrade.trader = trade.trader;\\n        newTrade.leverage = trade.leverage;\\n        newTrade.pairIndex = trade.pairIndex;\\n        newTrade.buy = trade.buy;\\n        newTrade.positionSizeWETH = WETHSentToTrader;\\n        newTrade.openPrice = currentPice;\\n\\n        newTrade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n\\n        newTrade.tp = trade.tp > 0\\n            ? _getUpdateTP(\\n                trade.openPrice,\\n                trade.tp,\\n                currentPice,\\n                trade.buy,\\n                trade.leverage\\n            )\\n            : 0;\\n\\n        newTrade.sl = trade.sl > 0\\n            ? _getUpdateSl(\\n                trade.openPrice,\\n                trade.sl,\\n                currentPice,\\n                trade.buy,\\n                trade.leverage\\n            )\\n            : 0;\\n\\n        // 5. Call other contracts\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n        pairInfos.storeTradeInitialAccFees(\\n            newTrade.trader,\\n            newTrade.pairIndex,\\n            newTrade.index,\\n            newTrade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            newTrade.pairIndex,\\n            newTrade.positionSizeWETH,\\n            newTrade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            newTrade.trader,\\n            newTrade.pairIndex,\\n            newTrade.index,\\n            newTrade.positionSizeWETH * newTrade.leverage,\\n            true,\\n            newTrade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            newTrade,\\n            StorageInterface.TradeInfo(\\n                0,\\n                0,\\n                newTrade.positionSizeWETH * newTrade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[newTrade.trader][\\n            newTrade.pairIndex\\n        ][newTrade.index][TradeType.MARKET]; // no limit order support.\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n    }\\n\\n    // Utils (external)\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata _id,\\n        LastUpdated memory _lastUpdated\\n    ) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _lastUpdated;\\n    }\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata _id,\\n        TradeData memory _tradeData\\n    ) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _tradeData;\\n    }\\n\\n    // Utils (getters)\\n    function _getTradeValue(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\\n            trade,\\n            currentWETHPos,\\n            percentProfit\\n        );\\n\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentWETHPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            BorrowingFeesInterface.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentWETHPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP =\\n            percentProfit -\\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\\n    }\\n\\n    function withinMaxLeverage(\\n        uint pairIndex,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return\\n            pairMaxLev == 0\\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\\n                : leverage <= pairMaxLev;\\n    }\\n\\n    function withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeWETH,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\\n        return\\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\\n                levPositionSizeWETH <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\\n    }\\n\\n    function currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private view returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((\\n                buy\\n                    ? int(currentPrice) - int(openPrice)\\n                    : int(openPrice) - int(currentPrice)\\n            ) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function correctTp(\\n        uint openPrice,\\n        uint leverage,\\n        uint tp,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            tp == 0 ||\\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\\n            int(MAX_GAIN_P) * int(PRECISION)\\n        ) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return\\n                buy\\n                    ? openPrice + tpDiff\\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n        return tp;\\n    }\\n\\n    function correctSl(\\n        uint openPrice,\\n        uint leverage,\\n        uint sl,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            sl > 0 &&\\n            currentPercentProfit(openPrice, sl, buy, leverage) <\\n            int(MAX_SL_P) * int(PRECISION) * -1\\n        ) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        uint spreadReductionP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price *\\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\\n            100 /\\n            PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    )\\n        private\\n        view\\n        returns (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            marketExecutionPrice(\\n                c.executionPrice,\\n                c.spreadP,\\n                c.spreadReductionP,\\n                c.buy\\n            ),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact >= c.tp\\n                                : priceAfterImpact <= c.tp\\n                        ))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact <= c.sl\\n                                : priceAfterImpact >= c.sl\\n                        ))\\n                    ? CancelReason.SL_REACHED\\n                    : !withinExposureLimits(\\n                        c.pairIndex,\\n                        c.buy,\\n                        c.positionSize,\\n                        c.leverage\\n                    )\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage >\\n                        pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\\n        return storageT.getPendingMarketOrder(orderId);\\n    }\\n\\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return\\n            (AggregatorInterfaceV1_4(address(storageT.priceAggregator())))\\n                .pairsStorage();\\n    }\\n\\n    function getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterface.Trade memory t) {\\n        return storageT.getOpenTrades(trader, pairIndex, index);\\n    }\\n\\n    function getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (Storage.TradeInfo memory o) {\\n        return storageT.getOpenTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function distributeStakingReward(address trader, uint amountWETH) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        staking.distributeRewardWETH(amountWETH);\\n        emit SssFeeCharged(trader, amountWETH);\\n    }\\n\\n    function sendToVault(uint amountWETH, address trader) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        IToken(storageT.vault()).receiveAssets(amountWETH, trader);\\n    }\\n\\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\\n        storageT.transferWETH(address(storageT), to, amountWETH);\\n    }\\n\\n    // Public views\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n\\n    function giveApproval() external {\\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\\n    }\\n\\n    function _getUpdateSl(\\n        uint openPrice,\\n        uint oldSl,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) internal pure returns (uint256 newSL) {\\n        int slP = ((\\n            buy ? int(oldSl) - int(openPrice) : int(openPrice) - int(oldSl)\\n        ) *\\n            100 *\\n            int(PRECISION) *\\n            int(leverage)) / int(openPrice);\\n\\n        int slDelta = (((slP * int(currentPrice)) / 100) / int(PRECISION)) /\\n            int(leverage);\\n\\n        newSL = buy\\n            ? currentPrice - uint(slDelta)\\n            : currentPrice + uint(slDelta);\\n    }\\n\\n    function _getUpdateTP(\\n        uint openPrice,\\n        uint oldTp,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) internal pure returns (uint256 newTp) {\\n        int tPP = ((\\n            buy ? int(oldTp) - int(openPrice) : int(openPrice) - int(oldTp)\\n        ) *\\n            100 *\\n            int(PRECISION) *\\n            int(leverage)) / int(openPrice);\\n        int tPDelta = (((tPP * int(currentPrice)) / 100) / int(PRECISION)) /\\n            int(leverage);\\n\\n        newTp = buy\\n            ? currentPrice + uint(tPDelta)\\n            : currentPrice - uint(tPDelta);\\n    }\\n\\n    function getTradePnl(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (int256 pnl) {\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            trader,\\n            pairIndex,\\n            index\\n        );\\n        (uint256 currentPrice, ) = (storageT.oracle()).getPrice(pairIndex);\\n        int256 profitP = currentPercentProfit(\\n            t.openPrice,\\n            currentPrice,\\n            t.buy,\\n            t.leverage\\n        );\\n        (int netProfitP, ) = _getBorrowingFeeAdjustedPercentProfit(\\n            t,\\n            t.positionSizeWETH,\\n            profitP\\n        );\\n        int fundingFee = pairInfos.getTradeFundingFee(\\n            t.trader,\\n            t.pairIndex,\\n            t.index,\\n            t.buy,\\n            t.positionSizeWETH,\\n            t.leverage\\n        );\\n        uint256 tradeValue = pairInfos.getTradeValuePure(\\n            t.positionSizeWETH,\\n            netProfitP,\\n            0,\\n            fundingFee,\\n            0\\n        );\\n\\n        pnl = int(tradeValue) - int(t.positionSizeWETH);\\n    }\\n\\n    function setLiquidatorFeeP(uint256 _feeP) external {\\n        liquidatorFeeP = _feeP;\\n    }\\n\\n    function setVaultFeeP(uint256 _feeP) external {\\n        vaultFeeP = _feeP;\\n    }\\n\\n    function setLiquidationFeeP(uint _feeP) external {\\n        liquidationFeeP = _feeP;\\n    }\\n\\n    function setParLiquidationFeeP(uint _feeP) external {\\n        parLiquidationFeeP = _feeP;\\n    }\\n}\\n\",\"keccak256\":\"0x6c2c70025bf855c37f2d2e5d914313f125c43f599b73dc72180ca7f04c8a2ef7\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x13048ee9355f58d301d80d4e8262cd1ac4de1723544f03fccbbc1eb1e96a6fbf\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd008d26590a5588f3972b3ecf875584a8c6f73dac938dfe02feefeb3c2bd3c60\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x14a668265e52a52637f06d864fef4ec0e4b47feb4d18f37d70fd22898149922a\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc25467e6a4c74c01ef686c6bd9fff63c52f30c03fbaa6cb5e0d7207827ddd336\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xe6903da90872488f13bdde146e3423a09b54f4a3a0838a51871469fd7bef8fa6\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32a4e5c386170b9da2ec3cd5ac53a4c82c64cfe94f41990f635cd18a73eccf73\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf439723f853b013721f9cc98c3e9ace8f63d178512916f35307be17c090b2a12\",\"license\":\"MIT\"},\"contracts/interfaces/PoolInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\",\"keccak256\":\"0xf8dccfa1b7714aea72c882ba90068cbb38351cfbfb5c0a65a03b47a5247548b7\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x0c9f20ecadb018115d8452e7ca8eb8eef633b723ea1d8bed43e063536bdbb254\",\"license\":\"MIT\"},\"contracts/interfaces/StakingInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface StakingInterface {\\n    function distributeRewardWETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x19d8818fba11fc59ffe841457472ce0f84cf783b73946ef23d18d7f5e4642b18\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0x7404086c41bf7d149aec1e867862091338a331ad5f70464885b3783468914e65\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc09affeca51307b54b5f7d9dfe274687a0fa6bbafd9185155c305ff8cafbc0ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052603260085560326009556005600a556003600b5534801561002457600080fd5b5061517e806100346000396000f3fe608060405234801561001057600080fd5b50600436106102315760003560e01c80637bb6c11c11610130578063a2ae5262116100b8578063c68078b91161007c578063c68078b91461056e578063c68365df14610581578063c6a8ab0d1461058a578063d3dc75391461059d578063eda1f582146105b057600080fd5b8063a2ae526214610534578063ae8421e11461053d578063b187bd2614610545578063b3f2f4d614610552578063c4493e371461056557600080fd5b80638b263878116100ff5780638b263878146104555780638c00bd5a1461045d5780638f0622271461047057806390b913f2146104925780639bd24d83146104a557600080fd5b80637bb6c11c1461041e5780637da345d6146104275780637e09ae8a1461043a5780638456cb591461044d57600080fd5b80632e905d6e116101be5780634cf088d9116101825780634cf088d9146103d3578063531cc965146103e65780635ad9f993146103f957806365122c611461040c578063676c51641461041557600080fd5b80632e905d6e1461030d578063311581551461032057806337edb1381461033357806346f93a631461034857806348829122146103c057600080fd5b8063178623a711610205578063178623a7146102b55780631a4200e8146102be57806321c86196146102c7578063257dd852146102da578063281b693c146102ed57600080fd5b8062e0fa89146102365780631346b0ff1461024b57806313b065041461027b57806316fff0741461029c575b600080fd5b6102496102443660046143c7565b6105c3565b005b60025461025e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028e610289366004614457565b610641565b604051908152602001610272565b60005461025e906201000090046001600160a01b031681565b61028e60055481565b61028e600b5481565b6102496102d5366004614521565b610939565b6102496102e83660046145cb565b600b55565b61028e6102fb3660046145cb565b60106020526000908152604090205481565b61024961031b3660046145cb565b600855565b61024961032e366004614684565b6109f4565b61033b610bdd565b6040516102729190614797565b61039b6103563660046147ea565b601160209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b03909116602083015201610272565b6102496103ce366004614832565b610cda565b60045461025e906001600160a01b031681565b600f5461025e906001600160a01b031681565b60015461025e906001600160a01b031681565b61028e600a5481565b61028e600d5481565b61028e60075481565b6102496104353660046145cb565b600a55565b610249610448366004614868565b610ce8565b610249610df0565b610249610e46565b61024961046b3660046145cb565b600955565b600c5461048290610100900460ff1681565b6040519015158152602001610272565b6102496104a0366004614684565b610fa8565b6105046104b33660046147ea565b600e60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff80821691600160201b8104821691600160401b8204811691600160601b90041684565b6040805163ffffffff95861681529385166020850152918416918301919091529091166060820152608001610272565b61028e60095481565b6102496112ad565b600c546104829060ff1681565b6102496105603660046145cb565b61130d565b61028e60085481565b61024961057c36600461491b565b611372565b61028e60065481565b6102496105983660046149ba565b611404565b60035461025e906001600160a01b031681565b6102496105be366004614a87565b611862565b6105cb6122a4565b828181146105ec57604051635863f78960e01b815260040160405180910390fd5b60005b818110156106395761063186868381811061060c5761060c614b2a565b9050602002013585858481811061062557610625614b2a565b9050602002013561234e565b6001016105ef565b505050505050565b600080546040516302a0a1cb60e41b815282916201000090046001600160a01b031690632a0a1cb09061067c90889088908890600401614b40565b61014060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190614b77565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190614c09565b6001600160a01b031663e7572230866040518263ffffffff1660e01b815260040161076591815260200190565b6040805180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190614c26565b50905060006107c28360a00151838560c001518660e0015161239f565b905060006107d58485608001518461242e565b506002548551602087015160408089015160c08a015160808b015160e08c01519351637b62877f60e11b81526001600160a01b0396871660048201526024810195909552604485019290925215156064840152608483015260a482015292935060009291169063f6c50efe9060c401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190614c4a565b600254608087015160405163c22ff7bf60e01b815260048101919091526024810185905260006044820181905260648201849052608482018190529293506001600160a01b039091169063c22ff7bf9060a401602060405180830381865afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190614c4a565b905085608001518161092b9190614c79565b9a9950505050505050505050565b610941612548565b80601160006109536020860186614cb8565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092528120906109986080860160608701614cd5565b60018111156109a9576109a9614cf0565b60018111156109ba576109ba614cf0565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b6109fc61259b565b610a046125ee565b6000816000015190506000806000610aa060405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e001518152602001876060015181526020018661010001518152602001866101200151815250612617565b60a0870182905291945092509050600081600b811115610ac257610ac2614cf0565b03610b41576000610ad7856105dc60006128fc565b50905086600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978260018460a00151888660e001518760800151610b1d9190614d06565b600080604051610b339796959493929190614d99565b60405180910390a250610639565b836020015184600001516001600160a01b031687600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c326984604051610b889190614df2565b60405180910390a460405162461bcd60e51b815260206004820152601a60248201527f4d61726b6574206f70656e206f726465722063616e63656c656400000000000060448201526064015b60405180910390fd5b60606000610be9612dae565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190614c4a565b90506000816001600160401b03811115610c6657610c666144a4565b604051908082528060200260200182016040528015610c8f578160200160208202803683370190505b50905060005b82811015610cd3576000818152601060205260409020548251839083908110610cc057610cc0614b2a565b6020908102919091010152600101610c95565b5092915050565b610ce4828261234e565b5050565b610cf0612548565b80600e6000610d026020860186614cb8565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090610d476080860160608701614cd5565b6001811115610d5857610d58614cf0565b6001811115610d6957610d69614cf0565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b19948216600160201b0267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b610df8612e8c565b600c805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b600060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190614c09565b6001600160a01b031663095ea7b3600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190614c09565b6000196040518363ffffffff1660e01b8152600401610f62929190614e00565b6020604051808303816000875af1158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190614e19565b50565b610fb061259b565b610fb86125ee565b805180516020820151604090920151600092610fd49291612edf565b905060008160e00151600014610ffc57602084015115610ff5576000610fff565b6002610fff565b60095b9050600981600b81111561101557611015614cf0565b146111ed576000611033836000015184602001518560400151612f6c565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad9190614c09565b90506110b76142c2565b8460e0015185608001516110cb9190614d06565b6020820152600084600b8111156110e4576110e4614cf0565b0361119d576111058560a0015188602001518760c001518860e0015161239f565b606082015260e0850151602082015161111e9190614e4c565b8082526060820151604085015161113f928892600192909190600080613021565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099794611190948c9460009491938593919291614d99565b60405180910390a26111e9565b84600001516001600160a01b03167f4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb254084068260e001516040516111e091815260200190565b60405180910390a25b5050505b600081600b81111561120157611201614cf0565b146112a7578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c9161125791908790614e60565b60405180910390a460405162461bcd60e51b815260206004820152601b60248201527f4d61726b657420636c6f7365206f726465722063616e63656c656400000000006044820152606401610bd4565b50505050565b6112b5612e8c565b600c805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd388893610e3c9390049091161515815260200190565b611315612e8c565b600581111561133757604051635863f78960e01b815260040160405180910390fd5b600d8190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b61137a612e8c565b806113858385614e74565b61138f9190614e74565b6064146113af57604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600054610100900460ff16158080156114245750600054600160ff909116105b8061143e5750303b15801561143e575060005460ff166001145b6114a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bd4565b6000805460ff1916600117905580156114c4576000805461ff0019166101001790555b6001600160a01b038d1615806114e157506001600160a01b038c16155b806114f357506001600160a01b038b16155b8061150557506001600160a01b038a16155b8061151757506001600160a01b038916155b8061152957506001600160a01b038716155b8061154957508361153a8688614e74565b6115449190614e74565b606414155b806115545750600583115b1561157257604051635863f78960e01b815260040160405180910390fd5b8c600060026101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600f60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856005819055508460068190555083600781905550816000015160088190555081602001516009819055508160400151600a819055508160600151600b8190555082600d8190555060008060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190614c09565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b39361175493909216916000199101614e00565b6020604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190614e19565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906117c8908b9060001990600401614e00565b6020604051808303816000875af11580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190614e19565b50508015611853576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b61186a61259b565b6118726125ee565b600061188b826040015183606001518460800151612edf565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190614c09565b90506000846020015160001461192d5760e083015115611926576000611930565b6009611930565b60025b9050600081600b81111561194657611946614cf0565b036121d0576000611964846000015185602001518660400151612f6c565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190614c09565b90506119d46142c2565b8560e0015186608001516119e89190614d06565b6020820181905260e08701516119fd91614e4c565b815260028760a001516004811115611a1757611a17614cf0565b03611ae257600f546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a91611a9b9190600401614e8c565b602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190614c4a565b60a08201525b60048760a001516004811115611afa57611afa614cf0565b03611bc557600f546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633269b96360e11b815291909216916364d372c691611b7e9190600401614e8c565b602060405180830381865afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbf9190614c4a565b60a08201525b60008760a001516004811115611bdd57611bdd614cf0565b14611c145760018760a001516004811115611bfa57611bfa614cf0565b14611c09578060a00151611c1b565b856101200151611c1b565b8561010001515b60808201819052602089015114610140820181905215611d485760028760a001516004811115611c4d57611c4d614cf0565b14611d235760048760a001516004811115611c6a57611c6a614cf0565b14611d12576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401611ca991815260200190565b602060405180830381865afa158015611cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cea9190614c4a565b8360200151611cf99190614d06565b611d039190614e4c565b611d0d9190614e4c565b611d3e565b600b548151606491611d0391614d06565b600a548151606491611d3491614d06565b611d3e9190614e4c565b60e0820152611f8a565b6020880151608082015260028760a001516004811115611d6a57611d6a614cf0565b14611f375760048760a001516004811115611d8757611d87614cf0565b14611ef45760008760a001516004811115611da457611da4614cf0565b148015611db657506000866101000151115b8015611de657508560c00151611dd85785610100015188606001511115611de6565b856101000151886060015110155b80611e46575060018760a001516004811115611e0457611e04614cf0565b148015611e1657506000866101200151115b8015611e4657508560c00151611e385785610120015188606001511015611e46565b856101200151886060015111155b611e51576000611f84565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401611e8b91815260200190565b602060405180830381865afa158015611ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecc9190614c4a565b8360200151611edb9190614d06565b611ee59190614e4c565b611eef9190614e4c565b611f84565b8560c00151611f0e578060a0015188606001511015611f1b565b8060a00151886060015111155b611f26576000611f84565b600b548151606491611ee591614d06565b8560c00151611f51578060a0015188606001511015611f5e565b8060a00151886060015111155b611f69576000611f84565b600a548151606491611f7a91614d06565b611f849190614e4c565b60e08201525b60e081015115611f9b576000611f9e565b600b5b9350600084600b811115611fb457611fb4614cf0565b036121cc57611fd58660a0015182608001518860c001518960e0015161239f565b606082015260048760a001516004811115611ff257611ff2614cf0565b036120235761201e868260600151836000015186604001518560e001518660e001518e602001516133fd565b612108565b60608101518151604085015161210892899260009260028d60a00151600481111561205057612050614cf0565b146120f8576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b815260040161208f91815260200190565b602060405180830381865afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190614c4a565b89602001516120df9190614d06565b6120e99190614e4c565b6120f39190614e4c565b6120fe565b8660e001515b8760e00151613021565b60c0820152855160e08201516040519081526001600160a01b03909116907fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c59060200160405180910390a286600001516001600160a01b031688600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408960800151898b60a0015186608001516000886000015189606001518a60c001518b61014001516040516121c399989796959493929190614ef0565b60405180910390a35b5050505b600081600b8111156121e4576121e4614cf0565b14612237578351855160a08601516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc39161222e918690614f4d565b60405180910390a35b600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b03169063201d8bdb90602401600060405180830381600087803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231b9190614c09565b6001600160a01b0316336001600160a01b03161461234c57604051631dd2188d60e31b815260040160405180910390fd5b565b600082815260106020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab67906123939084815260200190565b60405180910390a25050565b6000806123b36402540be400610384614f68565b9050600086116123c4576000612413565b85836402540be400866123e0576123db888a614c79565b6123ea565b6123ea8989614c79565b6123f5906064614f68565b6123ff9190614f68565b6124099190614f68565b6124139190614fed565b91508082136124225781612424565b805b9695505050505050565b600f546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c9190614c4a565b9050836402540be400612520836064614d06565b61252a9190614d06565b6125349190614e4c565b61253e9084614c79565b9150935093915050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b600c54610100900460ff161561234c57604051631dd2188d60e31b815260040160405180910390fd5b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f329361264f939190613ada565b8660c001518760a001518861010001518960e0015161266e9190614d06565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190614c26565b610120860151919450925060009061270957606485602001516127049190614e4c565b61273a565b6402540be400606486610120015187602001516127269190614d06565b6127309190614e4c565b61273a9190614e4c565b600c5490915060ff166128f0576040850151156128e9578460a001516127715780856020015161276a919061501b565b8310612784565b8085602001516127819190614e74565b83115b6128e25760008561014001511180156127b957508460a001516127af578461014001518311156127b9565b8461014001518310155b6128db5760008561016001511180156127ee57508460a001516127e4578461016001518310156127ee565b8461016001518311155b6128d45761280f8560c001518660a001518760e00151886101000151613b4a565b156128cd57600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b9190614c4a565b61010086015161289b9086614d06565b116128c6576128b38560c00151866101000151613cf3565b156128bf5760006128f3565b60086128f3565b60076128f3565b60066128f3565b60056128f3565b60046128f3565b60036128f3565b60026128f3565b60015b93959294505050565b61290461431e565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297e9190614c09565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e49190614c09565b90506129ee6142c2565b8760e001518860800151612a029190614d06565b6020828101919091526000548951918a015160405163292c161760e01b8152620100009092046001600160a01b03169263292c161792612a459290600401614e00565b602060405180830381865afa158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a869190614c4a565b886040018181525050612aac8860a001518960e001518a61010001518b60c00151613d95565b88610100018181525050612ad38860a001518960e001518a61012001518b60c00151613e28565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0390951694630e6bc39a94612b1d949093909291600401615032565b600060405180830381600087803b158015612b3757600080fd5b505af1158015612b4b573d6000803e3d6000fd5b505050506020880151608089015160c08a01516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038316906320f0fc5e90608401600060405180830381600087803b158015612bb757600080fd5b505af1158015612bcb573d6000803e3d6000fd5b5050600f548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb9550929391929091612c0a9190614d06565b60018e60c001516040518763ffffffff1660e01b8152600401612c329695949392919061505a565b600060405180830381600087803b158015612c4c57600080fd5b505af1158015612c60573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d60800151612cb99190614d06565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401612cf0929190615091565b600060405180830381600087803b158015612d0a57600080fd5b505af1158015612d1e573d6000803e3d6000fd5b505089516001600160a01b03166000908152600e60209081526040808320828e015184528252808320818e015184528252808320838052909152812092509050612d66613ea2565b825467ffffffffffffffff191663ffffffff91909116908117600160201b82021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190614c09565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190614c09565b905090565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b612ee761431e565b6000546040516302a0a1cb60e41b8152620100009091046001600160a01b031690632a0a1cb090612f2090879087908790600401614b40565b61014060405180830381865afa158015612f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f629190614b77565b90505b9392505050565b612fa76040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051637728fb1b60e11b8152620100009091046001600160a01b03169063ee51f63690612fe090879087908790600401614b40565b60c060405180830381865afa158015612ffd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6291906150e8565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309b9190614c09565b90506130b28987896130ad8789614e74565b613f23565b50600f548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb946130fe94939290918c9160009160040161505a565b600060405180830381600087803b15801561311857600080fd5b505af115801561312c573d6000803e3d6000fd5b50505050613138612dae565b6001600160a01b03166320f0fc5e8a602001518b60e001518861315b9190614e4c565b60c08d01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b1580156131af57600080fd5b505af11580156131c3573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b9945061320693600401614b40565b600060405180830381600087803b15801561322057600080fd5b505af1158015613234573d6000803e3d6000fd5b5050505060808901511561338b5761324a6142c2565b886132aa5760646008548561325f9190614d06565b6132699190614e4c565b61010082018190528a5161327d9190614046565b60646009548561328d9190614d06565b6132979190614e4c565b61012082018190526132aa903390614128565b6000816101000151826101200151896132c3919061501b565b6132cd919061501b565b905080841115613364576001600160a01b03831663e66a6e3b6132f0838761501b565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561333957600080fd5b505af115801561334d573d6000803e3d6000fd5b5050505061335f8b6000015182614128565b613384565b613378613371858361501b565b8c51614046565b8a516133849085614128565b50506133f1565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b1580156133d857600080fd5b505af11580156133ec573d6000803e3d6000fd5b505050505b50979650505050505050565b600061340c8887896000613f23565b50600f54895160208b01516040808d015160c08e0151915163ce67edfb60e01b81529596506001600160a01b039094169463ce67edfb9461345894939290918c9160019160040161505a565b600060405180830381600087803b15801561347257600080fd5b505af1158015613486573d6000803e3d6000fd5b50505050613492612dae565b6001600160a01b03166320f0fc5e8960200151838b60e00151896134b69190614e4c565b6134c0919061501b565b60c08c01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b15801561351457600080fd5b505af1158015613528573d6000803e3d6000fd5b50505050600060646008548561353e9190614d06565b6135489190614e4c565b9050613558818a60000151614046565b600060646009548661356a9190614d06565b6135749190614e4c565b90506135803382614128565b6000548a5160208c01516040808e015190516390d112b960e01b8152620100009094046001600160a01b0316936390d112b9936135c39390929091600401614b40565b600060405180830381600087803b1580156135dd57600080fd5b505af11580156135f1573d6000803e3d6000fd5b505050506135fd61431e565b8a516001600160a01b03908116825260e0808d0151908301526020808d0180519184019190915260c0808e01511515908401526080830186905260a083018790526000548d51915160405163292c161760e01b8152620100009092049093169263292c16179261367292909190600401614e00565b602060405180830381865afa15801561368f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b39190614c4a565b60408201526101008b01516136c95760006136e7565b6136e78b60a001518c6101000151878e60c001518f60e0015161416d565b6101008201526101208b01516136fe57600061371c565b61371c8b60a001518c6101200151878e60c001518f60e00151614220565b8161012001818152505060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561377a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379e9190614c09565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138049190614c09565b6002548451602086015160408088015160c08901519151630735e1cd60e11b81529596506001600160a01b0390941694630e6bc39a9461384a9493929091600401615032565b600060405180830381600087803b15801561386457600080fd5b505af1158015613878573d6000803e3d6000fd5b505050506020830151608084015160c08501516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038216906320f0fc5e90608401600060405180830381600087803b1580156138e457600080fd5b505af11580156138f8573d6000803e3d6000fd5b5050600f5485516020870151604088015160e089015160808a01516001600160a01b03909516965063ce67edfb95509293919290916139379190614d06565b60018960c001516040518763ffffffff1660e01b815260040161395f9695949392919061505a565b600060405180830381600087803b15801561397957600080fd5b505af115801561398d573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31846040518060c0016040528060008152602001600081526020018760e0015188608001516139e39190614d06565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401613a1a929190615091565b600060405180830381600087803b158015613a3457600080fd5b505af1158015613a48573d6000803e3d6000fd5b505084516001600160a01b03166000908152600e6020908152604080832082890151845282528083208189015184528252808320838052909152812092509050613a90613ea2565b825467ffffffffffffffff191663ffffffff91909116908117600160201b82021763ffffffff60601b1916600160601b919091021790915550949c9b505050505050505050505050565b6000806402540be400606480613af08789614d06565b613afa9190614e4c565b613b04908861501b565b613b0e9089614d06565b613b189190614e4c565b613b229190614e4c565b905082613b3857613b33818761501b565b612424565b6124248187614e74565b949350505050565b600080613b578385614d06565b600f54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa158015613ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc59190614c4a565b613bd3906305f5e100614d06565b60005482906201000090046001600160a01b03166377a9fdcf8989613bf9576001613bfc565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015613c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c649190614c4a565b613c6e9190614e74565b111580156124245750600f5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124249190614e19565b6000828152601060205260408120548015613d115780831115613d8b565b613d19612dae565b6001600160a01b031663281b693c856040518263ffffffff1660e01b8152600401613d4691815260200190565b602060405180830381865afa158015613d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d879190614c4a565b8311155b9150505b92915050565b6000821580613dbe5750613db06402540be400610384614f68565b613dbc8685858861239f565b145b15613e1f576000606485613dd461038489614d06565b613dde9190614e4c565b613de89190614e4c565b905082613e0d5785811115613dfe576000613e17565b613e08818761501b565b613e17565b613e178187614e74565b915050613b42565b50909392505050565b60008083118015613e5e5750613e446402540be400604b614f68565b613e5090600019614f68565b613e5c8685858861239f565b125b15613e1f576000606485613e73604b89614d06565b613e7d9190614e4c565b613e879190614e4c565b905082613e9857613e088187614e74565b613e17818761501b565b600061a4b1461480613eb6575062066eed46145b15613f1e5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190614c4a565b504390565b6000806000613f3387878761242e565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015613fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff29190614c4a565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b6140503083614128565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c79190614c09565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b906044015b600060405180830381600087803b15801561411457600080fd5b505af1158015610639573d6000803e3d6000fd5b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064016140fa565b60008086836402540be4008661418c57614187898b614c79565b614196565b6141968a8a614c79565b6141a1906064614f68565b6141ab9190614f68565b6141b59190614f68565b6141bf9190614fed565b90506000836402540be40060646141d68986614f68565b6141e09190614fed565b6141ea9190614fed565b6141f49190614fed565b90508461420a57614205818761501b565b614214565b6142148187614e74565b98975050505050505050565b60008086836402540be4008661423f5761423a898b614c79565b614249565b6142498a8a614c79565b614254906064614f68565b61425e9190614f68565b6142689190614f68565b6142729190614fed565b90506000836402540be40060646142898986614f68565b6142939190614fed565b61429d9190614fed565b6142a79190614fed565b9050846142b8576142058187614e74565b614214818761501b565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b60008083601f84011261438e57600080fd5b5081356001600160401b038111156143a557600080fd5b6020830191508360208260051b85010111156143c057600080fd5b9250929050565b600080600080604085870312156143dd57600080fd5b84356001600160401b03808211156143f457600080fd5b6144008883890161437c565b9096509450602087013591508082111561441957600080fd5b506144268782880161437c565b95989497509550505050565b6001600160a01b0381168114610fa557600080fd5b803561445281614432565b919050565b60008060006060848603121561446c57600080fd5b833561447781614432565b95602085013595506040909401359392505050565b60006080828403121561449e57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156144ea57634e487b7160e01b600052604160045260246000fd5b60405290565b60405161014081016001600160401b03811182821017156144ea57634e487b7160e01b600052604160045260246000fd5b60008082840360c081121561453557600080fd5b61453f858561448c565b92506040607f198201121561455357600080fd5b50604051604081018181106001600160401b038211171561458457634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff8116811461459f57600080fd5b815260a08401356001600160d81b03811681146145bb57600080fd5b6020820152919491935090915050565b6000602082840312156145dd57600080fd5b5035919050565b600060c082840312156145f657600080fd5b60405160c081018181106001600160401b038211171561462657634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b8015158114610fa557600080fd5b80356144528161466b565b6000808284036102a081121561469957600080fd5b6146a385856145e4565b925060bf19016101e0808212156146b957600080fd5b6146c16144ba565b610140808412156146d157600080fd5b6146d96144f0565b93506146e760c08801614447565b845260e0870135602085015261010080880135604086015261012080890135606087015282890135608087015261016089013560a087015261472c6101808a01614679565b60c08701526101a089013560e08701526101c08901359186019190915292870135928401929092529182525061020084013560208201526102208401356040820152610240840135606082015261026084013560808201526102809093013560a08401525092909150565b6020808252825182820181905260009190848201906040850190845b818110156147cf578351835292840192918401916001016147b3565b50909695505050505050565b80356002811061445257600080fd5b6000806000806080858703121561480057600080fd5b843561480b81614432565b93506020850135925060408501359150614827606086016147db565b905092959194509250565b6000806040838503121561484557600080fd5b50508035926020909101359150565b803563ffffffff8116811461445257600080fd5b60008082840361010081121561487d57600080fd5b614887858561448c565b92506080607f198201121561489b57600080fd5b50604051608081018181106001600160401b03821117156148cc57634e487b7160e01b600052604160045260246000fd5b6040526148db60808501614854565b81526148e960a08501614854565b60208201526148fa60c08501614854565b604082015261490b60e08501614854565b6060820152809150509250929050565b60008060006060848603121561493057600080fd5b505081359360208301359350604090920135919050565b60006080828403121561495957600080fd5b604051608081018181106001600160401b038211171561498957634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000806000806000806000806000806000806101e08d8f0312156149dd57600080fd5b8c356149e881614432565b9b5060208d01356149f881614432565b9a5060408d0135614a0881614432565b995060608d0135614a1881614432565b985060808d0135614a2881614432565b975060a08d0135614a3881614432565b9650614a4660c08e01614447565b955060e08d013594506101008d013593506101208d013592506101408d01359150614a758e6101608f01614947565b90509295989b509295989b509295989b565b600080828403610180811215614a9c57600080fd5b614aa685856145e4565b925060c060bf1982011215614aba57600080fd5b50614ac36144ba565b60c0840135614ad181614432565b815260e08401356020820152610100840135614aec81614432565b60408201526101208401356060820152610140840135608082015261016084013560058110614b1a57600080fd5b60a0820152919491935090915050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b805161445281614432565b80516144528161466b565b60006101408284031215614b8a57600080fd5b614b926144f0565b614b9b83614b61565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152614bdb60c08401614b6c565b60c082015260e083810151908201526101008084015190820152610120928301519281019290925250919050565b600060208284031215614c1b57600080fd5b8151612f6581614432565b60008060408385031215614c3957600080fd5b505080516020909101519092909150565b600060208284031215614c5c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614c9757614c97614c63565b6001600160ff1b0384018313811615614cb257614cb2614c63565b50500390565b600060208284031215614cca57600080fd5b8135612f6581614432565b600060208284031215614ce757600080fd5b612f65826147db565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615614d2057614d20614c63565b500290565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151614d7760c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b6102008101614da8828a614d25565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b600c8110614dee57614dee614cf0565b9052565b60208101613d8f8284614dde565b6001600160a01b03929092168252602082015260400190565b600060208284031215614e2b57600080fd5b8151612f658161466b565b634e487b7160e01b600052601260045260246000fd5b600082614e5b57614e5b614e36565b500490565b82815260408101612f656020830184614dde565b60008219821115614e8757614e87614c63565b500190565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b60058110614dee57614dee614cf0565b8981526102408101614f05602083018b614d25565b614f1361016083018a614ee0565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b60408101614f5b8285614ee0565b612f656020830184614dde565b60006001600160ff1b0381841382841380821686840486111615614f8e57614f8e614c63565b600160ff1b6000871282811687830589121615614fad57614fad614c63565b60008712925087820587128484161615614fc957614fc9614c63565b87850587128184161615614fdf57614fdf614c63565b505050929093029392505050565b600082614ffc57614ffc614e36565b600160ff1b82146000198414161561501657615016614c63565b500590565b60008282101561502d5761502d614c63565b500390565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b61020081016150a08285614d25565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e08301529392505050565b600060c082840312156150fa57600080fd5b6151026144ba565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015161513c8161466b565b60a0820152939250505056fea26469706673582212203c8d684571ddcbc8dcb18ae20b1895db33f0019e5b268140f75df5263f1cecf464736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102315760003560e01c80637bb6c11c11610130578063a2ae5262116100b8578063c68078b91161007c578063c68078b91461056e578063c68365df14610581578063c6a8ab0d1461058a578063d3dc75391461059d578063eda1f582146105b057600080fd5b8063a2ae526214610534578063ae8421e11461053d578063b187bd2614610545578063b3f2f4d614610552578063c4493e371461056557600080fd5b80638b263878116100ff5780638b263878146104555780638c00bd5a1461045d5780638f0622271461047057806390b913f2146104925780639bd24d83146104a557600080fd5b80637bb6c11c1461041e5780637da345d6146104275780637e09ae8a1461043a5780638456cb591461044d57600080fd5b80632e905d6e116101be5780634cf088d9116101825780634cf088d9146103d3578063531cc965146103e65780635ad9f993146103f957806365122c611461040c578063676c51641461041557600080fd5b80632e905d6e1461030d578063311581551461032057806337edb1381461033357806346f93a631461034857806348829122146103c057600080fd5b8063178623a711610205578063178623a7146102b55780631a4200e8146102be57806321c86196146102c7578063257dd852146102da578063281b693c146102ed57600080fd5b8062e0fa89146102365780631346b0ff1461024b57806313b065041461027b57806316fff0741461029c575b600080fd5b6102496102443660046143c7565b6105c3565b005b60025461025e906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61028e610289366004614457565b610641565b604051908152602001610272565b60005461025e906201000090046001600160a01b031681565b61028e60055481565b61028e600b5481565b6102496102d5366004614521565b610939565b6102496102e83660046145cb565b600b55565b61028e6102fb3660046145cb565b60106020526000908152604090205481565b61024961031b3660046145cb565b600855565b61024961032e366004614684565b6109f4565b61033b610bdd565b6040516102729190614797565b61039b6103563660046147ea565b601160209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b03909116602083015201610272565b6102496103ce366004614832565b610cda565b60045461025e906001600160a01b031681565b600f5461025e906001600160a01b031681565b60015461025e906001600160a01b031681565b61028e600a5481565b61028e600d5481565b61028e60075481565b6102496104353660046145cb565b600a55565b610249610448366004614868565b610ce8565b610249610df0565b610249610e46565b61024961046b3660046145cb565b600955565b600c5461048290610100900460ff1681565b6040519015158152602001610272565b6102496104a0366004614684565b610fa8565b6105046104b33660046147ea565b600e60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff80821691600160201b8104821691600160401b8204811691600160601b90041684565b6040805163ffffffff95861681529385166020850152918416918301919091529091166060820152608001610272565b61028e60095481565b6102496112ad565b600c546104829060ff1681565b6102496105603660046145cb565b61130d565b61028e60085481565b61024961057c36600461491b565b611372565b61028e60065481565b6102496105983660046149ba565b611404565b60035461025e906001600160a01b031681565b6102496105be366004614a87565b611862565b6105cb6122a4565b828181146105ec57604051635863f78960e01b815260040160405180910390fd5b60005b818110156106395761063186868381811061060c5761060c614b2a565b9050602002013585858481811061062557610625614b2a565b9050602002013561234e565b6001016105ef565b505050505050565b600080546040516302a0a1cb60e41b815282916201000090046001600160a01b031690632a0a1cb09061067c90889088908890600401614b40565b61014060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190614b77565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610714573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107389190614c09565b6001600160a01b031663e7572230866040518263ffffffff1660e01b815260040161076591815260200190565b6040805180830381865afa158015610781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a59190614c26565b50905060006107c28360a00151838560c001518660e0015161239f565b905060006107d58485608001518461242e565b506002548551602087015160408089015160c08a015160808b015160e08c01519351637b62877f60e11b81526001600160a01b0396871660048201526024810195909552604485019290925215156064840152608483015260a482015292935060009291169063f6c50efe9060c401602060405180830381865afa158015610861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108859190614c4a565b600254608087015160405163c22ff7bf60e01b815260048101919091526024810185905260006044820181905260648201849052608482018190529293506001600160a01b039091169063c22ff7bf9060a401602060405180830381865afa1580156108f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109199190614c4a565b905085608001518161092b9190614c79565b9a9950505050505050505050565b610941612548565b80601160006109536020860186614cb8565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092528120906109986080860160608701614cd5565b60018111156109a9576109a9614cf0565b60018111156109ba576109ba614cf0565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b6109fc61259b565b610a046125ee565b6000816000015190506000806000610aa060405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e001518152602001876060015181526020018661010001518152602001866101200151815250612617565b60a0870182905291945092509050600081600b811115610ac257610ac2614cf0565b03610b41576000610ad7856105dc60006128fc565b50905086600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978260018460a00151888660e001518760800151610b1d9190614d06565b600080604051610b339796959493929190614d99565b60405180910390a250610639565b836020015184600001516001600160a01b031687600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c326984604051610b889190614df2565b60405180910390a460405162461bcd60e51b815260206004820152601a60248201527f4d61726b6574206f70656e206f726465722063616e63656c656400000000000060448201526064015b60405180910390fd5b60606000610be9612dae565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4a9190614c4a565b90506000816001600160401b03811115610c6657610c666144a4565b604051908082528060200260200182016040528015610c8f578160200160208202803683370190505b50905060005b82811015610cd3576000818152601060205260409020548251839083908110610cc057610cc0614b2a565b6020908102919091010152600101610c95565b5092915050565b610ce4828261234e565b5050565b610cf0612548565b80600e6000610d026020860186614cb8565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090610d476080860160608701614cd5565b6001811115610d5857610d58614cf0565b6001811115610d6957610d69614cf0565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b19948216600160201b0267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b610df8612e8c565b600c805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b600060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebd9190614c09565b6001600160a01b031663095ea7b3600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f429190614c09565b6000196040518363ffffffff1660e01b8152600401610f62929190614e00565b6020604051808303816000875af1158015610f81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa59190614e19565b50565b610fb061259b565b610fb86125ee565b805180516020820151604090920151600092610fd49291612edf565b905060008160e00151600014610ffc57602084015115610ff5576000610fff565b6002610fff565b60095b9050600981600b81111561101557611015614cf0565b146111ed576000611033836000015184602001518560400151612f6c565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611089573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ad9190614c09565b90506110b76142c2565b8460e0015185608001516110cb9190614d06565b6020820152600084600b8111156110e4576110e4614cf0565b0361119d576111058560a0015188602001518760c001518860e0015161239f565b606082015260e0850151602082015161111e9190614e4c565b8082526060820151604085015161113f928892600192909190600080613021565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099794611190948c9460009491938593919291614d99565b60405180910390a26111e9565b84600001516001600160a01b03167f4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb254084068260e001516040516111e091815260200190565b60405180910390a25b5050505b600081600b81111561120157611201614cf0565b146112a7578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c9161125791908790614e60565b60405180910390a460405162461bcd60e51b815260206004820152601b60248201527f4d61726b657420636c6f7365206f726465722063616e63656c656400000000006044820152606401610bd4565b50505050565b6112b5612e8c565b600c805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd388893610e3c9390049091161515815260200190565b611315612e8c565b600581111561133757604051635863f78960e01b815260040160405180910390fd5b600d8190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b61137a612e8c565b806113858385614e74565b61138f9190614e74565b6064146113af57604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600054610100900460ff16158080156114245750600054600160ff909116105b8061143e5750303b15801561143e575060005460ff166001145b6114a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610bd4565b6000805460ff1916600117905580156114c4576000805461ff0019166101001790555b6001600160a01b038d1615806114e157506001600160a01b038c16155b806114f357506001600160a01b038b16155b8061150557506001600160a01b038a16155b8061151757506001600160a01b038916155b8061152957506001600160a01b038716155b8061154957508361153a8688614e74565b6115449190614e74565b606414155b806115545750600583115b1561157257604051635863f78960e01b815260040160405180910390fd5b8c600060026101000a8154816001600160a01b0302191690836001600160a01b031602179055508b600160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600f60006101000a8154816001600160a01b0302191690836001600160a01b03160217905550856005819055508460068190555083600781905550816000015160088190555081602001516009819055508160400151600a819055508160600151600b8190555082600d8190555060008060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171c9190614c09565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b39361175493909216916000199101614e00565b6020604051808303816000875af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190614e19565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906117c8908b9060001990600401614e00565b6020604051808303816000875af11580156117e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180b9190614e19565b50508015611853576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b61186a61259b565b6118726125ee565b600061188b826040015183606001518460800151612edf565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119059190614c09565b90506000846020015160001461192d5760e083015115611926576000611930565b6009611930565b60025b9050600081600b81111561194657611946614cf0565b036121d0576000611964846000015185602001518660400151612f6c565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ca9190614c09565b90506119d46142c2565b8560e0015186608001516119e89190614d06565b6020820181905260e08701516119fd91614e4c565b815260028760a001516004811115611a1757611a17614cf0565b03611ae257600f546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a91611a9b9190600401614e8c565b602060405180830381865afa158015611ab8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611adc9190614c4a565b60a08201525b60048760a001516004811115611afa57611afa614cf0565b03611bc557600f546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633269b96360e11b815291909216916364d372c691611b7e9190600401614e8c565b602060405180830381865afa158015611b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bbf9190614c4a565b60a08201525b60008760a001516004811115611bdd57611bdd614cf0565b14611c145760018760a001516004811115611bfa57611bfa614cf0565b14611c09578060a00151611c1b565b856101200151611c1b565b8561010001515b60808201819052602089015114610140820181905215611d485760028760a001516004811115611c4d57611c4d614cf0565b14611d235760048760a001516004811115611c6a57611c6a614cf0565b14611d12576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401611ca991815260200190565b602060405180830381865afa158015611cc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cea9190614c4a565b8360200151611cf99190614d06565b611d039190614e4c565b611d0d9190614e4c565b611d3e565b600b548151606491611d0391614d06565b600a548151606491611d3491614d06565b611d3e9190614e4c565b60e0820152611f8a565b6020880151608082015260028760a001516004811115611d6a57611d6a614cf0565b14611f375760048760a001516004811115611d8757611d87614cf0565b14611ef45760008760a001516004811115611da457611da4614cf0565b148015611db657506000866101000151115b8015611de657508560c00151611dd85785610100015188606001511115611de6565b856101000151886060015110155b80611e46575060018760a001516004811115611e0457611e04614cf0565b148015611e1657506000866101200151115b8015611e4657508560c00151611e385785610120015188606001511015611e46565b856101200151886060015111155b611e51576000611f84565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401611e8b91815260200190565b602060405180830381865afa158015611ea8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ecc9190614c4a565b8360200151611edb9190614d06565b611ee59190614e4c565b611eef9190614e4c565b611f84565b8560c00151611f0e578060a0015188606001511015611f1b565b8060a00151886060015111155b611f26576000611f84565b600b548151606491611ee591614d06565b8560c00151611f51578060a0015188606001511015611f5e565b8060a00151886060015111155b611f69576000611f84565b600a548151606491611f7a91614d06565b611f849190614e4c565b60e08201525b60e081015115611f9b576000611f9e565b600b5b9350600084600b811115611fb457611fb4614cf0565b036121cc57611fd58660a0015182608001518860c001518960e0015161239f565b606082015260048760a001516004811115611ff257611ff2614cf0565b036120235761201e868260600151836000015186604001518560e001518660e001518e602001516133fd565b612108565b60608101518151604085015161210892899260009260028d60a00151600481111561205057612050614cf0565b146120f8576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b815260040161208f91815260200190565b602060405180830381865afa1580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190614c4a565b89602001516120df9190614d06565b6120e99190614e4c565b6120f39190614e4c565b6120fe565b8660e001515b8760e00151613021565b60c0820152855160e08201516040519081526001600160a01b03909116907fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c59060200160405180910390a286600001516001600160a01b031688600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408960800151898b60a0015186608001516000886000015189606001518a60c001518b61014001516040516121c399989796959493929190614ef0565b60405180910390a35b5050505b600081600b8111156121e4576121e4614cf0565b14612237578351855160a08601516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc39161222e918690614f4d565b60405180910390a35b600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b03169063201d8bdb90602401600060405180830381600087803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505050505050505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231b9190614c09565b6001600160a01b0316336001600160a01b03161461234c57604051631dd2188d60e31b815260040160405180910390fd5b565b600082815260106020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab67906123939084815260200190565b60405180910390a25050565b6000806123b36402540be400610384614f68565b9050600086116123c4576000612413565b85836402540be400866123e0576123db888a614c79565b6123ea565b6123ea8989614c79565b6123f5906064614f68565b6123ff9190614f68565b6124099190614f68565b6124139190614fed565b91508082136124225781612424565b805b9695505050505050565b600f546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c9190614c4a565b9050836402540be400612520836064614d06565b61252a9190614d06565b6125349190614e4c565b61253e9084614c79565b9150935093915050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b600c54610100900460ff161561234c57604051631dd2188d60e31b815260040160405180910390fd5b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f329361264f939190613ada565b8660c001518760a001518861010001518960e0015161266e9190614d06565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156126bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e19190614c26565b610120860151919450925060009061270957606485602001516127049190614e4c565b61273a565b6402540be400606486610120015187602001516127269190614d06565b6127309190614e4c565b61273a9190614e4c565b600c5490915060ff166128f0576040850151156128e9578460a001516127715780856020015161276a919061501b565b8310612784565b8085602001516127819190614e74565b83115b6128e25760008561014001511180156127b957508460a001516127af578461014001518311156127b9565b8461014001518310155b6128db5760008561016001511180156127ee57508460a001516127e4578461016001518310156127ee565b8461016001518311155b6128d45761280f8560c001518660a001518760e00151886101000151613b4a565b156128cd57600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b9190614c4a565b61010086015161289b9086614d06565b116128c6576128b38560c00151866101000151613cf3565b156128bf5760006128f3565b60086128f3565b60076128f3565b60066128f3565b60056128f3565b60046128f3565b60036128f3565b60026128f3565b60015b93959294505050565b61290461431e565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561295a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297e9190614c09565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156129c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129e49190614c09565b90506129ee6142c2565b8760e001518860800151612a029190614d06565b6020828101919091526000548951918a015160405163292c161760e01b8152620100009092046001600160a01b03169263292c161792612a459290600401614e00565b602060405180830381865afa158015612a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a869190614c4a565b886040018181525050612aac8860a001518960e001518a61010001518b60c00151613d95565b88610100018181525050612ad38860a001518960e001518a61012001518b60c00151613e28565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0390951694630e6bc39a94612b1d949093909291600401615032565b600060405180830381600087803b158015612b3757600080fd5b505af1158015612b4b573d6000803e3d6000fd5b505050506020880151608089015160c08a01516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038316906320f0fc5e90608401600060405180830381600087803b158015612bb757600080fd5b505af1158015612bcb573d6000803e3d6000fd5b5050600f548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb9550929391929091612c0a9190614d06565b60018e60c001516040518763ffffffff1660e01b8152600401612c329695949392919061505a565b600060405180830381600087803b158015612c4c57600080fd5b505af1158015612c60573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d60800151612cb99190614d06565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401612cf0929190615091565b600060405180830381600087803b158015612d0a57600080fd5b505af1158015612d1e573d6000803e3d6000fd5b505089516001600160a01b03166000908152600e60209081526040808320828e015184528252808320818e015184528252808320838052909152812092509050612d66613ea2565b825467ffffffffffffffff191663ffffffff91909116908117600160201b82021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e269190614c09565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190614c09565b905090565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122f7573d6000803e3d6000fd5b612ee761431e565b6000546040516302a0a1cb60e41b8152620100009091046001600160a01b031690632a0a1cb090612f2090879087908790600401614b40565b61014060405180830381865afa158015612f3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f629190614b77565b90505b9392505050565b612fa76040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051637728fb1b60e11b8152620100009091046001600160a01b03169063ee51f63690612fe090879087908790600401614b40565b60c060405180830381865afa158015612ffd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6291906150e8565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613077573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309b9190614c09565b90506130b28987896130ad8789614e74565b613f23565b50600f548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb946130fe94939290918c9160009160040161505a565b600060405180830381600087803b15801561311857600080fd5b505af115801561312c573d6000803e3d6000fd5b50505050613138612dae565b6001600160a01b03166320f0fc5e8a602001518b60e001518861315b9190614e4c565b60c08d01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b1580156131af57600080fd5b505af11580156131c3573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b9945061320693600401614b40565b600060405180830381600087803b15801561322057600080fd5b505af1158015613234573d6000803e3d6000fd5b5050505060808901511561338b5761324a6142c2565b886132aa5760646008548561325f9190614d06565b6132699190614e4c565b61010082018190528a5161327d9190614046565b60646009548561328d9190614d06565b6132979190614e4c565b61012082018190526132aa903390614128565b6000816101000151826101200151896132c3919061501b565b6132cd919061501b565b905080841115613364576001600160a01b03831663e66a6e3b6132f0838761501b565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561333957600080fd5b505af115801561334d573d6000803e3d6000fd5b5050505061335f8b6000015182614128565b613384565b613378613371858361501b565b8c51614046565b8a516133849085614128565b50506133f1565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b1580156133d857600080fd5b505af11580156133ec573d6000803e3d6000fd5b505050505b50979650505050505050565b600061340c8887896000613f23565b50600f54895160208b01516040808d015160c08e0151915163ce67edfb60e01b81529596506001600160a01b039094169463ce67edfb9461345894939290918c9160019160040161505a565b600060405180830381600087803b15801561347257600080fd5b505af1158015613486573d6000803e3d6000fd5b50505050613492612dae565b6001600160a01b03166320f0fc5e8960200151838b60e00151896134b69190614e4c565b6134c0919061501b565b60c08c01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b15801561351457600080fd5b505af1158015613528573d6000803e3d6000fd5b50505050600060646008548561353e9190614d06565b6135489190614e4c565b9050613558818a60000151614046565b600060646009548661356a9190614d06565b6135749190614e4c565b90506135803382614128565b6000548a5160208c01516040808e015190516390d112b960e01b8152620100009094046001600160a01b0316936390d112b9936135c39390929091600401614b40565b600060405180830381600087803b1580156135dd57600080fd5b505af11580156135f1573d6000803e3d6000fd5b505050506135fd61431e565b8a516001600160a01b03908116825260e0808d0151908301526020808d0180519184019190915260c0808e01511515908401526080830186905260a083018790526000548d51915160405163292c161760e01b8152620100009092049093169263292c16179261367292909190600401614e00565b602060405180830381865afa15801561368f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136b39190614c4a565b60408201526101008b01516136c95760006136e7565b6136e78b60a001518c6101000151878e60c001518f60e0015161416d565b6101008201526101208b01516136fe57600061371c565b61371c8b60a001518c6101200151878e60c001518f60e00151614220565b8161012001818152505060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561377a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061379e9190614c09565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138049190614c09565b6002548451602086015160408088015160c08901519151630735e1cd60e11b81529596506001600160a01b0390941694630e6bc39a9461384a9493929091600401615032565b600060405180830381600087803b15801561386457600080fd5b505af1158015613878573d6000803e3d6000fd5b505050506020830151608084015160c08501516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038216906320f0fc5e90608401600060405180830381600087803b1580156138e457600080fd5b505af11580156138f8573d6000803e3d6000fd5b5050600f5485516020870151604088015160e089015160808a01516001600160a01b03909516965063ce67edfb95509293919290916139379190614d06565b60018960c001516040518763ffffffff1660e01b815260040161395f9695949392919061505a565b600060405180830381600087803b15801561397957600080fd5b505af115801561398d573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31846040518060c0016040528060008152602001600081526020018760e0015188608001516139e39190614d06565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401613a1a929190615091565b600060405180830381600087803b158015613a3457600080fd5b505af1158015613a48573d6000803e3d6000fd5b505084516001600160a01b03166000908152600e6020908152604080832082890151845282528083208189015184528252808320838052909152812092509050613a90613ea2565b825467ffffffffffffffff191663ffffffff91909116908117600160201b82021763ffffffff60601b1916600160601b919091021790915550949c9b505050505050505050505050565b6000806402540be400606480613af08789614d06565b613afa9190614e4c565b613b04908861501b565b613b0e9089614d06565b613b189190614e4c565b613b229190614e4c565b905082613b3857613b33818761501b565b612424565b6124248187614e74565b949350505050565b600080613b578385614d06565b600f54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa158015613ba1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bc59190614c4a565b613bd3906305f5e100614d06565b60005482906201000090046001600160a01b03166377a9fdcf8989613bf9576001613bfc565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015613c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c649190614c4a565b613c6e9190614e74565b111580156124245750600f5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015613ccf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124249190614e19565b6000828152601060205260408120548015613d115780831115613d8b565b613d19612dae565b6001600160a01b031663281b693c856040518263ffffffff1660e01b8152600401613d4691815260200190565b602060405180830381865afa158015613d63573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d879190614c4a565b8311155b9150505b92915050565b6000821580613dbe5750613db06402540be400610384614f68565b613dbc8685858861239f565b145b15613e1f576000606485613dd461038489614d06565b613dde9190614e4c565b613de89190614e4c565b905082613e0d5785811115613dfe576000613e17565b613e08818761501b565b613e17565b613e178187614e74565b915050613b42565b50909392505050565b60008083118015613e5e5750613e446402540be400604b614f68565b613e5090600019614f68565b613e5c8685858861239f565b125b15613e1f576000606485613e73604b89614d06565b613e7d9190614e4c565b613e879190614e4c565b905082613e9857613e088187614e74565b613e17818761501b565b600061a4b1461480613eb6575062066eed46145b15613f1e5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613efa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e879190614c4a565b504390565b6000806000613f3387878761242e565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015613fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ff29190614c4a565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b6140503083614128565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140c79190614c09565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b906044015b600060405180830381600087803b15801561411457600080fd5b505af1158015610639573d6000803e3d6000fd5b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064016140fa565b60008086836402540be4008661418c57614187898b614c79565b614196565b6141968a8a614c79565b6141a1906064614f68565b6141ab9190614f68565b6141b59190614f68565b6141bf9190614fed565b90506000836402540be40060646141d68986614f68565b6141e09190614fed565b6141ea9190614fed565b6141f49190614fed565b90508461420a57614205818761501b565b614214565b6142148187614e74565b98975050505050505050565b60008086836402540be4008661423f5761423a898b614c79565b614249565b6142498a8a614c79565b614254906064614f68565b61425e9190614f68565b6142689190614f68565b6142729190614fed565b90506000836402540be40060646142898986614f68565b6142939190614fed565b61429d9190614fed565b6142a79190614fed565b9050846142b8576142058187614e74565b614214818761501b565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b60008083601f84011261438e57600080fd5b5081356001600160401b038111156143a557600080fd5b6020830191508360208260051b85010111156143c057600080fd5b9250929050565b600080600080604085870312156143dd57600080fd5b84356001600160401b03808211156143f457600080fd5b6144008883890161437c565b9096509450602087013591508082111561441957600080fd5b506144268782880161437c565b95989497509550505050565b6001600160a01b0381168114610fa557600080fd5b803561445281614432565b919050565b60008060006060848603121561446c57600080fd5b833561447781614432565b95602085013595506040909401359392505050565b60006080828403121561449e57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156144ea57634e487b7160e01b600052604160045260246000fd5b60405290565b60405161014081016001600160401b03811182821017156144ea57634e487b7160e01b600052604160045260246000fd5b60008082840360c081121561453557600080fd5b61453f858561448c565b92506040607f198201121561455357600080fd5b50604051604081018181106001600160401b038211171561458457634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff8116811461459f57600080fd5b815260a08401356001600160d81b03811681146145bb57600080fd5b6020820152919491935090915050565b6000602082840312156145dd57600080fd5b5035919050565b600060c082840312156145f657600080fd5b60405160c081018181106001600160401b038211171561462657634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b8015158114610fa557600080fd5b80356144528161466b565b6000808284036102a081121561469957600080fd5b6146a385856145e4565b925060bf19016101e0808212156146b957600080fd5b6146c16144ba565b610140808412156146d157600080fd5b6146d96144f0565b93506146e760c08801614447565b845260e0870135602085015261010080880135604086015261012080890135606087015282890135608087015261016089013560a087015261472c6101808a01614679565b60c08701526101a089013560e08701526101c08901359186019190915292870135928401929092529182525061020084013560208201526102208401356040820152610240840135606082015261026084013560808201526102809093013560a08401525092909150565b6020808252825182820181905260009190848201906040850190845b818110156147cf578351835292840192918401916001016147b3565b50909695505050505050565b80356002811061445257600080fd5b6000806000806080858703121561480057600080fd5b843561480b81614432565b93506020850135925060408501359150614827606086016147db565b905092959194509250565b6000806040838503121561484557600080fd5b50508035926020909101359150565b803563ffffffff8116811461445257600080fd5b60008082840361010081121561487d57600080fd5b614887858561448c565b92506080607f198201121561489b57600080fd5b50604051608081018181106001600160401b03821117156148cc57634e487b7160e01b600052604160045260246000fd5b6040526148db60808501614854565b81526148e960a08501614854565b60208201526148fa60c08501614854565b604082015261490b60e08501614854565b6060820152809150509250929050565b60008060006060848603121561493057600080fd5b505081359360208301359350604090920135919050565b60006080828403121561495957600080fd5b604051608081018181106001600160401b038211171561498957634e487b7160e01b600052604160045260246000fd5b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000806000806000806000806000806000806101e08d8f0312156149dd57600080fd5b8c356149e881614432565b9b5060208d01356149f881614432565b9a5060408d0135614a0881614432565b995060608d0135614a1881614432565b985060808d0135614a2881614432565b975060a08d0135614a3881614432565b9650614a4660c08e01614447565b955060e08d013594506101008d013593506101208d013592506101408d01359150614a758e6101608f01614947565b90509295989b509295989b509295989b565b600080828403610180811215614a9c57600080fd5b614aa685856145e4565b925060c060bf1982011215614aba57600080fd5b50614ac36144ba565b60c0840135614ad181614432565b815260e08401356020820152610100840135614aec81614432565b60408201526101208401356060820152610140840135608082015261016084013560058110614b1a57600080fd5b60a0820152919491935090915050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526020830191909152604082015260600190565b805161445281614432565b80516144528161466b565b60006101408284031215614b8a57600080fd5b614b926144f0565b614b9b83614b61565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a0820152614bdb60c08401614b6c565b60c082015260e083810151908201526101008084015190820152610120928301519281019290925250919050565b600060208284031215614c1b57600080fd5b8151612f6581614432565b60008060408385031215614c3957600080fd5b505080516020909101519092909150565b600060208284031215614c5c57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b60008083128015600160ff1b850184121615614c9757614c97614c63565b6001600160ff1b0384018313811615614cb257614cb2614c63565b50500390565b600060208284031215614cca57600080fd5b8135612f6581614432565b600060208284031215614ce757600080fd5b612f65826147db565b634e487b7160e01b600052602160045260246000fd5b6000816000190483118215151615614d2057614d20614c63565b500290565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151614d7760c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b6102008101614da8828a614d25565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b600c8110614dee57614dee614cf0565b9052565b60208101613d8f8284614dde565b6001600160a01b03929092168252602082015260400190565b600060208284031215614e2b57600080fd5b8151612f658161466b565b634e487b7160e01b600052601260045260246000fd5b600082614e5b57614e5b614e36565b500490565b82815260408101612f656020830184614dde565b60008219821115614e8757614e87614c63565b500190565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b60058110614dee57614dee614cf0565b8981526102408101614f05602083018b614d25565b614f1361016083018a614ee0565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b60408101614f5b8285614ee0565b612f656020830184614dde565b60006001600160ff1b0381841382841380821686840486111615614f8e57614f8e614c63565b600160ff1b6000871282811687830589121615614fad57614fad614c63565b60008712925087820587128484161615614fc957614fc9614c63565b87850587128184161615614fdf57614fdf614c63565b505050929093029392505050565b600082614ffc57614ffc614e36565b600160ff1b82146000198414161561501657615016614c63565b500590565b60008282101561502d5761502d614c63565b500390565b6001600160a01b03949094168452602084019290925260408301521515606082015260800190565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b61020081016150a08285614d25565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e08301529392505050565b600060c082840312156150fa57600080fd5b6151026144ba565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015161513c8161466b565b60a0820152939250505056fea26469706673582212203c8d684571ddcbc8dcb18ae20b1895db33f0019e5b268140f75df5263f1cecf464736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3061,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterface)8526"
      },
      {
        "astId": 3064,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NftRewardsInterfaceV6_3_1)7603"
      },
      {
        "astId": 3067,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PairInfosInterface)7815"
      },
      {
        "astId": 3070,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ReferralsInterface)8013"
      },
      {
        "astId": 3073,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(StakingInterface)8021"
      },
      {
        "astId": 3087,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "WETHVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3089,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3091,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3094,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "vaultFeeP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3097,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "liquidatorFeeP",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3100,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "liquidationFeeP",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3103,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "parLiquidationFeeP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3105,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isPaused",
        "offset": 0,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3107,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isDone",
        "offset": 1,
        "slot": "12",
        "type": "t_bool"
      },
      {
        "astId": 3109,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3121,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage))))"
      },
      {
        "astId": 3124,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(BorrowingFeesInterface)7213"
      },
      {
        "astId": 3128,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3140,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeData",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BorrowingFeesInterface)7213": {
        "encoding": "inplace",
        "label": "contract BorrowingFeesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(NftRewardsInterfaceV6_3_1)7603": {
        "encoding": "inplace",
        "label": "contract NftRewardsInterfaceV6_3_1",
        "numberOfBytes": "20"
      },
      "t_contract(PairInfosInterface)7815": {
        "encoding": "inplace",
        "label": "contract PairInfosInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ReferralsInterface)8013": {
        "encoding": "inplace",
        "label": "contract ReferralsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StakingInterface)8021": {
        "encoding": "inplace",
        "label": "contract StakingInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterface)8526": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)3272": {
        "encoding": "inplace",
        "label": "enum TradingCallbacks.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage)))"
      },
      "t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3272",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)3230_storage"
      },
      "t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3272",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)3235_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(LastUpdated)3230_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3272,t_struct(TradeData)3235_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)3230_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.LastUpdated",
        "members": [
          {
            "astId": 3223,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3225,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3227,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3229,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)3235_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.TradeData",
        "members": [
          {
            "astId": 3232,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3234,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}