{
  "address": "0xD8fcC27379F641e3e5063f44bc336e58f871E698",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueWETH",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CanExecuteTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "DevGovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "NftBotFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterfaceV5.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum GNSTradingCallbacksV6_4.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "WETHVaultFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETHVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSStakingInterfaceV6_2",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        }
      ],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "setCanExecuteTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum GNSTradingCallbacksV6_4.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct GNSTradingCallbacksV6_4.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract GNSStakingInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum GNSTradingCallbacksV6_4.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd23beaaac9cd86df2ea4545eb5d9b8acb560d8a165bc2b0a6a2da6ed41bdc2da",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xD8fcC27379F641e3e5063f44bc336e58f871E698",
    "transactionIndex": 16,
    "gasUsed": "5066144",
    "logsBloom": "0x
    "blockHash": "0x33ddb52a87d87b612155a2826dd1c04b19b81298de4c7edf903125876d5308e6",
    "transactionHash": "0xd23beaaac9cd86df2ea4545eb5d9b8acb560d8a165bc2b0a6a2da6ed41bdc2da",
    "logs": [
      {
        "transactionIndex": 16,
        "blockNumber": 39744047,
        "transactionHash": "0xd23beaaac9cd86df2ea4545eb5d9b8acb560d8a165bc2b0a6a2da6ed41bdc2da",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002cff14b13ceec000000000000000000000000000000000000000000000000046f212725eda47930000000000000000000000000000000000000000000000c4a772f0619d50072200000000000000000000000000000000000000000000000046c5135dad9d58d30000000000000000000000000000000000000000000000c4a79fef764e8cf5e2",
        "logIndex": 83,
        "blockHash": "0x33ddb52a87d87b612155a2826dd1c04b19b81298de4c7edf903125876d5308e6"
      }
    ],
    "blockNumber": 39744047,
    "cumulativeGasUsed": "8743416",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "142a6cd35a33e27baa8c85bf18af3c91",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueWETH\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CanExecuteTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"DevGovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"NftBotFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterfaceV5.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum GNSTradingCallbacksV6_4.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"WETHVaultFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETHVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSStakingInterfaceV6_2\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"setCanExecuteTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct GNSTradingCallbacksV6_4.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract GNSStakingInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum GNSTradingCallbacksV6_4.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts6_4/GNSTradingCallbacksV6_4.sol\":\"GNSTradingCallbacksV6_4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData() external view returns (uint80, int, uint, uint, uint80);\\n}\",\"keccak256\":\"0x65dd2889864a18cc14ec4e1bdccf87ac171a4dc0002f07284919591e7e188247\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xf905733bd477ea861743a1eb451f946ce507402ae4ae3ef70a1446ffce3232ae\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\",\"keccak256\":\"0xe9a1bf37ab4d3d1c81384a660f1d01175df30ee5d4398217ff6e46d35e1d048a\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x3c0f19c1b86a0fe0fd5714c7cffb0b3bddfd0c98175810554724901faa6d5308\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\\n\\ninterface AggregatorInterfaceV6_2{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceWETH() external returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function openFeeP(uint) external view returns(uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface AggregatorInterfaceV6_3_1 is AggregatorInterfaceV6_2 {\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_3_1 {\\n    enum TradeType {MARKET, LIMIT}\\n    struct SimplifiedTradeId{ address trader; uint pairIndex; uint index; TradeType tradeType; }\\n    struct LastUpdated{ uint32 tp; uint32 sl; uint32 limit; uint32 created; }\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns(LastUpdated memory);\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n    function canExecuteTimeout() external view returns(uint);\\n}\",\"keccak256\":\"0x6f3b44cb9d44e21b89fc6c382f5f21c88ed93313d6facbd20772c7b2a4987d4c\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0xbdaf20e556c21925c2f710802174ce66026cbd1d08e62ae3533cdd9fe3b618d4\",\"license\":\"MIT\"},\"contracts/contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(address trader, address referral) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(address trader) external view returns (address referrer);\\n}\",\"keccak256\":\"0xa244d11cc21ef14ccf101d6cb39e223a80e5c1c3ef81c525cc687d5250add606\",\"license\":\"MIT\"},\"contracts/contracts6_2/interfaces/GNSStakingInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSStakingInterfaceV6_2 {\\n    function distributeRewardWETH(uint amount) external;\\n}\",\"keccak256\":\"0xa9ac0cea563959ac1c1b24920bbc2a07e910ea0b59723d25b3271791e9aedbc2\",\"license\":\"MIT\"},\"contracts/contracts6_4/GNSTradingCallbacksV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../contract5/interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"./interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../contracts6_2/interfaces/GNSStakingInterfaceV6_2.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\nimport \\\"./interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ncontract GNSTradingCallbacksV6_4 is Initializable {\\n    // Contracts (constant)\\n    StorageInterfaceV5 public storageT;\\n    NftRewardsInterfaceV6_3_1 public nftRewards;\\n    GNSPairInfosInterfaceV6 public pairInfos;\\n    GNSReferralsInterfaceV6_2 public referrals;\\n    GNSStakingInterfaceV6_2 public staking;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10; // 10 decimals\\n\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated)))) public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    GNSBorrowingFeesInterfaceV6_4 public borrowingFees;\\n\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData)))) public tradeData; // More storage for trades / limit orders\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posWETH;\\n        uint levPosWETH;\\n        uint tokenPriceWETH;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint WETHSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        uint spreadReductionP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterfaceV5.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit, // before fees\\n        uint WETHSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterfaceV5.Trade t,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit,\\n        uint WETHSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(uint WETHVaultFeeP, uint lpFeeP, uint sssFeeP);\\n    event CanExecuteTimeoutUpdated(uint newValue);\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n\\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\\n    event SssFeeCharged(address indexed trader, uint valueWETH);\\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\\n    event BorrowingFeeCharged(address indexed trader, uint tradeValueWETH, uint feeValueWETH);\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterfaceV5 _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSStakingInterfaceV6_2 _staking,\\n        address vaultToApprove,\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n        TokenInterfaceV5 t = storageT.WETH();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    function initializeV2(GNSBorrowingFeesInterfaceV6_4 _borrowingFees) external reinitializer(2) {\\n        if (address(_borrowingFees) == address(0)) {\\n            revert WrongParams();\\n        }\\n        borrowingFees = _borrowingFees;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isTrading() private view {\\n        if (msg.sender != storageT.trading()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external onlyManager {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(uint[] calldata indices, uint[] calldata values) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(uint _WETHVaultFeeP, uint _lpFeeP, uint _sssFeeP) external onlyGov {\\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\\n            revert WrongParams();\\n        }\\n        canExecuteTimeout = _canExecuteTimeout;\\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = getPendingMarketOrder(a.orderId);\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) = _openTradePrep(\\n            OpenTradePrepInput(\\n                a.price,\\n                o.wantedPrice,\\n                a.price,\\n                a.spreadP,\\n                o.spreadReductionP,\\n                t.buy,\\n                t.pairIndex,\\n                t.positionSizeWETH,\\n                t.leverage,\\n                o.slippageP,\\n                t.tp,\\n                t.sl\\n            )\\n        );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceWETH) = registerTrade(t, 1500, 0);\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\\n                0,\\n                0\\n            );\\n        } else {\\n            uint devGovFeesWETH = storageT.handleDevGovFees(t.pairIndex, t.positionSizeWETH * t.leverage, true, true);\\n            transferFromStorageToAddress(t.trader, t.positionSizeWETH - devGovFeesWETH);\\n\\n            emit DevGovFeeCharged(t.trader, devGovFeesWETH);\\n            emit MarketOpenCanceled(a.orderId, t.trader, t.pairIndex, cancelReason);\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingMarketOrder memory o = getPendingMarketOrder(a.orderId);\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterfaceV5.Trade memory t = getOpenTrade(o.trade.trader, o.trade.pairIndex, o.trade.index);\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterfaceV5.TradeInfo memory i = getOpenTradeInfo(t.trader, t.pairIndex, t.index);\\n            AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n            Values memory v;\\n            v.levPosWETH = (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION;\\n            v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(t.openPrice, a.price, t.buy, t.leverage);\\n                v.posWETH = v.levPosWETH / t.leverage;\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    (v.levPosWETH * aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\\n                    (v.levPosWETH * aggregator.pairsStorage().pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\\n                );\\n\\n                emit MarketExecuted(a.orderId, t, false, a.price, 0, v.posWETH, v.profitP, v.WETHSentToTrader);\\n            } else {\\n                // Dev / gov rewards to pay for oracle cost\\n                // Charge in WETH if collateral in storage or token if collateral in vault\\n                v.reward1 = t.positionSizeWETH > 0\\n                    ? storageT.handleDevGovFees(t.pairIndex, v.levPosWETH, true, true)\\n                    : (storageT.handleDevGovFees(\\n                        t.pairIndex,\\n                        (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\\n                        false,\\n                        true\\n                    ) * v.tokenPriceWETH) / PRECISION;\\n\\n                t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\\n                storageT.updateTrade(t);\\n\\n                emit DevGovFeeCharged(t.trader, v.reward1);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(a.orderId, o.trade.trader, o.trade.pairIndex, o.trade.index, cancelReason);\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    function executeNftOpenOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory n = storageT.reqID_pendingNftOrder(a.orderId);\\n\\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(n.trader, n.pairIndex, n.index)\\n            ? CancelReason.NO_TRADE\\n            : CancelReason.NONE;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n            NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards.openLimitOrderTypes(\\n                n.trader,\\n                n.pairIndex,\\n                n.index\\n            );\\n\\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice) ? CancelReason.NONE : CancelReason.NOT_HIT;\\n\\n            // Note: o.minPrice always equals o.maxPrice so can use either\\n            (uint priceImpactP, uint priceAfterImpact, CancelReason _cancelReason) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n                    o.maxPrice,\\n                    a.open,\\n                    a.spreadP,\\n                    o.spreadReductionP,\\n                    o.buy,\\n                    o.pairIndex,\\n                    o.positionSize,\\n                    o.leverage,\\n                    tradeData[o.trader][o.pairIndex][o.index][TradeType.LIMIT].maxSlippageP,\\n                    o.tp,\\n                    o.sl\\n                )\\n            );\\n\\n            bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n            cancelReason = !exactExecution &&\\n                (\\n                    o.maxPrice == 0 || t == NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n                )\\n                ? CancelReason.NOT_HIT\\n                : _cancelReason;\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceWETH) = registerTrade(\\n                    StorageInterfaceV5.Trade(\\n                        o.trader,\\n                        o.pairIndex,\\n                        0,\\n                        0,\\n                        o.positionSize,\\n                        priceAfterImpact,\\n                        o.buy,\\n                        o.leverage,\\n                        o.tp,\\n                        o.sl\\n                    ),\\n                    n.nftId,\\n                    n.index\\n                );\\n\\n                storageT.unregisterOpenLimitOrder(o.trader, o.pairIndex, o.index);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterfaceV5.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\\n                    0,\\n                    0,\\n                    exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(a.orderId, n.nftHolder, StorageInterfaceV5.LimitOrder.OPEN, cancelReason);\\n        }\\n\\n        nftRewards.unregisterTrigger(\\n            NftRewardsInterfaceV6_3_1.TriggeredLimitId(n.trader, n.pairIndex, n.index, n.orderType)\\n        );\\n\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    function executeNftCloseOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\\n        StorageInterfaceV5.PendingNftOrder memory o = storageT.reqID_pendingNftOrder(a.orderId);\\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n            o.trader,\\n            o.pairIndex,\\n            o.index,\\n            o.orderType\\n        );\\n        StorageInterfaceV5.Trade memory t = getOpenTrade(o.trader, o.pairIndex, o.index);\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        CancelReason cancelReason = a.open == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterfaceV5.TradeInfo memory i = getOpenTradeInfo(t.trader, t.pairIndex, t.index);\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosWETH = (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION;\\n            v.posWETH = v.levPosWETH / t.leverage;\\n\\n            if (o.orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? t.tp\\n                : (o.orderType == StorageInterfaceV5.LimitOrder.SL ? t.sl : v.liqPrice);\\n\\n            v.exactExecution = v.price > 0 && a.low <= v.price && a.high >= v.price;\\n\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? (v.posWETH * 5) / 100\\n                    : (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION;\\n            } else {\\n                v.price = a.open;\\n\\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                    ? ((t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice) ? (v.posWETH * 5) / 100 : 0)\\n                    : (\\n                        ((o.orderType == StorageInterfaceV5.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterfaceV5.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0 ? CancelReason.NOT_HIT : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(t.openPrice, v.price, t.buy, t.leverage);\\n                v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    false,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ\\n                        ? v.reward1\\n                        : (v.levPosWETH * pairsStored.pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\\n                    v.reward1\\n                );\\n\\n                // Convert NFT bot fee from WETH to token value\\n                v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\\n\\n                nftRewards.distributeNftReward(triggeredLimitId, v.reward2, v.tokenPriceWETH);\\n\\n                storageT.increaseNftRewards(o.nftId, v.reward2);\\n\\n                emit NftBotFeeCharged(t.trader, v.reward1);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(a.orderId, o.nftHolder, o.orderType, cancelReason);\\n        }\\n\\n        nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function registerTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint nftId,\\n        uint limitIndex\\n    ) private returns (StorageInterfaceV5.Trade memory, uint) {\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\\n        v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\\n        if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n            // Use this variable to store lev pos WETH for dev/gov fees after referral fees\\n            // and before volumeReferredWETH increases\\n            v.posWETH =\\n                (v.levPosWETH * (100 * PRECISION - referrals.getPercentOfOpenFeeP(trade.trader))) /\\n                100 /\\n                PRECISION;\\n\\n            v.reward1 = referrals.distributePotentialReward(\\n                trade.trader,\\n                v.levPosWETH,\\n                pairsStored.pairOpenFeeP(trade.pairIndex),\\n                v.tokenPriceWETH\\n            );\\n\\n            sendToVault(v.reward1, trade.trader);\\n            trade.positionSizeWETH -= v.reward1;\\n\\n            emit ReferralFeeCharged(trade.trader, v.reward1);\\n        }\\n\\n        // 2. Charge opening fee - referral fee (if applicable)\\n        v.reward2 = storageT.handleDevGovFees(trade.pairIndex, (v.posWETH > 0 ? v.posWETH : v.levPosWETH), true, true);\\n\\n        trade.positionSizeWETH -= v.reward2;\\n\\n        emit DevGovFeeCharged(trade.trader, v.reward2);\\n\\n        // 3. Charge NFT / SSS fee\\n        v.reward2 = (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) / 100 / PRECISION;\\n        trade.positionSizeWETH -= v.reward2;\\n\\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\\n        if (nftId < 1500) {\\n            sendToVault(v.reward2, trade.trader);\\n\\n            // Convert NFT bot fee from WETH to token value\\n            v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\\n\\n            nftRewards.distributeNftReward(\\n                NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n                    trade.trader,\\n                    trade.pairIndex,\\n                    limitIndex,\\n                    StorageInterfaceV5.LimitOrder.OPEN\\n                ),\\n                v.reward3,\\n                v.tokenPriceWETH\\n            );\\n            storageT.increaseNftRewards(nftId, v.reward3);\\n\\n            emit NftBotFeeCharged(trade.trader, v.reward2);\\n\\n            // 3.2 Distribute SSS fee (if applicable)\\n        } else {\\n            distributeStakingReward(trade.trader, v.reward2);\\n        }\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(trade.trader, trade.pairIndex);\\n        trade.initialPosToken = (trade.positionSizeWETH * PRECISION) / v.tokenPriceWETH;\\n\\n        trade.tp = correctTp(trade.openPrice, trade.leverage, trade.tp, trade.buy);\\n        trade.sl = correctSl(trade.openPrice, trade.leverage, trade.sl, trade.buy);\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(trade.trader, trade.pairIndex, trade.index, trade.buy);\\n        pairsStored.updateGroupCollateral(trade.pairIndex, trade.positionSizeWETH, trade.buy, true);\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeWETH * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterfaceV5.TradeInfo(0, v.tokenPriceWETH, trade.positionSizeWETH * trade.leverage, 0, 0, false)\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][trade.pairIndex][trade.index][\\n            TradeType.MARKET\\n        ];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceWETH);\\n    }\\n\\n    function unregisterTrade(\\n        StorageInterfaceV5.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\\n    ) private returns (uint WETHSentToTrader) {\\n        IGToken vault = storageT.vault();\\n\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(trade, currentWETHPos, percentProfit, closingFeeWETH + nftFeeWETH);\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(trade.trader, trade.pairIndex, trade.index, openInterestWETH, false, trade.buy);\\n        getPairsStorage().updateGroupCollateral(trade.pairIndex, openInterestWETH / trade.leverage, trade.buy, false);\\n\\n        // 3. Unregister trade from storage\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // 4.1 If collateral in storage (opened after update)\\n        if (trade.positionSizeWETH > 0) {\\n            Values memory v;\\n\\n            // 4.1.1 WETH vault reward\\n            v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\\n            transferFromStorageToAddress(address(this), v.reward2);\\n            vault.distributeReward(v.reward2);\\n\\n            emit WETHVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 4.1.2 SSS reward\\n            v.reward3 = marketOrder ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100 : (closingFeeWETH * sssFeeP) / 100;\\n\\n            distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 4.1.3 Take WETH from vault if winning trade\\n            // or send WETH to vault if losing trade\\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\\n\\n            if (WETHSentToTrader > WETHLeftInStorage) {\\n                vault.sendAssets(WETHSentToTrader - WETHLeftInStorage, trade.trader);\\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\\n            } else {\\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault (opened before update)\\n        } else {\\n            vault.sendAssets(WETHSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    // Utils (external)\\n    function setTradeLastUpdated(SimplifiedTradeId calldata _id, LastUpdated memory _lastUpdated) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _lastUpdated;\\n    }\\n\\n    function setTradeData(SimplifiedTradeId calldata _id, TradeData memory _tradeData) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _tradeData;\\n    }\\n\\n    // Utils (getters)\\n    function _getTradeValue(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(trade, currentWETHPos, percentProfit);\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentWETHPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterfaceV5.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentWETHPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP = percentProfit - int((borrowingFee * 100 * PRECISION) / currentWETHPos);\\n    }\\n\\n    function withinMaxLeverage(uint pairIndex, uint leverage) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return pairMaxLev == 0 ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex) : leverage <= pairMaxLev;\\n    }\\n\\n    function withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeWETH,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\\n\\n        return\\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) + levPositionSizeWETH <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\\n    }\\n\\n    function currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private pure returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((buy ? int(currentPrice) - int(openPrice) : int(openPrice) - int(currentPrice)) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function correctTp(uint openPrice, uint leverage, uint tp, bool buy) private pure returns (uint) {\\n        if (tp == 0 || currentPercentProfit(openPrice, tp, buy, leverage) == int(MAX_GAIN_P) * int(PRECISION)) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return buy ? openPrice + tpDiff : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n\\n        return tp;\\n    }\\n\\n    function correctSl(uint openPrice, uint leverage, uint sl, bool buy) private pure returns (uint) {\\n        if (sl > 0 && currentPercentProfit(openPrice, sl, buy, leverage) < int(MAX_SL_P) * int(PRECISION) * -1) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        uint spreadReductionP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price * (spreadP - (spreadP * spreadReductionP) / 100)) / 100 / PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    ) private view returns (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            marketExecutionPrice(c.executionPrice, c.spreadP, c.spreadReductionP, c.buy),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 && (c.buy ? priceAfterImpact >= c.tp : priceAfterImpact <= c.tp))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 && (c.buy ? priceAfterImpact <= c.sl : priceAfterImpact >= c.sl))\\n                    ? CancelReason.SL_REACHED\\n                    : !withinExposureLimits(c.pairIndex, c.buy, c.positionSize, c.leverage)\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage > pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function getPendingMarketOrder(uint orderId) private view returns (StorageInterfaceV5.PendingMarketOrder memory) {\\n        return storageT.reqID_pendingMarketOrder(orderId);\\n    }\\n\\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return storageT.priceAggregator().pairsStorage();\\n    }\\n\\n    function getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.Trade memory) {\\n        return storageT.openTrades(trader, pairIndex, index);\\n    }\\n\\n    function getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterfaceV5.TradeInfo memory) {\\n        return storageT.openTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function distributeStakingReward(address trader, uint amountWETH) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        staking.distributeRewardWETH(amountWETH);\\n        emit SssFeeCharged(trader, amountWETH);\\n    }\\n\\n    function sendToVault(uint amountWETH, address trader) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        storageT.vault().receiveAssets(amountWETH, trader);\\n    }\\n\\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\\n        storageT.transferWETH(address(storageT), to, amountWETH);\\n    }\\n\\n    // Public views\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n}\",\"keccak256\":\"0x9761ee67ee052b6b473db1e944ba7d9be196c55c832f068e714f92b691e52a9d\",\"license\":\"MIT\"},\"contracts/contracts6_4/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x8e7bf9ff0b9e2eb440cdbcc8710c52dfbef3c12e8d2f5bdcb60ebf58fc6cff43\",\"license\":\"MIT\"},\"contracts/contracts6_4/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x5b297f384235d48f30d8d3352fc7ab0f4984f85dfb41c4f479e3d8e11f1b3c0e\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0xf3fa14cf1093352a34a84b3a7bb3ed26e69adc742ee6709bbaf7b981d34c1802\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615ab680620000216000396000f3fe608060405234801561001057600080fd5b50600436106101995760003560e01c806361ba6c3d116100e45780639bd24d83116100925780639bd24d83146103cd578063ae8421e11461045d578063b187bd2614610465578063b3f2f4d614610472578063b47ee40814610485578063c68078b914610498578063c68365df146104ab578063d3dc7539146104b457600080fd5b806361ba6c3d14610358578063676c51641461036b5780637bb6c11c146103745780637d490caf1461037d5780637e09ae8a146103905780638456cb59146103a35780638f062227146103ab57600080fd5b806329b6eca91161014c57806329b6eca91461025957806337edb1381461026c5780633986de6a1461028157806346f93a6314610294578063488291221461030c5780634cf088d91461031f578063531cc965146103325780635ad9f9931461034557600080fd5b8062e0fa891461019e5780631346b0ff146101b357806316fff074146101e3578063178623a7146101fc57806321c861961461021357806323f7197b14610226578063281b693c14610239575b600080fd5b6101b16101ac366004614db2565b6104c7565b005b6002546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b61020560055481565b6040519081526020016101da565b6101b1610221366004614ee3565b610545565b6101b1610234366004614f8d565b610600565b610205610247366004614fe7565b600c6020526000908152604090205481565b6101b1610267366004615015565b6111d2565b6102746112b4565b6040516101da9190615032565b6101b161028f366004615076565b6113b1565b6102e76102a2366004615134565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b039091166020830152016101da565b6101b161031a36600461517c565b6116ff565b6004546101c6906001600160a01b031681565b600b546101c6906001600160a01b031681565b6001546101c6906001600160a01b031681565b6101b1610366366004614f8d565b611715565b61020560095481565b61020560075481565b6101b161038b366004614f8d565b611a1d565b6101b161039e3660046151b2565b6121df565b6101b16122e8565b6008546103bd90610100900460ff1681565b60405190151581526020016101da565b61042d6103db366004615134565b600a60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff958616815293851660208501529184169183019190915290911660608201526080016101da565b6101b161233e565b6008546103bd9060ff1681565b6101b1610480366004614fe7565b61239e565b6101b1610493366004614f8d565b612403565b6101b16104a6366004615265565b612b71565b61020560065481565b6003546101c6906001600160a01b031681565b6104cf612c03565b828181146104f057604051635863f78960e01b815260040160405180910390fd5b60005b8181101561053d5761053586868381811061051057610510615291565b9050602002013585858481811061052957610529615291565b90506020020135612cad565b6001016104f3565b505050505050565b61054d612cfe565b80600d600061055f6020860186615015565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092528120906105a460808601606087016152a7565b60018111156105b5576105b56152c2565b60018111156105c6576105c66152c2565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b610608612d51565b610610612da4565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906152e3565b90506000604051806080016040528083604001516001600160a01b0316815260200183606001518152602001836080015181526020018360a0015160038111156106d2576106d26152c2565b815250905060006106f0836040015184606001518560800151612dcd565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061535b565b9050600085606001516000146107925760e08301511561078b576000610795565b6009610795565b60025b9050600081600b8111156107ab576107ab6152c2565b0361109a5760006107c9846000015185602001518660400151612e5a565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f919061535b565b9050610839614c71565b6402540be4008660e0015184602001518860600151610858919061538e565b610862919061538e565b61086c91906153bb565b6020820181905260e0870151610881916153bb565b815260028860a00151600381111561089b5761089b6152c2565b036109b557600b546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a9161096e919060040181516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af91906153cf565b60a08201525b60008860a0015160038111156109cd576109cd6152c2565b14610a045760018860a0015160038111156109ea576109ea6152c2565b146109f9578060a00151610a0b565b856101200151610a0b565b8561010001515b6080820181905215801590610a28575080608001518960a0015111155b8015610a3c57508060800151896080015110155b158015610140830152610b2d5760028860a001516003811115610a6157610a616152c2565b14610b09576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610aa091815260200190565b602060405180830381865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae191906153cf565b8360200151610af0919061538e565b610afa91906153bb565b610b0491906153bb565b610b23565b8051606490610b1990600561538e565b610b2391906153bb565b60e0820152610d0e565b6060890151608082015260028860a001516003811115610b4f57610b4f6152c2565b14610cbc5760008860a001516003811115610b6c57610b6c6152c2565b148015610b7e57506000866101000151115b8015610bae57508560c00151610ba05785610100015189606001511115610bae565b856101000151896060015110155b80610c0e575060018860a001516003811115610bcc57610bcc6152c2565b148015610bde57506000866101200151115b8015610c0e57508560c00151610c005785610120015189606001511015610c0e565b856101200151896060015111155b610c19576000610d08565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610c5391815260200190565b602060405180830381865afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9491906153cf565b8360200151610ca3919061538e565b610cad91906153bb565b610cb791906153bb565b610d08565b8560c00151610cd6578060a0015189606001511015610ce3565b8060a00151896060015111155b610cee576000610d08565b8051606490610cfe90600561538e565b610d0891906153bb565b60e08201525b60e081015115610d1f576000610d22565b600b5b9350600084600b811115610d3857610d386152c2565b0361109657610d598660a0015182608001518860c001518960e00151612f0f565b816060018181525050846001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc691906153cf565b816040018181525050610ec586600083606001518460000151876040015160026003811115610df757610df76152c2565b8e60a001516003811115610e0d57610e0d6152c2565b14610eb5576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b8152600401610e4c91815260200190565b602060405180830381865afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d91906153cf565b8960200151610e9c919061538e565b610ea691906153bb565b610eb091906153bb565b610ebb565b8660e001515b8760e00151612f9e565b60c0820152604081015160e0820151610ee4906402540be4009061538e565b610eee91906153bb565b61010082018190526001546040808401519051630891674d60e31b81526001600160a01b039092169263448b3a6892610f2c928c9291600401615433565b600060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b505060005460208b01516101008501516040516339caebcf60e11b815260048101929092526024820152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015610fba57600080fd5b505af1158015610fce573d6000803e3d6000fd5b5050505085600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c58260e0015160405161101591815260200190565b60405180910390a287600001516001600160a01b031689600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408a60800151898c60a0015186608001516000886000015189606001518a60c001518b610140015160405161108d999897969594939291906154c6565b60405180910390a35b5050505b600081600b8111156110ae576110ae6152c2565b14611101578451865160a08701516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3916110f8918690615533565b60405180910390a35b60015460405163bf654d2b60e01b81526001600160a01b039091169063bf654d2b9061113190879060040161554e565b600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b5050600054885160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb91506024015b600060405180830381600087803b1580156111b257600080fd5b505af11580156111c6573d6000803e3d6000fd5b50505050505050505050565b600054600290610100900460ff161580156111f4575060005460ff8083169116105b6112195760405162461bcd60e51b81526004016112109061555c565b60405180910390fd5b6000805461ffff191660ff8316176101001790556001600160a01b03821661125457604051635863f78960e01b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0384161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060006112c061343b565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132191906153cf565b90506000816001600160401b0381111561133d5761133d614e35565b604051908082528060200260200182016040528015611366578160200160208202803683370190505b50905060005b828110156113aa576000818152600c6020526040902054825183908390811061139757611397615291565b602090810291909101015260010161136c565b5092915050565b600054610100900460ff16158080156113d15750600054600160ff909116105b806113eb5750303b1580156113eb575060005460ff166001145b6114075760405162461bcd60e51b81526004016112109061555c565b6000805460ff19166001179055801561142a576000805461ff0019166101001790555b6001600160a01b038b16158061144757506001600160a01b038a16155b8061145957506001600160a01b038916155b8061146b57506001600160a01b038816155b8061147d57506001600160a01b038716155b8061148f57506001600160a01b038616155b806114af5750826114a085876155aa565b6114aa91906155aa565b606414155b806114ba5750600582115b156114d857604051635863f78960e01b815260040160405180910390fd5b600080546001600160a01b03808e166201000090810262010000600160b01b031990931692909217808455600180548f84166001600160a01b031991821617909155600280548f8516908316179055600380548e8516908316179055600480548d8516921691909117815560058a9055600689905560078890556009879055604080516315ab88c960e31b81529051949092049092169263ad5c4648928281019260209291908290030181865afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb919061535b565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b3936115f3939092169160001991016155bd565b6020604051808303816000875af1158015611612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163691906155e6565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390611667908a90600019906004016155bd565b6020604051808303816000875af1158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa91906155e6565b505080156116f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611707612c03565b6117118282612cad565b5050565b61171d612d51565b611725612da4565b60006117348260000151613519565b90508060200151600003611746575050565b60008160000151905060008060006117e260405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e00151815260200187606001518152602001866101000151815260200186610120015181525061359a565b60a0870182905291945092509050600081600b811115611804576118046152c2565b036118925760008061181a866105dc600061387f565b9150915087600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978360018560a00151896402540be400878960600151611863919061538e565b61186d91906153bb565b6000806040516118839796959493929190615601565b60405180910390a250506119da565b60008060029054906101000a90046001600160a01b03166001600160a01b031663cfbacc1486602001518760e0015188608001516118d0919061538e565b6001806040518563ffffffff1660e01b81526004016118f29493929190615646565b6020604051808303816000875af1158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906153cf565b9050611954856000015182876080015161194f9190615665565b6143d3565b84600001516001600160a01b0316600080516020615a618339815191528260405161198191815260200190565b60405180910390a2846020015185600001516001600160a01b031688600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c3269856040516119d09190615678565b60405180910390a4505b6000548651604051630195728b60e71b8152600481019190915260016024820152620100009091046001600160a01b03169063cab9458090604401611198565b50565b611a25612d51565b611a2d612da4565b6000611a3c8260000151613519565b90508060200151600003611a4e575050565b805180516020820151604090920151600092611a6a9291612dcd565b905060008160e00151600014611a9257602084015115611a8b576000611a95565b6002611a95565b60095b9050600981600b811115611aab57611aab6152c2565b146120f8576000611ac9836000015184602001518560400151612e5a565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b43919061535b565b9050611b4d614c71565b6402540be4008560e0015184602001518760600151611b6c919061538e565b611b76919061538e565b611b8091906153bb565b816020018181525050816001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed91906153cf565b6040820152600084600b811115611c0657611c066152c2565b03611ebf57611c278560a0015188602001518760c001518860e00151612f0f565b606082015260e08501516020820151611c4091906153bb565b816000018181525050611e618560018360600151846000015187604001516402540be4006064896001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc8919061535b565b6001600160a01b031663836a341a8e602001516040518263ffffffff1660e01b8152600401611cf991815260200190565b602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906153cf565b8960200151611d49919061538e565b611d5391906153bb565b611d5d91906153bb565b6402540be40060648a6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc7919061535b565b6001600160a01b0316639c8dd2fa8f602001516040518263ffffffff1660e01b8152600401611df891815260200190565b602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906153cf565b8a60200151611e48919061538e565b611e5291906153bb565b611e5c91906153bb565b612f9e565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099794611eb2948c9460009491938593919291615601565b60405180910390a26120f4565b6000856080015111611f91576040810151600054602087810151908401516402540be40093926201000090046001600160a01b03169163cfbacc14918490611f0890879061538e565b611f1291906153bb565b600060016040518563ffffffff1660e01b8152600401611f359493929190615646565b6020604051808303816000875af1158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906153cf565b611f82919061538e565b611f8c91906153bb565b612018565b600054602086810151908301516040516333eeb30560e21b8152620100009093046001600160a01b03169263cfbacc1492611fd59290916001908190600401615646565b6020604051808303816000875af1158015611ff4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201891906153cf565b60e08201819052602084015190612035906402540be4009061538e565b61203f91906153bb565b856060018181516120509190615665565b905250600054604051631a97b52160e31b8152620100009091046001600160a01b03169063d4bda90890612088908890600401615686565b600060405180830381600087803b1580156120a257600080fd5b505af11580156120b6573d6000803e3d6000fd5b5050505084600001516001600160a01b0316600080516020615a618339815191528260e001516040516120eb91815260200190565b60405180910390a25b5050505b600081600b81111561210c5761210c6152c2565b1461216b578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c9161216291908790615695565b60405180910390a45b600080548551604051630195728b60e71b8152600481019190915260248101929092526201000090046001600160a01b03169063cab9458090604401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b5050505050505050565b6121e7612cfe565b80600a60006121f96020860186615015565b6001600160a01b0316815260208082019290925260409081016000908120868401358252835281812086830135825290925281209061223e60808601606087016152a7565b600181111561224f5761224f6152c2565b6001811115612260576122606152c2565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b199482166401000000000267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b6122f0614442565b6008805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b612346614442565b6008805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936123349390049091161515815260200190565b6123a6614442565b60058111156123c857604051635863f78960e01b815260040160405180910390fd5b60098190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b61240b612d51565b612413612da4565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906152e3565b60008054604083810151606085015160808601519251636e6f99cd60e11b81529596509394620100009093046001600160a01b03169363dcdf339a936124d293906004016156a9565b602060405180830381865afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251391906155e6565b1561251f576000612522565b60095b9050600081600b811115612538576125386152c2565b036129e25760008054604084810151606086015160808701519251632e21e28b60e21b8152620100009094046001600160a01b03169363b8878a2c936125829392916004016156a9565b6101a060405180830381865afa1580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c491906156ca565b600154604080860151606087015160808801519251636a6f32f560e11b81529495506000946001600160a01b039094169363d4de65ea936126099392916004016156a9565b602060405180830381865afa158015612626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264a919061577d565b905081610140015185608001511015801561266e57508161014001518560a0015111155b61267957600b61267c565b60005b925060008060006127906040518061018001604052806000600b8111156126a5576126a56152c2565b89600b8111156126b7576126b76152c2565b146126c6578a606001516126cd565b8761014001515b81526101408881015160208084019190915260608d810151604080860191909152808f0151828601526080808d01519086015260a0808d0151151590860152828c01805160c080880191909152928d015160e080880191909152928d0151610100808801919091528d516001600160a01b03166000908152600d865283812092518152918552828220838f01518352855282822060018352909452205464ffffffffff166101208501528a0151918301919091528801516101609091015261359a565b9194509250905060008087600b8111156127ac576127ac6152c2565b149050801581612830575061014086015115806127da575060028560028111156127d8576127d86152c2565b145b612809578560a001516127f857856101400151896060015110612830565b856101400151896060015111612830565b8560a0015161282357856101400151896060015111612830565b8561014001518960600151105b61283a578161283d565b600b5b9650600087600b811115612853576128536152c2565b036129db576000806128dd6040518061014001604052808a600001516001600160a01b031681526020018a60200151815260200160008152602001600081526020018a6060015181526020018781526020018a60a00151151581526020018a60c0015181526020018a60e0015181526020018a61010001518152508b602001518c6080015161387f565b6000548a5160208c01516040808e0151905163b4b0f56760e01b8152959750939550620100009092046001600160a01b03169363b4b0f5679361292393916004016156a9565b600060405180830381600087803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b5050505089600001516001600160a01b03168b600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408c608001518560038760a001518c6402540be400898b606001516129ad919061538e565b6129b791906153bb565b6000808d6040516129d0999897969594939291906154c6565b60405180910390a350505b5050505050505b600081600b8111156129f6576129f66152c2565b14612a495781600001516001600160a01b031683600001517fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3600384604051612a40929190615533565b60405180910390a35b600160009054906101000a90046001600160a01b03166001600160a01b031663bf654d2b604051806080016040528085604001516001600160a01b0316815260200185606001518152602001856080015181526020018560a001516003811115612ab557612ab56152c2565b8152506040518263ffffffff1660e01b8152600401612ad4919061554e565b600060405180830381600087803b158015612aee57600080fd5b505af1158015612b02573d6000803e3d6000fd5b5050600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb9150602401600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b50505050505050565b612b79614442565b80612b8483856155aa565b612b8e91906155aa565b606414612bae57604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7a919061535b565b6001600160a01b0316336001600160a01b031614612cab57604051631dd2188d60e31b815260040160405180910390fd5b565b6000828152600c6020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab6790612cf29084815260200190565b60405180910390a25050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b600854610100900460ff1615612cab57604051631dd2188d60e31b815260040160405180910390fd5b612dd5614ccd565b6000546040516351d407ff60e11b8152620100009091046001600160a01b03169063a3a80ffe90612e0e908790879087906004016156a9565b61014060405180830381865afa158015612e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e509190615831565b90505b9392505050565b612e956040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051638c8ff1d560e01b8152620100009091046001600160a01b031690638c8ff1d590612ece908790879087906004016156a9565b60c060405180830381865afa158015612eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e50919061584e565b600080612f236402540be4006103846158a0565b905060008611612f34576000612f83565b85836402540be40086612f5057612f4b888a6158d0565b612f5a565b612f5a89896158d0565b612f659060646158a0565b612f6f91906158a0565b612f7991906158a0565b612f8391906158f0565b9150808213612f925781612f94565b805b9695505050505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613018919061535b565b905061302f89878961302a87896155aa565b614495565b50600b548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb9461307b94939290918c9160009160040161591e565b600060405180830381600087803b15801561309557600080fd5b505af11580156130a9573d6000803e3d6000fd5b505050506130b561343b565b6001600160a01b03166320f0fc5e8a602001518b60e00151886130d891906153bb565b8c60c0015160006040518563ffffffff1660e01b81526004016130fe9493929190615646565b600060405180830381600087803b15801561311857600080fd5b505af115801561312c573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b9945061316f936004016156a9565b600060405180830381600087803b15801561318957600080fd5b505af115801561319d573d6000803e3d6000fd5b505050506080890151156133c9576131b3614c71565b6064600554866131c3919061538e565b6131cd91906153bb565b61010082018190526131e09030906143d3565b61010081015160405163940a4e4560e01b815260048101919091526001600160a01b0383169063940a4e4590602401600060405180830381600087803b15801561322957600080fd5b505af115801561323d573d6000803e3d6000fd5b5050505089600001516001600160a01b03167fdcf58494e241dcd51ab230f840f36e4942d8ecfbf5291aaedc98a8f4e2e8e90782610100015160405161328591815260200190565b60405180910390a2886132b1576064600754866132a2919061538e565b6132ac91906153bb565b6132d5565b6064600754866132c1919061538e565b6132cb91906153bb565b6132d590856155aa565b61012082018190528a516132e8916145b8565b6000816101000151826101200151896133019190615665565b61330b9190615665565b9050808411156133a2576001600160a01b03831663e66a6e3b61332e8387615665565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561337757600080fd5b505af115801561338b573d6000803e3d6000fd5b5050505061339d8b60000151826143d3565b6133c2565b6133b66133af8583615665565b8c51614659565b8a516133c290856143d3565b505061342f565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b15801561341657600080fd5b505af115801561342a573d6000803e3d6000fd5b505050505b50979650505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561348f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b3919061535b565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613514919061535b565b905090565b613521614d2b565b60005460405163b66e6b0560e01b815260048101849052620100009091046001600160a01b03169063b66e6b05906024016101e060405180830381865afa158015613570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135949190615955565b92915050565b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f32936135d2939190614711565b8660c001518760a001518861010001518960e001516135f1919061538e565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015613640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366491906159e5565b610120860151919450925060009061368c576064856020015161368791906153bb565b6136bd565b6402540be400606486610120015187602001516136a9919061538e565b6136b391906153bb565b6136bd91906153bb565b60085490915060ff166138735760408501511561386c578460a001516136f4578085602001516136ed9190615665565b8310613707565b80856020015161370491906155aa565b83115b61386557600085610140015111801561373c57508460a001516137325784610140015183111561373c565b8461014001518310155b61385e57600085610160015111801561377157508460a0015161376757846101600151831015613771565b8461016001518311155b613857576137928560c001518660a001518760e00151886101000151614781565b1561385057600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380e91906153cf565b61010086015161381e908661538e565b11613849576138368560c0015186610100015161492a565b15613842576000613876565b6008613876565b6007613876565b6006613876565b6005613876565b6004613876565b6003613876565b6002613876565b60015b93959294505050565b613887614ccd565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613901919061535b565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015613943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613967919061535b565b9050613971614c71565b8760e001518860800151613985919061538e565b816020018181525050826001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af11580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f291906153cf565b60408281019190915260035489519151631862c18d60e31b81526001600160a01b0392831660048201526000929091169063c3160c6890602401602060405180830381865afa158015613a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6d919061535b565b6001600160a01b031614613cb157600354885160405163201ad16d60e01b81526001600160a01b0391821660048201526402540be40092606492169063201ad16d90602401602060405180830381865afa158015613acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af391906153cf565b613b036402540be400606461538e565b613b0d9190615665565b8360200151613b1c919061538e565b613b2691906153bb565b613b3091906153bb565b81526003548851602080840151908b0151604051638251135b60e01b81526001600160a01b039485169463e78c6fd294939290881691638251135b91613b7c9160040190815260200190565b602060405180830381865afa158015613b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbd91906153cf565b60408087015190516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016020604051808303816000875af1158015613c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3e91906153cf565b60e082018190528851613c519190614659565b8060e0015188608001818151613c679190615665565b905250875160e08201516040519081526001600160a01b03909116907f0f5273269f52308b9c40fafda3ca13cc42f715fcd795365e87f351f59e2493139060200160405180910390a25b60005460208901518251620100009092046001600160a01b03169163cfbacc149190613ce1578360200151613ce4565b83515b6001806040518563ffffffff1660e01b8152600401613d069493929190615646565b6020604051808303816000875af1158015613d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4991906153cf565b6101008201819052608089018051613d62908390615665565b90525087516101008201516040519081526001600160a01b0390911690600080516020615a618339815191529060200160405180910390a26402540be4006064836001600160a01b0316639c8dd2fa8b602001516040518263ffffffff1660e01b8152600401613dd491815260200190565b602060405180830381865afa158015613df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1591906153cf565b8360200151613e24919061538e565b613e2e91906153bb565b613e3891906153bb565b6101008201819052608089018051613e51908390615665565b9052506105dc871015613ff057613e718161010001518960000151614659565b80604001516402540be400826101000151613e8c919061538e565b613e9691906153bb565b6101208201908152600154604080516080810182528b516001600160a01b0390811682526020808e0151908301528183018b9052600360608301529351828601519251630891674d60e31b8152949093169363448b3a6893613efc939091600401615433565b600060405180830381600087803b158015613f1657600080fd5b505af1158015613f2a573d6000803e3d6000fd5b50506000546101208401516040516339caebcf60e11b8152600481018c90526024810191909152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015613f8757600080fd5b505af1158015613f9b573d6000803e3d6000fd5b5050505087600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c5826101000151604051613fe391815260200190565b60405180910390a2614003565b61400388600001518261010001516145b8565b600054885160208a015160405163292c161760e01b8152620100009093046001600160a01b03169263292c16179261403f9290916004016155bd565b602060405180830381865afa15801561405c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408091906153cf565b6040808a019190915281015160808901516140a1906402540be4009061538e565b6140ab91906153bb565b8860600181815250506140d18860a001518960e001518a61010001518b60c001516149c9565b886101000181815250506140f88860a001518960e001518a61012001518b60c00151614a5c565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0394851660048201526024810193909352604483015215156064820152911690630e6bc39a90608401600060405180830381600087803b15801561416957600080fd5b505af115801561417d573d6000803e3d6000fd5b505050602089015160808a015160c08b01516040516310787e2f60e11b81526001600160a01b03871694506320f0fc5e936141c19390929091600190600401615646565b600060405180830381600087803b1580156141db57600080fd5b505af11580156141ef573d6000803e3d6000fd5b5050600b548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb955092939192909161422e919061538e565b60018e60c001516040518763ffffffff1660e01b81526004016142569695949392919061591e565b600060405180830381600087803b15801561427057600080fd5b505af1158015614284573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d608001516142dd919061538e565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401614314929190615a09565b600060405180830381600087803b15801561432e57600080fd5b505af1158015614342573d6000803e3d6000fd5b505089516001600160a01b03166000908152600a60209081526040808320828e015184528252808320818e01518452825280832083805290915281209250905061438a614ad6565b825467ffffffffffffffff191663ffffffff9190911690811764010000000082021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064015b600060405180830381600087803b15801561442e57600080fd5b505af115801561053d573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b60008060006144a5878787614b57565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015614540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061456491906153cf565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b6145c230826143d3565b6004805460405163b79b23dd60e01b81529182018390526001600160a01b03169063b79b23dd90602401600060405180830381600087803b15801561460657600080fd5b505af115801561461a573d6000803e3d6000fd5b50505050816001600160a01b03167fd1e388cc27c5125a80cf538c12b26dc5a784071d324a81a736e4d17f238588e482604051612cf291815260200190565b61466330836143d3565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146da919061535b565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b90604401614414565b6000806402540be400606480614727878961538e565b61473191906153bb565b61473b9088615665565b614745908961538e565b61474f91906153bb565b61475991906153bb565b90508261476f5761476a8187615665565b612f94565b612f9481876155aa565b949350505050565b60008061478e838561538e565b600b54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa1580156147d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147fc91906153cf565b61480a906305f5e10061538e565b60005482906201000090046001600160a01b03166377a9fdcf8989614830576001614833565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015614877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061489b91906153cf565b6148a591906155aa565b11158015612f945750600b5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015614906573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9491906155e6565b6000828152600c602052604081205480156149485780831115614779565b61495061343b565b6001600160a01b031663281b693c856040518263ffffffff1660e01b815260040161497d91815260200190565b602060405180830381865afa15801561499a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149be91906153cf565b831115949350505050565b60008215806149f257506149e46402540be4006103846158a0565b6149f086858588612f0f565b145b15614a53576000606485614a086103848961538e565b614a1291906153bb565b614a1c91906153bb565b905082614a415785811115614a32576000614a4b565b614a3c8187615665565b614a4b565b614a4b81876155aa565b915050614779565b50909392505050565b60008083118015614a925750614a786402540be400604b6158a0565b614a84906000196158a0565b614a9086858588612f0f565b125b15614a53576000606485614aa7604b8961538e565b614ab191906153bb565b614abb91906153bb565b905082614acc57614a3c81876155aa565b614a4b8187615665565b600061a4b1461480614aea575062066eed46145b15614b525760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351491906153cf565b504390565b600b546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa158015614c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c3591906153cf565b9050836402540be400614c4983606461538e565b614c53919061538e565b614c5d91906153bb565b614c6790846158d0565b9150935093915050565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060c00160405280614d3e614ccd565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f840112614d7957600080fd5b5081356001600160401b03811115614d9057600080fd5b6020830191508360208260051b8501011115614dab57600080fd5b9250929050565b60008060008060408587031215614dc857600080fd5b84356001600160401b0380821115614ddf57600080fd5b614deb88838901614d67565b90965094506020870135915080821115614e0457600080fd5b50614e1187828801614d67565b95989497509550505050565b600060808284031215614e2f57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101a081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60008082840360c0811215614ef757600080fd5b614f018585614e1d565b92506040607f1982011215614f1557600080fd5b50604051604081018181106001600160401b0382111715614f4657634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff81168114614f6157600080fd5b815260a08401356001600160d81b0381168114614f7d57600080fd5b6020820152919491935090915050565b600060c08284031215614f9f57600080fd5b614fa7614e4b565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b600060208284031215614ff957600080fd5b5035919050565b6001600160a01b0381168114611a1a57600080fd5b60006020828403121561502757600080fd5b8135612e5381615000565b6020808252825182820181905260009190848201906040850190845b8181101561506a5783518352928401929184019160010161504e565b50909695505050505050565b6000806000806000806000806000806101408b8d03121561509657600080fd5b8a356150a181615000565b995060208b01356150b181615000565b985060408b01356150c181615000565b975060608b01356150d181615000565b965060808b01356150e181615000565b955060a08b01356150f181615000565b999c989b5096999598949794965050505060c08301359260e08101359261010082013592506101209091013590565b80356002811061512f57600080fd5b919050565b6000806000806080858703121561514a57600080fd5b843561515581615000565b9350602085013592506040850135915061517160608601615120565b905092959194509250565b6000806040838503121561518f57600080fd5b50508035926020909101359150565b803563ffffffff8116811461512f57600080fd5b6000808284036101008112156151c757600080fd5b6151d18585614e1d565b92506080607f19820112156151e557600080fd5b50604051608081018181106001600160401b038211171561521657634e487b7160e01b600052604160045260246000fd5b6040526152256080850161519e565b815261523360a0850161519e565b602082015261524460c0850161519e565b604082015261525560e0850161519e565b6060820152809150509250929050565b60008060006060848603121561527a57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156152b957600080fd5b612e5382615120565b634e487b7160e01b600052602160045260246000fd5b805161512f81615000565b600060c082840312156152f557600080fd5b6152fd614e4b565b825161530881615000565b815260208381015190820152604083015161532281615000565b80604083015250606083015160608201526080830151608082015260a08301516004811061534f57600080fd5b60a08201529392505050565b60006020828403121561536d57600080fd5b8151612e5381615000565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761359457613594615378565b634e487b7160e01b600052601260045260246000fd5b6000826153ca576153ca6153a5565b500490565b6000602082840312156153e157600080fd5b5051919050565b600481106153f8576153f86152c2565b9052565b60018060a01b0381511682526020810151602083015260408101516040830152606081015161542e60608401826153e8565b505050565b60c0810161544182866153fc565b608082019390935260a00152919050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c08101516154a460c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b89815261024081016154db602083018b615452565b6154e961016083018a6153e8565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b600c81106153f8576153f86152c2565b6040810161554182856153e8565b612e536020830184615523565b6080810161359482846153fc565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8082018082111561359457613594615378565b6001600160a01b03929092168252602082015260400190565b8051801515811461512f57600080fd5b6000602082840312156155f857600080fd5b612e53826155d6565b6102008101615610828a615452565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b9384526020840192909252151560408301521515606082015260800190565b8181038181111561359457613594615378565b602081016135948284615523565b61014081016135948284615452565b82815260408101612e536020830184615523565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101a082840312156156dd57600080fd5b6156e5614e81565b6156ee836152d8565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015261572460a084016155d6565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60006020828403121561578f57600080fd5b815160038110612e5357600080fd5b600061014082840312156157b157600080fd5b6157b9614eb2565b90506157c4826152d8565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261580460c083016155d6565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b6000610140828403121561584457600080fd5b612e53838361579e565b600060c0828403121561586057600080fd5b615868614e4b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015261534f60a084016155d6565b80820260008212600160ff1b841416156158bc576158bc615378565b818105831482151761359457613594615378565b81810360008312801583831316838312821617156113aa576113aa615378565b6000826158ff576158ff6153a5565b600160ff1b82146000198414161561591957615919615378565b500590565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b60006101e0828403121561596857600080fd5b60405160c081018181106001600160401b038211171561599857634e487b7160e01b600052604160045260246000fd5b6040526159a5848461579e565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b600080604083850312156159f857600080fd5b505080516020909101519092909150565b6102008101615a188285615452565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e0830152939250505056fe4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb25408406a2646970667358221220c9f69792687243672ebe5f7b249de4ee8845653f5999ad809ecd094d0c55298764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101995760003560e01c806361ba6c3d116100e45780639bd24d83116100925780639bd24d83146103cd578063ae8421e11461045d578063b187bd2614610465578063b3f2f4d614610472578063b47ee40814610485578063c68078b914610498578063c68365df146104ab578063d3dc7539146104b457600080fd5b806361ba6c3d14610358578063676c51641461036b5780637bb6c11c146103745780637d490caf1461037d5780637e09ae8a146103905780638456cb59146103a35780638f062227146103ab57600080fd5b806329b6eca91161014c57806329b6eca91461025957806337edb1381461026c5780633986de6a1461028157806346f93a6314610294578063488291221461030c5780634cf088d91461031f578063531cc965146103325780635ad9f9931461034557600080fd5b8062e0fa891461019e5780631346b0ff146101b357806316fff074146101e3578063178623a7146101fc57806321c861961461021357806323f7197b14610226578063281b693c14610239575b600080fd5b6101b16101ac366004614db2565b6104c7565b005b6002546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b61020560055481565b6040519081526020016101da565b6101b1610221366004614ee3565b610545565b6101b1610234366004614f8d565b610600565b610205610247366004614fe7565b600c6020526000908152604090205481565b6101b1610267366004615015565b6111d2565b6102746112b4565b6040516101da9190615032565b6101b161028f366004615076565b6113b1565b6102e76102a2366004615134565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b039091166020830152016101da565b6101b161031a36600461517c565b6116ff565b6004546101c6906001600160a01b031681565b600b546101c6906001600160a01b031681565b6001546101c6906001600160a01b031681565b6101b1610366366004614f8d565b611715565b61020560095481565b61020560075481565b6101b161038b366004614f8d565b611a1d565b6101b161039e3660046151b2565b6121df565b6101b16122e8565b6008546103bd90610100900460ff1681565b60405190151581526020016101da565b61042d6103db366004615134565b600a60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff958616815293851660208501529184169183019190915290911660608201526080016101da565b6101b161233e565b6008546103bd9060ff1681565b6101b1610480366004614fe7565b61239e565b6101b1610493366004614f8d565b612403565b6101b16104a6366004615265565b612b71565b61020560065481565b6003546101c6906001600160a01b031681565b6104cf612c03565b828181146104f057604051635863f78960e01b815260040160405180910390fd5b60005b8181101561053d5761053586868381811061051057610510615291565b9050602002013585858481811061052957610529615291565b90506020020135612cad565b6001016104f3565b505050505050565b61054d612cfe565b80600d600061055f6020860186615015565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092528120906105a460808601606087016152a7565b60018111156105b5576105b56152c2565b60018111156105c6576105c66152c2565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b610608612d51565b610610612da4565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015610662573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068691906152e3565b90506000604051806080016040528083604001516001600160a01b0316815260200183606001518152602001836080015181526020018360a0015160038111156106d2576106d26152c2565b815250905060006106f0836040015184606001518560800151612dcd565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061535b565b9050600085606001516000146107925760e08301511561078b576000610795565b6009610795565b60025b9050600081600b8111156107ab576107ab6152c2565b0361109a5760006107c9846000015185602001518660400151612e5a565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561080b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082f919061535b565b9050610839614c71565b6402540be4008660e0015184602001518860600151610858919061538e565b610862919061538e565b61086c91906153bb565b6020820181905260e0870151610881916153bb565b815260028860a00151600381111561089b5761089b6152c2565b036109b557600b546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a9161096e919060040181516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602060405180830381865afa15801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af91906153cf565b60a08201525b60008860a0015160038111156109cd576109cd6152c2565b14610a045760018860a0015160038111156109ea576109ea6152c2565b146109f9578060a00151610a0b565b856101200151610a0b565b8561010001515b6080820181905215801590610a28575080608001518960a0015111155b8015610a3c57508060800151896080015110155b158015610140830152610b2d5760028860a001516003811115610a6157610a616152c2565b14610b09576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610aa091815260200190565b602060405180830381865afa158015610abd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae191906153cf565b8360200151610af0919061538e565b610afa91906153bb565b610b0491906153bb565b610b23565b8051606490610b1990600561538e565b610b2391906153bb565b60e0820152610d0e565b6060890151608082015260028860a001516003811115610b4f57610b4f6152c2565b14610cbc5760008860a001516003811115610b6c57610b6c6152c2565b148015610b7e57506000866101000151115b8015610bae57508560c00151610ba05785610100015189606001511115610bae565b856101000151896060015110155b80610c0e575060018860a001516003811115610bcc57610bcc6152c2565b148015610bde57506000866101200151115b8015610c0e57508560c00151610c005785610120015189606001511015610c0e565b856101200151896060015111155b610c19576000610d08565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610c5391815260200190565b602060405180830381865afa158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9491906153cf565b8360200151610ca3919061538e565b610cad91906153bb565b610cb791906153bb565b610d08565b8560c00151610cd6578060a0015189606001511015610ce3565b8060a00151896060015111155b610cee576000610d08565b8051606490610cfe90600561538e565b610d0891906153bb565b60e08201525b60e081015115610d1f576000610d22565b600b5b9350600084600b811115610d3857610d386152c2565b0361109657610d598660a0015182608001518860c001518960e00151612f0f565b816060018181525050846001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610da2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc691906153cf565b816040018181525050610ec586600083606001518460000151876040015160026003811115610df757610df76152c2565b8e60a001516003811115610e0d57610e0d6152c2565b14610eb5576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b8152600401610e4c91815260200190565b602060405180830381865afa158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d91906153cf565b8960200151610e9c919061538e565b610ea691906153bb565b610eb091906153bb565b610ebb565b8660e001515b8760e00151612f9e565b60c0820152604081015160e0820151610ee4906402540be4009061538e565b610eee91906153bb565b61010082018190526001546040808401519051630891674d60e31b81526001600160a01b039092169263448b3a6892610f2c928c9291600401615433565b600060405180830381600087803b158015610f4657600080fd5b505af1158015610f5a573d6000803e3d6000fd5b505060005460208b01516101008501516040516339caebcf60e11b815260048101929092526024820152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015610fba57600080fd5b505af1158015610fce573d6000803e3d6000fd5b5050505085600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c58260e0015160405161101591815260200190565b60405180910390a287600001516001600160a01b031689600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408a60800151898c60a0015186608001516000886000015189606001518a60c001518b610140015160405161108d999897969594939291906154c6565b60405180910390a35b5050505b600081600b8111156110ae576110ae6152c2565b14611101578451865160a08701516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3916110f8918690615533565b60405180910390a35b60015460405163bf654d2b60e01b81526001600160a01b039091169063bf654d2b9061113190879060040161554e565b600060405180830381600087803b15801561114b57600080fd5b505af115801561115f573d6000803e3d6000fd5b5050600054885160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb91506024015b600060405180830381600087803b1580156111b257600080fd5b505af11580156111c6573d6000803e3d6000fd5b50505050505050505050565b600054600290610100900460ff161580156111f4575060005460ff8083169116105b6112195760405162461bcd60e51b81526004016112109061555c565b60405180910390fd5b6000805461ffff191660ff8316176101001790556001600160a01b03821661125457604051635863f78960e01b815260040160405180910390fd5b600b80546001600160a01b0319166001600160a01b0384161790556000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b606060006112c061343b565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132191906153cf565b90506000816001600160401b0381111561133d5761133d614e35565b604051908082528060200260200182016040528015611366578160200160208202803683370190505b50905060005b828110156113aa576000818152600c6020526040902054825183908390811061139757611397615291565b602090810291909101015260010161136c565b5092915050565b600054610100900460ff16158080156113d15750600054600160ff909116105b806113eb5750303b1580156113eb575060005460ff166001145b6114075760405162461bcd60e51b81526004016112109061555c565b6000805460ff19166001179055801561142a576000805461ff0019166101001790555b6001600160a01b038b16158061144757506001600160a01b038a16155b8061145957506001600160a01b038916155b8061146b57506001600160a01b038816155b8061147d57506001600160a01b038716155b8061148f57506001600160a01b038616155b806114af5750826114a085876155aa565b6114aa91906155aa565b606414155b806114ba5750600582115b156114d857604051635863f78960e01b815260040160405180910390fd5b600080546001600160a01b03808e166201000090810262010000600160b01b031990931692909217808455600180548f84166001600160a01b031991821617909155600280548f8516908316179055600380548e8516908316179055600480548d8516921691909117815560058a9055600689905560078890556009879055604080516315ab88c960e31b81529051949092049092169263ad5c4648928281019260209291908290030181865afa158015611597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bb919061535b565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b3936115f3939092169160001991016155bd565b6020604051808303816000875af1158015611612573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163691906155e6565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b390611667908a90600019906004016155bd565b6020604051808303816000875af1158015611686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116aa91906155e6565b505080156116f2576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050505050565b611707612c03565b6117118282612cad565b5050565b61171d612d51565b611725612da4565b60006117348260000151613519565b90508060200151600003611746575050565b60008160000151905060008060006117e260405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e00151815260200187606001518152602001866101000151815260200186610120015181525061359a565b60a0870182905291945092509050600081600b811115611804576118046152c2565b036118925760008061181a866105dc600061387f565b9150915087600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978360018560a00151896402540be400878960600151611863919061538e565b61186d91906153bb565b6000806040516118839796959493929190615601565b60405180910390a250506119da565b60008060029054906101000a90046001600160a01b03166001600160a01b031663cfbacc1486602001518760e0015188608001516118d0919061538e565b6001806040518563ffffffff1660e01b81526004016118f29493929190615646565b6020604051808303816000875af1158015611911573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061193591906153cf565b9050611954856000015182876080015161194f9190615665565b6143d3565b84600001516001600160a01b0316600080516020615a618339815191528260405161198191815260200190565b60405180910390a2846020015185600001516001600160a01b031688600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c3269856040516119d09190615678565b60405180910390a4505b6000548651604051630195728b60e71b8152600481019190915260016024820152620100009091046001600160a01b03169063cab9458090604401611198565b50565b611a25612d51565b611a2d612da4565b6000611a3c8260000151613519565b90508060200151600003611a4e575050565b805180516020820151604090920151600092611a6a9291612dcd565b905060008160e00151600014611a9257602084015115611a8b576000611a95565b6002611a95565b60095b9050600981600b811115611aab57611aab6152c2565b146120f8576000611ac9836000015184602001518560400151612e5a565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b43919061535b565b9050611b4d614c71565b6402540be4008560e0015184602001518760600151611b6c919061538e565b611b76919061538e565b611b8091906153bb565b816020018181525050816001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed91906153cf565b6040820152600084600b811115611c0657611c066152c2565b03611ebf57611c278560a0015188602001518760c001518860e00151612f0f565b606082015260e08501516020820151611c4091906153bb565b816000018181525050611e618560018360600151846000015187604001516402540be4006064896001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc8919061535b565b6001600160a01b031663836a341a8e602001516040518263ffffffff1660e01b8152600401611cf991815260200190565b602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906153cf565b8960200151611d49919061538e565b611d5391906153bb565b611d5d91906153bb565b6402540be40060648a6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc7919061535b565b6001600160a01b0316639c8dd2fa8f602001516040518263ffffffff1660e01b8152600401611df891815260200190565b602060405180830381865afa158015611e15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3991906153cf565b8a60200151611e48919061538e565b611e5291906153bb565b611e5c91906153bb565b612f9e565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c333099794611eb2948c9460009491938593919291615601565b60405180910390a26120f4565b6000856080015111611f91576040810151600054602087810151908401516402540be40093926201000090046001600160a01b03169163cfbacc14918490611f0890879061538e565b611f1291906153bb565b600060016040518563ffffffff1660e01b8152600401611f359493929190615646565b6020604051808303816000875af1158015611f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7891906153cf565b611f82919061538e565b611f8c91906153bb565b612018565b600054602086810151908301516040516333eeb30560e21b8152620100009093046001600160a01b03169263cfbacc1492611fd59290916001908190600401615646565b6020604051808303816000875af1158015611ff4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201891906153cf565b60e08201819052602084015190612035906402540be4009061538e565b61203f91906153bb565b856060018181516120509190615665565b905250600054604051631a97b52160e31b8152620100009091046001600160a01b03169063d4bda90890612088908890600401615686565b600060405180830381600087803b1580156120a257600080fd5b505af11580156120b6573d6000803e3d6000fd5b5050505084600001516001600160a01b0316600080516020615a618339815191528260e001516040516120eb91815260200190565b60405180910390a25b5050505b600081600b81111561210c5761210c6152c2565b1461216b578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c9161216291908790615695565b60405180910390a45b600080548551604051630195728b60e71b8152600481019190915260248101929092526201000090046001600160a01b03169063cab9458090604401600060405180830381600087803b1580156121c157600080fd5b505af11580156121d5573d6000803e3d6000fd5b5050505050505050565b6121e7612cfe565b80600a60006121f96020860186615015565b6001600160a01b0316815260208082019290925260409081016000908120868401358252835281812086830135825290925281209061223e60808601606087016152a7565b600181111561224f5761224f6152c2565b6001811115612260576122606152c2565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b199482166401000000000267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b6122f0614442565b6008805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b612346614442565b6008805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936123349390049091161515815260200190565b6123a6614442565b60058111156123c857604051635863f78960e01b815260040160405180910390fd5b60098190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b61240b612d51565b612413612da4565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015612465573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248991906152e3565b60008054604083810151606085015160808601519251636e6f99cd60e11b81529596509394620100009093046001600160a01b03169363dcdf339a936124d293906004016156a9565b602060405180830381865afa1580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251391906155e6565b1561251f576000612522565b60095b9050600081600b811115612538576125386152c2565b036129e25760008054604084810151606086015160808701519251632e21e28b60e21b8152620100009094046001600160a01b03169363b8878a2c936125829392916004016156a9565b6101a060405180830381865afa1580156125a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125c491906156ca565b600154604080860151606087015160808801519251636a6f32f560e11b81529495506000946001600160a01b039094169363d4de65ea936126099392916004016156a9565b602060405180830381865afa158015612626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061264a919061577d565b905081610140015185608001511015801561266e57508161014001518560a0015111155b61267957600b61267c565b60005b925060008060006127906040518061018001604052806000600b8111156126a5576126a56152c2565b89600b8111156126b7576126b76152c2565b146126c6578a606001516126cd565b8761014001515b81526101408881015160208084019190915260608d810151604080860191909152808f0151828601526080808d01519086015260a0808d0151151590860152828c01805160c080880191909152928d015160e080880191909152928d0151610100808801919091528d516001600160a01b03166000908152600d865283812092518152918552828220838f01518352855282822060018352909452205464ffffffffff166101208501528a0151918301919091528801516101609091015261359a565b9194509250905060008087600b8111156127ac576127ac6152c2565b149050801581612830575061014086015115806127da575060028560028111156127d8576127d86152c2565b145b612809578560a001516127f857856101400151896060015110612830565b856101400151896060015111612830565b8560a0015161282357856101400151896060015111612830565b8561014001518960600151105b61283a578161283d565b600b5b9650600087600b811115612853576128536152c2565b036129db576000806128dd6040518061014001604052808a600001516001600160a01b031681526020018a60200151815260200160008152602001600081526020018a6060015181526020018781526020018a60a00151151581526020018a60c0015181526020018a60e0015181526020018a61010001518152508b602001518c6080015161387f565b6000548a5160208c01516040808e0151905163b4b0f56760e01b8152959750939550620100009092046001600160a01b03169363b4b0f5679361292393916004016156a9565b600060405180830381600087803b15801561293d57600080fd5b505af1158015612951573d6000803e3d6000fd5b5050505089600001516001600160a01b03168b600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408c608001518560038760a001518c6402540be400898b606001516129ad919061538e565b6129b791906153bb565b6000808d6040516129d0999897969594939291906154c6565b60405180910390a350505b5050505050505b600081600b8111156129f6576129f66152c2565b14612a495781600001516001600160a01b031683600001517fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3600384604051612a40929190615533565b60405180910390a35b600160009054906101000a90046001600160a01b03166001600160a01b031663bf654d2b604051806080016040528085604001516001600160a01b0316815260200185606001518152602001856080015181526020018560a001516003811115612ab557612ab56152c2565b8152506040518263ffffffff1660e01b8152600401612ad4919061554e565b600060405180830381600087803b158015612aee57600080fd5b505af1158015612b02573d6000803e3d6000fd5b5050600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb9150602401600060405180830381600087803b158015612b5457600080fd5b505af1158015612b68573d6000803e3d6000fd5b50505050505050565b612b79614442565b80612b8483856155aa565b612b8e91906155aa565b606414612bae57604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7a919061535b565b6001600160a01b0316336001600160a01b031614612cab57604051631dd2188d60e31b815260040160405180910390fd5b565b6000828152600c6020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab6790612cf29084815260200190565b60405180910390a25050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b600854610100900460ff1615612cab57604051631dd2188d60e31b815260040160405180910390fd5b612dd5614ccd565b6000546040516351d407ff60e11b8152620100009091046001600160a01b03169063a3a80ffe90612e0e908790879087906004016156a9565b61014060405180830381865afa158015612e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e509190615831565b90505b9392505050565b612e956040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051638c8ff1d560e01b8152620100009091046001600160a01b031690638c8ff1d590612ece908790879087906004016156a9565b60c060405180830381865afa158015612eeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e50919061584e565b600080612f236402540be4006103846158a0565b905060008611612f34576000612f83565b85836402540be40086612f5057612f4b888a6158d0565b612f5a565b612f5a89896158d0565b612f659060646158a0565b612f6f91906158a0565b612f7991906158a0565b612f8391906158f0565b9150808213612f925781612f94565b805b9695505050505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612ff4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613018919061535b565b905061302f89878961302a87896155aa565b614495565b50600b548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb9461307b94939290918c9160009160040161591e565b600060405180830381600087803b15801561309557600080fd5b505af11580156130a9573d6000803e3d6000fd5b505050506130b561343b565b6001600160a01b03166320f0fc5e8a602001518b60e00151886130d891906153bb565b8c60c0015160006040518563ffffffff1660e01b81526004016130fe9493929190615646565b600060405180830381600087803b15801561311857600080fd5b505af115801561312c573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b9945061316f936004016156a9565b600060405180830381600087803b15801561318957600080fd5b505af115801561319d573d6000803e3d6000fd5b505050506080890151156133c9576131b3614c71565b6064600554866131c3919061538e565b6131cd91906153bb565b61010082018190526131e09030906143d3565b61010081015160405163940a4e4560e01b815260048101919091526001600160a01b0383169063940a4e4590602401600060405180830381600087803b15801561322957600080fd5b505af115801561323d573d6000803e3d6000fd5b5050505089600001516001600160a01b03167fdcf58494e241dcd51ab230f840f36e4942d8ecfbf5291aaedc98a8f4e2e8e90782610100015160405161328591815260200190565b60405180910390a2886132b1576064600754866132a2919061538e565b6132ac91906153bb565b6132d5565b6064600754866132c1919061538e565b6132cb91906153bb565b6132d590856155aa565b61012082018190528a516132e8916145b8565b6000816101000151826101200151896133019190615665565b61330b9190615665565b9050808411156133a2576001600160a01b03831663e66a6e3b61332e8387615665565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561337757600080fd5b505af115801561338b573d6000803e3d6000fd5b5050505061339d8b60000151826143d3565b6133c2565b6133b66133af8583615665565b8c51614659565b8a516133c290856143d3565b505061342f565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b15801561341657600080fd5b505af115801561342a573d6000803e3d6000fd5b505050505b50979650505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561348f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b3919061535b565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134f0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613514919061535b565b905090565b613521614d2b565b60005460405163b66e6b0560e01b815260048101849052620100009091046001600160a01b03169063b66e6b05906024016101e060405180830381865afa158015613570573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135949190615955565b92915050565b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f32936135d2939190614711565b8660c001518760a001518861010001518960e001516135f1919061538e565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015613640573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061366491906159e5565b610120860151919450925060009061368c576064856020015161368791906153bb565b6136bd565b6402540be400606486610120015187602001516136a9919061538e565b6136b391906153bb565b6136bd91906153bb565b60085490915060ff166138735760408501511561386c578460a001516136f4578085602001516136ed9190615665565b8310613707565b80856020015161370491906155aa565b83115b61386557600085610140015111801561373c57508460a001516137325784610140015183111561373c565b8461014001518310155b61385e57600085610160015111801561377157508460a0015161376757846101600151831015613771565b8461016001518311155b613857576137928560c001518660a001518760e00151886101000151614781565b1561385057600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa1580156137ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061380e91906153cf565b61010086015161381e908661538e565b11613849576138368560c0015186610100015161492a565b15613842576000613876565b6008613876565b6007613876565b6006613876565b6005613876565b6004613876565b6003613876565b6002613876565b60015b93959294505050565b613887614ccd565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613901919061535b565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015613943573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613967919061535b565b9050613971614c71565b8760e001518860800151613985919061538e565b816020018181525050826001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af11580156139ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139f291906153cf565b60408281019190915260035489519151631862c18d60e31b81526001600160a01b0392831660048201526000929091169063c3160c6890602401602060405180830381865afa158015613a49573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a6d919061535b565b6001600160a01b031614613cb157600354885160405163201ad16d60e01b81526001600160a01b0391821660048201526402540be40092606492169063201ad16d90602401602060405180830381865afa158015613acf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613af391906153cf565b613b036402540be400606461538e565b613b0d9190615665565b8360200151613b1c919061538e565b613b2691906153bb565b613b3091906153bb565b81526003548851602080840151908b0151604051638251135b60e01b81526001600160a01b039485169463e78c6fd294939290881691638251135b91613b7c9160040190815260200190565b602060405180830381865afa158015613b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbd91906153cf565b60408087015190516001600160e01b031960e087901b1681526001600160a01b0390941660048501526024840192909252604483015260648201526084016020604051808303816000875af1158015613c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c3e91906153cf565b60e082018190528851613c519190614659565b8060e0015188608001818151613c679190615665565b905250875160e08201516040519081526001600160a01b03909116907f0f5273269f52308b9c40fafda3ca13cc42f715fcd795365e87f351f59e2493139060200160405180910390a25b60005460208901518251620100009092046001600160a01b03169163cfbacc149190613ce1578360200151613ce4565b83515b6001806040518563ffffffff1660e01b8152600401613d069493929190615646565b6020604051808303816000875af1158015613d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4991906153cf565b6101008201819052608089018051613d62908390615665565b90525087516101008201516040519081526001600160a01b0390911690600080516020615a618339815191529060200160405180910390a26402540be4006064836001600160a01b0316639c8dd2fa8b602001516040518263ffffffff1660e01b8152600401613dd491815260200190565b602060405180830381865afa158015613df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1591906153cf565b8360200151613e24919061538e565b613e2e91906153bb565b613e3891906153bb565b6101008201819052608089018051613e51908390615665565b9052506105dc871015613ff057613e718161010001518960000151614659565b80604001516402540be400826101000151613e8c919061538e565b613e9691906153bb565b6101208201908152600154604080516080810182528b516001600160a01b0390811682526020808e0151908301528183018b9052600360608301529351828601519251630891674d60e31b8152949093169363448b3a6893613efc939091600401615433565b600060405180830381600087803b158015613f1657600080fd5b505af1158015613f2a573d6000803e3d6000fd5b50506000546101208401516040516339caebcf60e11b8152600481018c90526024810191909152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015613f8757600080fd5b505af1158015613f9b573d6000803e3d6000fd5b5050505087600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c5826101000151604051613fe391815260200190565b60405180910390a2614003565b61400388600001518261010001516145b8565b600054885160208a015160405163292c161760e01b8152620100009093046001600160a01b03169263292c16179261403f9290916004016155bd565b602060405180830381865afa15801561405c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061408091906153cf565b6040808a019190915281015160808901516140a1906402540be4009061538e565b6140ab91906153bb565b8860600181815250506140d18860a001518960e001518a61010001518b60c001516149c9565b886101000181815250506140f88860a001518960e001518a61012001518b60c00151614a5c565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0394851660048201526024810193909352604483015215156064820152911690630e6bc39a90608401600060405180830381600087803b15801561416957600080fd5b505af115801561417d573d6000803e3d6000fd5b505050602089015160808a015160c08b01516040516310787e2f60e11b81526001600160a01b03871694506320f0fc5e936141c19390929091600190600401615646565b600060405180830381600087803b1580156141db57600080fd5b505af11580156141ef573d6000803e3d6000fd5b5050600b548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb955092939192909161422e919061538e565b60018e60c001516040518763ffffffff1660e01b81526004016142569695949392919061591e565b600060405180830381600087803b15801561427057600080fd5b505af1158015614284573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d608001516142dd919061538e565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401614314929190615a09565b600060405180830381600087803b15801561432e57600080fd5b505af1158015614342573d6000803e3d6000fd5b505089516001600160a01b03166000908152600a60209081526040808320828e015184528252808320818e01518452825280832083805290915281209250905061438a614ad6565b825467ffffffffffffffff191663ffffffff9190911690811764010000000082021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064015b600060405180830381600087803b15801561442e57600080fd5b505af115801561053d573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c56573d6000803e3d6000fd5b60008060006144a5878787614b57565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015614540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061456491906153cf565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b6145c230826143d3565b6004805460405163b79b23dd60e01b81529182018390526001600160a01b03169063b79b23dd90602401600060405180830381600087803b15801561460657600080fd5b505af115801561461a573d6000803e3d6000fd5b50505050816001600160a01b03167fd1e388cc27c5125a80cf538c12b26dc5a784071d324a81a736e4d17f238588e482604051612cf291815260200190565b61466330836143d3565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156146b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146da919061535b565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b90604401614414565b6000806402540be400606480614727878961538e565b61473191906153bb565b61473b9088615665565b614745908961538e565b61474f91906153bb565b61475991906153bb565b90508261476f5761476a8187615665565b612f94565b612f9481876155aa565b949350505050565b60008061478e838561538e565b600b54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa1580156147d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147fc91906153cf565b61480a906305f5e10061538e565b60005482906201000090046001600160a01b03166377a9fdcf8989614830576001614833565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015614877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061489b91906153cf565b6148a591906155aa565b11158015612f945750600b5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015614906573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9491906155e6565b6000828152600c602052604081205480156149485780831115614779565b61495061343b565b6001600160a01b031663281b693c856040518263ffffffff1660e01b815260040161497d91815260200190565b602060405180830381865afa15801561499a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149be91906153cf565b831115949350505050565b60008215806149f257506149e46402540be4006103846158a0565b6149f086858588612f0f565b145b15614a53576000606485614a086103848961538e565b614a1291906153bb565b614a1c91906153bb565b905082614a415785811115614a32576000614a4b565b614a3c8187615665565b614a4b565b614a4b81876155aa565b915050614779565b50909392505050565b60008083118015614a925750614a786402540be400604b6158a0565b614a84906000196158a0565b614a9086858588612f0f565b125b15614a53576000606485614aa7604b8961538e565b614ab191906153bb565b614abb91906153bb565b905082614acc57614a3c81876155aa565b614a4b8187615665565b600061a4b1461480614aea575062066eed46145b15614b525760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015614b2e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061351491906153cf565b504390565b600b546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa158015614c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614c3591906153cf565b9050836402540be400614c4983606461538e565b614c53919061538e565b614c5d91906153bb565b614c6790846158d0565b9150935093915050565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060c00160405280614d3e614ccd565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f840112614d7957600080fd5b5081356001600160401b03811115614d9057600080fd5b6020830191508360208260051b8501011115614dab57600080fd5b9250929050565b60008060008060408587031215614dc857600080fd5b84356001600160401b0380821115614ddf57600080fd5b614deb88838901614d67565b90965094506020870135915080821115614e0457600080fd5b50614e1187828801614d67565b95989497509550505050565b600060808284031215614e2f57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101a081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b0381118282101715614e7b57634e487b7160e01b600052604160045260246000fd5b60008082840360c0811215614ef757600080fd5b614f018585614e1d565b92506040607f1982011215614f1557600080fd5b50604051604081018181106001600160401b0382111715614f4657634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff81168114614f6157600080fd5b815260a08401356001600160d81b0381168114614f7d57600080fd5b6020820152919491935090915050565b600060c08284031215614f9f57600080fd5b614fa7614e4b565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b600060208284031215614ff957600080fd5b5035919050565b6001600160a01b0381168114611a1a57600080fd5b60006020828403121561502757600080fd5b8135612e5381615000565b6020808252825182820181905260009190848201906040850190845b8181101561506a5783518352928401929184019160010161504e565b50909695505050505050565b6000806000806000806000806000806101408b8d03121561509657600080fd5b8a356150a181615000565b995060208b01356150b181615000565b985060408b01356150c181615000565b975060608b01356150d181615000565b965060808b01356150e181615000565b955060a08b01356150f181615000565b999c989b5096999598949794965050505060c08301359260e08101359261010082013592506101209091013590565b80356002811061512f57600080fd5b919050565b6000806000806080858703121561514a57600080fd5b843561515581615000565b9350602085013592506040850135915061517160608601615120565b905092959194509250565b6000806040838503121561518f57600080fd5b50508035926020909101359150565b803563ffffffff8116811461512f57600080fd5b6000808284036101008112156151c757600080fd5b6151d18585614e1d565b92506080607f19820112156151e557600080fd5b50604051608081018181106001600160401b038211171561521657634e487b7160e01b600052604160045260246000fd5b6040526152256080850161519e565b815261523360a0850161519e565b602082015261524460c0850161519e565b604082015261525560e0850161519e565b6060820152809150509250929050565b60008060006060848603121561527a57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156152b957600080fd5b612e5382615120565b634e487b7160e01b600052602160045260246000fd5b805161512f81615000565b600060c082840312156152f557600080fd5b6152fd614e4b565b825161530881615000565b815260208381015190820152604083015161532281615000565b80604083015250606083015160608201526080830151608082015260a08301516004811061534f57600080fd5b60a08201529392505050565b60006020828403121561536d57600080fd5b8151612e5381615000565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761359457613594615378565b634e487b7160e01b600052601260045260246000fd5b6000826153ca576153ca6153a5565b500490565b6000602082840312156153e157600080fd5b5051919050565b600481106153f8576153f86152c2565b9052565b60018060a01b0381511682526020810151602083015260408101516040830152606081015161542e60608401826153e8565b505050565b60c0810161544182866153fc565b608082019390935260a00152919050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c08101516154a460c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b89815261024081016154db602083018b615452565b6154e961016083018a6153e8565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b600c81106153f8576153f86152c2565b6040810161554182856153e8565b612e536020830184615523565b6080810161359482846153fc565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b8082018082111561359457613594615378565b6001600160a01b03929092168252602082015260400190565b8051801515811461512f57600080fd5b6000602082840312156155f857600080fd5b612e53826155d6565b6102008101615610828a615452565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b9384526020840192909252151560408301521515606082015260800190565b8181038181111561359457613594615378565b602081016135948284615523565b61014081016135948284615452565b82815260408101612e536020830184615523565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101a082840312156156dd57600080fd5b6156e5614e81565b6156ee836152d8565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015261572460a084016155d6565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60006020828403121561578f57600080fd5b815160038110612e5357600080fd5b600061014082840312156157b157600080fd5b6157b9614eb2565b90506157c4826152d8565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261580460c083016155d6565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b6000610140828403121561584457600080fd5b612e53838361579e565b600060c0828403121561586057600080fd5b615868614e4b565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015261534f60a084016155d6565b80820260008212600160ff1b841416156158bc576158bc615378565b818105831482151761359457613594615378565b81810360008312801583831316838312821617156113aa576113aa615378565b6000826158ff576158ff6153a5565b600160ff1b82146000198414161561591957615919615378565b500590565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b60006101e0828403121561596857600080fd5b60405160c081018181106001600160401b038211171561599857634e487b7160e01b600052604160045260246000fd5b6040526159a5848461579e565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b600080604083850312156159f857600080fd5b505080516020909101519092909150565b6102008101615a188285615452565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e0830152939250505056fe4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb25408406a2646970667358221220c9f69792687243672ebe5f7b249de4ee8845653f5999ad809ecd094d0c55298764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2182,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2185,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7301,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterfaceV5)4683"
      },
      {
        "astId": 7304,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NftRewardsInterfaceV6_3_1)4837"
      },
      {
        "astId": 7307,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(GNSPairInfosInterfaceV6)11389"
      },
      {
        "astId": 7310,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(GNSReferralsInterfaceV6_2)5212"
      },
      {
        "astId": 7313,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(GNSStakingInterfaceV6_2)5220"
      },
      {
        "astId": 7327,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "WETHVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 7329,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 7331,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 7333,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "isPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 7335,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "isDone",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 7337,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 7349,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage))))"
      },
      {
        "astId": 7352,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(GNSBorrowingFeesInterfaceV6_4)11244"
      },
      {
        "astId": 7356,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7368,
        "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
        "label": "tradeData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(GNSBorrowingFeesInterfaceV6_4)11244": {
        "encoding": "inplace",
        "label": "contract GNSBorrowingFeesInterfaceV6_4",
        "numberOfBytes": "20"
      },
      "t_contract(GNSPairInfosInterfaceV6)11389": {
        "encoding": "inplace",
        "label": "contract GNSPairInfosInterfaceV6",
        "numberOfBytes": "20"
      },
      "t_contract(GNSReferralsInterfaceV6_2)5212": {
        "encoding": "inplace",
        "label": "contract GNSReferralsInterfaceV6_2",
        "numberOfBytes": "20"
      },
      "t_contract(GNSStakingInterfaceV6_2)5220": {
        "encoding": "inplace",
        "label": "contract GNSStakingInterfaceV6_2",
        "numberOfBytes": "20"
      },
      "t_contract(NftRewardsInterfaceV6_3_1)4837": {
        "encoding": "inplace",
        "label": "contract NftRewardsInterfaceV6_3_1",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterfaceV5)4683": {
        "encoding": "inplace",
        "label": "contract StorageInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)7456": {
        "encoding": "inplace",
        "label": "enum GNSTradingCallbacksV6_4.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage)))"
      },
      "t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)7456",
        "label": "mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)7423_storage"
      },
      "t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)7456",
        "label": "mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)7428_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(LastUpdated)7423_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum GNSTradingCallbacksV6_4.TradeType => struct GNSTradingCallbacksV6_4.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)7456,t_struct(TradeData)7428_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)7423_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4.LastUpdated",
        "members": [
          {
            "astId": 7416,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7418,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7420,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 7422,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)7428_storage": {
        "encoding": "inplace",
        "label": "struct GNSTradingCallbacksV6_4.TradeData",
        "members": [
          {
            "astId": 7425,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 7427,
            "contract": "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol:GNSTradingCallbacksV6_4",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}