{
  "address": "0x89850B162Caf44e6b5fF32e8D1B3564233cfB6Ae",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueWETH",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CanExecuteTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "DevGovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "NftBotFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "WETHVaultFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETHVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "executeNftOpenOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giveApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract StakingInterface",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "setCanExecuteTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct TradingCallbacks.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct TradingCallbacks.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract StakingInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb9235dac9c5ac6e4e87ea7c2571dce638de38fbcec01988e0443999cef878ff1",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x89850B162Caf44e6b5fF32e8D1B3564233cfB6Ae",
    "transactionIndex": 5,
    "gasUsed": "4447489",
    "logsBloom": "0x
    "blockHash": "0xc62666fa01d9d3e5db4f8595e1ca0cfdefed4a20c520e3bed43af218dd536585",
    "transactionHash": "0xb9235dac9c5ac6e4e87ea7c2571dce638de38fbcec01988e0443999cef878ff1",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 40565557,
        "transactionHash": "0xb9235dac9c5ac6e4e87ea7c2571dce638de38fbcec01988e0443999cef878ff1",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x0000000000000000000000004cefb7df2ff89a05ddd0176de11e01ef0cf7ed84"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002dfadb1fc89380000000000000000000000000000000000000000000000000848524f8ee48489a00000000000000000000000000000000000000000000000c742be10371a366a600000000000000000000000000000000000000000000000084572a1dce7fb51a00000000000000000000000000000000000000000000000c7459dbde916bfa26",
        "logIndex": 14,
        "blockHash": "0xc62666fa01d9d3e5db4f8595e1ca0cfdefed4a20c520e3bed43af218dd536585"
      }
    ],
    "blockNumber": 40565557,
    "cumulativeGasUsed": "4881155",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e69228fd523732f8031dddd20ee49ae8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueWETH\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CanExecuteTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"DevGovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"NftBotFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"WETHVaultFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETHVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"executeNftOpenOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract StakingInterface\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"setCanExecuteTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct TradingCallbacks.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct TradingCallbacks.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract StakingInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingCallbacks.sol\":\"TradingCallbacks\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/TradingCallbacks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/StakingInterface.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\n\\ncontract TradingCallbacks is Initializable {\\n    // Contracts (constant)\\n    StorageInterface public storageT;\\n    NftRewardsInterfaceV6_3_1 public nftRewards;\\n    PairInfosInterface public pairInfos;\\n    ReferralsInterface public referrals;\\n    StakingInterface public staking;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10; // 10 decimals\\n\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\\n        public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    BorrowingFeesInterface public borrowingFees;\\n\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\\n        public tradeData; // More storage for trades / limit orders\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posWETH;\\n        uint levPosWETH;\\n        uint tokenPriceWETH;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint WETHSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        uint spreadReductionP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterface.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit, // before fees\\n        uint WETHSentToTrader\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterface.Trade t,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit,\\n        uint WETHSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(\\n        uint WETHVaultFeeP,\\n        uint lpFeeP,\\n        uint sssFeeP\\n    );\\n    event CanExecuteTimeoutUpdated(uint newValue);\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n\\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\\n    event SssFeeCharged(address indexed trader, uint valueWETH);\\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\\n    event BorrowingFeeCharged(\\n        address indexed trader,\\n        uint tradeValueWETH,\\n        uint feeValueWETH\\n    );\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        StakingInterface _staking,\\n        BorrowingFeesInterface _borrowingFees,\\n        address vaultToApprove,\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n        borrowingFees = _borrowingFees;\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n        TokenInterface t = storageT.WETH();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    // function initializeV2(\\n    //     BorrowingFeesInterface _borrowingFees\\n    // ) external reinitializer(2) {\\n    //     if (address(_borrowingFees) == address(0)) {\\n    //         revert WrongParams();\\n    //     }\\n    //     borrowingFees = _borrowingFees;\\n    // }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isTrading() private view {\\n        if (msg.sender != storageT.trading()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setPairMaxLeverageArray(\\n        uint[] calldata indices,\\n        uint[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP\\n    ) external onlyGov {\\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\\n            revert WrongParams();\\n        }\\n        canExecuteTimeout = _canExecuteTimeout;\\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterface.Trade memory t = o.trade;\\n\\n        (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        ) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    a.price,\\n                    o.wantedPrice,\\n                    a.price,\\n                    a.spreadP,\\n                    o.spreadReductionP,\\n                    t.buy,\\n                    t.pairIndex,\\n                    t.positionSizeWETH,\\n                    t.leverage,\\n                    o.slippageP,\\n                    t.tp,\\n                    t.sl\\n                )\\n            );\\n\\n        t.openPrice = priceAfterImpact;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\\n                t,\\n                1500,\\n                0\\n            );\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\\n                0,\\n                0\\n            );\\n        } else {\\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\\n            //     t.pairIndex,\\n            //     t.positionSizeWETH * t.leverage,\\n            //     true,\\n            //     true\\n            // );\\n            // transferFromStorageToAddress(\\n            //     t.trader,\\n            //     t.positionSizeWETH - devGovFeesWETH\\n            // );\\n\\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\\n            emit MarketOpenCanceled(\\n                a.orderId,\\n                t.trader,\\n                t.pairIndex,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n            a.orderId\\n        );\\n\\n        if (o.block == 0) {\\n            return;\\n        }\\n\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trade.trader,\\n            o.trade.pairIndex,\\n            o.trade.index\\n        );\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n            AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\\n\\n            Values memory v;\\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    a.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.posWETH = v.levPosWETH / t.leverage;\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    (v.levPosWETH *\\n                        aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION,\\n                    (v.levPosWETH *\\n                        aggregator.pairsStorage().pairNftLimitOrderFeeP(\\n                            t.pairIndex\\n                        )) /\\n                        100 /\\n                        PRECISION\\n                );\\n\\n                emit MarketExecuted(\\n                    a.orderId,\\n                    t,\\n                    false,\\n                    a.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader\\n                );\\n            } else {\\n                // Dev / gov rewards to pay for oracle cost\\n                // Charge in WETH if collateral in storage or token if collateral in vault\\n                // v.reward1 = t.positionSizeWETH > 0\\n                //     ? storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         v.levPosWETH,\\n                //         true,\\n                //         true\\n                //     )\\n                //     : (storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\\n                //         false,\\n                //         true\\n                //     ) * v.tokenPriceWETH) / PRECISION;\\n\\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\\n                // storageT.updateTrade(t);\\n\\n                emit DevGovFeeCharged(t.trader, v.reward1);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(\\n                a.orderId,\\n                o.trade.trader,\\n                o.trade.pairIndex,\\n                o.trade.index,\\n                cancelReason\\n            );\\n        }\\n\\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    function executeNftOpenOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterface.PendingNftOrder memory n = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n\\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(\\n            n.trader,\\n            n.pairIndex,\\n            n.index\\n        )\\n            ? CancelReason.NO_TRADE\\n            : CancelReason.NONE;\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterface.OpenLimitOrder memory o = storageT\\n                .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n            NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\\n                .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\\n                ? CancelReason.NONE\\n                : CancelReason.NOT_HIT;\\n\\n            // Note: o.minPrice always equals o.maxPrice so can use either\\n            (\\n                uint priceImpactP,\\n                uint priceAfterImpact,\\n                CancelReason _cancelReason\\n            ) = _openTradePrep(\\n                    OpenTradePrepInput(\\n                        cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n                        o.maxPrice,\\n                        a.open,\\n                        a.spreadP,\\n                        o.spreadReductionP,\\n                        o.buy,\\n                        o.pairIndex,\\n                        o.positionSize,\\n                        o.leverage,\\n                        tradeData[o.trader][o.pairIndex][o.index][\\n                            TradeType.LIMIT\\n                        ].maxSlippageP,\\n                        o.tp,\\n                        o.sl\\n                    )\\n                );\\n\\n            bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n            cancelReason = !exactExecution &&\\n                (\\n                    o.maxPrice == 0 ||\\n                        t ==\\n                        NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n                )\\n                ? CancelReason.NOT_HIT\\n                : _cancelReason;\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                (\\n                    StorageInterface.Trade memory finalTrade,\\n                    uint tokenPriceWETH\\n                ) = registerTrade(\\n                        StorageInterface.Trade(\\n                            o.trader,\\n                            o.pairIndex,\\n                            0,\\n                            0,\\n                            o.positionSize,\\n                            priceAfterImpact,\\n                            o.buy,\\n                            o.leverage,\\n                            o.tp,\\n                            o.sl\\n                        ),\\n                        n.nftId,\\n                        n.index\\n                    );\\n\\n                storageT.unregisterOpenLimitOrder(\\n                    o.trader,\\n                    o.pairIndex,\\n                    o.index\\n                );\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    n.index,\\n                    finalTrade,\\n                    n.nftHolder,\\n                    StorageInterface.LimitOrder.OPEN,\\n                    finalTrade.openPrice,\\n                    priceImpactP,\\n                    (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\\n                    0,\\n                    0,\\n                    exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                n.nftHolder,\\n                StorageInterface.LimitOrder.OPEN,\\n                cancelReason\\n            );\\n        }\\n\\n        nftRewards.unregisterTrigger(\\n            NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n                n.trader,\\n                n.pairIndex,\\n                n.index,\\n                n.orderType\\n            )\\n        );\\n\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory a\\n    ) external onlyPriceAggregator notDone {\\n        StorageInterface.PendingNftOrder memory o = storageT\\n            .reqID_pendingNftOrder(a.orderId);\\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n            memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n                .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trader,\\n            o.pairIndex,\\n            o.index\\n        );\\n\\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\\n\\n        CancelReason cancelReason = a.open == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosWETH =\\n                (t.initialPosToken * i.tokenPriceWETH * t.leverage) /\\n                PRECISION;\\n            v.posWETH = v.levPosWETH / t.leverage;\\n\\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\\n                ? t.tp\\n                : (\\n                    o.orderType == StorageInterface.LimitOrder.SL\\n                        ? t.sl\\n                        : v.liqPrice\\n                );\\n\\n            v.exactExecution =\\n                v.price > 0 &&\\n                a.low <= v.price &&\\n                a.high >= v.price;\\n\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (v.posWETH * 5) / 100\\n                    : (v.levPosWETH *\\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION;\\n            } else {\\n                v.price = a.open;\\n\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (\\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\\n                            ? (v.posWETH * 5) / 100\\n                            : 0\\n                    )\\n                    : (\\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosWETH *\\n                                pairsStored.pairNftLimitOrderFeeP(\\n                                    t.pairIndex\\n                                )) /\\n                                100 /\\n                                PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0\\n                ? CancelReason.NOT_HIT\\n                : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    v.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    false,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    o.orderType == StorageInterface.LimitOrder.LIQ\\n                        ? v.reward1\\n                        : (v.levPosWETH *\\n                            pairsStored.pairCloseFeeP(t.pairIndex)) /\\n                            100 /\\n                            PRECISION,\\n                    v.reward1\\n                );\\n\\n                // Convert NFT bot fee from WETH to token value\\n                v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\\n\\n                nftRewards.distributeNftReward(\\n                    triggeredLimitId,\\n                    v.reward2,\\n                    v.tokenPriceWETH\\n                );\\n\\n                storageT.increaseNftRewards(o.nftId, v.reward2);\\n\\n                emit NftBotFeeCharged(t.trader, v.reward1);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                o.nftHolder,\\n                o.orderType,\\n                cancelReason\\n            );\\n        }\\n\\n        nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function registerTrade(\\n        StorageInterface.Trade memory trade,\\n        uint nftId,\\n        uint limitIndex\\n    ) private returns (StorageInterface.Trade memory, uint) {\\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\\n        //     // and before volumeReferredWETH increases\\n        //     v.posWETH =\\n        //         (v.levPosWETH *\\n        //             (100 *\\n        //                 PRECISION -\\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\\n        //         100 /\\n        //         PRECISION;\\n\\n        //     v.reward1 = referrals.distributePotentialReward(\\n        //         trade.trader,\\n        //         v.levPosWETH,\\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\\n        //         v.tokenPriceWETH\\n        //     );\\n\\n        //     sendToVault(v.reward1, trade.trader);\\n        //     trade.positionSizeWETH -= v.reward1;\\n\\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\\n        // }\\n\\n        // // 2. Charge opening fee - referral fee (if applicable)\\n        // v.reward2 = storageT.handleDevGovFees(\\n        //     trade.pairIndex,\\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\\n        //     true,\\n        //     true\\n        // );\\n\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\\n\\n        // // 3. Charge NFT / SSS fee\\n        // v.reward2 =\\n        //     (v.levPosWETH *\\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\\n        //     100 /\\n        //     PRECISION;\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\\n        // if (nftId < 1500) {\\n        //     sendToVault(v.reward2, trade.trader);\\n\\n        //     // Convert NFT bot fee from WETH to token value\\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\\n\\n        //     nftRewards.distributeNftReward(\\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n        //             trade.trader,\\n        //             trade.pairIndex,\\n        //             limitIndex,\\n        //             StorageInterface.LimitOrder.OPEN\\n        //         ),\\n        //         v.reward3,\\n        //         v.tokenPriceWETH\\n        //     );\\n        //     storageT.increaseNftRewards(nftId, v.reward3);\\n\\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\\n\\n        //     // 3.2 Distribute SSS fee (if applicable)\\n        // } else {\\n        //     distributeStakingReward(trade.trader, v.reward2);\\n        // }\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n        // trade.initialPosToken =\\n        //     (trade.positionSizeWETH * PRECISION) /\\n        //     v.tokenPriceWETH;\\n\\n        trade.tp = correctTp(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.tp,\\n            trade.buy\\n        );\\n        trade.sl = correctSl(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.sl,\\n            trade.buy\\n        );\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            trade.pairIndex,\\n            trade.positionSizeWETH,\\n            trade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeWETH * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterface.TradeInfo(\\n                0,\\n                v.tokenPriceWETH,\\n                trade.positionSizeWETH * trade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\\n            trade.pairIndex\\n        ][trade.index][TradeType.MARKET];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceWETH);\\n    }\\n\\n    function unregisterTrade(\\n        StorageInterface.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\\n    ) private returns (uint WETHSentToTrader) {\\n        IToken vault = storageT.vault();\\n\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentWETHPos,\\n            percentProfit,\\n            closingFeeWETH + nftFeeWETH\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestWETH,\\n            false,\\n            trade.buy\\n        );\\n        getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            openInterestWETH / trade.leverage,\\n            trade.buy,\\n            false\\n        );\\n\\n        // 3. Unregister trade from storage\\n\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n        // 4.1 If collateral in storage (opened after update)\\n        if (trade.positionSizeWETH > 0) {\\n            Values memory v;\\n\\n            // 4.1.1 WETH vault reward\\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\\n            // transferFromStorageToAddress(address(this), v.reward2);\\n            // vault.distributeReward(v.reward2);\\n\\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 4.1.2 SSS reward\\n            // v.reward3 = marketOrder\\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\\n            //     : (closingFeeWETH * sssFeeP) / 100;\\n\\n            // distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 4.1.3 Take WETH from vault if winning trade\\n            // or send WETH to vault if losing trade\\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\\n            if (WETHSentToTrader > WETHLeftInStorage) {\\n                vault.sendAssets(\\n                    WETHSentToTrader - WETHLeftInStorage,\\n                    trade.trader\\n                );\\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\\n            } else {\\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault (opened before update)\\n        } else {\\n            vault.sendAssets(WETHSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    // Utils (external)\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata _id,\\n        LastUpdated memory _lastUpdated\\n    ) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _lastUpdated;\\n    }\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata _id,\\n        TradeData memory _tradeData\\n    ) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _tradeData;\\n    }\\n\\n    // Utils (getters)\\n    function _getTradeValue(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\\n            trade,\\n            currentWETHPos,\\n            percentProfit\\n        );\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentWETHPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            BorrowingFeesInterface.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentWETHPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP =\\n            percentProfit -\\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\\n    }\\n\\n    function withinMaxLeverage(\\n        uint pairIndex,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return\\n            pairMaxLev == 0\\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\\n                : leverage <= pairMaxLev;\\n    }\\n\\n    function withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeWETH,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\\n\\n        return\\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\\n                levPositionSizeWETH <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\\n    }\\n\\n    function currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private view returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((\\n                buy\\n                    ? int(currentPrice) - int(openPrice)\\n                    : int(openPrice) - int(currentPrice)\\n            ) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function correctTp(\\n        uint openPrice,\\n        uint leverage,\\n        uint tp,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            tp == 0 ||\\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\\n            int(MAX_GAIN_P) * int(PRECISION)\\n        ) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return\\n                buy\\n                    ? openPrice + tpDiff\\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n\\n        return tp;\\n    }\\n\\n    function correctSl(\\n        uint openPrice,\\n        uint leverage,\\n        uint sl,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            sl > 0 &&\\n            currentPercentProfit(openPrice, sl, buy, leverage) <\\n            int(MAX_SL_P) * int(PRECISION) * -1\\n        ) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        uint spreadReductionP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price *\\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\\n            100 /\\n            PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    )\\n        private\\n        view\\n        returns (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            marketExecutionPrice(\\n                c.executionPrice,\\n                c.spreadP,\\n                c.spreadReductionP,\\n                c.buy\\n            ),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact >= c.tp\\n                                : priceAfterImpact <= c.tp\\n                        ))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact <= c.sl\\n                                : priceAfterImpact >= c.sl\\n                        ))\\n                    ? CancelReason.SL_REACHED\\n                    : !withinExposureLimits(\\n                        c.pairIndex,\\n                        c.buy,\\n                        c.positionSize,\\n                        c.leverage\\n                    )\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage >\\n                        pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\\n        return storageT.reqID_pendingMarketOrder(orderId);\\n    }\\n\\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return storageT.priceAggregator().pairsStorage();\\n    }\\n\\n    function getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterface.Trade memory) {\\n        return storageT.openTrades(trader, pairIndex, index);\\n    }\\n\\n    function getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterface.TradeInfo memory) {\\n        return storageT.openTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function distributeStakingReward(address trader, uint amountWETH) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        staking.distributeRewardWETH(amountWETH);\\n        emit SssFeeCharged(trader, amountWETH);\\n    }\\n\\n    function sendToVault(uint amountWETH, address trader) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        storageT.vault().receiveAssets(amountWETH, trader);\\n    }\\n\\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\\n        storageT.transferWETH(address(storageT), to, amountWETH);\\n    }\\n\\n    // Public views\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n\\n    function giveApproval() external {\\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\\n    }\\n}\\n\",\"keccak256\":\"0x59120ddd4d7aa1578387df214bc890d0e31a6547aebf6a2fac668941a7efa9f4\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n}\\n\",\"keccak256\":\"0x069b28b40ac432208c040c75ecdc880edccda8b3964d187ce2284a07b1d599f7\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe851dd45858831c40b8b007e1c00f337673d74512e12a2c8d1c264ab5c1f099c\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x7e5147b0611f9d8ae4e6447c75c65f9c7274f2eba120a69abd5bcad9e0d99189\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getTWAP(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 twapPrice);\\n}\\n\",\"keccak256\":\"0x69705157ab674d51ab9b8404fa2faf15333f2696ce2e78362ab5bb96833ecdee\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa203a16609a3f4479f4c276334d6731350d81ccd2e07e8e4d1e38028d702d76f\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0b9d784e7bf8b3a982e0aa9a8de5df0a4e010319c94b718986d40f276d8f6cf6\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb2fa75a1891441870ad9e7ebaec3b828113cb231cba760d31e175233850efceb\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\\n\",\"keccak256\":\"0x6efcbb420e7c07ef4de75d3ceeea00761d99c113056eb550fa6aa414a9f089e1\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x58654c006d22c41b610ba226e895483efb9caf61604472b2e9b80c4e45259bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x183941b663c64e9673e527c2d5a522b1c0e295bc15235f30f924cc84c1d33a5a\",\"license\":\"MIT\"},\"contracts/interfaces/StakingInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface StakingInterface {\\n    function distributeRewardWETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x9b14e7f1aa1ff5e3a4310b1030eac99b4ffec9617c42b3b1ac09284196253a33\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1_4.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\\n\\n    function vault() external view returns (IToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external returns (IOracle);\\n}\\n\",\"keccak256\":\"0xfc18f7e6a179bb1f82916b2b8e1a33946209b9079bb9996ec8ffd80e827f60b7\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe17da6c44e61e84ecbc9653dffeb3c4bf6ed43743256f1eaf1743b7903843dae\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x944440c51dd10f65adea46bce9c451f59ba39bd0723ed97c691d7a0ecc18e91d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614f84806100206000396000f3fe608060405234801561001057600080fd5b50600436106101995760003560e01c80637bb6c11c116100e4578063ae8421e111610092578063ae8421e11461043f578063b187bd2614610447578063b3f2f4d614610454578063b47ee40814610467578063b736ca821461047a578063c68078b91461048d578063c68365df146104a0578063d3dc7539146104a957600080fd5b80637bb6c11c1461034e5780637d490caf146103575780637e09ae8a1461036a5780638456cb591461037d5780638b263878146103855780638f0622271461038d5780639bd24d83146103af57600080fd5b806337edb1381161014c57806337edb1381461025957806346f93a631461026e57806348829122146102e65780634cf088d9146102f9578063531cc9651461030c5780635ad9f9931461031f57806361ba6c3d14610332578063676c51641461034557600080fd5b8062e0fa891461019e5780631346b0ff146101b357806316fff074146101e3578063178623a7146101fc57806321c861961461021357806323f7197b14610226578063281b693c14610239575b600080fd5b6101b16101ac366004614331565b6104bc565b005b6002546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b61020560055481565b6040519081526020016101da565b6101b1610221366004614462565b61053a565b6101b161023436600461450c565b6105f5565b610205610247366004614566565b600c6020526000908152604090205481565b6102616111c7565b6040516101da919061457f565b6102c161027c3660046145ec565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b039091166020830152016101da565b6101b16102f4366004614634565b6112c4565b6004546101c6906001600160a01b031681565b600b546101c6906001600160a01b031681565b6001546101c6906001600160a01b031681565b6101b161034036600461450c565b6112d2565b61020560095481565b61020560075481565b6101b161036536600461450c565b6114d3565b6101b161037836600461466a565b611a20565b6101b1611b29565b6101b1611b7f565b60085461039f90610100900460ff1681565b60405190151581526020016101da565b61040f6103bd3660046145ec565b600a60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff958616815293851660208501529184169183019190915290911660608201526080016101da565b6101b1611cde565b60085461039f9060ff1681565b6101b1610462366004614566565b611d3e565b6101b161047536600461450c565b611da3565b6101b161048836600461471d565b612511565b6101b161049b3660046147dd565b612946565b61020560065481565b6003546101c6906001600160a01b031681565b6104c46129d8565b828181146104e557604051635863f78960e01b815260040160405180910390fd5b60005b818110156105325761052a86868381811061050557610505614809565b9050602002013585858481811061051e5761051e614809565b90506020020135612a82565b6001016104e8565b505050505050565b610542612ad3565b80600d6000610554602086018661481f565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090610599608086016060870161483c565b60018111156105aa576105aa614857565b60018111156105bb576105bb614857565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b6105fd612b26565b610605612b79565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015610657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b9190614878565b90506000604051806080016040528083604001516001600160a01b0316815260200183606001518152602001836080015181526020018360a0015160038111156106c7576106c7614857565b815250905060006106e5836040015184606001518560800151612ba2565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906148f0565b9050600085606001516000146107875760e08301511561078057600061078a565b600961078a565b60025b9050600081600b8111156107a0576107a0614857565b0361108f5760006107be846000015185602001518660400151612c2f565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906148f0565b905061082e6141f0565b6402540be4008660e001518460200151886060015161084d9190614923565b6108579190614923565b6108619190614950565b6020820181905260e087015161087691614950565b815260028860a00151600381111561089057610890614857565b036109aa57600b546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a91610963919060040181516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190614964565b60a08201525b60008860a0015160038111156109c2576109c2614857565b146109f95760018860a0015160038111156109df576109df614857565b146109ee578060a00151610a00565b856101200151610a00565b8561010001515b6080820181905215801590610a1d575080608001518960a0015111155b8015610a3157508060800151896080015110155b158015610140830152610b225760028860a001516003811115610a5657610a56614857565b14610afe576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610a9591815260200190565b602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190614964565b8360200151610ae59190614923565b610aef9190614950565b610af99190614950565b610b18565b8051606490610b0e906005614923565b610b189190614950565b60e0820152610d03565b6060890151608082015260028860a001516003811115610b4457610b44614857565b14610cb15760008860a001516003811115610b6157610b61614857565b148015610b7357506000866101000151115b8015610ba357508560c00151610b955785610100015189606001511115610ba3565b856101000151896060015110155b80610c03575060018860a001516003811115610bc157610bc1614857565b148015610bd357506000866101200151115b8015610c0357508560c00151610bf55785610120015189606001511015610c03565b856101200151896060015111155b610c0e576000610cfd565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610c4891815260200190565b602060405180830381865afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190614964565b8360200151610c989190614923565b610ca29190614950565b610cac9190614950565b610cfd565b8560c00151610ccb578060a0015189606001511015610cd8565b8060a00151896060015111155b610ce3576000610cfd565b8051606490610cf3906005614923565b610cfd9190614950565b60e08201525b60e081015115610d14576000610d17565b600b5b9350600084600b811115610d2d57610d2d614857565b0361108b57610d4e8660a0015182608001518860c001518960e00151612ce4565b816060018181525050846001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190614964565b816040018181525050610eba86600083606001518460000151876040015160026003811115610dec57610dec614857565b8e60a001516003811115610e0257610e02614857565b14610eaa576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b8152600401610e4191815260200190565b602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190614964565b8960200151610e919190614923565b610e9b9190614950565b610ea59190614950565b610eb0565b8660e001515b8760e00151612d73565b60c0820152604081015160e0820151610ed9906402540be40090614923565b610ee39190614950565b61010082018190526001546040808401519051630891674d60e31b81526001600160a01b039092169263448b3a6892610f21928c92916004016149c8565b600060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505060005460208b01516101008501516040516339caebcf60e11b815260048101929092526024820152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b5050505085600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c58260e0015160405161100a91815260200190565b60405180910390a287600001516001600160a01b031689600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408a60800151898c60a0015186608001516000886000015189606001518a60c001518b610140015160405161108299989796959493929190614a5b565b60405180910390a35b5050505b600081600b8111156110a3576110a3614857565b146110f6578451865160a08701516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3916110ed918690614ac8565b60405180910390a35b60015460405163bf654d2b60e01b81526001600160a01b039091169063bf654d2b90611126908790600401614ae3565b600060405180830381600087803b15801561114057600080fd5b505af1158015611154573d6000803e3d6000fd5b5050600054885160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb91506024015b600060405180830381600087803b1580156111a757600080fd5b505af11580156111bb573d6000803e3d6000fd5b50505050505050505050565b606060006111d36130ef565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614964565b90506000816001600160401b03811115611250576112506143b4565b604051908082528060200260200182016040528015611279578160200160208202803683370190505b50905060005b828110156112bd576000818152600c602052604090205482518390839081106112aa576112aa614809565b602090810291909101015260010161127f565b5092915050565b6112ce8282612a82565b5050565b6112da612b26565b6112e2612b79565b60006112f182600001516131cd565b90508060200151600003611303575050565b600081600001519050600080600061139f60405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e00151815260200187606001518152602001866101000151815260200186610120015181525061324e565b60a0870182905291945092509050600081600b8111156113c1576113c1614857565b036114405760006113d6856105dc6000613533565b50905086600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978260018460a00151888660e00151876080015161141c9190614923565b6000806040516114329796959493929190614af1565b60405180910390a250611490565b836020015184600001516001600160a01b031687600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c3269846040516114879190614b36565b60405180910390a45b6000548651604051630195728b60e71b8152600481019190915260016024820152620100009091046001600160a01b03169063cab945809060440161118d565b50565b6114db612b26565b6114e3612b79565b60006114f282600001516131cd565b90508060200151600003611504575050565b8051805160208201516040909201516000926115209291612ba2565b905060008160e001516000146115485760208401511561154157600061154b565b600261154b565b60095b9050600981600b81111561156157611561614857565b1461193957600061157f836000015184602001518560400151612c2f565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f991906148f0565b90506116036141f0565b8460e0015185608001516116179190614923565b6020820152600084600b81111561163057611630614857565b036118e9576116518560a0015188602001518760c001518860e00151612ce4565b606082015260e0850151602082015161166a9190614950565b81600001818152505061188b8560018360600151846000015187604001516402540be4006064896001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f291906148f0565b6001600160a01b031663836a341a8e602001516040518263ffffffff1660e01b815260040161172391815260200190565b602060405180830381865afa158015611740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117649190614964565b89602001516117739190614923565b61177d9190614950565b6117879190614950565b6402540be40060648a6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906148f0565b6001600160a01b0316639c8dd2fa8f602001516040518263ffffffff1660e01b815260040161182291815260200190565b602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190614964565b8a602001516118729190614923565b61187c9190614950565b6118869190614950565b612d73565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c3330997946118dc948c9460009491938593919291614af1565b60405180910390a2611935565b84600001516001600160a01b03167f4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb254084068260e0015160405161192c91815260200190565b60405180910390a25b5050505b600081600b81111561194d5761194d614857565b146119ac578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c916119a391908790614b44565b60405180910390a45b600080548551604051630195728b60e71b8152600481019190915260248101929092526201000090046001600160a01b03169063cab9458090604401600060405180830381600087803b158015611a0257600080fd5b505af1158015611a16573d6000803e3d6000fd5b5050505050505050565b611a28612ad3565b80600a6000611a3a602086018661481f565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090611a7f608086016060870161483c565b6001811115611a9057611a90614857565b6001811115611aa157611aa1614857565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b199482166401000000000267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b611b316139f3565b6008805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b600060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf691906148f0565b6001600160a01b031663095ea7b3600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7b91906148f0565b6000196040518363ffffffff1660e01b8152600401611c9b929190614b58565b6020604051808303816000875af1158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d09190614b81565b611ce66139f3565b6008805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd388893611b759390049091161515815260200190565b611d466139f3565b6005811115611d6857604051635863f78960e01b815260040160405180910390fd5b60098190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b611dab612b26565b611db3612b79565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e299190614878565b60008054604083810151606085015160808601519251636e6f99cd60e11b81529596509394620100009093046001600160a01b03169363dcdf339a93611e729390600401614b9c565b602060405180830381865afa158015611e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb39190614b81565b15611ebf576000611ec2565b60095b9050600081600b811115611ed857611ed8614857565b036123825760008054604084810151606086015160808701519251632e21e28b60e21b8152620100009094046001600160a01b03169363b8878a2c93611f22939291600401614b9c565b6101a060405180830381865afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614bbd565b600154604080860151606087015160808801519251636a6f32f560e11b81529495506000946001600160a01b039094169363d4de65ea93611fa9939291600401614b9c565b602060405180830381865afa158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea9190614c70565b905081610140015185608001511015801561200e57508161014001518560a0015111155b61201957600b61201c565b60005b925060008060006121306040518061018001604052806000600b81111561204557612045614857565b89600b81111561205757612057614857565b14612066578a6060015161206d565b8761014001515b81526101408881015160208084019190915260608d810151604080860191909152808f0151828601526080808d01519086015260a0808d0151151590860152828c01805160c080880191909152928d015160e080880191909152928d0151610100808801919091528d516001600160a01b03166000908152600d865283812092518152918552828220838f01518352855282822060018352909452205464ffffffffff166101208501528a0151918301919091528801516101609091015261324e565b9194509250905060008087600b81111561214c5761214c614857565b1490508015816121d05750610140860151158061217a5750600285600281111561217857612178614857565b145b6121a9578560a00151612198578561014001518960600151106121d0565b8561014001518960600151116121d0565b8560a001516121c3578561014001518960600151116121d0565b8561014001518960600151105b6121da57816121dd565b600b5b9650600087600b8111156121f3576121f3614857565b0361237b5760008061227d6040518061014001604052808a600001516001600160a01b031681526020018a60200151815260200160008152602001600081526020018a6060015181526020018781526020018a60a00151151581526020018a60c0015181526020018a60e0015181526020018a61010001518152508b602001518c60800151613533565b6000548a5160208c01516040808e0151905163b4b0f56760e01b8152959750939550620100009092046001600160a01b03169363b4b0f567936122c39391600401614b9c565b600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b5050505089600001516001600160a01b03168b600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408c608001518560038760a001518c6402540be400898b6060015161234d9190614923565b6123579190614950565b6000808d60405161237099989796959493929190614a5b565b60405180910390a350505b5050505050505b600081600b81111561239657612396614857565b146123e95781600001516001600160a01b031683600001517fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc36003846040516123e0929190614ac8565b60405180910390a35b600160009054906101000a90046001600160a01b03166001600160a01b031663bf654d2b604051806080016040528085604001516001600160a01b0316815260200185606001518152602001856080015181526020018560a00151600381111561245557612455614857565b8152506040518263ffffffff1660e01b81526004016124749190614ae3565b600060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b5050600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb9150602401600060405180830381600087803b1580156124f457600080fd5b505af1158015612508573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16158080156125315750600054600160ff909116105b8061254b5750303b15801561254b575060005460ff166001145b6125b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156125d5576000805461ff0019166101001790555b6001600160a01b038c1615806125f257506001600160a01b038b16155b8061260457506001600160a01b038a16155b8061261657506001600160a01b038916155b8061262857506001600160a01b038816155b8061263a57506001600160a01b038616155b8061265a57508261264b8587614c91565b6126559190614c91565b606414155b806126655750600582115b1561268357604051635863f78960e01b815260040160405180910390fd5b8b600060026101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460058190555083600681905550826007819055508160098190555060008060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280191906148f0565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b39361283993909216916000199101614b58565b6020604051808303816000875af1158015612858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287c9190614b81565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906128ad908a9060001990600401614b58565b6020604051808303816000875af11580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f09190614b81565b50508015612938576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b61294e6139f3565b806129598385614c91565b6129639190614c91565b60641461298357604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4f91906148f0565b6001600160a01b0316336001600160a01b031614612a8057604051631dd2188d60e31b815260040160405180910390fd5b565b6000828152600c6020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab6790612ac79084815260200190565b60405180910390a25050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b600854610100900460ff1615612a8057604051631dd2188d60e31b815260040160405180910390fd5b612baa61424c565b6000546040516351d407ff60e11b8152620100009091046001600160a01b03169063a3a80ffe90612be390879087908790600401614b9c565b61014060405180830381865afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190614d37565b90505b9392505050565b612c6a6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051638c8ff1d560e01b8152620100009091046001600160a01b031690638c8ff1d590612ca390879087908790600401614b9c565b60c060405180830381865afa158015612cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190614d54565b600080612cf86402540be400610384614da6565b905060008611612d09576000612d58565b85836402540be40086612d2557612d20888a614dd6565b612d2f565b612d2f8989614dd6565b612d3a906064614da6565b612d449190614da6565b612d4e9190614da6565b612d589190614df6565b9150808213612d675781612d69565b805b9695505050505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ded91906148f0565b9050612e04898789612dff8789614c91565b613a46565b50600b548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb94612e5094939290918c91600091600401614e24565b600060405180830381600087803b158015612e6a57600080fd5b505af1158015612e7e573d6000803e3d6000fd5b50505050612e8a6130ef565b6001600160a01b03166320f0fc5e8a602001518b60e0015188612ead9190614950565b60c08d01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b158015612f0157600080fd5b505af1158015612f15573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b99450612f5893600401614b9c565b600060405180830381600087803b158015612f7257600080fd5b505af1158015612f86573d6000803e3d6000fd5b5050505060808901511561307d57612f9c6141f0565b600081610100015182610120015189612fb59190614e5b565b612fbf9190614e5b565b905080841115613056576001600160a01b03831663e66a6e3b612fe28387614e5b565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561302b57600080fd5b505af115801561303f573d6000803e3d6000fd5b505050506130518b6000015182613b69565b613076565b61306a6130638583614e5b565b8c51613bd8565b8a516130769085613b69565b50506130e3565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b1580156130ca57600080fd5b505af11580156130de573d6000803e3d6000fd5b505050505b50979650505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316791906148f0565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c891906148f0565b905090565b6131d56142aa565b60005460405163b66e6b0560e01b815260048101849052620100009091046001600160a01b03169063b66e6b05906024016101e060405180830381865afa158015613224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132489190614e6e565b92915050565b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f3293613286939190613c90565b8660c001518760a001518861010001518960e001516132a59190614923565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156132f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133189190614ed3565b6101208601519194509250600090613340576064856020015161333b9190614950565b613371565b6402540be4006064866101200151876020015161335d9190614923565b6133679190614950565b6133719190614950565b60085490915060ff1661352757604085015115613520578460a001516133a8578085602001516133a19190614e5b565b83106133bb565b8085602001516133b89190614c91565b83115b6135195760008561014001511180156133f057508460a001516133e6578461014001518311156133f0565b8461014001518310155b61351257600085610160015111801561342557508460a0015161341b57846101600151831015613425565b8461016001518311155b61350b576134468560c001518660a001518760e00151886101000151613d00565b1561350457600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561349e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c29190614964565b6101008601516134d29086614923565b116134fd576134ea8560c00151866101000151613ea9565b156134f657600061352a565b600861352a565b600761352a565b600661352a565b600561352a565b600461352a565b600361352a565b600261352a565b60015b93959294505050565b61353b61424c565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b591906148f0565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361b91906148f0565b90506136256141f0565b8760e0015188608001516136399190614923565b6020828101919091526000548951918a015160405163292c161760e01b8152620100009092046001600160a01b03169263292c16179261367c9290600401614b58565b602060405180830381865afa158015613699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bd9190614964565b8860400181815250506136e38860a001518960e001518a61010001518b60c00151613f48565b8861010001818152505061370a8860a001518960e001518a61012001518b60c00151613fdb565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0394851660048201526024810193909352604483015215156064820152911690630e6bc39a90608401600060405180830381600087803b15801561377b57600080fd5b505af115801561378f573d6000803e3d6000fd5b505050506020880151608089015160c08a01516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038316906320f0fc5e90608401600060405180830381600087803b1580156137fb57600080fd5b505af115801561380f573d6000803e3d6000fd5b5050600b548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb955092939192909161384e9190614923565b60018e60c001516040518763ffffffff1660e01b815260040161387696959493929190614e24565b600060405180830381600087803b15801561389057600080fd5b505af11580156138a4573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d608001516138fd9190614923565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401613934929190614ef7565b600060405180830381600087803b15801561394e57600080fd5b505af1158015613962573d6000803e3d6000fd5b505089516001600160a01b03166000908152600a60209081526040808320828e015184528252808320818e0151845282528083208380529091528120925090506139aa614055565b825467ffffffffffffffff191663ffffffff9190911690811764010000000082021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b6000806000613a568787876140d6565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015613af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b159190614964565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064015b600060405180830381600087803b158015613bc457600080fd5b505af1158015610532573d6000803e3d6000fd5b613be23083613b69565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5991906148f0565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b90604401613baa565b6000806402540be400606480613ca68789614923565b613cb09190614950565b613cba9088614e5b565b613cc49089614923565b613cce9190614950565b613cd89190614950565b905082613cee57613ce98187614e5b565b612d69565b612d698187614c91565b949350505050565b600080613d0d8385614923565b600b54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa158015613d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7b9190614964565b613d89906305f5e100614923565b60005482906201000090046001600160a01b03166377a9fdcf8989613daf576001613db2565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015613df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1a9190614964565b613e249190614c91565b11158015612d695750600b5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d699190614b81565b6000828152600c60205260408120548015613ec75780831115613cf8565b613ecf6130ef565b6001600160a01b031663281b693c856040518263ffffffff1660e01b8152600401613efc91815260200190565b602060405180830381865afa158015613f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3d9190614964565b831115949350505050565b6000821580613f715750613f636402540be400610384614da6565b613f6f86858588612ce4565b145b15613fd2576000606485613f8761038489614923565b613f919190614950565b613f9b9190614950565b905082613fc05785811115613fb1576000613fca565b613fbb8187614e5b565b613fca565b613fca8187614c91565b915050613cf8565b50909392505050565b600080831180156140115750613ff76402540be400604b614da6565b61400390600019614da6565b61400f86858588612ce4565b125b15613fd2576000606485614026604b89614923565b6140309190614950565b61403a9190614950565b90508261404b57613fbb8187614c91565b613fca8187614e5b565b600061a4b1461480614069575062066eed46145b156140d15760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c89190614964565b504390565b600b546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa158015614190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b49190614964565b9050836402540be4006141c8836064614923565b6141d29190614923565b6141dc9190614950565b6141e69084614dd6565b9150935093915050565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060c001604052806142bd61424c565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f8401126142f857600080fd5b5081356001600160401b0381111561430f57600080fd5b6020830191508360208260051b850101111561432a57600080fd5b9250929050565b6000806000806040858703121561434757600080fd5b84356001600160401b038082111561435e57600080fd5b61436a888389016142e6565b9096509450602087013591508082111561438357600080fd5b50614390878288016142e6565b95989497509550505050565b6000608082840312156143ae57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101a081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60008082840360c081121561447657600080fd5b614480858561439c565b92506040607f198201121561449457600080fd5b50604051604081018181106001600160401b03821117156144c557634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff811681146144e057600080fd5b815260a08401356001600160d81b03811681146144fc57600080fd5b6020820152919491935090915050565b600060c0828403121561451e57600080fd5b6145266143ca565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b60006020828403121561457857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156145b75783518352928401929184019160010161459b565b50909695505050505050565b6001600160a01b03811681146114d057600080fd5b8035600281106145e757600080fd5b919050565b6000806000806080858703121561460257600080fd5b843561460d816145c3565b93506020850135925060408501359150614629606086016145d8565b905092959194509250565b6000806040838503121561464757600080fd5b50508035926020909101359150565b803563ffffffff811681146145e757600080fd5b60008082840361010081121561467f57600080fd5b614689858561439c565b92506080607f198201121561469d57600080fd5b50604051608081018181106001600160401b03821117156146ce57634e487b7160e01b600052604160045260246000fd5b6040526146dd60808501614656565b81526146eb60a08501614656565b60208201526146fc60c08501614656565b604082015261470d60e08501614656565b6060820152809150509250929050565b60008060008060008060008060008060006101608c8e03121561473f57600080fd5b8b3561474a816145c3565b9a5060208c013561475a816145c3565b995060408c013561476a816145c3565b985060608c013561477a816145c3565b975060808c013561478a816145c3565b965060a08c013561479a816145c3565b955060c08c01356147aa816145c3565b8095505060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000606084860312156147f257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561483157600080fd5b8135612c28816145c3565b60006020828403121561484e57600080fd5b612c28826145d8565b634e487b7160e01b600052602160045260246000fd5b80516145e7816145c3565b600060c0828403121561488a57600080fd5b6148926143ca565b825161489d816145c3565b81526020838101519082015260408301516148b7816145c3565b80604083015250606083015160608201526080830151608082015260a0830151600481106148e457600080fd5b60a08201529392505050565b60006020828403121561490257600080fd5b8151612c28816145c3565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176132485761324861490d565b634e487b7160e01b600052601260045260246000fd5b60008261495f5761495f61493a565b500490565b60006020828403121561497657600080fd5b5051919050565b6004811061498d5761498d614857565b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516149c3606084018261497d565b505050565b60c081016149d68286614991565b608082019390935260a00152919050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151614a3960c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b8981526102408101614a70602083018b6149e7565b614a7e61016083018a61497d565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b600c811061498d5761498d614857565b60408101614ad6828561497d565b612c286020830184614ab8565b608081016132488284614991565b6102008101614b00828a6149e7565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b602081016132488284614ab8565b82815260408101612c286020830184614ab8565b6001600160a01b03929092168252602082015260400190565b805180151581146145e757600080fd5b600060208284031215614b9357600080fd5b612c2882614b71565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101a08284031215614bd057600080fd5b614bd8614400565b614be18361486d565b815260208301516020820152604083015160408201526060830151606082015260808301516080820152614c1760a08401614b71565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b600060208284031215614c8257600080fd5b815160038110612c2857600080fd5b808201808211156132485761324861490d565b60006101408284031215614cb757600080fd5b614cbf614431565b9050614cca8261486d565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a0820152614d0a60c08301614b71565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101408284031215614d4a57600080fd5b612c288383614ca4565b600060c08284031215614d6657600080fd5b614d6e6143ca565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201526148e460a08401614b71565b80820260008212600160ff1b84141615614dc257614dc261490d565b81810583148215176132485761324861490d565b81810360008312801583831316838312821617156112bd576112bd61490d565b600082614e0557614e0561493a565b600160ff1b821460001984141615614e1f57614e1f61490d565b500590565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b818103818111156132485761324861490d565b60006101e08284031215614e8157600080fd5b614e896143ca565b614e938484614ca4565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b60008060408385031215614ee657600080fd5b505080516020909101519092909150565b6102008101614f0682856149e7565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e0830152939250505056fea26469706673582212200c4de6fed89493ebae42829afab14538603b445a662746a1942aa6e110f4da2864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101995760003560e01c80637bb6c11c116100e4578063ae8421e111610092578063ae8421e11461043f578063b187bd2614610447578063b3f2f4d614610454578063b47ee40814610467578063b736ca821461047a578063c68078b91461048d578063c68365df146104a0578063d3dc7539146104a957600080fd5b80637bb6c11c1461034e5780637d490caf146103575780637e09ae8a1461036a5780638456cb591461037d5780638b263878146103855780638f0622271461038d5780639bd24d83146103af57600080fd5b806337edb1381161014c57806337edb1381461025957806346f93a631461026e57806348829122146102e65780634cf088d9146102f9578063531cc9651461030c5780635ad9f9931461031f57806361ba6c3d14610332578063676c51641461034557600080fd5b8062e0fa891461019e5780631346b0ff146101b357806316fff074146101e3578063178623a7146101fc57806321c861961461021357806323f7197b14610226578063281b693c14610239575b600080fd5b6101b16101ac366004614331565b6104bc565b005b6002546101c6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546101c6906201000090046001600160a01b031681565b61020560055481565b6040519081526020016101da565b6101b1610221366004614462565b61053a565b6101b161023436600461450c565b6105f5565b610205610247366004614566565b600c6020526000908152604090205481565b6102616111c7565b6040516101da919061457f565b6102c161027c3660046145ec565b600d60209081526000948552604080862082529385528385208152918452828420909152825290205464ffffffffff811690600160281b90046001600160d81b031682565b6040805164ffffffffff90931683526001600160d81b039091166020830152016101da565b6101b16102f4366004614634565b6112c4565b6004546101c6906001600160a01b031681565b600b546101c6906001600160a01b031681565b6001546101c6906001600160a01b031681565b6101b161034036600461450c565b6112d2565b61020560095481565b61020560075481565b6101b161036536600461450c565b6114d3565b6101b161037836600461466a565b611a20565b6101b1611b29565b6101b1611b7f565b60085461039f90610100900460ff1681565b60405190151581526020016101da565b61040f6103bd3660046145ec565b600a60209081526000948552604080862082529385528385208152918452828420909152825290205463ffffffff808216916401000000008104821691600160401b8204811691600160601b90041684565b6040805163ffffffff958616815293851660208501529184169183019190915290911660608201526080016101da565b6101b1611cde565b60085461039f9060ff1681565b6101b1610462366004614566565b611d3e565b6101b161047536600461450c565b611da3565b6101b161048836600461471d565b612511565b6101b161049b3660046147dd565b612946565b61020560065481565b6003546101c6906001600160a01b031681565b6104c46129d8565b828181146104e557604051635863f78960e01b815260040160405180910390fd5b60005b818110156105325761052a86868381811061050557610505614809565b9050602002013585858481811061051e5761051e614809565b90506020020135612a82565b6001016104e8565b505050505050565b610542612ad3565b80600d6000610554602086018661481f565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090610599608086016060870161483c565b60018111156105aa576105aa614857565b60018111156105bb576105bb614857565b8152602080820192909252604001600020825192909101516001600160d81b0316600160281b0264ffffffffff9092169190911790555050565b6105fd612b26565b610605612b79565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015610657573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b9190614878565b90506000604051806080016040528083604001516001600160a01b0316815260200183606001518152602001836080015181526020018360a0015160038111156106c7576106c7614857565b815250905060006106e5836040015184606001518560800151612ba2565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906148f0565b9050600085606001516000146107875760e08301511561078057600061078a565b600961078a565b60025b9050600081600b8111156107a0576107a0614857565b0361108f5760006107be846000015185602001518660400151612c2f565b90506000836001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610800573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082491906148f0565b905061082e6141f0565b6402540be4008660e001518460200151886060015161084d9190614923565b6108579190614923565b6108619190614950565b6020820181905260e087015161087691614950565b815260028860a00151600381111561089057610890614857565b036109aa57600b546040805160e0808201835289516001600160a01b0390811683526020808c0151908401528a8401518385015260a0808c0151606085015260c0808d015115156080860152875191850191909152918b0151918301919091529151633837d79d60e11b8152919092169163706faf3a91610963919060040181516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602060405180830381865afa158015610980573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a49190614964565b60a08201525b60008860a0015160038111156109c2576109c2614857565b146109f95760018860a0015160038111156109df576109df614857565b146109ee578060a00151610a00565b856101200151610a00565b8561010001515b6080820181905215801590610a1d575080608001518960a0015111155b8015610a3157508060800151896080015110155b158015610140830152610b225760028860a001516003811115610a5657610a56614857565b14610afe576402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610a9591815260200190565b602060405180830381865afa158015610ab2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad69190614964565b8360200151610ae59190614923565b610aef9190614950565b610af99190614950565b610b18565b8051606490610b0e906005614923565b610b189190614950565b60e0820152610d03565b6060890151608082015260028860a001516003811115610b4457610b44614857565b14610cb15760008860a001516003811115610b6157610b61614857565b148015610b7357506000866101000151115b8015610ba357508560c00151610b955785610100015189606001511115610ba3565b856101000151896060015110155b80610c03575060018860a001516003811115610bc157610bc1614857565b148015610bd357506000866101200151115b8015610c0357508560c00151610bf55785610120015189606001511015610c03565b856101200151896060015111155b610c0e576000610cfd565b6402540be4006064836001600160a01b0316639c8dd2fa89602001516040518263ffffffff1660e01b8152600401610c4891815260200190565b602060405180830381865afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190614964565b8360200151610c989190614923565b610ca29190614950565b610cac9190614950565b610cfd565b8560c00151610ccb578060a0015189606001511015610cd8565b8060a00151896060015111155b610ce3576000610cfd565b8051606490610cf3906005614923565b610cfd9190614950565b60e08201525b60e081015115610d14576000610d17565b600b5b9350600084600b811115610d2d57610d2d614857565b0361108b57610d4e8660a0015182608001518860c001518960e00151612ce4565b816060018181525050846001600160a01b031663290702e56040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dbb9190614964565b816040018181525050610eba86600083606001518460000151876040015160026003811115610dec57610dec614857565b8e60a001516003811115610e0257610e02614857565b14610eaa576402540be4006064896001600160a01b031663836a341a8f602001516040518263ffffffff1660e01b8152600401610e4191815260200190565b602060405180830381865afa158015610e5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e829190614964565b8960200151610e919190614923565b610e9b9190614950565b610ea59190614950565b610eb0565b8660e001515b8760e00151612d73565b60c0820152604081015160e0820151610ed9906402540be40090614923565b610ee39190614950565b61010082018190526001546040808401519051630891674d60e31b81526001600160a01b039092169263448b3a6892610f21928c92916004016149c8565b600060405180830381600087803b158015610f3b57600080fd5b505af1158015610f4f573d6000803e3d6000fd5b505060005460208b01516101008501516040516339caebcf60e11b815260048101929092526024820152620100009091046001600160a01b03169250637395d79e9150604401600060405180830381600087803b158015610faf57600080fd5b505af1158015610fc3573d6000803e3d6000fd5b5050505085600001516001600160a01b03167fcada75418f444febbe725c87360b063440c54e00e82d578010de1ed009d756c58260e0015160405161100a91815260200190565b60405180910390a287600001516001600160a01b031689600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408a60800151898c60a0015186608001516000886000015189606001518a60c001518b610140015160405161108299989796959493929190614a5b565b60405180910390a35b5050505b600081600b8111156110a3576110a3614857565b146110f6578451865160a08701516040516001600160a01b03909316927fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc3916110ed918690614ac8565b60405180910390a35b60015460405163bf654d2b60e01b81526001600160a01b039091169063bf654d2b90611126908790600401614ae3565b600060405180830381600087803b15801561114057600080fd5b505af1158015611154573d6000803e3d6000fd5b5050600054885160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb91506024015b600060405180830381600087803b1580156111a757600080fd5b505af11580156111bb573d6000803e3d6000fd5b50505050505050505050565b606060006111d36130ef565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa158015611210573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112349190614964565b90506000816001600160401b03811115611250576112506143b4565b604051908082528060200260200182016040528015611279578160200160208202803683370190505b50905060005b828110156112bd576000818152600c602052604090205482518390839081106112aa576112aa614809565b602090810291909101015260010161127f565b5092915050565b6112ce8282612a82565b5050565b6112da612b26565b6112e2612b79565b60006112f182600001516131cd565b90508060200151600003611303575050565b600081600001519050600080600061139f60405180610180016040528088602001518152602001876040015181526020018860200151815260200188604001518152602001876080015181526020018660c001511515815260200186602001518152602001866080015181526020018660e00151815260200187606001518152602001866101000151815260200186610120015181525061324e565b60a0870182905291945092509050600081600b8111156113c1576113c1614857565b036114405760006113d6856105dc6000613533565b50905086600001517f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c33309978260018460a00151888660e00151876080015161141c9190614923565b6000806040516114329796959493929190614af1565b60405180910390a250611490565b836020015184600001516001600160a01b031687600001517f1dc3532663e5566091476fb5aba1e514ef733714c83d4feec5723de6f16c3269846040516114879190614b36565b60405180910390a45b6000548651604051630195728b60e71b8152600481019190915260016024820152620100009091046001600160a01b03169063cab945809060440161118d565b50565b6114db612b26565b6114e3612b79565b60006114f282600001516131cd565b90508060200151600003611504575050565b8051805160208201516040909201516000926115209291612ba2565b905060008160e001516000146115485760208401511561154157600061154b565b600261154b565b60095b9050600981600b81111561156157611561614857565b1461193957600061157f836000015184602001518560400151612c2f565b905060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f991906148f0565b90506116036141f0565b8460e0015185608001516116179190614923565b6020820152600084600b81111561163057611630614857565b036118e9576116518560a0015188602001518760c001518860e00151612ce4565b606082015260e0850151602082015161166a9190614950565b81600001818152505061188b8560018360600151846000015187604001516402540be4006064896001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f291906148f0565b6001600160a01b031663836a341a8e602001516040518263ffffffff1660e01b815260040161172391815260200190565b602060405180830381865afa158015611740573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117649190614964565b89602001516117739190614923565b61177d9190614950565b6117879190614950565b6402540be40060648a6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906148f0565b6001600160a01b0316639c8dd2fa8f602001516040518263ffffffff1660e01b815260040161182291815260200190565b602060405180830381865afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118639190614964565b8a602001516118729190614923565b61187c9190614950565b6118869190614950565b612d73565b60c08201819052875160208901518351606085015160405193947f2739a12dffae5d66bd9e126a286078ed771840f2288f0afa5709ce38c3330997946118dc948c9460009491938593919291614af1565b60405180910390a2611935565b84600001516001600160a01b03167f4628f3d38f72d5f9e077d3965e10cd3242ff1316aa2bf81f054c0dfb254084068260e0015160405161192c91815260200190565b60405180910390a25b5050505b600081600b81111561194d5761194d614857565b146119ac578251602081015181518651604093840151935192936001600160a01b039092169290917f293df767d6749666902026d2f6a2cc4e5f15cdede46402226c42ef4fdf27a17c916119a391908790614b44565b60405180910390a45b600080548551604051630195728b60e71b8152600481019190915260248101929092526201000090046001600160a01b03169063cab9458090604401600060405180830381600087803b158015611a0257600080fd5b505af1158015611a16573d6000803e3d6000fd5b5050505050505050565b611a28612ad3565b80600a6000611a3a602086018661481f565b6001600160a01b03168152602080820192909252604090810160009081208684013582528352818120868301358252909252812090611a7f608086016060870161483c565b6001811115611a9057611a90614857565b6001811115611aa157611aa1614857565b8152602080820192909252604090810160002083518154938501519285015160609095015163ffffffff908116600160601b0263ffffffff60601b19968216600160401b029690961667ffffffffffffffff60401b199482166401000000000267ffffffffffffffff1990961691909216179390931791909116919091179190911790555050565b611b316139f3565b6008805460ff8082161560ff1990921682179092556040519116151581527f9422424b175dda897495a07b091ef74a3ef715cf6d866fc972954c1c7f459304906020015b60405180910390a1565b600060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf691906148f0565b6001600160a01b031663095ea7b3600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7b91906148f0565b6000196040518363ffffffff1660e01b8152600401611c9b929190614b58565b6020604051808303816000875af1158015611cba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d09190614b81565b611ce66139f3565b6008805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd388893611b759390049091161515815260200190565b611d466139f3565b6005811115611d6857604051635863f78960e01b815260040160405180910390fd5b60098190556040518181527fa57398db99aea3c2cd0d30f5b4e8f597539206c95b9c5b73e84962d8b565bbeb9060200160405180910390a150565b611dab612b26565b611db3612b79565b6000805482516040516399794d3560e01b81526004810191909152620100009091046001600160a01b0316906399794d359060240160c060405180830381865afa158015611e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e299190614878565b60008054604083810151606085015160808601519251636e6f99cd60e11b81529596509394620100009093046001600160a01b03169363dcdf339a93611e729390600401614b9c565b602060405180830381865afa158015611e8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb39190614b81565b15611ebf576000611ec2565b60095b9050600081600b811115611ed857611ed8614857565b036123825760008054604084810151606086015160808701519251632e21e28b60e21b8152620100009094046001600160a01b03169363b8878a2c93611f22939291600401614b9c565b6101a060405180830381865afa158015611f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f649190614bbd565b600154604080860151606087015160808801519251636a6f32f560e11b81529495506000946001600160a01b039094169363d4de65ea93611fa9939291600401614b9c565b602060405180830381865afa158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea9190614c70565b905081610140015185608001511015801561200e57508161014001518560a0015111155b61201957600b61201c565b60005b925060008060006121306040518061018001604052806000600b81111561204557612045614857565b89600b81111561205757612057614857565b14612066578a6060015161206d565b8761014001515b81526101408881015160208084019190915260608d810151604080860191909152808f0151828601526080808d01519086015260a0808d0151151590860152828c01805160c080880191909152928d015160e080880191909152928d0151610100808801919091528d516001600160a01b03166000908152600d865283812092518152918552828220838f01518352855282822060018352909452205464ffffffffff166101208501528a0151918301919091528801516101609091015261324e565b9194509250905060008087600b81111561214c5761214c614857565b1490508015816121d05750610140860151158061217a5750600285600281111561217857612178614857565b145b6121a9578560a00151612198578561014001518960600151106121d0565b8561014001518960600151116121d0565b8560a001516121c3578561014001518960600151116121d0565b8561014001518960600151105b6121da57816121dd565b600b5b9650600087600b8111156121f3576121f3614857565b0361237b5760008061227d6040518061014001604052808a600001516001600160a01b031681526020018a60200151815260200160008152602001600081526020018a6060015181526020018781526020018a60a00151151581526020018a60c0015181526020018a60e0015181526020018a61010001518152508b602001518c60800151613533565b6000548a5160208c01516040808e0151905163b4b0f56760e01b8152959750939550620100009092046001600160a01b03169363b4b0f567936122c39391600401614b9c565b600060405180830381600087803b1580156122dd57600080fd5b505af11580156122f1573d6000803e3d6000fd5b5050505089600001516001600160a01b03168b600001517f1ab0771256522e5114b583b488c490436d6f8fe02b1e1c9697443e8704c4e8408c608001518560038760a001518c6402540be400898b6060015161234d9190614923565b6123579190614950565b6000808d60405161237099989796959493929190614a5b565b60405180910390a350505b5050505050505b600081600b81111561239657612396614857565b146123e95781600001516001600160a01b031683600001517fe9681b5336d843735c62e93114e5a0f45912a84ae83fa3f3ed80ca5ad933dfc36003846040516123e0929190614ac8565b60405180910390a35b600160009054906101000a90046001600160a01b03166001600160a01b031663bf654d2b604051806080016040528085604001516001600160a01b0316815260200185606001518152602001856080015181526020018560a00151600381111561245557612455614857565b8152506040518263ffffffff1660e01b81526004016124749190614ae3565b600060405180830381600087803b15801561248e57600080fd5b505af11580156124a2573d6000803e3d6000fd5b5050600054855160405163201d8bdb60e01b81526004810191909152620100009091046001600160a01b0316925063201d8bdb9150602401600060405180830381600087803b1580156124f457600080fd5b505af1158015612508573d6000803e3d6000fd5b50505050505050565b600054610100900460ff16158080156125315750600054600160ff909116105b8061254b5750303b15801561254b575060005460ff166001145b6125b25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156125d5576000805461ff0019166101001790555b6001600160a01b038c1615806125f257506001600160a01b038b16155b8061260457506001600160a01b038a16155b8061261657506001600160a01b038916155b8061262857506001600160a01b038816155b8061263a57506001600160a01b038616155b8061265a57508261264b8587614c91565b6126559190614c91565b606414155b806126655750600582115b1561268357604051635863f78960e01b815260040160405180910390fd5b8b600060026101000a8154816001600160a01b0302191690836001600160a01b031602179055508a600160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555089600260006101000a8154816001600160a01b0302191690836001600160a01b0316021790555088600360006101000a8154816001600160a01b0302191690836001600160a01b0316021790555087600460006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086600b60006101000a8154816001600160a01b0302191690836001600160a01b031602179055508460058190555083600681905550826007819055508160098190555060008060029054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127dd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280191906148f0565b6004805460405163095ea7b360e01b81529293506001600160a01b038085169363095ea7b39361283993909216916000199101614b58565b6020604051808303816000875af1158015612858573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287c9190614b81565b5060405163095ea7b360e01b81526001600160a01b0382169063095ea7b3906128ad908a9060001990600401614b58565b6020604051808303816000875af11580156128cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128f09190614b81565b50508015612938576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050505050565b61294e6139f3565b806129598385614c91565b6129639190614c91565b60641461298357604051635863f78960e01b815260040160405180910390fd5b60058390556006829055600781905560408051848152602081018490529081018290527f0caa98ed9a1605da290817d1f67b1b83c63f9229abeca5123df5d90581c495589060600160405180910390a1505050565b600260009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4f91906148f0565b6001600160a01b0316336001600160a01b031614612a8057604051631dd2188d60e31b815260040160405180910390fd5b565b6000828152600c6020526040908190208290555182907f95924bc10431f9a625a06fe5a27d55f4348510b2da42a18fe3bf2a6f2c4eab6790612ac79084815260200190565b60405180910390a25050565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b600854610100900460ff1615612a8057604051631dd2188d60e31b815260040160405180910390fd5b612baa61424c565b6000546040516351d407ff60e11b8152620100009091046001600160a01b03169063a3a80ffe90612be390879087908790600401614b9c565b61014060405180830381865afa158015612c01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190614d37565b90505b9392505050565b612c6a6040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b600054604051638c8ff1d560e01b8152620100009091046001600160a01b031690638c8ff1d590612ca390879087908790600401614b9c565b60c060405180830381865afa158015612cc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c259190614d54565b600080612cf86402540be400610384614da6565b905060008611612d09576000612d58565b85836402540be40086612d2557612d20888a614dd6565b612d2f565b612d2f8989614dd6565b612d3a906064614da6565b612d449190614da6565b612d4e9190614da6565b612d589190614df6565b9150808213612d675781612d69565b805b9695505050505050565b600080600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ded91906148f0565b9050612e04898789612dff8789614c91565b613a46565b50600b548a5160208c01516040808e015160c08f0151915163ce67edfb60e01b81529597506001600160a01b039094169463ce67edfb94612e5094939290918c91600091600401614e24565b600060405180830381600087803b158015612e6a57600080fd5b505af1158015612e7e573d6000803e3d6000fd5b50505050612e8a6130ef565b6001600160a01b03166320f0fc5e8a602001518b60e0015188612ead9190614950565b60c08d01516040516001600160e01b031960e086901b168152600481019390935260248301919091521515604482015260006064820152608401600060405180830381600087803b158015612f0157600080fd5b505af1158015612f15573d6000803e3d6000fd5b50506000548b5160208d01516040808f015190516390d112b960e01b8152620100009094046001600160a01b031695506390d112b99450612f5893600401614b9c565b600060405180830381600087803b158015612f7257600080fd5b505af1158015612f86573d6000803e3d6000fd5b5050505060808901511561307d57612f9c6141f0565b600081610100015182610120015189612fb59190614e5b565b612fbf9190614e5b565b905080841115613056576001600160a01b03831663e66a6e3b612fe28387614e5b565b8d5160405160e084901b6001600160e01b031916815260048101929092526001600160a01b03166024820152604401600060405180830381600087803b15801561302b57600080fd5b505af115801561303f573d6000803e3d6000fd5b505050506130518b6000015182613b69565b613076565b61306a6130638583614e5b565b8c51613bd8565b8a516130769085613b69565b50506130e3565b885160405163e66a6e3b60e01b8152600481018490526001600160a01b0391821660248201529082169063e66a6e3b90604401600060405180830381600087803b1580156130ca57600080fd5b505af11580156130de573d6000803e3d6000fd5b505050505b50979650505050505050565b60008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316791906148f0565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c891906148f0565b905090565b6131d56142aa565b60005460405163b66e6b0560e01b815260048101849052620100009091046001600160a01b03169063b66e6b05906024016101e060405180830381865afa158015613224573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132489190614e6e565b92915050565b60025481516060830151608084015160a0850151600094859485946001600160a01b0390921693637ea95f3293613286939190613c90565b8660c001518760a001518861010001518960e001516132a59190614923565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156132f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133189190614ed3565b6101208601519194509250600090613340576064856020015161333b9190614950565b613371565b6402540be4006064866101200151876020015161335d9190614923565b6133679190614950565b6133719190614950565b60085490915060ff1661352757604085015115613520578460a001516133a8578085602001516133a19190614e5b565b83106133bb565b8085602001516133b89190614c91565b83115b6135195760008561014001511180156133f057508460a001516133e6578461014001518311156133f0565b8461014001518310155b61351257600085610160015111801561342557508460a0015161341b57846101600151831015613425565b8461016001518311155b61350b576134468560c001518660a001518760e00151886101000151613d00565b1561350457600260009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561349e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134c29190614964565b6101008601516134d29086614923565b116134fd576134ea8560c00151866101000151613ea9565b156134f657600061352a565b600861352a565b600761352a565b600661352a565b600561352a565b600461352a565b600361352a565b600261352a565b60015b93959294505050565b61353b61424c565b600080600060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135b591906148f0565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061361b91906148f0565b90506136256141f0565b8760e0015188608001516136399190614923565b6020828101919091526000548951918a015160405163292c161760e01b8152620100009092046001600160a01b03169263292c16179261367c9290600401614b58565b602060405180830381865afa158015613699573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136bd9190614964565b8860400181815250506136e38860a001518960e001518a61010001518b60c00151613f48565b8861010001818152505061370a8860a001518960e001518a61012001518b60c00151613fdb565b610120890152600254885160208a01516040808c015160c08d01519151630735e1cd60e11b81526001600160a01b0394851660048201526024810193909352604483015215156064820152911690630e6bc39a90608401600060405180830381600087803b15801561377b57600080fd5b505af115801561378f573d6000803e3d6000fd5b505050506020880151608089015160c08a01516040516310787e2f60e11b81526004810193909352602483019190915215156044820152600160648201526001600160a01b038316906320f0fc5e90608401600060405180830381600087803b1580156137fb57600080fd5b505af115801561380f573d6000803e3d6000fd5b5050600b548a5160208c015160408d015160e08e015160808f01516001600160a01b03909516965063ce67edfb955092939192909161384e9190614923565b60018e60c001516040518763ffffffff1660e01b815260040161387696959493929190614e24565b600060405180830381600087803b15801561389057600080fd5b505af11580156138a4573d6000803e3d6000fd5b50505050600060029054906101000a90046001600160a01b03166001600160a01b031663c311ab31896040518060c0016040528060008152602001856040015181526020018c60e001518d608001516138fd9190614923565b81526020016000815260200160008152602001600015158152506040518363ffffffff1660e01b8152600401613934929190614ef7565b600060405180830381600087803b15801561394e57600080fd5b505af1158015613962573d6000803e3d6000fd5b505089516001600160a01b03166000908152600a60209081526040808320828e015184528252808320818e0151845282528083208380529091528120925090506139aa614055565b825467ffffffffffffffff191663ffffffff9190911690811764010000000082021763ffffffff60601b1916600160601b91909102179091555060400151969795505050505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a2b573d6000803e3d6000fd5b6000806000613a568787876140d6565b600254895160208b01516040808d015160c08e015160e08f01519251636ceaca6760e01b81526001600160a01b0395861660048201526024810194909452604484019190915215156064830152608482018c905260a482015260c4810185905260e481018990529295509293509190911690636ceaca6790610104016020604051808303816000875af1158015613af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b159190614964565b875160408051838152602081018690529295506001600160a01b03909116917fe7d34775bf6fd7b34e703a903ef79ab16166ebdffce96a66f4d2f84b6263bb29910160405180910390a25094509492505050565b600054604051638a238ae560e01b81526001600160a01b0362010000909204821660048201819052918416602482015260448101839052638a238ae5906064015b600060405180830381600087803b158015613bc457600080fd5b505af1158015610532573d6000803e3d6000fd5b613be23083613b69565b600060029054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613c35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c5991906148f0565b60405163a481c14b60e01b8152600481018490526001600160a01b038381166024830152919091169063a481c14b90604401613baa565b6000806402540be400606480613ca68789614923565b613cb09190614950565b613cba9088614e5b565b613cc49089614923565b613cce9190614950565b613cd89190614950565b905082613cee57613ce98187614e5b565b612d69565b612d698187614c91565b949350505050565b600080613d0d8385614923565b600b54604051632e53fe8760e21b8152600481018990529192506001600160a01b03169063b94ffa1c90602401602060405180830381865afa158015613d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d7b9190614964565b613d89906305f5e100614923565b60005482906201000090046001600160a01b03166377a9fdcf8989613daf576001613db2565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa158015613df6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1a9190614964565b613e249190614c91565b11158015612d695750600b5460405163d627450560e01b8152600481018890528615156024820152604481018390526001600160a01b039091169063d627450590606401602060405180830381865afa158015613e85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d699190614b81565b6000828152600c60205260408120548015613ec75780831115613cf8565b613ecf6130ef565b6001600160a01b031663281b693c856040518263ffffffff1660e01b8152600401613efc91815260200190565b602060405180830381865afa158015613f19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3d9190614964565b831115949350505050565b6000821580613f715750613f636402540be400610384614da6565b613f6f86858588612ce4565b145b15613fd2576000606485613f8761038489614923565b613f919190614950565b613f9b9190614950565b905082613fc05785811115613fb1576000613fca565b613fbb8187614e5b565b613fca565b613fca8187614c91565b915050613cf8565b50909392505050565b600080831180156140115750613ff76402540be400604b614da6565b61400390600019614da6565b61400f86858588612ce4565b125b15613fd2576000606485614026604b89614923565b6140309190614950565b61403a9190614950565b90508261404b57613fbb8187614c91565b613fca8187614e5b565b600061a4b1461480614069575062066eed46145b156140d15760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156140ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c89190614964565b504390565b600b546040805160c0808201835286516001600160a01b03908116835260208089015190840190815288850151848601908152928901511515606085019081526080850189815260e08b015160a087019081529651632d28a81760e01b8152955184166004870152915160248601529251604485015291511515606484015290516084830152915160a482015260009283921690632d28a8179060c401602060405180830381865afa158015614190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141b49190614964565b9050836402540be4006141c8836064614923565b6141d29190614923565b6141dc9190614950565b6141e69084614dd6565b9150935093915050565b604051806101600160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060c001604052806142bd61424c565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b60008083601f8401126142f857600080fd5b5081356001600160401b0381111561430f57600080fd5b6020830191508360208260051b850101111561432a57600080fd5b9250929050565b6000806000806040858703121561434757600080fd5b84356001600160401b038082111561435e57600080fd5b61436a888389016142e6565b9096509450602087013591508082111561438357600080fd5b50614390878288016142e6565b95989497509550505050565b6000608082840312156143ae57600080fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b60405160c081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60405290565b6040516101a081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b03811182821017156143fa57634e487b7160e01b600052604160045260246000fd5b60008082840360c081121561447657600080fd5b614480858561439c565b92506040607f198201121561449457600080fd5b50604051604081018181106001600160401b03821117156144c557634e487b7160e01b600052604160045260246000fd5b604052608084013564ffffffffff811681146144e057600080fd5b815260a08401356001600160d81b03811681146144fc57600080fd5b6020820152919491935090915050565b600060c0828403121561451e57600080fd5b6145266143ca565b823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201528091505092915050565b60006020828403121561457857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156145b75783518352928401929184019160010161459b565b50909695505050505050565b6001600160a01b03811681146114d057600080fd5b8035600281106145e757600080fd5b919050565b6000806000806080858703121561460257600080fd5b843561460d816145c3565b93506020850135925060408501359150614629606086016145d8565b905092959194509250565b6000806040838503121561464757600080fd5b50508035926020909101359150565b803563ffffffff811681146145e757600080fd5b60008082840361010081121561467f57600080fd5b614689858561439c565b92506080607f198201121561469d57600080fd5b50604051608081018181106001600160401b03821117156146ce57634e487b7160e01b600052604160045260246000fd5b6040526146dd60808501614656565b81526146eb60a08501614656565b60208201526146fc60c08501614656565b604082015261470d60e08501614656565b6060820152809150509250929050565b60008060008060008060008060008060006101608c8e03121561473f57600080fd5b8b3561474a816145c3565b9a5060208c013561475a816145c3565b995060408c013561476a816145c3565b985060608c013561477a816145c3565b975060808c013561478a816145c3565b965060a08c013561479a816145c3565b955060c08c01356147aa816145c3565b8095505060e08c013593506101008c013592506101208c013591506101408c013590509295989b509295989b9093969950565b6000806000606084860312156147f257600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561483157600080fd5b8135612c28816145c3565b60006020828403121561484e57600080fd5b612c28826145d8565b634e487b7160e01b600052602160045260246000fd5b80516145e7816145c3565b600060c0828403121561488a57600080fd5b6148926143ca565b825161489d816145c3565b81526020838101519082015260408301516148b7816145c3565b80604083015250606083015160608201526080830151608082015260a0830151600481106148e457600080fd5b60a08201529392505050565b60006020828403121561490257600080fd5b8151612c28816145c3565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176132485761324861490d565b634e487b7160e01b600052601260045260246000fd5b60008261495f5761495f61493a565b500490565b60006020828403121561497657600080fd5b5051919050565b6004811061498d5761498d614857565b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516149c3606084018261497d565b505050565b60c081016149d68286614991565b608082019390935260a00152919050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c0810151614a3960c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b8981526102408101614a70602083018b6149e7565b614a7e61016083018a61497d565b87610180830152866101a0830152856101c0830152846101e0830152836102008301528215156102208301529a9950505050505050505050565b600c811061498d5761498d614857565b60408101614ad6828561497d565b612c286020830184614ab8565b608081016132488284614991565b6102008101614b00828a6149e7565b9615156101408201526101608101959095526101808501939093526101a08401919091526101c08301526101e090910152919050565b602081016132488284614ab8565b82815260408101612c286020830184614ab8565b6001600160a01b03929092168252602082015260400190565b805180151581146145e757600080fd5b600060208284031215614b9357600080fd5b612c2882614b71565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101a08284031215614bd057600080fd5b614bd8614400565b614be18361486d565b815260208301516020820152604083015160408201526060830151606082015260808301516080820152614c1760a08401614b71565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b600060208284031215614c8257600080fd5b815160038110612c2857600080fd5b808201808211156132485761324861490d565b60006101408284031215614cb757600080fd5b614cbf614431565b9050614cca8261486d565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a0820152614d0a60c08301614b71565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101408284031215614d4a57600080fd5b612c288383614ca4565b600060c08284031215614d6657600080fd5b614d6e6143ca565b82518152602083015160208201526040830151604082015260608301516060820152608083015160808201526148e460a08401614b71565b80820260008212600160ff1b84141615614dc257614dc261490d565b81810583148215176132485761324861490d565b81810360008312801583831316838312821617156112bd576112bd61490d565b600082614e0557614e0561493a565b600160ff1b821460001984141615614e1f57614e1f61490d565b500590565b6001600160a01b0396909616865260208601949094526040850192909252606084015215156080830152151560a082015260c00190565b818103818111156132485761324861490d565b60006101e08284031215614e8157600080fd5b614e896143ca565b614e938484614ca4565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b60008060408385031215614ee657600080fd5b505080516020909101519092909150565b6102008101614f0682856149e7565b82516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a083015115156101e0830152939250505056fea26469706673582212200c4de6fed89493ebae42829afab14538603b445a662746a1942aa6e110f4da2864736f6c63430008140033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2183,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2186,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12009,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterface)17163"
      },
      {
        "astId": 12012,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NftRewardsInterfaceV6_3_1)16182"
      },
      {
        "astId": 12015,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PairInfosInterface)16450"
      },
      {
        "astId": 12018,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ReferralsInterface)16648"
      },
      {
        "astId": 12021,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(StakingInterface)16656"
      },
      {
        "astId": 12035,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "WETHVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 12037,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 12039,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12041,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isPaused",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 12043,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isDone",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 12045,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 12057,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage))))"
      },
      {
        "astId": 12060,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(BorrowingFeesInterface)15761"
      },
      {
        "astId": 12064,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 12076,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeData",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BorrowingFeesInterface)15761": {
        "encoding": "inplace",
        "label": "contract BorrowingFeesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(NftRewardsInterfaceV6_3_1)16182": {
        "encoding": "inplace",
        "label": "contract NftRewardsInterfaceV6_3_1",
        "numberOfBytes": "20"
      },
      "t_contract(PairInfosInterface)16450": {
        "encoding": "inplace",
        "label": "contract PairInfosInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ReferralsInterface)16648": {
        "encoding": "inplace",
        "label": "contract ReferralsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StakingInterface)16656": {
        "encoding": "inplace",
        "label": "contract StakingInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterface)17163": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)12164": {
        "encoding": "inplace",
        "label": "enum TradingCallbacks.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage)))"
      },
      "t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)12164",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)12131_storage"
      },
      "t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)12164",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)12136_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(LastUpdated)12131_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)12164,t_struct(TradeData)12136_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)12131_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.LastUpdated",
        "members": [
          {
            "astId": 12124,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 12126,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 12128,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 12130,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)12136_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.TradeData",
        "members": [
          {
            "astId": 12133,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 12135,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}