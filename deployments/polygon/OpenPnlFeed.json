{
  "address": "0x34a9aaC0bC1cEF86Fdb65eDE0d4ba390F4D13BFb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_LINK_FEE_BALANCE_DIVIDER",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "contract IToken",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_oracles",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "_job",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_minAnswers",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newValue",
          "type": "bytes32"
        }
      ],
      "name": "JobUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "epochMedianValues",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "epochAverageValue",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochPositiveOpenPnl",
          "type": "uint256"
        }
      ],
      "name": "NewEpoch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        }
      ],
      "name": "NewEpochForced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "job",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oraclesCount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "linkFeePerNode",
          "type": "uint256"
        }
      ],
      "name": "NextEpochValueRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestsResetCount",
          "type": "uint256"
        }
      ],
      "name": "NextEpochValuesReset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "NumberParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "OracleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newValues",
          "type": "address[]"
        }
      ],
      "name": "OraclesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "requestValues",
          "type": "int256[]"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "medianValue",
          "type": "int256"
        }
      ],
      "name": "RequestMedianValueSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isLate",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oracleRequestId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "requestValue",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "linkFee",
          "type": "uint256"
        }
      ],
      "name": "RequestValueReceived",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LINK_FEE_BALANCE_DIVIDER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "forceNewEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "value",
          "type": "int256"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "job",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minAnswers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newOpenPnlRequestOrEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nextEpochValues",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochValuesLastRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextEpochValuesRequestCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "oracles",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestAnswers",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requestIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "initiated",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "linkFeePerNode",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsEvery",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestsStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resetNextEpochValueRequests",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "newValue",
          "type": "bytes32"
        }
      ],
      "name": "updateJob",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMinAnswers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newValues",
          "type": "address[]"
        }
      ],
      "name": "updateOracles",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsEvery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newRequestsStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequestsEvery",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newRequestsCount",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsInfoBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateRequestsStart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc68488e3c4a021f00228bf39e5b7352927e4974c34528e9b8d7b1e6db29df6c5",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x34a9aaC0bC1cEF86Fdb65eDE0d4ba390F4D13BFb",
    "transactionIndex": 6,
    "gasUsed": "2209031",
    "logsBloom": "0x
    "blockHash": "0xb6875fa1685012a44622b27521e92398f4f4c57d9a97e33a55fc492ab8cd9b35",
    "transactionHash": "0xc68488e3c4a021f00228bf39e5b7352927e4974c34528e9b8d7b1e6db29df6c5",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 41260141,
        "transactionHash": "0xc68488e3c4a021f00228bf39e5b7352927e4974c34528e9b8d7b1e6db29df6c5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000273d828c439e000000000000000000000000000000000000000000000000001ef89de945aa07910000000000000000000000000000000000000000000034dabf88bb796b782d470000000000000000000000000000000000000000000000001ed16066b96669910000000000000000000000000000000000000000000034dabfaff8fbf7bbcb47",
        "logIndex": 92,
        "blockHash": "0xb6875fa1685012a44622b27521e92398f4f4c57d9a97e33a55fc492ab8cd9b35"
      }
    ],
    "blockNumber": 41260141,
    "cumulativeGasUsed": "5397232",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "0xA6dAAF02aC93B6C4DDA1589e803Fd453CB973b82",
    [
      "0x00000000219ab540356cbb839cbe05303d7705fa",
      "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
      "0xbe0eb53f46cd790cd13851d5eff43d12404d33e8",
      "0xda9dfa130df4de4673b89022ee50ff26f6ea73cf",
      "0x40b38765696e3d5d8d9d834d8aad4bb6e418e489",
      "0x40b38765696e3d5d8d9d834d8aad4bb6e418e489"
    ],
    "0x0000000000000000000000000000000000000000000000000000000000000004",
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "063f6380a44fddc0413748fbb84bc8a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_LINK_FEE_BALANCE_DIVIDER\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"contract IToken\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_oracles\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"_job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_minAnswers\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"JobUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"epochMedianValues\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"epochAverageValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochPositiveOpenPnl\",\"type\":\"uint256\"}],\"name\":\"NewEpoch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"}],\"name\":\"NewEpochForced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oraclesCount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"linkFeePerNode\",\"type\":\"uint256\"}],\"name\":\"NextEpochValueRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestsResetCount\",\"type\":\"uint256\"}],\"name\":\"NextEpochValuesReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NumberParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"OracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newValues\",\"type\":\"address[]\"}],\"name\":\"OraclesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"requestValues\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"medianValue\",\"type\":\"int256\"}],\"name\":\"RequestMedianValueSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isLate\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oracleRequestId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"requestValue\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"linkFee\",\"type\":\"uint256\"}],\"name\":\"RequestValueReceived\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LINK_FEE_BALANCE_DIVIDER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forceNewEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"job\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAnswers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOpenPnlRequestOrEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextEpochValues\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochValuesLastRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochValuesRequestCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"oracles\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestAnswers\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requestIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"initiated\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"linkFeePerNode\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsEvery\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestsStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetNextEpochValueRequests\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"newValue\",\"type\":\"bytes32\"}],\"name\":\"updateJob\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMinAnswers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newValues\",\"type\":\"address[]\"}],\"name\":\"updateOracles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsEvery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRequestsStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequestsEvery\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRequestsCount\",\"type\":\"uint256\"}],\"name\":\"updateRequestsInfoBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateRequestsStart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OpenPnlFeed.sol\":\"OpenPnlFeed\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/OpenPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\nimport \\\"./interfaces/IOpenTradesPnlFeed.sol\\\";\\n\\ncontract OpenPnlFeed is ChainlinkClient, IOpenTradesPnlFeed {\\n    using Chainlink for Chainlink.Request;\\n\\n    // Constants\\n    uint public immutable LINK_FEE_BALANCE_DIVIDER;\\n    uint constant MIN_ANSWERS = 3;\\n    uint constant MIN_REQUESTS_START = 1 hours;\\n    uint constant MAX_REQUESTS_START = 1 weeks;\\n    uint constant MIN_REQUESTS_EVERY = 1 hours;\\n    uint constant MAX_REQUESTS_EVERY = 1 days;\\n    uint constant MIN_REQUESTS_COUNT = 3;\\n    uint constant MAX_REQUESTS_COUNT = 10;\\n\\n    // Params\\n    IToken public immutable vault;\\n\\n    uint public requestsStart = 2 hours;\\n    uint public requestsEvery = 30 minutes;\\n    uint public requestsCount = 4;\\n\\n    address[] public oracles;\\n    bytes32 public job;\\n    uint public minAnswers;\\n\\n    // State\\n    int[] public nextEpochValues;\\n    uint public nextEpochValuesRequestCount;\\n    uint public nextEpochValuesLastRequest;\\n\\n    uint public requestId;\\n    uint public lastRequestId;\\n    mapping(uint => uint) public requestIds; // chainlink request id => requestId\\n    mapping(uint => Request) public requests; // requestId => request\\n    mapping(uint => int[]) public requestAnswers; // requestId => open pnl (1e18)\\n\\n    struct Request {\\n        bool initiated;\\n        bool active;\\n        uint linkFeePerNode;\\n    }\\n\\n    // Events\\n    event NumberParamUpdated(string name, uint newValue);\\n    event OracleUpdated(uint index, address newValue);\\n    event OraclesUpdated(address[] newValues);\\n    event JobUpdated(bytes32 newValue);\\n\\n    event NextEpochValuesReset(uint indexed currEpoch, uint requestsResetCount);\\n\\n    event NewEpochForced(uint indexed newEpoch);\\n\\n    event NextEpochValueRequested(\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        bytes32 job,\\n        uint oraclesCount,\\n        uint linkFeePerNode\\n    );\\n\\n    event NewEpoch(\\n        uint indexed newEpoch,\\n        uint indexed requestId,\\n        int[] epochMedianValues,\\n        int epochAverageValue,\\n        uint newEpochPositiveOpenPnl\\n    );\\n\\n    event RequestValueReceived(\\n        bool isLate,\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        uint oracleRequestId,\\n        address indexed oracle,\\n        int requestValue,\\n        uint linkFee\\n    );\\n\\n    event RequestMedianValueSet(\\n        uint indexed currEpoch,\\n        uint indexed requestId,\\n        int[] requestValues,\\n        int medianValue\\n    );\\n\\n    constructor(\\n        uint _LINK_FEE_BALANCE_DIVIDER,\\n        address _linkToken,\\n        IToken _vault,\\n        address[] memory _oracles,\\n        bytes32 _job,\\n        uint _minAnswers\\n    ) {\\n        require(\\n            _LINK_FEE_BALANCE_DIVIDER > 0 &&\\n                _linkToken != address(0) &&\\n                address(_vault) != address(0) &&\\n                _oracles.length > 0 &&\\n                _job != bytes32(0) &&\\n                _minAnswers >= MIN_ANSWERS &&\\n                _minAnswers % 2 == 1 &&\\n                _minAnswers <= _oracles.length / 2,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        LINK_FEE_BALANCE_DIVIDER = _LINK_FEE_BALANCE_DIVIDER;\\n\\n        setChainlinkToken(_linkToken);\\n\\n        vault = _vault;\\n        oracles = _oracles;\\n        job = _job;\\n        minAnswers = _minAnswers;\\n    }\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // 2-week timelock\\n        require(msg.sender == IOwnable(address(vault)).owner(), \\\"ONLY_OWNER\\\");\\n        _;\\n    }\\n\\n    modifier onlyManager() {\\n        // 3-day timelock\\n        require(msg.sender == vault.manager(), \\\"ONLY_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        // bypasses timelock, emergency functions only\\n        require(msg.sender == vault.admin(), \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    // Manage parameters\\n    function updateRequestsStart(uint newValue) public onlyOwner {\\n        require(newValue >= MIN_REQUESTS_START, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_START, \\\"ABOVE_MAX\\\");\\n        requestsStart = newValue;\\n        emit NumberParamUpdated(\\\"requestsStart\\\", newValue);\\n    }\\n\\n    function updateRequestsEvery(uint newValue) public onlyOwner {\\n        require(newValue >= MIN_REQUESTS_EVERY, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_EVERY, \\\"ABOVE_MAX\\\");\\n        requestsEvery = newValue;\\n        emit NumberParamUpdated(\\\"requestsEvery\\\", newValue);\\n    }\\n\\n    function updateRequestsCount(uint newValue) public onlyOwner {\\n        require(newValue >= MIN_REQUESTS_COUNT, \\\"BELOW_MIN\\\");\\n        require(newValue <= MAX_REQUESTS_COUNT, \\\"ABOVE_MAX\\\");\\n        requestsCount = newValue;\\n        emit NumberParamUpdated(\\\"requestsCount\\\", newValue);\\n    }\\n\\n    function updateRequestsInfoBatch(\\n        uint newRequestsStart,\\n        uint newRequestsEvery,\\n        uint newRequestsCount\\n    ) external onlyOwner {\\n        updateRequestsStart(newRequestsStart);\\n        updateRequestsEvery(newRequestsEvery);\\n        updateRequestsCount(newRequestsCount);\\n    }\\n\\n    function updateMinAnswers(uint newValue) external onlyManager {\\n        require(newValue >= MIN_ANSWERS, \\\"BELOW_MIN\\\");\\n        require(newValue % 2 == 1, \\\"EVEN\\\");\\n        require(newValue <= oracles.length / 2, \\\"ABOVE_MAX\\\");\\n        minAnswers = newValue;\\n        emit NumberParamUpdated(\\\"minAnswers\\\", newValue);\\n    }\\n\\n    function updateOracle(uint _index, address newValue) external onlyOwner {\\n        require(_index < oracles.length, \\\"INDEX_TOO_BIG\\\");\\n        require(newValue != address(0), \\\"VALUE_0\\\");\\n        oracles[_index] = newValue;\\n        emit OracleUpdated(_index, newValue);\\n    }\\n\\n    function updateOracles(address[] memory newValues) external onlyOwner {\\n        require(newValues.length >= minAnswers * 2, \\\"ARRAY_TOO_SMALL\\\");\\n        oracles = newValues;\\n        emit OraclesUpdated(newValues);\\n    }\\n\\n    function updateJob(bytes32 newValue) external onlyManager {\\n        require(newValue != bytes32(0), \\\"VALUE_0\\\");\\n        job = newValue;\\n        emit JobUpdated(newValue);\\n    }\\n\\n    // Emergency function in case of oracle manipulation\\n    function resetNextEpochValueRequests() external onlyAdmin {\\n        uint reqToResetCount = nextEpochValuesRequestCount;\\n        require(reqToResetCount > 0, \\\"NO_REQUEST_TO_RESET\\\");\\n\\n        delete nextEpochValues;\\n\\n        nextEpochValuesRequestCount = 0;\\n        nextEpochValuesLastRequest = 0;\\n\\n        for (uint i; i < reqToResetCount; i++) {\\n            requests[lastRequestId - i].active = false;\\n        }\\n\\n        emit NextEpochValuesReset(vault.currentEpoch(), reqToResetCount);\\n    }\\n\\n    // Safety function that anyone can call in case the function above is used in an abusive manner,\\n    // which could theoretically delay withdrawals indefinitely since it prevents new epochs\\n    function forceNewEpoch() external {\\n        require(\\n            block.timestamp - vault.currentEpochStart() >=\\n                requestsStart + requestsEvery * requestsCount,\\n            \\\"TOO_EARLY\\\"\\n        );\\n        uint newEpoch = startNewEpoch();\\n        emit NewEpochForced(newEpoch);\\n    }\\n\\n    // Called by  contract\\n    function newOpenPnlRequestOrEpoch() external {\\n        bool firstRequest = nextEpochValuesLastRequest == 0;\\n\\n        if (\\n            firstRequest &&\\n            block.timestamp - vault.currentEpochStart() >= requestsStart\\n        ) {\\n            makeOpenPnlRequest();\\n        } else if (\\n            !firstRequest &&\\n            block.timestamp - nextEpochValuesLastRequest >= requestsEvery\\n        ) {\\n            if (nextEpochValuesRequestCount < requestsCount) {\\n                makeOpenPnlRequest();\\n            } else if (nextEpochValues.length >= requestsCount) {\\n                startNewEpoch();\\n            }\\n        }\\n    }\\n\\n    // Create requests\\n    function makeOpenPnlRequest() private {\\n        // Chainlink.Request memory linkRequest = buildChainlinkRequest(\\n        //     job,\\n        //     address(this),\\n        //     this.fulfill.selector\\n        // );\\n\\n        // uint linkFeePerNode = IERC20(chainlinkTokenAddress()).balanceOf(\\n        //     address(this)\\n        // ) /\\n        //     LINK_FEE_BALANCE_DIVIDER /\\n        //     oracles.length;\\n        ++lastRequestId;\\n        requests[lastRequestId] = Request({\\n            initiated: true,\\n            active: true,\\n            linkFeePerNode: 0\\n        });\\n\\n        nextEpochValuesRequestCount++;\\n        nextEpochValuesLastRequest = block.timestamp;\\n\\n        for (uint i; i < oracles.length; i++) {\\n            ++requestId;\\n            requestIds[requestId] = lastRequestId;\\n        }\\n\\n        emit NextEpochValueRequested(\\n            vault.currentEpoch(),\\n            lastRequestId,\\n            job,\\n            oracles.length,\\n            0\\n        );\\n    }\\n\\n    // Handle answers\\n    function fulfill(\\n        uint requestId,\\n        int value // 1e18\\n    ) external /*recordChainlinkFulfillment(requestId)*/ {\\n        uint reqId = requestIds[requestId];\\n        delete requestIds[requestId];\\n\\n        Request memory r = requests[reqId];\\n        uint currentEpoch = vault.currentEpoch();\\n\\n        emit RequestValueReceived(\\n            !r.active,\\n            currentEpoch,\\n            reqId,\\n            requestId,\\n            msg.sender,\\n            value,\\n            r.linkFeePerNode\\n        );\\n\\n        if (!r.active) {\\n            return;\\n        }\\n        int[] storage answers = requestAnswers[reqId];\\n        answers.push(value);\\n\\n        if (answers.length == minAnswers) {\\n            int medianValue = median(answers);\\n            nextEpochValues.push(medianValue);\\n\\n            emit RequestMedianValueSet(\\n                currentEpoch,\\n                reqId,\\n                answers,\\n                medianValue\\n            );\\n\\n            requests[reqId].active = false;\\n            delete requestAnswers[reqId];\\n        }\\n    }\\n\\n    // Increment epoch and update feed value\\n    function startNewEpoch() private returns (uint newEpoch) {\\n        nextEpochValuesRequestCount = 0;\\n        nextEpochValuesLastRequest = 0;\\n\\n        uint currentEpochPositiveOpenPnl = vault.currentEpochPositiveOpenPnl();\\n\\n        // If all responses arrived, use mean, otherwise it means we forced a new epoch,\\n        // so as a safety we use the last epoch value\\n        int newEpochOpenPnl = nextEpochValues.length >= requestsCount\\n            ? average(nextEpochValues)\\n            : int(currentEpochPositiveOpenPnl);\\n        uint finalNewEpochPositiveOpenPnl = vault.updateAccPnlPerTokenUsed(\\n            currentEpochPositiveOpenPnl,\\n            newEpochOpenPnl > 0 ? uint(newEpochOpenPnl) : 0\\n        );\\n\\n        newEpoch = vault.currentEpoch();\\n\\n        emit NewEpoch(\\n            newEpoch,\\n            lastRequestId,\\n            nextEpochValues,\\n            newEpochOpenPnl,\\n            finalNewEpochPositiveOpenPnl\\n        );\\n\\n        delete nextEpochValues;\\n    }\\n\\n    // Median function\\n    function swap(int[] memory array, uint i, uint j) private pure {\\n        (array[i], array[j]) = (array[j], array[i]);\\n    }\\n\\n    function sort(int[] memory array, uint begin, uint end) private pure {\\n        if (begin >= end) {\\n            return;\\n        }\\n\\n        uint j = begin;\\n        int pivot = array[j];\\n\\n        for (uint i = begin + 1; i < end; ++i) {\\n            if (array[i] < pivot) {\\n                swap(array, i, ++j);\\n            }\\n        }\\n\\n        swap(array, begin, j);\\n        sort(array, begin, j);\\n        sort(array, j + 1, end);\\n    }\\n\\n    function median(int[] memory array) private pure returns (int) {\\n        sort(array, 0, array.length);\\n\\n        return\\n            array.length % 2 == 0\\n                ? (array[array.length / 2 - 1] + array[array.length / 2]) / 2\\n                : array[array.length / 2];\\n    }\\n\\n    // Average function\\n    function average(int[] memory array) private pure returns (int) {\\n        int sum;\\n        for (uint i; i < array.length; i++) {\\n            sum += array[i];\\n        }\\n\\n        return sum / int(array.length);\\n    }\\n\\n    //getters\\n\\n    // function getRequestAnswers(\\n    //     uint256 _requestId,\\n    //     uint256 answerIndex\\n    // ) external view returns (int ans) {\\n    //     int[] memory ansArr = requestAnswers[_requestId];\\n    //     return ansArr[answerIndex];\\n    // }\\n}\\n\",\"keccak256\":\"0x3c5a3f13b35ee964a4459488b23aaa596294551895f5a311a12c5e2a12340fc0\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenTradesPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOpenTradesPnlFeed {\\n    function nextEpochValuesRequestCount() external view returns (uint);\\n\\n    function newOpenPnlRequestOrEpoch() external;\\n}\\n\",\"keccak256\":\"0x57beae35497e62b6fb39af632efe4ebb7232c13c859706c919f59a91f9b6f198\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOwnable {\\n    function owner() external view returns (address);\\n}\\n\",\"keccak256\":\"0xddc873cd2e1fa58a3133ccf144d2b9b399955e617909017b781cb7ed99483657\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526001600455611c2060065561070860075560046008553480156200002757600080fd5b5060405162002546380380620025468339810160408190526200004a916200022e565b6000861180156200006357506001600160a01b03851615155b80156200007857506001600160a01b03841615155b801562000086575060008351115b80156200009257508115155b8015620000a0575060038110155b8015620000b95750620000b56002826200035f565b6001145b8015620000d5575060028351620000d1919062000376565b8111155b620001155760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640160405180910390fd5b6080869052600280546001600160a01b0319166001600160a01b0387161790556001600160a01b03841660a0528251620001579060099060208601906200016c565b50600a91909155600b55506200038d92505050565b828054828255906000526020600020908101928215620001c4579160200282015b82811115620001c457825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200018d565b50620001d2929150620001d6565b5090565b5b80821115620001d25760008155600101620001d7565b6001600160a01b03811681146200020357600080fd5b50565b80516200021381620001ed565b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060008060c087890312156200024857600080fd5b865195506020808801516200025d81620001ed565b60408901519096506200027081620001ed565b60608901519095506001600160401b03808211156200028e57600080fd5b818a0191508a601f830112620002a357600080fd5b815181811115620002b857620002b862000218565b8060051b604051601f19603f83011681018181108582111715620002e057620002e062000218565b60405291825284820192508381018501918d831115620002ff57600080fd5b938501935b828510156200032857620003188562000206565b8452938501939285019262000304565b8098505050505050506080870151915060a087015190509295509295509295565b634e487b7160e01b600052601260045260246000fd5b60008262000371576200037162000349565b500690565b60008262000388576200038862000349565b500490565b60805160a05161211c6200042a600039600081816103960152818161042b0152818161063601528181610787015281816108ef01528181610a7201528181610b2a01528181610c2e01528181610d7301528181610ee401528181610fcf015281816110d201528181611282015281816113830152818161169a015281816117770152818161186e01526119180152600061034b015261211c6000f3fe608060405234801561001057600080fd5b50600436106101835760003560e01c8063a90d67a1116100d9578063ce43963211610087578063ce43963214610333578063d5a28da314610346578063e704fc511461036d578063f5ed447c14610375578063fbfa4b7f14610388578063fbfa77cf14610391578063fc2a88c3146103b857600080fd5b8063a90d67a1146102d7578063b006812c146102e0578063b8feee64146102f3578063bea16758146102fc578063bef35b7914610305578063c591ff4c1461030d578063cb9945a11461032057600080fd5b80635b69a7d8116101365780635b69a7d8146101fa57806381d12c58146102255780638796ba8c1461027657806392c3c58b146102965780639496f9e31461029e5780639dbc2686146102b1578063a5c2aafd146102c457600080fd5b80626d6cae1461018857806309d19de1146101a45780632eb64ec4146101b957806334fa54a1146101c2578063473d2f21146101d55780635614a211146101de57806358e7ec3c146101f1575b600080fd5b610191600f5481565b6040519081526020015b60405180910390f35b6101b76101b2366004611c16565b6103c1565b005b61019160065481565b6101b76101d0366004611c38565b610634565b610191600e5481565b6101b76101ec366004611c38565b610785565b610191600a5481565b61020d610208366004611c38565b6108c3565b6040516001600160a01b03909116815260200161019b565b610259610233366004611c38565b6012602052600090815260409020805460019091015460ff808316926101009004169083565b60408051931515845291151560208401529082015260600161019b565b610191610284366004611c38565b60116020526000908152604090205481565b6101b76108ed565b6101b76102ac366004611c38565b610b28565b6101b76102bf366004611c8c565b610c2c565b6101b76102d2366004611c38565b610d71565b61019160075481565b6101916102ee366004611c38565b610eb2565b610191600d5481565b610191600b5481565b6101b7610ed3565b6101b761031b366004611d51565b610fcd565b61019161032e366004611c16565b61109f565b6101b7610341366004611d7d565b6110d0565b6101917f000000000000000000000000000000000000000000000000000000000000000081565b6101b7611263565b6101b7610383366004611c38565b611381565b61019160085481565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b61019160105481565b6000828152601160209081526040808320805490849055808452601283528184208251606081018452815460ff808216151583526101009091041615158186015260019190910154818401528251630ecce30160e31b815292519194909390926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926376671808926004808401939192918290030181865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190611dad565b602080840151604080860151815192158352928201899052810187905260608101919091529091503390849083907f6fca1cd883a83c15d85feb83c610bf23e9509a7d70f817816c26ab9c379b1b729060800160405180910390a48160200151610503575050505050565b6000838152601360209081526040822080546001810182558184529190922001859055600b5481540361062c57600061058a8280548060200260200160405190810160405280929190818152602001828054801561058057602002820191906000526020600020905b81548152602001906001019080831161056c575b505050505061150c565b600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701819055604051909150859084907f2cc31a5acf549ee44228d82c08e88b92b9d332ad5193a2290a79345e113c0b4c906105f89086908690611dc6565b60405180910390a36000858152601260209081526040808320805461ff00191690556013909152812061062a91611b7e565b505b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611e16565b6001600160a01b0316336001600160a01b0316146106ef5760405162461bcd60e51b81526004016106e690611e33565b60405180910390fd5b610e108110156107115760405162461bcd60e51b81526004016106e690611e57565b620151808111156107345760405162461bcd60e51b81526004016106e690611e7a565b600781905560408051818152600d918101919091526c7265717565737473457665727960981b6060820152602081018290526000805160206120c7833981519152906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190611e16565b6001600160a01b0316336001600160a01b0316146108375760405162461bcd60e51b81526004016106e690611e33565b60038110156108585760405162461bcd60e51b81526004016106e690611e57565b600a8111156108795760405162461bcd60e51b81526004016106e690611e7a565b600881905560408051818152600d918101919091526c1c995c5d595cdd1cd0dbdd5b9d609a1b6060820152602081018290526000805160206120c78339815191529060800161077a565b600981815481106108d357600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f9190611e16565b6001600160a01b0316336001600160a01b0316146109bc5760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa0a226a4a760b11b60448201526064016106e6565b600d5480610a025760405162461bcd60e51b81526020600482015260136024820152721393d7d49154555154d517d513d7d49154d155606a1b60448201526064016106e6565b610a0e600c6000611b7e565b6000600d819055600e8190555b81811015610a6f5760006012600083601054610a379190611eb3565b8152602081019190915260400160002080549115156101000261ff001990921691909117905580610a6781611eca565b915050610a1b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af29190611dad565b6040518281527f605f3f824643ee56deaf2717c1581f7ad3df423365aede8e2d771b6b3a30fd2b9060200160405180910390a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190611e16565b6001600160a01b0316336001600160a01b031614610bda5760405162461bcd60e51b81526004016106e690611ee3565b80610bf75760405162461bcd60e51b81526004016106e690611f09565b600a8190556040518181527f9f3fa8c139076940687248e93aed7dda099cf9a90cc38c428cf3d5b6b642fdd49060200161077a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611e16565b6001600160a01b0316336001600160a01b031614610cde5760405162461bcd60e51b81526004016106e690611e33565b600b54610cec906002611f2a565b81511015610d2e5760405162461bcd60e51b815260206004820152600f60248201526e105494905657d513d3d7d4d3505313608a1b60448201526064016106e6565b8051610d41906009906020840190611b9c565b507f4b806663ee384a0ada322e70cdf3fd2046424181359f2470a97a6f0cec328e9c8160405161077a9190611f49565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df39190611e16565b6001600160a01b0316336001600160a01b031614610e235760405162461bcd60e51b81526004016106e690611e33565b610e10811015610e455760405162461bcd60e51b81526004016106e690611e57565b62093a80811115610e685760405162461bcd60e51b81526004016106e690611e7a565b600681905560408051818152600d918101919091526c1c995c5d595cdd1cd4dd185c9d609a1b6060820152602081018290526000805160206120c78339815191529060800161077a565b600c8181548110610ec257600080fd5b600091825260209091200154905081565b600e5415808015610f7157506006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190611dad565b610f6e9042611eb3565b10155b15610f8157610f7e6115d0565b50565b80158015610f9d5750600754600e54610f9a9042611eb3565b10155b15610f7e57600854600d541015610fb657610f7e6115d0565b600854600c5410610f7e57610fc9611762565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190611e16565b6001600160a01b0316336001600160a01b03161461107f5760405162461bcd60e51b81526004016106e690611e33565b61108883610d71565b61109182610634565b61109a81610785565b505050565b601360205281600052604060002081815481106110bb57600080fd5b90600052602060002001600091509150505481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111529190611e16565b6001600160a01b0316336001600160a01b0316146111825760405162461bcd60e51b81526004016106e690611e33565b60095482106111c35760405162461bcd60e51b815260206004820152600d60248201526c494e4445585f544f4f5f42494760981b60448201526064016106e6565b6001600160a01b0381166111e95760405162461bcd60e51b81526004016106e690611f09565b80600983815481106111fd576111fd611f96565b60009182526020918290200180546001600160a01b0319166001600160a01b0393841617905560408051858152928416918301919091527f8323208263554cf72b3658bcdbd0f96f4ccf2c9c919fa30246aaee34537b5509910160405180910390a15050565b6008546007546112739190611f2a565b6006546112809190611fac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113029190611dad565b61130c9042611eb3565b10156113465760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b60448201526064016106e6565b6000611350611762565b60405190915081907f446b8726654d216fe9781583f0f34cc8ac84d240bb3ad5293c10e2ff831f1eb290600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190611e16565b6001600160a01b0316336001600160a01b0316146114335760405162461bcd60e51b81526004016106e690611ee3565b60038110156114545760405162461bcd60e51b81526004016106e690611e57565b61145f600282611fda565b6001146114975760405162461bcd60e51b81526004016106e69060208082526004908201526322ab22a760e11b604082015260600190565b6009546114a690600290611fee565b8111156114c55760405162461bcd60e51b81526004016106e690611e7a565b600b81905560408051818152600a91810191909152696d696e416e737765727360b01b6060820152602081018290526000805160206120c78339815191529060800161077a565b600061151b82600084516119ec565b600282516115299190611fda565b1561155a57816002835161153d9190611fee565b8151811061154d5761154d611f96565b60200260200101516115ca565b6002826002845161156b9190611fee565b8151811061157b5761157b611f96565b6020026020010151836001600286516115949190611fee565b61159e9190611eb3565b815181106115ae576115ae611f96565b60200260200101516115c09190612002565b6115ca9190612043565b92915050565b6010600081546115df90611eca565b90915550604080516060810182526001808252602080830182815260008486018181526010548252601290935294852093518454915161ffff1990921690151561ff001916176101009115159190910217835551910155600d80549161164483611eca565b909155505042600e5560005b60095481101561169457600f6000815461166990611eca565b90915550601054600f546000908152601160205260409020558061168c81611eca565b915050611650565b506010547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611dad565b600a54600954604080519283526020830191909152600082820152517fb5f2943c67db1794f39a3b46b95086765f48c7e05d12851dc6607bcdb0bcc7a39181900360600190a3565b600080600d819055506000600e8190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663faf33f296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190611dad565b600854600c54919250600091101561180f5781611868565b611868600c80548060200260200160405190810160405280929190818152602001828054801561185e57602002820191906000526020600020905b81548152602001906001019080831161184a575b5050505050611aaf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637361a54484600085136118ab5760006118ad565b845b6040516001600160e01b031960e085901b168152600481019290925260248201526044016020604051808303816000875af11580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119149190611dad565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190611dad565b9350601054847f263c5efc95bb2e2134e3fc52ae914fbd38e2381f37d95ae011a56f996578bf17600c85856040516119d293929190612071565b60405180910390a36119e6600c6000611b7e565b50505090565b8082106119f857505050565b60008290506000848281518110611a1157611a11611f96565b602002602001015190506000846001611a2a9190611fac565b90505b83811015611a7c5781868281518110611a4857611a48611f96565b60200260200101511215611a6c57611a6c8682611a6486611eca565b955085611b0b565b611a7581611eca565b9050611a2d565b50611a88858584611b0b565b611a938585846119ec565b611aa885611aa2846001611fac565b856119ec565b5050505050565b60008060005b8351811015611af757838181518110611ad057611ad0611f96565b602002602001015182611ae39190612002565b915080611aef81611eca565b915050611ab5565b508251611b049082612043565b9392505050565b828181518110611b1d57611b1d611f96565b6020026020010151838381518110611b3757611b37611f96565b6020026020010151848481518110611b5157611b51611f96565b60200260200101858481518110611b6a57611b6a611f96565b602090810291909101019190915252505050565b5080546000825590600052602060002090810190610f7e9190611c01565b828054828255906000526020600020908101928215611bf1579160200282015b82811115611bf157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611bbc565b50611bfd929150611c01565b5090565b5b80821115611bfd5760008155600101611c02565b60008060408385031215611c2957600080fd5b50508035926020909101359150565b600060208284031215611c4a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f7e57600080fd5b8035611c8781611c67565b919050565b60006020808385031215611c9f57600080fd5b823567ffffffffffffffff80821115611cb757600080fd5b818501915085601f830112611ccb57600080fd5b813581811115611cdd57611cdd611c51565b8060051b604051601f19603f83011681018181108582111715611d0257611d02611c51565b604052918252848201925083810185019188831115611d2057600080fd5b938501935b82851015611d4557611d3685611c7c565b84529385019392850192611d25565b98975050505050505050565b600080600060608486031215611d6657600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611d9057600080fd5b823591506020830135611da281611c67565b809150509250929050565b600060208284031215611dbf57600080fd5b5051919050565b6000604082016040835280855480835260608501915086600052602092508260002060005b82811015611e0757815484529284019260019182019101611deb565b50505092019290925292915050565b600060208284031215611e2857600080fd5b8151611b0481611c67565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611ec557611ec5611e9d565b500390565b600060018201611edc57611edc611e9d565b5060010190565b6020808252600c908201526b27a7262cafa6a0a720a3a2a960a11b604082015260600190565b602080825260079082015266056414c55455f360cc1b604082015260600190565b6000816000190483118215151615611f4457611f44611e9d565b500290565b6020808252825182820181905260009190848201906040850190845b81811015611f8a5783516001600160a01b031683529284019291840191600101611f65565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b60008219821115611fbf57611fbf611e9d565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611fe957611fe9611fc4565b500690565b600082611ffd57611ffd611fc4565b500490565b600080821280156001600160ff1b038490038513161561202457612024611e9d565b600160ff1b839003841281161561203d5761203d611e9d565b50500190565b60008261205257612052611fc4565b600160ff1b82146000198414161561206c5761206c611e9d565b500590565b6000606082016060835280865480835260808501915087600052602092508260002060005b828110156120b257815484529284019260019182019101612096565b50505090830194909452506040015291905056fe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9a26469706673582212206eb6fc1847184f856a822a185809334151505abb71acee8e455f1dd70ce088c964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101835760003560e01c8063a90d67a1116100d9578063ce43963211610087578063ce43963214610333578063d5a28da314610346578063e704fc511461036d578063f5ed447c14610375578063fbfa4b7f14610388578063fbfa77cf14610391578063fc2a88c3146103b857600080fd5b8063a90d67a1146102d7578063b006812c146102e0578063b8feee64146102f3578063bea16758146102fc578063bef35b7914610305578063c591ff4c1461030d578063cb9945a11461032057600080fd5b80635b69a7d8116101365780635b69a7d8146101fa57806381d12c58146102255780638796ba8c1461027657806392c3c58b146102965780639496f9e31461029e5780639dbc2686146102b1578063a5c2aafd146102c457600080fd5b80626d6cae1461018857806309d19de1146101a45780632eb64ec4146101b957806334fa54a1146101c2578063473d2f21146101d55780635614a211146101de57806358e7ec3c146101f1575b600080fd5b610191600f5481565b6040519081526020015b60405180910390f35b6101b76101b2366004611c16565b6103c1565b005b61019160065481565b6101b76101d0366004611c38565b610634565b610191600e5481565b6101b76101ec366004611c38565b610785565b610191600a5481565b61020d610208366004611c38565b6108c3565b6040516001600160a01b03909116815260200161019b565b610259610233366004611c38565b6012602052600090815260409020805460019091015460ff808316926101009004169083565b60408051931515845291151560208401529082015260600161019b565b610191610284366004611c38565b60116020526000908152604090205481565b6101b76108ed565b6101b76102ac366004611c38565b610b28565b6101b76102bf366004611c8c565b610c2c565b6101b76102d2366004611c38565b610d71565b61019160075481565b6101916102ee366004611c38565b610eb2565b610191600d5481565b610191600b5481565b6101b7610ed3565b6101b761031b366004611d51565b610fcd565b61019161032e366004611c16565b61109f565b6101b7610341366004611d7d565b6110d0565b6101917f000000000000000000000000000000000000000000000000000000000000000081565b6101b7611263565b6101b7610383366004611c38565b611381565b61019160085481565b61020d7f000000000000000000000000000000000000000000000000000000000000000081565b61019160105481565b6000828152601160209081526040808320805490849055808452601283528184208251606081018452815460ff808216151583526101009091041615158186015260019190910154818401528251630ecce30160e31b815292519194909390926001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016926376671808926004808401939192918290030181865afa158015610474573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104989190611dad565b602080840151604080860151815192158352928201899052810187905260608101919091529091503390849083907f6fca1cd883a83c15d85feb83c610bf23e9509a7d70f817816c26ab9c379b1b729060800160405180910390a48160200151610503575050505050565b6000838152601360209081526040822080546001810182558184529190922001859055600b5481540361062c57600061058a8280548060200260200160405190810160405280929190818152602001828054801561058057602002820191906000526020600020905b81548152602001906001019080831161056c575b505050505061150c565b600c80546001810182556000919091527fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c701819055604051909150859084907f2cc31a5acf549ee44228d82c08e88b92b9d332ad5193a2290a79345e113c0b4c906105f89086908690611dc6565b60405180910390a36000858152601260209081526040808320805461ff00191690556013909152812061062a91611b7e565b505b505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b69190611e16565b6001600160a01b0316336001600160a01b0316146106ef5760405162461bcd60e51b81526004016106e690611e33565b60405180910390fd5b610e108110156107115760405162461bcd60e51b81526004016106e690611e57565b620151808111156107345760405162461bcd60e51b81526004016106e690611e7a565b600781905560408051818152600d918101919091526c7265717565737473457665727960981b6060820152602081018290526000805160206120c7833981519152906080015b60405180910390a150565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108079190611e16565b6001600160a01b0316336001600160a01b0316146108375760405162461bcd60e51b81526004016106e690611e33565b60038110156108585760405162461bcd60e51b81526004016106e690611e57565b600a8111156108795760405162461bcd60e51b81526004016106e690611e7a565b600881905560408051818152600d918101919091526c1c995c5d595cdd1cd0dbdd5b9d609a1b6060820152602081018290526000805160206120c78339815191529060800161077a565b600981815481106108d357600080fd5b6000918252602090912001546001600160a01b0316905081565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f851a4406040518163ffffffff1660e01b8152600401602060405180830381865afa15801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f9190611e16565b6001600160a01b0316336001600160a01b0316146109bc5760405162461bcd60e51b815260206004820152600a60248201526927a7262cafa0a226a4a760b11b60448201526064016106e6565b600d5480610a025760405162461bcd60e51b81526020600482015260136024820152721393d7d49154555154d517d513d7d49154d155606a1b60448201526064016106e6565b610a0e600c6000611b7e565b6000600d819055600e8190555b81811015610a6f5760006012600083601054610a379190611eb3565b8152602081019190915260400160002080549115156101000261ff001990921691909117905580610a6781611eca565b915050610a1b565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ace573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af29190611dad565b6040518281527f605f3f824643ee56deaf2717c1581f7ad3df423365aede8e2d771b6b3a30fd2b9060200160405180910390a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baa9190611e16565b6001600160a01b0316336001600160a01b031614610bda5760405162461bcd60e51b81526004016106e690611ee3565b80610bf75760405162461bcd60e51b81526004016106e690611f09565b600a8190556040518181527f9f3fa8c139076940687248e93aed7dda099cf9a90cc38c428cf3d5b6b642fdd49060200161077a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae9190611e16565b6001600160a01b0316336001600160a01b031614610cde5760405162461bcd60e51b81526004016106e690611e33565b600b54610cec906002611f2a565b81511015610d2e5760405162461bcd60e51b815260206004820152600f60248201526e105494905657d513d3d7d4d3505313608a1b60448201526064016106e6565b8051610d41906009906020840190611b9c565b507f4b806663ee384a0ada322e70cdf3fd2046424181359f2470a97a6f0cec328e9c8160405161077a9190611f49565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df39190611e16565b6001600160a01b0316336001600160a01b031614610e235760405162461bcd60e51b81526004016106e690611e33565b610e10811015610e455760405162461bcd60e51b81526004016106e690611e57565b62093a80811115610e685760405162461bcd60e51b81526004016106e690611e7a565b600681905560408051818152600d918101919091526c1c995c5d595cdd1cd4dd185c9d609a1b6060820152602081018290526000805160206120c78339815191529060800161077a565b600c8181548110610ec257600080fd5b600091825260209091200154905081565b600e5415808015610f7157506006547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f649190611dad565b610f6e9042611eb3565b10155b15610f8157610f7e6115d0565b50565b80158015610f9d5750600754600e54610f9a9042611eb3565b10155b15610f7e57600854600d541015610fb657610f7e6115d0565b600854600c5410610f7e57610fc9611762565b5050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561102b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104f9190611e16565b6001600160a01b0316336001600160a01b03161461107f5760405162461bcd60e51b81526004016106e690611e33565b61108883610d71565b61109182610634565b61109a81610785565b505050565b601360205281600052604060002081815481106110bb57600080fd5b90600052602060002001600091509150505481565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111529190611e16565b6001600160a01b0316336001600160a01b0316146111825760405162461bcd60e51b81526004016106e690611e33565b60095482106111c35760405162461bcd60e51b815260206004820152600d60248201526c494e4445585f544f4f5f42494760981b60448201526064016106e6565b6001600160a01b0381166111e95760405162461bcd60e51b81526004016106e690611f09565b80600983815481106111fd576111fd611f96565b60009182526020918290200180546001600160a01b0319166001600160a01b0393841617905560408051858152928416918301919091527f8323208263554cf72b3658bcdbd0f96f4ccf2c9c919fa30246aaee34537b5509910160405180910390a15050565b6008546007546112739190611f2a565b6006546112809190611fac565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166361a8c8c46040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113029190611dad565b61130c9042611eb3565b10156113465760405162461bcd60e51b8152602060048201526009602482015268544f4f5f4541524c5960b81b60448201526064016106e6565b6000611350611762565b60405190915081907f446b8726654d216fe9781583f0f34cc8ac84d240bb3ad5293c10e2ff831f1eb290600090a250565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190611e16565b6001600160a01b0316336001600160a01b0316146114335760405162461bcd60e51b81526004016106e690611ee3565b60038110156114545760405162461bcd60e51b81526004016106e690611e57565b61145f600282611fda565b6001146114975760405162461bcd60e51b81526004016106e69060208082526004908201526322ab22a760e11b604082015260600190565b6009546114a690600290611fee565b8111156114c55760405162461bcd60e51b81526004016106e690611e7a565b600b81905560408051818152600a91810191909152696d696e416e737765727360b01b6060820152602081018290526000805160206120c78339815191529060800161077a565b600061151b82600084516119ec565b600282516115299190611fda565b1561155a57816002835161153d9190611fee565b8151811061154d5761154d611f96565b60200260200101516115ca565b6002826002845161156b9190611fee565b8151811061157b5761157b611f96565b6020026020010151836001600286516115949190611fee565b61159e9190611eb3565b815181106115ae576115ae611f96565b60200260200101516115c09190612002565b6115ca9190612043565b92915050565b6010600081546115df90611eca565b90915550604080516060810182526001808252602080830182815260008486018181526010548252601290935294852093518454915161ffff1990921690151561ff001916176101009115159190910217835551910155600d80549161164483611eca565b909155505042600e5560005b60095481101561169457600f6000815461166990611eca565b90915550601054600f546000908152601160205260409020558061168c81611eca565b915050611650565b506010547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171a9190611dad565b600a54600954604080519283526020830191909152600082820152517fb5f2943c67db1794f39a3b46b95086765f48c7e05d12851dc6607bcdb0bcc7a39181900360600190a3565b600080600d819055506000600e8190555060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663faf33f296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f79190611dad565b600854600c54919250600091101561180f5781611868565b611868600c80548060200260200160405190810160405280929190818152602001828054801561185e57602002820191906000526020600020905b81548152602001906001019080831161184a575b5050505050611aaf565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637361a54484600085136118ab5760006118ad565b845b6040516001600160e01b031960e085901b168152600481019290925260248201526044016020604051808303816000875af11580156118f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119149190611dad565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663766718086040518163ffffffff1660e01b8152600401602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190611dad565b9350601054847f263c5efc95bb2e2134e3fc52ae914fbd38e2381f37d95ae011a56f996578bf17600c85856040516119d293929190612071565b60405180910390a36119e6600c6000611b7e565b50505090565b8082106119f857505050565b60008290506000848281518110611a1157611a11611f96565b602002602001015190506000846001611a2a9190611fac565b90505b83811015611a7c5781868281518110611a4857611a48611f96565b60200260200101511215611a6c57611a6c8682611a6486611eca565b955085611b0b565b611a7581611eca565b9050611a2d565b50611a88858584611b0b565b611a938585846119ec565b611aa885611aa2846001611fac565b856119ec565b5050505050565b60008060005b8351811015611af757838181518110611ad057611ad0611f96565b602002602001015182611ae39190612002565b915080611aef81611eca565b915050611ab5565b508251611b049082612043565b9392505050565b828181518110611b1d57611b1d611f96565b6020026020010151838381518110611b3757611b37611f96565b6020026020010151848481518110611b5157611b51611f96565b60200260200101858481518110611b6a57611b6a611f96565b602090810291909101019190915252505050565b5080546000825590600052602060002090810190610f7e9190611c01565b828054828255906000526020600020908101928215611bf1579160200282015b82811115611bf157825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611bbc565b50611bfd929150611c01565b5090565b5b80821115611bfd5760008155600101611c02565b60008060408385031215611c2957600080fd5b50508035926020909101359150565b600060208284031215611c4a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610f7e57600080fd5b8035611c8781611c67565b919050565b60006020808385031215611c9f57600080fd5b823567ffffffffffffffff80821115611cb757600080fd5b818501915085601f830112611ccb57600080fd5b813581811115611cdd57611cdd611c51565b8060051b604051601f19603f83011681018181108582111715611d0257611d02611c51565b604052918252848201925083810185019188831115611d2057600080fd5b938501935b82851015611d4557611d3685611c7c565b84529385019392850192611d25565b98975050505050505050565b600080600060608486031215611d6657600080fd5b505081359360208301359350604090920135919050565b60008060408385031215611d9057600080fd5b823591506020830135611da281611c67565b809150509250929050565b600060208284031215611dbf57600080fd5b5051919050565b6000604082016040835280855480835260608501915086600052602092508260002060005b82811015611e0757815484529284019260019182019101611deb565b50505092019290925292915050565b600060208284031215611e2857600080fd5b8151611b0481611c67565b6020808252600a908201526927a7262cafa7aba722a960b11b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082821015611ec557611ec5611e9d565b500390565b600060018201611edc57611edc611e9d565b5060010190565b6020808252600c908201526b27a7262cafa6a0a720a3a2a960a11b604082015260600190565b602080825260079082015266056414c55455f360cc1b604082015260600190565b6000816000190483118215151615611f4457611f44611e9d565b500290565b6020808252825182820181905260009190848201906040850190845b81811015611f8a5783516001600160a01b031683529284019291840191600101611f65565b50909695505050505050565b634e487b7160e01b600052603260045260246000fd5b60008219821115611fbf57611fbf611e9d565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611fe957611fe9611fc4565b500690565b600082611ffd57611ffd611fc4565b500490565b600080821280156001600160ff1b038490038513161561202457612024611e9d565b600160ff1b839003841281161561203d5761203d611e9d565b50500190565b60008261205257612052611fc4565b600160ff1b82146000198414161561206c5761206c611e9d565b500590565b6000606082016060835280865480835260808501915087600052602092508260002060005b828110156120b257815484529284019260019182019101612096565b50505090830194909452506040015291905056fe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9a26469706673582212206eb6fc1847184f856a822a185809334151505abb71acee8e455f1dd70ce088c964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)974"
      },
      {
        "astId": 321,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1069"
      },
      {
        "astId": 327,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1149"
      },
      {
        "astId": 330,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 9997,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestsStart",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 10000,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestsEvery",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 10003,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestsCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 10006,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "oracles",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10008,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "job",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 10010,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "minAnswers",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 10013,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "nextEpochValues",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_int256)dyn_storage"
      },
      {
        "astId": 10015,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "nextEpochValuesRequestCount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 10017,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "nextEpochValuesLastRequest",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 10019,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestId",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 10021,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "lastRequestId",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 10025,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestIds",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 10030,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requests",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_struct(Request)10042_storage)"
      },
      {
        "astId": 10035,
        "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
        "label": "requestAnswers",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_int256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_int256)dyn_storage": {
        "base": "t_int256",
        "encoding": "dynamic_array",
        "label": "int256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)974": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1069": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1149": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_int256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_int256)dyn_storage"
      },
      "t_mapping(t_uint256,t_struct(Request)10042_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct OpenPnlFeed.Request)",
        "numberOfBytes": "32",
        "value": "t_struct(Request)10042_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Request)10042_storage": {
        "encoding": "inplace",
        "label": "struct OpenPnlFeed.Request",
        "members": [
          {
            "astId": 10037,
            "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
            "label": "initiated",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10039,
            "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
            "label": "active",
            "offset": 1,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 10041,
            "contract": "contracts/OpenPnlFeed.sol:OpenPnlFeed",
            "label": "linkFeePerNode",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}