{
  "address": "0xfD13865b42521424Ec1075975848f77FC3De26c8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderSameBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        }
      ],
      "name": "executeNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "openTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x128e50396eb26c9c47137c92fb560d8b8cfbcba33c77706edcdc999c70a1cfc9",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xfD13865b42521424Ec1075975848f77FC3De26c8",
    "transactionIndex": 4,
    "gasUsed": "3496937",
    "logsBloom": "0x
    "blockHash": "0x09ce27d06655a7a530c1ee2739b74d02751edfc2ede7aa5bc77c5da68e1d97d1",
    "transactionHash": "0x128e50396eb26c9c47137c92fb560d8b8cfbcba33c77706edcdc999c70a1cfc9",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 40859368,
        "transactionHash": "0x128e50396eb26c9c47137c92fb560d8b8cfbcba33c77706edcdc999c70a1cfc9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x00000000000000000000000004ba3ef4c023c1006019a0f9baf6e70455e41fcf"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000165ccd5e7635bb0000000000000000000000000000000000000000000000006db048d22179cb5a000000000000000000000000000000000000000000000004fee2eb6fbca1a56a0000000000000000000000000000000000000000000000006d99ec04c303959f000000000000000000000000000000000000000000000004fef9483d1b17db25",
        "logIndex": 12,
        "blockHash": "0x09ce27d06655a7a530c1ee2739b74d02751edfc2ede7aa5bc77c5da68e1d97d1"
      }
    ],
    "blockNumber": 40859368,
    "cumulativeGasUsed": "4421671",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9C9D8629dFF7652401B1CE2D82C93b66c78c08E6",
    "0x0037adBB19c0EE94Dd106Ae9B5a85D1742F7d5eE",
    "0x628dBABFbA7658251dA4e8DAD34bA4850025493F",
    "0x042498A0E485996639b00cF0E9095Cb37BDEc0F6",
    "0xed2edf5bEff4810Bee8d7e5284D5eD1454E931C3",
    "1500000000000000000000",
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "e0d5198d50083a6393d1732836770567",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderSameBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"name\":\"executeNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"openTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trading.sol\":\"Trading\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(\\n        address trader,\\n        bytes calldata call_data\\n    ) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(\\n            call_data\\n        );\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xacfca87a111f24db9c3910e56e9db4953c4a394d3ba48b3a083e4f691352030a\",\"license\":\"MIT\"},\"contracts/Trading.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./Delegatable.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./libraries/TradeUtils.sol\\\";\\nimport \\\"./libraries/PackingUtils.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\n\\ncontract Trading is Delegatable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterface public immutable storageT;\\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\\n    PairInfosInterface public immutable pairInfos;\\n    ReferralsInterface public immutable referrals;\\n    BorrowingFeesInterface public immutable borrowingFees;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10;\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n\\n    event MarketOrderInitiated(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        bool open\\n    );\\n\\n    event OpenLimitPlaced(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    event TpUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newTp\\n    );\\n    event SlUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newSl\\n    );\\n\\n    event NftOrderInitiated(\\n        uint orderId,\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n    event NftOrderSameBlock(\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n\\n    event ChainlinkCallbackTimeout(\\n        uint indexed orderId,\\n        StorageInterface.PendingMarketOrder order\\n    );\\n    event CouldNotCloseTrade(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    constructor(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        BorrowingFeesInterface _borrowingFees,\\n        uint _maxPosWETH,\\n        uint _marketOrdersTimeout\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_nftRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                _maxPosWETH > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosWETH = _maxPosWETH;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier notContract() {\\n        isNotContract();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n    }\\n\\n    function isNotContract() private view {\\n        require(tx.origin == msg.sender);\\n    }\\n\\n    function isNotDone() private view {\\n        require(!isDone, \\\"DONE\\\");\\n    }\\n\\n    // Manage params\\n    function setMaxPosWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosWETH = value;\\n        emit NumberUpdated(\\\"maxPosWETH\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterface.Trade memory t,\\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint spreadReductionId,\\n        uint slippageP // 1e10 (%)\\n    )\\n        external\\n        // address referrer\\n        notContract\\n        notDone\\n    {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(t.positionSizeWETH <= maxPosWETH, \\\"ABOVE_MAX_POS\\\");\\n        require(\\n            t.positionSizeWETH * t.leverage >=\\n                pairsStored.pairMinLevPosWETH(t.pairIndex),\\n            \\\"BELOW_MIN_POS\\\"\\n        );\\n\\n        require(\\n            t.leverage > 0 &&\\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\\n            \\\"LEVERAGE_INCORRECT\\\"\\n        );\\n\\n        // require(\\n        //     spreadReductionId == 0 ||\\n        //         storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\\n        //     \\\"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\\\"\\n        // );\\n\\n        require(\\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\\n            \\\"WRONG_TP\\\"\\n        );\\n        require(\\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\\n            \\\"WRONG_SL\\\"\\n        );\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n            0,\\n            t.pairIndex,\\n            t.buy,\\n            t.positionSizeWETH * t.leverage\\n        );\\n        require(\\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\\n            \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n        );\\n\\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\\n\\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n            // storageT.storeOpenLimitOrder(\\n            //     StorageInterface.OpenLimitOrder(\\n            //         sender,\\n            //         t.pairIndex,\\n            //         index,\\n            //         t.positionSizeWETH,\\n            //         spreadReductionId > 0\\n            //             ? storageT.spreadReductionsP(spreadReductionId - 1)\\n            //             : 0,\\n            //         t.buy,\\n            //         t.leverage,\\n            //         t.tp,\\n            //         t.sl,\\n            //         t.openPrice,\\n            //         t.openPrice,\\n            //         block.number,\\n            //         0\\n            //     )\\n            // );\\n            // nftRewards.setOpenLimitOrderType(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     orderType\\n            // );\\n            // address c = storageT.callbacks();\\n            // c.setTradeLastUpdated(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     ChainUtils.getBlockNumber()\\n            // );\\n            // c.setTradeData(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     slippageP\\n            // );\\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV1_4.OrderType.MARKET_OPEN,\\n                t.positionSizeWETH * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            // storageT.storePendingMarketOrder(\\n            //     StorageInterface.PendingMarketOrder(\\n            //         StorageInterface.Trade(\\n            //             sender,\\n            //             t.pairIndex,\\n            //             0,\\n            //             0,\\n            //             t.positionSizeWETH,\\n            //             0,\\n            //             t.buy,\\n            //             t.leverage,\\n            //             t.tp,\\n            //             t.sl\\n            //         ),\\n            //         0,\\n            //         t.openPrice,\\n            //         slippageP,\\n            //         0,\\n            //         0\\n            //     ),\\n            //     orderId,\\n            //     true\\n            // );\\n\\n            (storageT.priceAggregator()).marketOrderfulfill(\\n                orderId,\\n                StorageInterface.PendingMarketOrder(\\n                    StorageInterface.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        0,\\n                        t.positionSizeWETH,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    0,\\n                    0\\n                )\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        // referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(\\n        uint pairIndex,\\n        uint index\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterface.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        StorageInterface.TradeInfo memory i = storageT.openTradesInfo(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = storageT.priceAggregator().getPrice(\\n            pairIndex,\\n            AggregatorInterfaceV1_4.OrderType.MARKET_CLOSE,\\n            (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        // storageT.storePendingMarketOrder(\\n        //     StorageInterface.PendingMarketOrder(\\n        //         StorageInterface.Trade(\\n        //             sender,\\n        //             pairIndex,\\n        //             index,\\n        //             0,\\n        //             0,\\n        //             0,\\n        //             false,\\n        //             0,\\n        //             0,\\n        //             0\\n        //         ),\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0\\n        //     ),\\n        //     orderId,\\n        //     false\\n        // );\\n\\n        (storageT.priceAggregator()).marketOrderfulfill(\\n            orderId,\\n            StorageInterface.PendingMarketOrder(\\n                StorageInterface.Trade(\\n                    sender,\\n                    pairIndex,\\n                    index,\\n                    0,\\n                    0,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0\\n                ),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            )\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    // function updateOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     uint price, // PRECISION\\n    //     uint tp,\\n    //     uint sl,\\n    //     uint maxSlippageP\\n    // ) external notContract notDone {\\n    //     require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n    //     require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n    //     require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     o.minPrice = price;\\n    //     o.maxPrice = price;\\n    //     o.tp = tp;\\n    //     o.sl = sl;\\n\\n    //     storageT.updateOpenLimitOrder(o);\\n\\n    //     address c = storageT.callbacks();\\n    //     c.setTradeLastUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         ChainUtils.getBlockNumber()\\n    //     );\\n    //     c.setTradeData(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         maxSlippageP\\n    //     );\\n\\n    //     emit OpenLimitUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         price,\\n    //         tp,\\n    //         sl,\\n    //         maxSlippageP\\n    //     );\\n    // }\\n\\n    // function cancelOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) external notContract notDone {\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n    //     storageT.transferWETH(address(storageT), sender, o.positionSize);\\n\\n    //     emit OpenLimitCanceled(sender, pairIndex, index);\\n    // }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(\\n        uint pairIndex,\\n        uint index,\\n        uint newTp\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.TP\\n        // );\\n\\n        StorageInterface.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        storageT.callbacks().setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(\\n        uint pairIndex,\\n        uint index,\\n        uint newSl\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.SL\\n        // );\\n\\n        StorageInterface.Trade memory t = storageT.openTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 ||\\n                (\\n                    t.buy\\n                        ? newSl >= t.openPrice - maxSlDist\\n                        : newSl <= t.openPrice + maxSlDist\\n                ),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        storageT.callbacks().setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    // Execute limit order\\n    function executeNftOrder(\\n        uint _orderType,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint nftId,\\n        uint nftType\\n    ) external notContract notDone {\\n        // (\\n        //     uint _orderType,\\n        //     address trader,\\n        //     uint pairIndex,\\n        //     uint index,\\n        //     uint nftId,\\n        //     uint nftType\\n        // ) = packed.unpackExecuteNftOrder();\\n        StorageInterface.LimitOrder orderType = StorageInterface.LimitOrder(\\n            _orderType\\n        );\\n        address sender = _msgSender();\\n\\n        // require(nftType >= 1 && nftType <= 5, \\\"WRONG_NFT_TYPE\\\");\\n        // require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \\\"NO_NFT\\\");\\n\\n        // require(\\n        //     block.number >=\\n        //         storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(),\\n        //     \\\"SUCCESS_TIMELOCK\\\"\\n        // );\\n\\n        bool isOpenLimit = orderType == StorageInterface.LimitOrder.OPEN;\\n        TradingCallbacksInterface.TradeType tradeType = isOpenLimit\\n            ? TradingCallbacksInterface.TradeType.LIMIT\\n            : TradingCallbacksInterface.TradeType.MARKET;\\n\\n        // require(\\n        //     canExecute(\\n        //         orderType,\\n        //         TradingCallbacksInterface.SimplifiedTradeId(\\n        //             trader,\\n        //             pairIndex,\\n        //             index,\\n        //             tradeType\\n        //         )\\n        //     ),\\n        //     \\\"IN_TIMEOUT\\\"\\n        // );\\n\\n        // handleBotInUse(sender, nftId, trader, pairIndex, index);\\n\\n        StorageInterface.Trade memory t;\\n\\n        if (isOpenLimit) {\\n            revert(\\\"Open Limit orders not supported yet\\\");\\n            // require(\\n            //     storageT.hasOpenLimitOrder(trader, pairIndex, index),\\n            //     \\\"NO_LIMIT\\\"\\n            // );\\n        } else {\\n            t = storageT.openTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterface.LimitOrder.LIQ) {\\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        t.positionSizeWETH,\\n                        t.leverage\\n                    )\\n                );\\n\\n\\n                require(\\n                    t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl),\\n                    \\\"HAS_SL\\\"\\n                );\\n            } else {\\n                require(\\n                    orderType != StorageInterface.LimitOrder.SL || t.sl > 0,\\n                    \\\"NO_SL\\\"\\n                );\\n                require(\\n                    orderType != StorageInterface.LimitOrder.TP || t.tp > 0,\\n                    \\\"NO_TP\\\"\\n                );\\n            }\\n        }\\n\\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n        //         .TriggeredLimitId(trader, pairIndex, index, orderType);\\n\\n        if (\\n            true\\n            // !nftRewards.triggered(triggeredLimitId) ||\\n            // nftRewards.timedOut(triggeredLimitId)\\n        ) {\\n            uint leveragedPosWETH;\\n\\n            if (isOpenLimit) {\\n                // StorageInterface.OpenLimitOrder memory l = storageT\\n                //     .getOpenLimitOrder(trader, pairIndex, index);\\n                // leveragedPosWETH = l.positionSize * l.leverage;\\n                // (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n                //     0,\\n                //     l.pairIndex,\\n                //     l.buy,\\n                //     leveragedPosWETH\\n                // );\\n                // require(\\n                //     priceImpactP * l.leverage <=\\n                //         pairInfos.maxNegativePnlOnOpenP(),\\n                //     \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n                // );\\n            } else {\\n                leveragedPosWETH =\\n                    (t.initialPosToken *\\n                        storageT\\n                            .openTradesInfo(trader, pairIndex, index)\\n                            .tokenPriceWETH *\\n                        t.leverage) /\\n                    PRECISION;\\n            }\\n\\n            // storageT.transferLinkToAggregator(\\n            //     sender,\\n            //     pairIndex,\\n            //     leveragedPosWETH\\n            // );\\n\\n            (uint orderId, uint linkFee) = getPriceNftOrder(\\n                isOpenLimit,\\n                trader,\\n                pairIndex,\\n                index,\\n                tradeType,\\n                orderType,\\n                leveragedPosWETH\\n            );\\n\\n            StorageInterface.PendingNftOrder memory pendingNftOrder;\\n            pendingNftOrder.nftHolder = sender;\\n            pendingNftOrder.nftId = nftId;\\n            pendingNftOrder.trader = trader;\\n            pendingNftOrder.pairIndex = pairIndex;\\n            pendingNftOrder.index = index;\\n            pendingNftOrder.orderType = orderType;\\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n            (storageT.priceAggregator()).nftOrderfulfill(\\n                orderId,\\n                pendingNftOrder\\n            );\\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\\n        } else {\\n            // nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\\n\\n            emit NftOrderSameBlock(sender, trader, pairIndex);\\n        }\\n    }\\n\\n    // Market timeout\\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterface.PendingMarketOrder memory o = storageT\\n            .reqID_pendingMarketOrder(_order);\\n        StorageInterface.Trade memory t = o.trade;\\n\\n        require(\\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n            \\\"WAIT_TIMEOUT\\\"\\n        );\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, true);\\n        storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterface.PendingMarketOrder memory o = storageT\\n            .reqID_pendingMarketOrder(_order);\\n        StorageInterface.Trade memory t = o.trade;\\n\\n        require(\\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n            \\\"WAIT_TIMEOUT\\\"\\n        );\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, false);\\n\\n        (bool success, ) = address(this).delegatecall(\\n            abi.encodeWithSignature(\\n                \\\"closeTradeMarket(uint256,uint256)\\\",\\n                t.pairIndex,\\n                t.index\\n            )\\n        );\\n\\n        if (!success) {\\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n        }\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    // //Helpers\\n    // function checkNoPendingTrigger(\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     StorageInterface.LimitOrder orderType\\n    // ) private view {\\n    //     NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n    //         memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n    //             .TriggeredLimitId(trader, pairIndex, index, orderType);\\n    //     require(\\n    //         !nftRewards.triggered(triggeredLimitId) ||\\n    //             nftRewards.timedOut(triggeredLimitId),\\n    //         \\\"PENDING_TRIGGER\\\"\\n    //     );\\n    // }\\n\\n    // function canExecute(\\n    //     StorageInterface.LimitOrder orderType,\\n    //     TradingCallbacksInterface.SimplifiedTradeId memory id\\n    // ) private view returns (bool) {\\n    //     if (orderType == StorageInterface.LimitOrder.LIQ) return true;\\n\\n    //     uint b = ChainUtils.getBlockNumber();\\n    //     address cb = storageT.callbacks();\\n\\n    //     if (orderType == StorageInterface.LimitOrder.TP)\\n    //         return !cb.isTpInTimeout(id, b);\\n    //     if (orderType == StorageInterface.LimitOrder.SL)\\n    //         return !cb.isSlInTimeout(id, b);\\n\\n    //     return !cb.isLimitInTimeout(id, b);\\n    // }\\n\\n    function pairMaxLeverage(\\n        PairsStorageInterfaceV6 pairsStored,\\n        uint pairIndex\\n    ) private view returns (uint) {\\n        uint max = TradingCallbacksInterface(storageT.callbacks())\\n            .pairMaxLeverage(pairIndex);\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    // function handleBotInUse(\\n    //     address sender,\\n    //     uint nftId,\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) private {\\n    //     (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\\n    //         block.number,\\n    //         sender,\\n    //         nftId,\\n    //         trader,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n    //     require(!nftRewards.nftBotInUse(nftHash, botHash), \\\"BOT_IN_USE\\\");\\n\\n    //     nftRewards.setNftBotInUse(nftHash, botHash);\\n    // }\\n\\n    function getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType tradeType,\\n        StorageInterface.LimitOrder orderType,\\n        uint leveragedPosWETH\\n    ) private returns (uint orderId, uint linkFee) {\\n        TradingCallbacksInterface.LastUpdated\\n            memory lastUpdated = TradingCallbacksInterface(storageT.callbacks())\\n                .tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit\\n                ? AggregatorInterfaceV1_4.OrderType.LIMIT_OPEN\\n                : AggregatorInterfaceV1_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosWETH,\\n            isOpenLimit\\n                ? lastUpdated.limit\\n                : orderType == StorageInterface.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterface.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n\\n        // linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\\n    }\\n}\\n\",\"keccak256\":\"0x595be61d817196f55ce13516b45094b74f43deaeecd5921b7c6b1c46a81e1e48\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5eef3af53d10b167ac5121b1919bf70dda9d0ff232e950ab8e9b7ec71f4e559b\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xe851dd45858831c40b8b007e1c00f337673d74512e12a2c8d1c264ab5c1f099c\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x7e5147b0611f9d8ae4e6447c75c65f9c7274f2eba120a69abd5bcad9e0d99189\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n}\\n\",\"keccak256\":\"0xfb20b75eff21c1c17c39a6f962490a2f70b79e8427f625c852262c39907a78a4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa203a16609a3f4479f4c276334d6731350d81ccd2e07e8e4d1e38028d702d76f\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x0b9d784e7bf8b3a982e0aa9a8de5df0a4e010319c94b718986d40f276d8f6cf6\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb2fa75a1891441870ad9e7ebaec3b828113cb231cba760d31e175233850efceb\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd25fe51bb3a4299434be249aad1eb45ae3a2ece52fed7161cea7b02701a63111\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x58654c006d22c41b610ba226e895483efb9caf61604472b2e9b80c4e45259bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x183941b663c64e9673e527c2d5a522b1c0e295bc15235f30f924cc84c1d33a5a\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1_4.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\\n\\n    function vault() external view returns (IToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0x76193b78405751b9798d51708a113d72b52ff01cbd90cc127a33591d0126492c\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe17da6c44e61e84ecbc9653dffeb3c4bf6ed43743256f1eaf1743b7903843dae\",\"license\":\"MIT\"},\"contracts/interfaces/TradingCallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TradingCallbacksInterface {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x60edc8241ff757913fac7702067d9ba301d096a194cff7ec8e746769cf9fbe2b\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0x944440c51dd10f65adea46bce9c451f59ba39bd0723ed97c691d7a0ecc18e91d\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nlibrary PackingUtils {\\n    function pack(\\n        uint256[] memory values,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256 packed) {\\n        require(\\n            values.length == bitLengths.length,\\n            \\\"Mismatch in the lengths of values and bitLengths arrays\\\"\\n        );\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Packed value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(\\n                values[i] <= maxValue,\\n                \\\"Value too large for specified bit length\\\"\\n            );\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(\\n        uint256 packed,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Unpacked value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(\\n        uint256 packed\\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 a,\\n            address b,\\n            uint256 c,\\n            uint256 d,\\n            uint256 e,\\n            uint256 f\\n        )\\n    {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\\n\",\"keccak256\":\"0x7f8885343ecbfaad002fc3dd3265fb5bb131b1e1c11ab95e9f2ddb2255a5cf8b\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/StorageInterface.sol\\\";\\nimport \\\"../interfaces/TradingCallbacksInterface.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksInterface,\\n            TradingCallbacksInterface.LastUpdated memory,\\n            TradingCallbacksInterface.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\\n            .tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (\\n            callbacks,\\n            l,\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            )\\n        );\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeData(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdabfc087fb421fed441550b4a03146962afa96661eb7b1cecf790a1787de2aab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b50604051620040983803806200409883398101604081905262000035916200013e565b6001600160a01b038716158015906200005657506001600160a01b03861615155b80156200006b57506001600160a01b03851615155b80156200008057506001600160a01b03841615155b80156200009557506001600160a01b03831615155b8015620000a25750600082115b8015620000af5750600081115b620000ef5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640160405180910390fd5b6001600160a01b0396871660805294861660a05292851660c05290841660e05290921661010052600291909155600355620001d1565b6001600160a01b03811681146200013b57600080fd5b50565b600080600080600080600060e0888a0312156200015a57600080fd5b8751620001678162000125565b60208901519097506200017a8162000125565b60408901519096506200018d8162000125565b6060890151909550620001a08162000125565b6080890151909450620001b38162000125565b8093505060a0880151915060c0880151905092959891949750929550565b60805160a05160c05160e05161010051613d7f620003196000396000818161022e01526128640152600061039201526000818161019201528181610ce00152610da5015260006102550152600081816101b90152818161056f01528181610665015281816107010152818161079301528181610825015281816108f40152818161099301528181610e9e01528181610fc20152818161122d01528181611355015281816113d5015281816114c4015281816115ea015281816118d70152818161196d01528181611a0001528181611a9f01528181611b9801528181611cca01528181611f8b015281816120fe0152818161216d0152818161234901528181612416015281816124850152818161270401528181612a0201528181612b7301528181612bde01528181612d1e01528181612e3d0152818161303b01526131320152613d7f6000f3fe608060405234801561001057600080fd5b50600436106101635760003560e01c8063990382cf116100ce578063b81bfa0511610087578063b81bfa051461032b578063be73fb991461033e578063bffe348614610351578063ca5eb5e11461037a578063d3dc75391461038d578063d8defd15146103b4578063fa7fffba146103c757600080fd5b8063990382cf146102c75780639a10cc32146102da578063a2a3c0cb146102fa578063ae8421e11461030d578063b187bd2614610315578063b1dfd5301461032257600080fd5b8063531cc96511610120578063531cc965146102295780635ad9f9931461025057806368cd5088146102775780638456cb591461028a578063876d3abd146102925780638f062227146102a557600080fd5b8063119df25f146101685780631346b0ff1461018d57806316fff074146101b45780632c1e4e55146101db57806336fb8b15146101f0578063410c0b7c14610212575b600080fd5b6101706103da565b6040516001600160a01b0390911681526020015b60405180910390f35b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee6101e936600461329e565b610402565b005b6101ee33600090815260208190526040902080546001600160a01b0319169055565b61021b60035481565b604051908152602001610184565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee61028536600461336a565b610493565b6101ee611199565b6101ee6102a036600461329e565b6111ef565b6004546102b790610100900460ff1681565b6040519015158152602001610184565b6101ee6102d536600461329e565b611486565b6102ed6102e8366004613434565b61177a565b6040516101849190613509565b6101ee61030836600461351c565b6118b7565b6101ee611e81565b6004546102b79060ff1681565b61021b60025481565b6101ee61033936600461329e565b611ee1565b6101ee61034c36600461353e565b611f6b565b61017061035f36600461356a565b6000602081905290815260409020546001600160a01b031681565b6101ee61038836600461356a565b6122bd565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee6103c236600461353e565b612329565b6101ee6103d5366004613587565b6125d4565b6001546000906001600160a01b03166103f257503390565b506001546001600160a01b031690565b61040a612d1c565b600081116104335760405162461bcd60e51b815260040161042a906135d7565b60405180910390fd5b600281905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b61049b612deb565b6104a3612df7565b60045460ff16156104df5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b604482015260640161042a565b600019818560a001516104f2919061360e565b1061052a5760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640161042a565b60008460a001511161056b5760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b604482015260640161042a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ef9190613625565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190613625565b905060006106616103da565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190613642565b6020880151604051634bf3ccad60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916397e7995a9161073691869160040161365b565b602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190613642565b6020890151604051639c8912f160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639c8912f1916107c891879160040161365b565b602060405180830381865afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108099190613642565b60208a01516040516307218dad60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631c8636b49161085a91889160040161365b565b602060405180830381865afa158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190613642565b6108a59190613674565b6108af9190613674565b106108f25760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190613642565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe9190613642565b10610a1b5760405162461bcd60e51b815260040161042a90613687565b60025487608001511115610a615760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b604482015260640161042a565b602087015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190613642565b8760e001518860800151610ae4919061360e565b1015610b225760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b604482015260640161042a565b60008760e00151118015610ba85750602087015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190613642565b8760e0015110155b8015610bc55750610bbd828860200151612e38565b8760e0015111155b610c065760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b604482015260640161042a565b6101008701511580610c3a57508660c00151610c2d578660a0015187610100015110610c3a565b8660a00151876101000151115b610c715760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b604482015260640161042a565b6101208701511580610ca557508660c00151610c98578660a0015187610120015111610ca5565b8660a00151876101200151105b610cdc5760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b604482015260640161042a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008a602001518b60c001518c60e001518d60800151610d2d919061360e565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906136b3565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190613642565b60e0890151610e34908361360e565b1115610e7a5760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b604482015260640161042a565b6080880151604051638a238ae560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016602482018190526044820192909252638a238ae590606401600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b5060009250610f11915050565b876002811115610f2357610f236136d7565b0361118f576000846001600160a01b0316636938c05d8a6020015160008c60e001518d60800151610f54919061360e565b610f5c612fae565b6040518563ffffffff1660e01b8152600401610f7b94939291906136fd565b6020604051808303816000875af1158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190613642565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190613625565b6001600160a01b0316638f93b660826040518060c00160405280604051806101400160405280896001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a81526020016000815260200160008152506040518363ffffffff1660e01b815260040161110f9291906137d6565b600060405180830381600087803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866001604051611185911515815260200190565b60405180910390a4505b5050505050505050565b6111a1612d1c565b6004805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b6111f7612deb565b6111ff612df7565b60006112096103da565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190613894565b8051602082015191925090158015906112c3575060035482602001516112bf9190613674565b4310155b6112df5760405162461bcd60e51b815260040161042a906138f9565b826001600160a01b031681600001516001600160a01b0316146113145760405162461bcd60e51b815260040161042a9061391f565b60008160e00151116113385760405162461bcd60e51b815260040161042a90613947565b604051630195728b60e71b815260048101859052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b1580156113a157600080fd5b505af11580156113b5573d6000803e3d6000fd5b505050506080810151604051638a238ae560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830181905290861660248301526044820192909252638a238ae590606401600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b50505050837f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb1836040516114789190613978565b60405180910390a250505050565b61148e612deb565b611496612df7565b60006114a06103da565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa15801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613894565b80516020820151919250901580159061155a575060035482602001516115569190613674565b4310155b6115765760405162461bcd60e51b815260040161042a906138f9565b826001600160a01b031681600001516001600160a01b0316146115ab5760405162461bcd60e51b815260040161042a9061391f565b60e0810151156115cd5760405162461bcd60e51b815260040161042a90613947565b604051630195728b60e71b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b15801561163657600080fd5b505af115801561164a573d6000803e3d6000fd5b505050602082015160408084015190516024810192909252604482015260009150309060640160408051601f198184030181529181526020820180516001600160e01b031663a2a3c0cb60e01b179052516116a59190613987565b600060405180830381855af49150503d80600081146116e0576040519150601f19603f3d011682016040523d82523d6000602084013e6116e5565b606091505b505090508061173b578160200151846001600160a01b03167f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d8846040015160405161173291815260200190565b60405180910390a35b847f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb18460405161176b9190613978565b60405180910390a25050505050565b6001600160a01b038381166000908152602081905260409020546060911633146117de5760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b604482015260640161042a565b600180546001600160a01b0319166001600160a01b0386161790556040516000908190309061181090879087906139a3565b600060405180830381855af49150503d806000811461184b576040519150601f19603f3d011682016040523d82523d6000602084013e611850565b606091505b50915091508161189c5760448151101561186957600080fd5b6004810190508080602001905181019061188391906139b3565b60405162461bcd60e51b815260040161042a9190613509565b600180546001600160a01b03191690559150505b9392505050565b6118bf612deb565b6118c7612df7565b60006118d16103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8386866040518463ffffffff1660e01b815260040161192593929190613a60565b61014060405180830381865afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119679190613a81565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58487876040518463ffffffff1660e01b81526004016119bb93929190613a60565b60c060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc9190613a9e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190613642565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0a9190613642565b10611b275760405162461bcd60e51b815260040161042a90613687565b8060a0015115611b705760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b604482015260640161042a565b60008260e0015111611b945760405162461bcd60e51b815260040161042a90613afe565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c189190613625565b6001600160a01b0316636938c05d8760016402540be4008760e0015187602001518960600151611c48919061360e565b611c52919061360e565b611c5c9190613b20565b611c64612fae565b6040518563ffffffff1660e01b8152600401611c8394939291906136fd565b6020604051808303816000875af1158015611ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc69190613642565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4a9190613625565b6001600160a01b0316638f93b660826040518060c001604052806040518061014001604052808a6001600160a01b031681526020018c81526020018b81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152506040518363ffffffff1660e01b8152600401611dff9291906137d6565b600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866000604051611e71911515815260200190565b60405180910390a4505050505050565b611e89612d1c565b6004805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936111e59390049091161515815260200190565b611ee9612d1c565b60008111611f095760405162461bcd60e51b815260040161042a906135d7565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab90608001610488565b611f73612deb565b611f7b612df7565b6000611f856103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8387876040518463ffffffff1660e01b8152600401611fd993929190613a60565b61014060405180830381865afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190613a81565b905060008160e00151116120415760405162461bcd60e51b815260040161042a90613afe565b60008160e001516064604b8460a0015161205b919061360e565b6120659190613b20565b61206f9190613b20565b90508315806120ae57508160c0015161209a57808260a001516120929190613674565b8411156120ae565b808260a001516120aa9190613b42565b8410155b6120e75760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b604482015260640161042a565b60405163a354418160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3544181906121399086908a908a908a90600401613b55565b600060405180830381600087803b15801561215357600080fd5b505af1158015612167573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ec9190613625565b6001600160a01b031673F4aa2c3DC977b353c3d3674Ee14086FD24a0434E633c63a7d09091858989600061221e612fae565b6040518763ffffffff1660e01b815260040161223f96959493929190613b8f565b60006040518083038186803b15801561225757600080fd5b505af415801561226b573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b3233146122fa5760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b604482015260640161042a565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612331612deb565b612339612df7565b60006123436103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8387876040518463ffffffff1660e01b815260040161239793929190613a60565b61014060405180830381865afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190613a81565b905060008160e00151116123ff5760405162461bcd60e51b815260040161042a90613afe565b604051637fdb96f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f390612451908590899089908990600401613b55565b600060405180830381600087803b15801561246b57600080fd5b505af115801561247f573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125049190613625565b6001600160a01b031673F4aa2c3DC977b353c3d3674Ee14086FD24a0434E638fff7d8290918488886000612536612fae565b6040518763ffffffff1660e01b815260040161255796959493929190613b8f565b60006040518083038186803b15801561256f57600080fd5b505af4158015612583573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b6125dc612deb565b6125e4612df7565b60008660038111156125f8576125f86136d7565b905060006126046103da565b90506000600383600381111561261c5761261c6136d7565b14905060008161262d576000612630565b60015b905061269360405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b82156126ed5760405162461bcd60e51b815260206004820152602360248201527f4f70656e204c696d6974206f7264657273206e6f7420737570706f72746564206044820152621e595d60ea1b606482015260840161042a565b6040516351d407ff60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe9061273d908d908d908d90600401613a60565b61014060405180830381865afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190613a81565b905060008160e00151116127a55760405162461bcd60e51b815260040161042a90613afe565b60028560038111156127b9576127b96136d7565b0361293a576040805160e0808201835283516001600160a01b0390811683526020808601519084019081528585015184860190815260a0808801516060870190815260c0808a015115156080808a019182528b0151938901938452968a01519088019081529751633837d79d60e11b8152965185166004880152925160248701529051604486015290516064850152915115156084840152905160a4830152915160c48201526000917f0000000000000000000000000000000000000000000000000000000000000000169063706faf3a9060e401602060405180830381865afa1580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613642565b9050816101200151600014806128ff57508160c001516128f65781610120015181106128ff565b81610120015181115b6129345760405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b604482015260640161042a565b506129ee565b600185600381111561294e5761294e6136d7565b14158061296057506000816101200151115b6129945760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b604482015260640161042a565b60008560038111156129a8576129a86136d7565b1415806129ba57506000816101000151115b6129ee5760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b604482015260640161042a565b600083612abb576402540be4008260e001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58e8e8e6040518463ffffffff1660e01b8152600401612a5093929190613a60565b60c060405180830381865afa158015612a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a919190613a9e565b602001518460600151612aa4919061360e565b612aae919061360e565b612ab89190613b20565b90505b600080612acd868e8e8e898d89613034565b91509150612b076040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038089168252602082018c90528e166040820152606081018d9052608081018c905260a08101896003811115612b4657612b466136d7565b90816003811115612b5957612b596136d7565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a490612baa9084908790600401613c24565b600060405180830381600087803b158015612bc457600080fd5b505af1158015612bd8573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e9190613625565b6001600160a01b03166339fe9fd284836040518363ffffffff1660e01b8152600401612c8b929190613c3f565b600060405180830381600087803b158015612ca557600080fd5b505af1158015612cb9573d6000803e3d6000fd5b505050508c8e6001600160a01b0316896001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c0086604051612d0391815260200190565b60405180910390a4505050505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9e9190613625565b6001600160a01b0316336001600160a01b031614612de95760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b604482015260640161042a565b565b323314612de957600080fd5b600454610100900460ff1615612de95760405162461bcd60e51b815260040161042a90602080825260049082015263444f4e4560e01b604082015260600190565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebc9190613625565b6001600160a01b031663281b693c846040518263ffffffff1660e01b8152600401612ee991815260200190565b602060405180830381865afa158015612f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2a9190613642565b905060008111612fa257604051630a06da4f60e21b8152600481018490526001600160a01b0385169063281b693c90602401602060405180830381865afa158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190613642565b612fa4565b805b9150505b92915050565b600061a4b1461480612fc2575062066eed46145b1561302f5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a9190613642565b905090565b504390565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190613625565b6001600160a01b0316639bd24d838a8a8a8a6040518563ffffffff1660e01b81526004016130eb9493929190613c53565b608060405180830381865afa158015613108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312c9190613c9b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561318e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b29190613625565b9050806001600160a01b0316636938c05d8a8d6131d05760036131d3565b60025b888f6132265760018b60038111156131ed576131ed6136d7565b1461321c5760008b6003811115613206576132066136d7565b1461321557866060015161322c565b865161322c565b866020015161322c565b86604001515b6040518563ffffffff1660e01b815260040161324b9493929190613d18565b6020604051808303816000875af115801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e9190613642565b9350505097509795505050505050565b6000602082840312156132b057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156132f1576132f16132b7565b60405290565b60405160c0810167ffffffffffffffff811182821017156132f1576132f16132b7565b6001600160a01b038116811461332f57600080fd5b50565b803561333d8161331a565b919050565b801515811461332f57600080fd5b803561333d81613342565b80356003811061333d57600080fd5b6000806000808486036101a081121561338257600080fd5b6101408082121561339257600080fd5b61339a6132cd565b91506133a587613332565b82526020870135602083015260408701356040830152606087013560608301526080870135608083015260a087013560a08301526133e560c08801613350565b60c083015260e087013560e083015261010080880135818401525061012080880135818401525081955061341a81880161335b565b959895975050505061016084013593610180013592915050565b60008060006040848603121561344957600080fd5b83356134548161331a565b9250602084013567ffffffffffffffff8082111561347157600080fd5b818601915086601f83011261348557600080fd5b81358181111561349457600080fd5b8760208285010111156134a657600080fd5b6020830194508093505050509250925092565b60005b838110156134d45781810151838201526020016134bc565b50506000910152565b600081518084526134f58160208601602086016134b9565b601f01601f19169290920160200192915050565b6020815260006118b060208301846134dd565b6000806040838503121561352f57600080fd5b50508035926020909101359150565b60008060006060848603121561355357600080fd5b505081359360208301359350604090920135919050565b60006020828403121561357c57600080fd5b8135612fa28161331a565b60008060008060008060c087890312156135a057600080fd5b8635955060208701356135b28161331a565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825260079082015266056414c55455f360cc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417612fa857612fa86135f8565b60006020828403121561363757600080fd5b8151612fa28161331a565b60006020828403121561365457600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b80820180821115612fa857612fa86135f8565b6020808252601290820152714d41585f50454e44494e475f4f524445525360701b604082015260600190565b600080604083850312156136c657600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fd5b6004811061332f5761332f6136d7565b8481526080810161370d856136ed565b84602083015283604083015282606083015295945050505050565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015161377c60c085018215159052565b5060e081810151908401526101008082015190840152610120908101519083015260208101516101408301526040810151610160830152606081015161018083015260808101516101a083015260a001516101c090910152565b82815261020081016118b06020830184613728565b805161333d8161331a565b805161333d81613342565b6000610140828403121561381457600080fd5b61381c6132cd565b9050613827826137eb565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261386760c083016137f6565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101e082840312156138a757600080fd5b6138af6132f7565b6138b98484613801565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b6020808252600c908201526b15d0525517d512535153d55560a21b604082015260600190565b6020808252600e908201526d2727aa2faca7aaa92fa7a92222a960911b604082015260600190565b60208082526017908201527657524f4e475f4d41524b45545f4f524445525f5459504560481b604082015260600190565b6101e08101612fa88284613728565b600082516139998184602087016134b9565b9190910192915050565b8183823760009101908152919050565b6000602082840312156139c557600080fd5b815167ffffffffffffffff808211156139dd57600080fd5b818401915084601f8301126139f157600080fd5b815181811115613a0357613a036132b7565b604051601f8201601f19908116603f01168101908382118183101715613a2b57613a2b6132b7565b81604052828152876020848701011115613a4457600080fd5b613a558360208301602088016134b9565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101408284031215613a9457600080fd5b6118b08383613801565b600060c08284031215613ab057600080fd5b613ab86132f7565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a0830151613af281613342565b60a08201529392505050565b6020808252600890820152674e4f5f545241444560c01b604082015260600190565b600082613b3d57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612fa857612fa86135f8565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60028110613b8b57613b8b6136d7565b9052565b6001600160a01b03878116825286166020820152604081018590526060810184905260c08101613bc26080830185613b7b565b8260a0830152979650505050505050565b60018060a01b038082511683526020820151602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151613c19816136ed565b8060a0840152505050565b60e08101613c328285613bd3565b8260c08301529392505050565b82815260e081016118b06020830184613bd3565b6001600160a01b0385168152602081018490526040810183905260808101613c7e6060830184613b7b565b95945050505050565b805163ffffffff8116811461333d57600080fd5b600060808284031215613cad57600080fd5b6040516080810181811067ffffffffffffffff82111715613cd057613cd06132b7565b604052613cdc83613c87565b8152613cea60208401613c87565b6020820152613cfb60408401613c87565b6040820152613d0c60608401613c87565b60608201529392505050565b84815260808101613d28856136ed565b84602083015283604083015263ffffffff831660608301529594505050505056fea2646970667358221220f60a34232b23007508095f17248b1c8495cd68d5aafa73b3db5b0b89f8c7218a64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101635760003560e01c8063990382cf116100ce578063b81bfa0511610087578063b81bfa051461032b578063be73fb991461033e578063bffe348614610351578063ca5eb5e11461037a578063d3dc75391461038d578063d8defd15146103b4578063fa7fffba146103c757600080fd5b8063990382cf146102c75780639a10cc32146102da578063a2a3c0cb146102fa578063ae8421e11461030d578063b187bd2614610315578063b1dfd5301461032257600080fd5b8063531cc96511610120578063531cc965146102295780635ad9f9931461025057806368cd5088146102775780638456cb591461028a578063876d3abd146102925780638f062227146102a557600080fd5b8063119df25f146101685780631346b0ff1461018d57806316fff074146101b45780632c1e4e55146101db57806336fb8b15146101f0578063410c0b7c14610212575b600080fd5b6101706103da565b6040516001600160a01b0390911681526020015b60405180910390f35b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee6101e936600461329e565b610402565b005b6101ee33600090815260208190526040902080546001600160a01b0319169055565b61021b60035481565b604051908152602001610184565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee61028536600461336a565b610493565b6101ee611199565b6101ee6102a036600461329e565b6111ef565b6004546102b790610100900460ff1681565b6040519015158152602001610184565b6101ee6102d536600461329e565b611486565b6102ed6102e8366004613434565b61177a565b6040516101849190613509565b6101ee61030836600461351c565b6118b7565b6101ee611e81565b6004546102b79060ff1681565b61021b60025481565b6101ee61033936600461329e565b611ee1565b6101ee61034c36600461353e565b611f6b565b61017061035f36600461356a565b6000602081905290815260409020546001600160a01b031681565b6101ee61038836600461356a565b6122bd565b6101707f000000000000000000000000000000000000000000000000000000000000000081565b6101ee6103c236600461353e565b612329565b6101ee6103d5366004613587565b6125d4565b6001546000906001600160a01b03166103f257503390565b506001546001600160a01b031690565b61040a612d1c565b600081116104335760405162461bcd60e51b815260040161042a906135d7565b60405180910390fd5b600281905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b61049b612deb565b6104a3612df7565b60045460ff16156104df5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b604482015260640161042a565b600019818560a001516104f2919061360e565b1061052a5760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640161042a565b60008460a001511161056b5760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b604482015260640161042a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ef9190613625565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015610631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106559190613625565b905060006106616103da565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e59190613642565b6020880151604051634bf3ccad60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916397e7995a9161073691869160040161365b565b602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190613642565b6020890151604051639c8912f160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639c8912f1916107c891879160040161365b565b602060405180830381865afa1580156107e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108099190613642565b60208a01516040516307218dad60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631c8636b49161085a91889160040161365b565b602060405180830381865afa158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190613642565b6108a59190613674565b6108af9190613674565b106108f25760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b604482015260640161042a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190613642565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa1580156109da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fe9190613642565b10610a1b5760405162461bcd60e51b815260040161042a90613687565b60025487608001511115610a615760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b604482015260640161042a565b602087015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa158015610aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad09190613642565b8760e001518860800151610ae4919061360e565b1015610b225760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b604482015260640161042a565b60008760e00151118015610ba85750602087015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa158015610b7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba09190613642565b8760e0015110155b8015610bc55750610bbd828860200151612e38565b8760e0015111155b610c065760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b604482015260640161042a565b6101008701511580610c3a57508660c00151610c2d578660a0015187610100015110610c3a565b8660a00151876101000151115b610c715760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b604482015260640161042a565b6101208701511580610ca557508660c00151610c98578660a0015187610120015111610ca5565b8660a00151876101200151105b610cdc5760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b604482015260640161042a565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008a602001518b60c001518c60e001518d60800151610d2d919061360e565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015610d7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da091906136b3565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e259190613642565b60e0890151610e34908361360e565b1115610e7a5760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b604482015260640161042a565b6080880151604051638a238ae560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016602482018190526044820192909252638a238ae590606401600060405180830381600087803b158015610ef057600080fd5b505af1158015610f04573d6000803e3d6000fd5b5060009250610f11915050565b876002811115610f2357610f236136d7565b0361118f576000846001600160a01b0316636938c05d8a6020015160008c60e001518d60800151610f54919061360e565b610f5c612fae565b6040518563ffffffff1660e01b8152600401610f7b94939291906136fd565b6020604051808303816000875af1158015610f9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbe9190613642565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561101e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110429190613625565b6001600160a01b0316638f93b660826040518060c00160405280604051806101400160405280896001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a81526020016000815260200160008152506040518363ffffffff1660e01b815260040161110f9291906137d6565b600060405180830381600087803b15801561112957600080fd5b505af115801561113d573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866001604051611185911515815260200190565b60405180910390a4505b5050505050505050565b6111a1612d1c565b6004805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b6111f7612deb565b6111ff612df7565b60006112096103da565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa158015611275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112999190613894565b8051602082015191925090158015906112c3575060035482602001516112bf9190613674565b4310155b6112df5760405162461bcd60e51b815260040161042a906138f9565b826001600160a01b031681600001516001600160a01b0316146113145760405162461bcd60e51b815260040161042a9061391f565b60008160e00151116113385760405162461bcd60e51b815260040161042a90613947565b604051630195728b60e71b815260048101859052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b1580156113a157600080fd5b505af11580156113b5573d6000803e3d6000fd5b505050506080810151604051638a238ae560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830181905290861660248301526044820192909252638a238ae590606401600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b50505050837f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb1836040516114789190613978565b60405180910390a250505050565b61148e612deb565b611496612df7565b60006114a06103da565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa15801561150c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115309190613894565b80516020820151919250901580159061155a575060035482602001516115569190613674565b4310155b6115765760405162461bcd60e51b815260040161042a906138f9565b826001600160a01b031681600001516001600160a01b0316146115ab5760405162461bcd60e51b815260040161042a9061391f565b60e0810151156115cd5760405162461bcd60e51b815260040161042a90613947565b604051630195728b60e71b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b15801561163657600080fd5b505af115801561164a573d6000803e3d6000fd5b505050602082015160408084015190516024810192909252604482015260009150309060640160408051601f198184030181529181526020820180516001600160e01b031663a2a3c0cb60e01b179052516116a59190613987565b600060405180830381855af49150503d80600081146116e0576040519150601f19603f3d011682016040523d82523d6000602084013e6116e5565b606091505b505090508061173b578160200151846001600160a01b03167f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d8846040015160405161173291815260200190565b60405180910390a35b847f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb18460405161176b9190613978565b60405180910390a25050505050565b6001600160a01b038381166000908152602081905260409020546060911633146117de5760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b604482015260640161042a565b600180546001600160a01b0319166001600160a01b0386161790556040516000908190309061181090879087906139a3565b600060405180830381855af49150503d806000811461184b576040519150601f19603f3d011682016040523d82523d6000602084013e611850565b606091505b50915091508161189c5760448151101561186957600080fd5b6004810190508080602001905181019061188391906139b3565b60405162461bcd60e51b815260040161042a9190613509565b600180546001600160a01b03191690559150505b9392505050565b6118bf612deb565b6118c7612df7565b60006118d16103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8386866040518463ffffffff1660e01b815260040161192593929190613a60565b61014060405180830381865afa158015611943573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119679190613a81565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58487876040518463ffffffff1660e01b81526004016119bb93929190613a60565b60c060405180830381865afa1580156119d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fc9190613a9e565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190613642565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa158015611ae6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0a9190613642565b10611b275760405162461bcd60e51b815260040161042a90613687565b8060a0015115611b705760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b604482015260640161042a565b60008260e0015111611b945760405162461bcd60e51b815260040161042a90613afe565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bf4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c189190613625565b6001600160a01b0316636938c05d8760016402540be4008760e0015187602001518960600151611c48919061360e565b611c52919061360e565b611c5c9190613b20565b611c64612fae565b6040518563ffffffff1660e01b8152600401611c8394939291906136fd565b6020604051808303816000875af1158015611ca2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc69190613642565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d4a9190613625565b6001600160a01b0316638f93b660826040518060c001604052806040518061014001604052808a6001600160a01b031681526020018c81526020018b81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152506040518363ffffffff1660e01b8152600401611dff9291906137d6565b600060405180830381600087803b158015611e1957600080fd5b505af1158015611e2d573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866000604051611e71911515815260200190565b60405180910390a4505050505050565b611e89612d1c565b6004805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936111e59390049091161515815260200190565b611ee9612d1c565b60008111611f095760405162461bcd60e51b815260040161042a906135d7565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab90608001610488565b611f73612deb565b611f7b612df7565b6000611f856103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8387876040518463ffffffff1660e01b8152600401611fd993929190613a60565b61014060405180830381865afa158015611ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201b9190613a81565b905060008160e00151116120415760405162461bcd60e51b815260040161042a90613afe565b60008160e001516064604b8460a0015161205b919061360e565b6120659190613b20565b61206f9190613b20565b90508315806120ae57508160c0015161209a57808260a001516120929190613674565b8411156120ae565b808260a001516120aa9190613b42565b8410155b6120e75760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b604482015260640161042a565b60405163a354418160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3544181906121399086908a908a908a90600401613b55565b600060405180830381600087803b15801561215357600080fd5b505af1158015612167573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121ec9190613625565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__633c63a7d09091858989600061221e612fae565b6040518763ffffffff1660e01b815260040161223f96959493929190613b8f565b60006040518083038186803b15801561225757600080fd5b505af415801561226b573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b3233146122fa5760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b604482015260640161042a565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612331612deb565b612339612df7565b60006123436103da565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8387876040518463ffffffff1660e01b815260040161239793929190613a60565b61014060405180830381865afa1580156123b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123d99190613a81565b905060008160e00151116123ff5760405162461bcd60e51b815260040161042a90613afe565b604051637fdb96f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f390612451908590899089908990600401613b55565b600060405180830381600087803b15801561246b57600080fd5b505af115801561247f573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156124e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125049190613625565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__638fff7d8290918488886000612536612fae565b6040518763ffffffff1660e01b815260040161255796959493929190613b8f565b60006040518083038186803b15801561256f57600080fd5b505af4158015612583573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b6125dc612deb565b6125e4612df7565b60008660038111156125f8576125f86136d7565b905060006126046103da565b90506000600383600381111561261c5761261c6136d7565b14905060008161262d576000612630565b60015b905061269360405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b82156126ed5760405162461bcd60e51b815260206004820152602360248201527f4f70656e204c696d6974206f7264657273206e6f7420737570706f72746564206044820152621e595d60ea1b606482015260840161042a565b6040516351d407ff60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe9061273d908d908d908d90600401613a60565b61014060405180830381865afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f9190613a81565b905060008160e00151116127a55760405162461bcd60e51b815260040161042a90613afe565b60028560038111156127b9576127b96136d7565b0361293a576040805160e0808201835283516001600160a01b0390811683526020808601519084019081528585015184860190815260a0808801516060870190815260c0808a015115156080808a019182528b0151938901938452968a01519088019081529751633837d79d60e11b8152965185166004880152925160248701529051604486015290516064850152915115156084840152905160a4830152915160c48201526000917f0000000000000000000000000000000000000000000000000000000000000000169063706faf3a9060e401602060405180830381865afa1580156128ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cf9190613642565b9050816101200151600014806128ff57508160c001516128f65781610120015181106128ff565b81610120015181115b6129345760405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b604482015260640161042a565b506129ee565b600185600381111561294e5761294e6136d7565b14158061296057506000816101200151115b6129945760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b604482015260640161042a565b60008560038111156129a8576129a86136d7565b1415806129ba57506000816101000151115b6129ee5760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b604482015260640161042a565b600083612abb576402540be4008260e001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58e8e8e6040518463ffffffff1660e01b8152600401612a5093929190613a60565b60c060405180830381865afa158015612a6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a919190613a9e565b602001518460600151612aa4919061360e565b612aae919061360e565b612ab89190613b20565b90505b600080612acd868e8e8e898d89613034565b91509150612b076040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038089168252602082018c90528e166040820152606081018d9052608081018c905260a08101896003811115612b4657612b466136d7565b90816003811115612b5957612b596136d7565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a490612baa9084908790600401613c24565b600060405180830381600087803b158015612bc457600080fd5b505af1158015612bd8573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c5e9190613625565b6001600160a01b03166339fe9fd284836040518363ffffffff1660e01b8152600401612c8b929190613c3f565b600060405180830381600087803b158015612ca557600080fd5b505af1158015612cb9573d6000803e3d6000fd5b505050508c8e6001600160a01b0316896001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c0086604051612d0391815260200190565b60405180910390a4505050505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9e9190613625565b6001600160a01b0316336001600160a01b031614612de95760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b604482015260640161042a565b565b323314612de957600080fd5b600454610100900460ff1615612de95760405162461bcd60e51b815260040161042a90602080825260049082015263444f4e4560e01b604082015260600190565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ebc9190613625565b6001600160a01b031663281b693c846040518263ffffffff1660e01b8152600401612ee991815260200190565b602060405180830381865afa158015612f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f2a9190613642565b905060008111612fa257604051630a06da4f60e21b8152600481018490526001600160a01b0385169063281b693c90602401602060405180830381865afa158015612f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f9d9190613642565b612fa4565b805b9150505b92915050565b600061a4b1461480612fc2575062066eed46145b1561302f5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613006573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302a9190613642565b905090565b504390565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613096573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ba9190613625565b6001600160a01b0316639bd24d838a8a8a8a6040518563ffffffff1660e01b81526004016130eb9493929190613c53565b608060405180830381865afa158015613108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061312c9190613c9b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561318e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131b29190613625565b9050806001600160a01b0316636938c05d8a8d6131d05760036131d3565b60025b888f6132265760018b60038111156131ed576131ed6136d7565b1461321c5760008b6003811115613206576132066136d7565b1461321557866060015161322c565b865161322c565b866020015161322c565b86604001515b6040518563ffffffff1660e01b815260040161324b9493929190613d18565b6020604051808303816000875af115801561326a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328e9190613642565b9350505097509795505050505050565b6000602082840312156132b057600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156132f1576132f16132b7565b60405290565b60405160c0810167ffffffffffffffff811182821017156132f1576132f16132b7565b6001600160a01b038116811461332f57600080fd5b50565b803561333d8161331a565b919050565b801515811461332f57600080fd5b803561333d81613342565b80356003811061333d57600080fd5b6000806000808486036101a081121561338257600080fd5b6101408082121561339257600080fd5b61339a6132cd565b91506133a587613332565b82526020870135602083015260408701356040830152606087013560608301526080870135608083015260a087013560a08301526133e560c08801613350565b60c083015260e087013560e083015261010080880135818401525061012080880135818401525081955061341a81880161335b565b959895975050505061016084013593610180013592915050565b60008060006040848603121561344957600080fd5b83356134548161331a565b9250602084013567ffffffffffffffff8082111561347157600080fd5b818601915086601f83011261348557600080fd5b81358181111561349457600080fd5b8760208285010111156134a657600080fd5b6020830194508093505050509250925092565b60005b838110156134d45781810151838201526020016134bc565b50506000910152565b600081518084526134f58160208601602086016134b9565b601f01601f19169290920160200192915050565b6020815260006118b060208301846134dd565b6000806040838503121561352f57600080fd5b50508035926020909101359150565b60008060006060848603121561355357600080fd5b505081359360208301359350604090920135919050565b60006020828403121561357c57600080fd5b8135612fa28161331a565b60008060008060008060c087890312156135a057600080fd5b8635955060208701356135b28161331a565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825260079082015266056414c55455f360cc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417612fa857612fa86135f8565b60006020828403121561363757600080fd5b8151612fa28161331a565b60006020828403121561365457600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b80820180821115612fa857612fa86135f8565b6020808252601290820152714d41585f50454e44494e475f4f524445525360701b604082015260600190565b600080604083850312156136c657600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fd5b6004811061332f5761332f6136d7565b8481526080810161370d856136ed565b84602083015283604083015282606083015295945050505050565b805180516001600160a01b031683526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a084015260c081015161377c60c085018215159052565b5060e081810151908401526101008082015190840152610120908101519083015260208101516101408301526040810151610160830152606081015161018083015260808101516101a083015260a001516101c090910152565b82815261020081016118b06020830184613728565b805161333d8161331a565b805161333d81613342565b6000610140828403121561381457600080fd5b61381c6132cd565b9050613827826137eb565b81526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015261386760c083016137f6565b60c082015260e082015160e082015261010080830151818301525061012080830151818301525092915050565b60006101e082840312156138a757600080fd5b6138af6132f7565b6138b98484613801565b81526101408301516020820152610160830151604082015261018083015160608201526101a083015160808201526101c09092015160a083015250919050565b6020808252600c908201526b15d0525517d512535153d55560a21b604082015260600190565b6020808252600e908201526d2727aa2faca7aaa92fa7a92222a960911b604082015260600190565b60208082526017908201527657524f4e475f4d41524b45545f4f524445525f5459504560481b604082015260600190565b6101e08101612fa88284613728565b600082516139998184602087016134b9565b9190910192915050565b8183823760009101908152919050565b6000602082840312156139c557600080fd5b815167ffffffffffffffff808211156139dd57600080fd5b818401915084601f8301126139f157600080fd5b815181811115613a0357613a036132b7565b604051601f8201601f19908116603f01168101908382118183101715613a2b57613a2b6132b7565b81604052828152876020848701011115613a4457600080fd5b613a558360208301602088016134b9565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b60006101408284031215613a9457600080fd5b6118b08383613801565b600060c08284031215613ab057600080fd5b613ab86132f7565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a0830151613af281613342565b60a08201529392505050565b6020808252600890820152674e4f5f545241444560c01b604082015260600190565b600082613b3d57634e487b7160e01b600052601260045260246000fd5b500490565b81810381811115612fa857612fa86135f8565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b60028110613b8b57613b8b6136d7565b9052565b6001600160a01b03878116825286166020820152604081018590526060810184905260c08101613bc26080830185613b7b565b8260a0830152979650505050505050565b60018060a01b038082511683526020820151602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151613c19816136ed565b8060a0840152505050565b60e08101613c328285613bd3565b8260c08301529392505050565b82815260e081016118b06020830184613bd3565b6001600160a01b0385168152602081018490526040810183905260808101613c7e6060830184613b7b565b95945050505050565b805163ffffffff8116811461333d57600080fd5b600060808284031215613cad57600080fd5b6040516080810181811067ffffffffffffffff82111715613cd057613cd06132b7565b604052613cdc83613c87565b8152613cea60208401613c87565b6020820152613cfb60408401613c87565b6040820152613d0c60608401613c87565b60608201529392505050565b84815260808101613d28856136ed565b84602083015283604083015263ffffffff831660608301529594505050505056fea2646970667358221220f60a34232b23007508095f17248b1c8495cd68d5aafa73b3db5b0b89f8c7218a64736f6c63430008140033",
  "libraries": {
    "TradeUtils": "0xF4aa2c3DC977b353c3d3674Ee14086FD24a0434E",
    "PackingUtils": "0x46B9764c07f0A7b55dE6DF8347D06076C0DBed24"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2361,
        "contract": "contracts/Trading.sol:Trading",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 2363,
        "contract": "contracts/Trading.sol:Trading",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2530,
        "contract": "contracts/Trading.sol:Trading",
        "label": "maxPosWETH",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2532,
        "contract": "contracts/Trading.sol:Trading",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2534,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 2536,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isDone",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}