{
  "address": "0x0172cbB98360801d794A5399731F36BF296b9179",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "contract CallbacksInterface",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderSameBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbacks",
      "outputs": [
        {
          "internalType": "contract CallbacksInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        }
      ],
      "name": "executeNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLeveragedPosWETH",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x098907185b4bf51e4af07706bdd07aa437b227e5405ecda1af548ef8c6ff1837",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x0172cbB98360801d794A5399731F36BF296b9179",
    "transactionIndex": 3,
    "gasUsed": "3276538",
    "logsBloom": "0x
    "blockHash": "0x1da9e5da461576e6f83b8c30e6c549251405cc46827b226a27c4ad099b3302dc",
    "transactionHash": "0x098907185b4bf51e4af07706bdd07aa437b227e5405ecda1af548ef8c6ff1837",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 41260118,
        "transactionHash": "0x098907185b4bf51e4af07706bdd07aa437b227e5405ecda1af548ef8c6ff1837",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005a8e909d0578e00000000000000000000000000000000000000000000000001fc459dea51a64810000000000000000000000000000000000000000000022447b878ca941650a740000000000000000000000000000000000000000000000001f69cb4e0814eba10000000000000000000000000000000000000000000022447be21b39de6a8354",
        "logIndex": 6,
        "blockHash": "0x1da9e5da461576e6f83b8c30e6c549251405cc46827b226a27c4ad099b3302dc"
      }
    ],
    "blockNumber": 41260118,
    "cumulativeGasUsed": "3339538",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15D862D44BCf0918012575CB7fd660C1A74f374A",
    "0xFB400E04A0Cee4543Ef04D83876184bC449136DE",
    "0x15002a412C4D8dEB2F6E249Df630D259eb71D681",
    "0x851755065fff602fE9b53D18A9bE16ab082aA130",
    "0x9CA10C2B05D5B248BCB1BDbFeAD32767043A5e51",
    "0x0DE808b368ecf0AF6F4379F3719E814F92220498",
    "1500000000000000000000",
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "063f6380a44fddc0413748fbb84bc8a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"contract CallbacksInterface\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderSameBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"contract CallbacksInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"name\":\"executeNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLeveragedPosWETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trading.sol\":\"Trading\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(\\n        address trader,\\n        bytes calldata call_data\\n    ) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(\\n            call_data\\n        );\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd713b935046f2a897f5d095ee60be6a6f51b84ce60e66df4a9dca2cc9a6cdadd\",\"license\":\"MIT\"},\"contracts/Trading.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./Delegatable.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./libraries/TradeUtils.sol\\\";\\nimport \\\"./libraries/PackingUtils.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\nimport \\\"./interfaces/CallbacksInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_4.sol\\\";\\n\\ncontract Trading is Delegatable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterface public immutable storageT;\\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\\n    PairInfosInterface public immutable pairInfos;\\n    ReferralsInterface public immutable referrals;\\n    BorrowingFeesInterface public immutable borrowingFees;\\n    CallbacksInterface public immutable callbacks;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10;\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n    int public maxLeveragedPosWETH = 10e18; //100 weth\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n\\n    event MarketOrderInitiated(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        bool open\\n    );\\n\\n    event OpenLimitPlaced(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    event TpUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newTp\\n    );\\n    event SlUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newSl\\n    );\\n\\n    event NftOrderInitiated(\\n        uint orderId,\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n    event NftOrderSameBlock(\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n\\n    event ChainlinkCallbackTimeout(\\n        uint indexed orderId,\\n        StorageInterface.PendingMarketOrder order\\n    );\\n    event CouldNotCloseTrade(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    constructor(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        BorrowingFeesInterface _borrowingFees,\\n        CallbacksInterface _callbacks,\\n        uint _maxPosWETH,\\n        uint _marketOrdersTimeout\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_nftRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                address(_callbacks) != address(0) &&\\n                _maxPosWETH > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosWETH = _maxPosWETH;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n        callbacks = _callbacks;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier notContract() {\\n        isNotContract();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n    }\\n\\n    function isNotContract() private view {\\n        require(tx.origin == msg.sender);\\n    }\\n\\n    function isNotDone() private view {\\n        require(!isDone, \\\"DONE\\\");\\n    }\\n\\n    // Manage params\\n    function setMaxPosWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosWETH = value;\\n        emit NumberUpdated(\\\"maxPosWETH\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterface.Trade memory t,\\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint spreadReductionId,\\n        uint slippageP // 1e10 (%)\\n    )\\n        external\\n        // address referrer\\n        notContract\\n        notDone\\n    {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(t.positionSizeWETH <= maxPosWETH, \\\"ABOVE_MAX_POS\\\");\\n        require(\\n            t.positionSizeWETH * t.leverage >=\\n                pairsStored.pairMinLevPosWETH(t.pairIndex),\\n            \\\"BELOW_MIN_POS\\\"\\n        );\\n\\n        require(\\n            t.leverage > 0 &&\\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\\n            \\\"LEVERAGE_INCORRECT\\\"\\n        );\\n\\n        // require(\\n        //     spreadReductionId == 0 ||\\n        //         storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\\n        //     \\\"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\\\"\\n        // );\\n\\n        require(\\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\\n            \\\"WRONG_TP\\\"\\n        );\\n        require(\\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\\n            \\\"WRONG_SL\\\"\\n        );\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n            0,\\n            t.pairIndex,\\n            t.buy,\\n            t.positionSizeWETH * t.leverage\\n        );\\n        require(\\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\\n            \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n        );\\n\\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\\n\\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n            // storageT.storeOpenLimitOrder(\\n            //     StorageInterface.OpenLimitOrder(\\n            //         sender,\\n            //         t.pairIndex,\\n            //         index,\\n            //         t.positionSizeWETH,\\n            //         spreadReductionId > 0\\n            //             ? storageT.spreadReductionsP(spreadReductionId - 1)\\n            //             : 0,\\n            //         t.buy,\\n            //         t.leverage,\\n            //         t.tp,\\n            //         t.sl,\\n            //         t.openPrice,\\n            //         t.openPrice,\\n            //         block.number,\\n            //         0\\n            //     )\\n            // );\\n            // nftRewards.setOpenLimitOrderType(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     orderType\\n            // );\\n            // address c = storageT.callbacks();\\n            // c.setTradeLastUpdated(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     ChainUtils.getBlockNumber()\\n            // );\\n            // c.setTradeData(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     slippageP\\n            // );\\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV1_4.OrderType.MARKET_OPEN,\\n                t.positionSizeWETH * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            // storageT.storePendingMarketOrder(\\n            //     StorageInterface.PendingMarketOrder(\\n            //         StorageInterface.Trade(\\n            //             sender,\\n            //             t.pairIndex,\\n            //             0,\\n            //             0,\\n            //             t.positionSizeWETH,\\n            //             0,\\n            //             t.buy,\\n            //             t.leverage,\\n            //             t.tp,\\n            //             t.sl\\n            //         ),\\n            //         0,\\n            //         t.openPrice,\\n            //         slippageP,\\n            //         0,\\n            //         0\\n            //     ),\\n            //     orderId,\\n            //     true\\n            // );\\n\\n            (storageT.priceAggregator()).marketOrderfulfill(\\n                orderId,\\n                StorageInterface.PendingMarketOrder(\\n                    StorageInterface.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        0,\\n                        t.positionSizeWETH,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    0,\\n                    0\\n                )\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        // referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(\\n        uint pairIndex,\\n        uint index\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        StorageInterface.TradeInfo memory i = storageT.getOpenTradesInfo(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        ).getPrice(\\n                pairIndex,\\n                AggregatorInterfaceV1_4.OrderType.MARKET_CLOSE,\\n                (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n        // storageT.storePendingMarketOrder(\\n        //     StorageInterface.PendingMarketOrder(\\n        //         StorageInterface.Trade(\\n        //             sender,\\n        //             pairIndex,\\n        //             index,\\n        //             0,\\n        //             0,\\n        //             0,\\n        //             false,\\n        //             0,\\n        //             0,\\n        //             0\\n        //         ),\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0\\n        //     ),\\n        //     orderId,\\n        //     false\\n        // );\\n\\n        (storageT.priceAggregator()).marketOrderfulfill(\\n            orderId,\\n            StorageInterface.PendingMarketOrder(\\n                StorageInterface.Trade(\\n                    sender,\\n                    pairIndex,\\n                    index,\\n                    0,\\n                    0,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0\\n                ),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            )\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    // function updateOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     uint price, // PRECISION\\n    //     uint tp,\\n    //     uint sl,\\n    //     uint maxSlippageP\\n    // ) external notContract notDone {\\n    //     require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n    //     require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n    //     require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     o.minPrice = price;\\n    //     o.maxPrice = price;\\n    //     o.tp = tp;\\n    //     o.sl = sl;\\n\\n    //     storageT.updateOpenLimitOrder(o);\\n\\n    //     address c = storageT.callbacks();\\n    //     c.setTradeLastUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         ChainUtils.getBlockNumber()\\n    //     );\\n    //     c.setTradeData(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         maxSlippageP\\n    //     );\\n\\n    //     emit OpenLimitUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         price,\\n    //         tp,\\n    //         sl,\\n    //         maxSlippageP\\n    //     );\\n    // }\\n\\n    // function cancelOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) external notContract notDone {\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n    //     storageT.transferWETH(address(storageT), sender, o.positionSize);\\n\\n    //     emit OpenLimitCanceled(sender, pairIndex, index);\\n    // }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(\\n        uint pairIndex,\\n        uint index,\\n        uint newTp\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.TP\\n        // );\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        address(storageT.callbacks()).setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(\\n        uint pairIndex,\\n        uint index,\\n        uint newSl\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.SL\\n        // );\\n\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 ||\\n                (\\n                    t.buy\\n                        ? newSl >= t.openPrice - maxSlDist\\n                        : newSl <= t.openPrice + maxSlDist\\n                ),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        address(storageT.callbacks()).setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    // Execute limit order\\n    function executeNftOrder(\\n        uint _orderType,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint nftId,\\n        uint nftType\\n    ) external notContract notDone {\\n        // (\\n        //     uint _orderType,\\n        //     address trader,\\n        //     uint pairIndex,\\n        //     uint index,\\n        //     uint nftId,\\n        //     uint nftType\\n        // ) = packed.unpackExecuteNftOrder();\\n        StorageInterface.LimitOrder orderType = StorageInterface.LimitOrder(\\n            _orderType\\n        );\\n        address sender = _msgSender();\\n\\n        // require(nftType >= 1 && nftType <= 5, \\\"WRONG_NFT_TYPE\\\");\\n        // require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \\\"NO_NFT\\\");\\n\\n        // require(\\n        //     block.number >=\\n        //         storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(),\\n        //     \\\"SUCCESS_TIMELOCK\\\"\\n        // );\\n\\n        bool isOpenLimit = orderType == StorageInterface.LimitOrder.OPEN;\\n        TradingCallbacksInterface.TradeType tradeType = isOpenLimit\\n            ? TradingCallbacksInterface.TradeType.LIMIT\\n            : TradingCallbacksInterface.TradeType.MARKET;\\n\\n        // require(\\n        //     canExecute(\\n        //         orderType,\\n        //         TradingCallbacksInterface.SimplifiedTradeId(\\n        //             trader,\\n        //             pairIndex,\\n        //             index,\\n        //             tradeType\\n        //         )\\n        //     ),\\n        //     \\\"IN_TIMEOUT\\\"\\n        // );\\n\\n        // handleBotInUse(sender, nftId, trader, pairIndex, index);\\n\\n        StorageInterface.Trade memory t;\\n\\n        if (isOpenLimit) {\\n            revert(\\\"Open Limit orders not supported yet\\\");\\n            // require(\\n            //     storageT.hasOpenLimitOrder(trader, pairIndex, index),\\n            //     \\\"NO_LIMIT\\\"\\n            // );\\n        } else {\\n            t = storageT.getOpenTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterface.LimitOrder.LIQ) {\\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        t.positionSizeWETH,\\n                        t.leverage\\n                    )\\n                );\\n\\n                require(\\n                    t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl),\\n                    \\\"HAS_SL\\\"\\n                );\\n            } else if (orderType == StorageInterface.LimitOrder.PAR_LIQ) {\\n                uint parLiqPrice = borrowingFees\\n                    .getTradePartialLiquidationPrice(\\n                        BorrowingFeesInterface.LiqPriceInput(\\n                            t.trader,\\n                            t.pairIndex,\\n                            t.index,\\n                            t.openPrice,\\n                            t.buy,\\n                            t.positionSizeWETH,\\n                            t.leverage\\n                        )\\n                    );\\n\\n                require(\\n                    t.sl == 0 ||\\n                        (t.buy ? parLiqPrice > t.sl : parLiqPrice < t.sl),\\n                    \\\"HAS_SL\\\"\\n                );\\n                int256 pnl = callbacks.getTradePnl(\\n                    t.trader,\\n                    t.pairIndex,\\n                    t.index\\n                );\\n                int256 position = int(t.positionSizeWETH) + pnl;\\n                require(\\n                    position >= maxLeveragedPosWETH,\\n                    \\\"position to small for partial liquidation\\\"\\n                );\\n            } else {\\n                require(\\n                    orderType != StorageInterface.LimitOrder.SL || t.sl > 0,\\n                    \\\"NO_SL\\\"\\n                );\\n                require(\\n                    orderType != StorageInterface.LimitOrder.TP || t.tp > 0,\\n                    \\\"NO_TP\\\"\\n                );\\n            }\\n        }\\n\\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n        //         .TriggeredLimitId(trader, pairIndex, index, orderType);\\n\\n        if (\\n            true\\n            // !nftRewards.triggered(triggeredLimitId) ||\\n            // nftRewards.timedOut(triggeredLimitId)\\n        ) {\\n            uint leveragedPosWETH;\\n\\n            if (isOpenLimit) {\\n                // StorageInterface.OpenLimitOrder memory l = storageT\\n                //     .getOpenLimitOrder(trader, pairIndex, index);\\n                // leveragedPosWETH = l.positionSize * l.leverage;\\n                // (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n                //     0,\\n                //     l.pairIndex,\\n                //     l.buy,\\n                //     leveragedPosWETH\\n                // );\\n                // require(\\n                //     priceImpactP * l.leverage <=\\n                //         pairInfos.maxNegativePnlOnOpenP(),\\n                //     \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n                // );\\n            } else {\\n                leveragedPosWETH = t.positionSizeWETH * t.leverage;\\n            }\\n\\n            // storageT.transferLinkToAggregator(\\n            //     sender,\\n            //     pairIndex,\\n            //     leveragedPosWETH\\n            // );\\n\\n            (uint orderId /*uint linkFee*/, ) = getPriceNftOrder(\\n                isOpenLimit,\\n                trader,\\n                pairIndex,\\n                index,\\n                tradeType,\\n                orderType,\\n                leveragedPosWETH\\n            );\\n\\n            StorageInterface.PendingNftOrder memory pendingNftOrder;\\n            pendingNftOrder.nftHolder = sender;\\n            pendingNftOrder.nftId = nftId;\\n            pendingNftOrder.trader = trader;\\n            pendingNftOrder.pairIndex = pairIndex;\\n            pendingNftOrder.index = index;\\n            pendingNftOrder.orderType = orderType;\\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n\\n            (storageT.priceAggregator()).nftOrderfulfill(\\n                orderId,\\n                pendingNftOrder\\n            );\\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\\n        } else {\\n            // nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\\n\\n            emit NftOrderSameBlock(sender, trader, pairIndex);\\n        }\\n    }\\n\\n    // Market timeout\\n    // function openTradeMarketTimeout(uint _order) external notContract notDone {\\n    //     address sender = _msgSender();\\n\\n    //     StorageInterface.PendingMarketOrder memory o = storageT\\n    //         .reqID_pendingMarketOrder(_order);\\n    //     StorageInterface.Trade memory t = o.trade;\\n\\n    //     require(\\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n    //         \\\"WAIT_TIMEOUT\\\"\\n    //     );\\n    //     require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n    //     require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n    //     storageT.unregisterPendingMarketOrder(_order, true);\\n    //     storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\\n\\n    //     emit ChainlinkCallbackTimeout(_order, o);\\n    // }\\n\\n    // function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n    //     address sender = _msgSender();\\n\\n    //     StorageInterface.PendingMarketOrder memory o = storageT\\n    //         .reqID_pendingMarketOrder(_order);\\n    //     StorageInterface.Trade memory t = o.trade;\\n\\n    //     require(\\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n    //         \\\"WAIT_TIMEOUT\\\"\\n    //     );\\n    //     require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n    //     require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n    //     storageT.unregisterPendingMarketOrder(_order, false);\\n\\n    //     (bool success, ) = address(this).delegatecall(\\n    //         abi.encodeWithSignature(\\n    //             \\\"closeTradeMarket(uint256,uint256)\\\",\\n    //             t.pairIndex,\\n    //             t.index\\n    //         )\\n    //     );\\n\\n    //     if (!success) {\\n    //         emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n    //     }\\n\\n    //     emit ChainlinkCallbackTimeout(_order, o);\\n    // }\\n\\n    // //Helpers\\n    // function checkNoPendingTrigger(\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     StorageInterface.LimitOrder orderType\\n    // ) private view {\\n    //     NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n    //         memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n    //             .TriggeredLimitId(trader, pairIndex, index, orderType);\\n    //     require(\\n    //         !nftRewards.triggered(triggeredLimitId) ||\\n    //             nftRewards.timedOut(triggeredLimitId),\\n    //         \\\"PENDING_TRIGGER\\\"\\n    //     );\\n    // }\\n\\n    // function canExecute(\\n    //     StorageInterface.LimitOrder orderType,\\n    //     TradingCallbacksInterface.SimplifiedTradeId memory id\\n    // ) private view returns (bool) {\\n    //     if (orderType == StorageInterface.LimitOrder.LIQ) return true;\\n\\n    //     uint b = ChainUtils.getBlockNumber();\\n    //     address cb = storageT.callbacks();\\n\\n    //     if (orderType == StorageInterface.LimitOrder.TP)\\n    //         return !cb.isTpInTimeout(id, b);\\n    //     if (orderType == StorageInterface.LimitOrder.SL)\\n    //         return !cb.isSlInTimeout(id, b);\\n\\n    //     return !cb.isLimitInTimeout(id, b);\\n    // }\\n\\n    function pairMaxLeverage(\\n        PairsStorageInterfaceV6 pairsStored,\\n        uint pairIndex\\n    ) private view returns (uint) {\\n        uint max = TradingCallbacksInterface(address(storageT.callbacks()))\\n            .pairMaxLeverage(pairIndex);\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    // function handleBotInUse(\\n    //     address sender,\\n    //     uint nftId,\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) private {\\n    //     (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\\n    //         block.number,\\n    //         sender,\\n    //         nftId,\\n    //         trader,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n    //     require(!nftRewards.nftBotInUse(nftHash, botHash), \\\"BOT_IN_USE\\\");\\n\\n    //     nftRewards.setNftBotInUse(nftHash, botHash);\\n    // }\\n\\n    function getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType tradeType,\\n        StorageInterface.LimitOrder orderType,\\n        uint leveragedPosWETH\\n    ) private returns (uint orderId, uint linkFee) {\\n        TradingCallbacksInterface.LastUpdated\\n            memory lastUpdated = TradingCallbacksInterface(\\n                address(storageT.callbacks())\\n            ).tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit\\n                ? AggregatorInterfaceV1_4.OrderType.LIMIT_OPEN\\n                : AggregatorInterfaceV1_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosWETH,\\n            isOpenLimit\\n                ? lastUpdated.limit\\n                : orderType == StorageInterface.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterface.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n\\n        // linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\\n    }\\n}\\n\",\"keccak256\":\"0xeaf48b5c4f46ecdc713284199fd644bcaa5aaf36a73551642c88b4fd30ace557\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x13048ee9355f58d301d80d4e8262cd1ac4de1723544f03fccbbc1eb1e96a6fbf\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd008d26590a5588f3972b3ecf875584a8c6f73dac938dfe02feefeb3c2bd3c60\",\"license\":\"MIT\"},\"contracts/interfaces/CallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface CallbacksInterface {\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // struct PendingMarketOrder {\\n    //     Trade trade;\\n    //     uint block;\\n    //     uint wantedPrice; // PRECISION\\n    //     uint slippageP; // PRECISION (%)\\n    //     uint spreadReductionP;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n\\n    // struct Trade {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint initialPosToken; // 1e18\\n    //     uint positionSizeWETH; // 1e18\\n    //     uint openPrice; // PRECISION\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION\\n    //     uint sl; // PRECISION\\n    // }\\n\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function executeNftOpenOrderCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n\\n    function getTradePnl(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (int256 pnl);\\n}\\n\",\"keccak256\":\"0x1c530bad3368cf2c97197532b6e73ac3d23a25abf8614d9c8efa9afd65609eef\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x14a668265e52a52637f06d864fef4ec0e4b47feb4d18f37d70fd22898149922a\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xc25467e6a4c74c01ef686c6bd9fff63c52f30c03fbaa6cb5e0d7207827ddd336\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xe6903da90872488f13bdde146e3423a09b54f4a3a0838a51871469fd7bef8fa6\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32a4e5c386170b9da2ec3cd5ac53a4c82c64cfe94f41990f635cd18a73eccf73\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf439723f853b013721f9cc98c3e9ace8f63d178512916f35307be17c090b2a12\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0x0c9f20ecadb018115d8452e7ca8eb8eef633b723ea1d8bed43e063536bdbb254\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0x7404086c41bf7d149aec1e867862091338a331ad5f70464885b3783468914e65\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"contracts/interfaces/TradingCallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TradingCallbacksInterface {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb01dc0168e9adf650c6fe964279c18922627198e39b77d25dc24d94bf591ef91\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc09affeca51307b54b5f7d9dfe274687a0fa6bbafd9185155c305ff8cafbc0ca\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nlibrary PackingUtils {\\n    function pack(\\n        uint256[] memory values,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256 packed) {\\n        require(\\n            values.length == bitLengths.length,\\n            \\\"Mismatch in the lengths of values and bitLengths arrays\\\"\\n        );\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Packed value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(\\n                values[i] <= maxValue,\\n                \\\"Value too large for specified bit length\\\"\\n            );\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(\\n        uint256 packed,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Unpacked value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(\\n        uint256 packed\\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 a,\\n            address b,\\n            uint256 c,\\n            uint256 d,\\n            uint256 e,\\n            uint256 f\\n        )\\n    {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\\n\",\"keccak256\":\"0x2713be95418748c21545bf5011b0a968d89774f55284b7ccbd71c9e8b7bf8cb6\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/StorageInterface.sol\\\";\\nimport \\\"../interfaces/TradingCallbacksInterface.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksInterface,\\n            TradingCallbacksInterface.LastUpdated memory,\\n            TradingCallbacksInterface.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\\n            .tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (\\n            callbacks,\\n            l,\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            )\\n        );\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeData(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xd82f312b484073a33715721ff262b51dc67f35aaa33bc15547869d8a5de1946a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610140604052678ac7230489e800006004553480156200001e57600080fd5b5060405162003c5538038062003c55833981016040819052620000419162000166565b6001600160a01b038816158015906200006257506001600160a01b03871615155b80156200007757506001600160a01b03861615155b80156200008c57506001600160a01b03851615155b8015620000a157506001600160a01b03841615155b8015620000b657506001600160a01b03831615155b8015620000c35750600082115b8015620000d05750600081115b620001105760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640160405180910390fd5b6001600160a01b0397881660805295871660a05293861660c05291851660e05284166101005260029190915560039190915516610120526200020c565b6001600160a01b03811681146200016357600080fd5b50565b600080600080600080600080610100898b0312156200018457600080fd5b885162000191816200014d565b60208a0151909850620001a4816200014d565b60408a0151909750620001b7816200014d565b60608a0151909650620001ca816200014d565b60808a0151909550620001dd816200014d565b60a08a0151909450620001f0816200014d565b60c08a015160e0909a0151989b979a5095989497939692505050565b60805160a05160c05160e0516101005161012051613912620003436000396000818161016c01526124e90152600081816102540152818161224001526123930152600061039b0152600081816101b801528181610ce90152610dae0152600061027b0152600081816101df015281816105780152818161066e0152818161070a0152818161079c0152818161082e015281816108fd0152818161099c01528181610ea701528181610fcb01528181611355015281816113eb0152818161147e0152818161151d015281816116160152818161174801528181611a0901528181611b7c01528181611beb01528181611dc701528181611e9401528181611f030152818161218201528181612767015281816127d20152818161291101528181612a3001528181612c2c0152612d2301526139126000f3fe608060405234801561001057600080fd5b50600436106101625760003560e01c80639a10cc32116100ce578063be73fb9911610087578063be73fb991461033e578063bffe348614610351578063ca5eb5e11461037a578063ca9eb5771461038d578063d3dc753914610396578063d8defd15146103bd578063fa7fffba146103d057600080fd5b80639a10cc32146102da578063a2a3c0cb146102fa578063ae8421e11461030d578063b187bd2614610315578063b1dfd53014610322578063b81bfa051461032b57600080fd5b8063410c0b7c11610120578063410c0b7c14610238578063531cc9651461024f5780635ad9f9931461027657806368cd50881461029d5780638456cb59146102b05780638f062227146102b857600080fd5b8062b1278314610167578063119df25f146101ab5780631346b0ff146101b357806316fff074146101da5780632c1e4e551461020157806336fb8b1514610216575b600080fd5b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61018e6103e3565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61021461020f366004612e8f565b61040b565b005b61021433600090815260208190526040902080546001600160a01b0319169055565b61024160035481565b6040519081526020016101a2565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6102146102ab366004612f38565b61049c565b6102146111a2565b6005546102ca90610100900460ff1681565b60405190151581526020016101a2565b6102ed6102e8366004613002565b6111f8565b6040516101a291906130e3565b6102146103083660046130f6565b611335565b6102146118ff565b6005546102ca9060ff1681565b61024160025481565b610214610339366004612e8f565b61195f565b61021461034c366004613118565b6119e9565b61018e61035f366004613144565b6000602081905290815260409020546001600160a01b031681565b610214610388366004613144565b611d3b565b61024160045481565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6102146103cb366004613118565b611da7565b6102146103de366004613161565b612052565b6001546000906001600160a01b03166103fb57503390565b506001546001600160a01b031690565b61041361290f565b6000811161043c5760405162461bcd60e51b8152600401610433906131b1565b60405180910390fd5b600281905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b6104a46129de565b6104ac6129ea565b60055460ff16156104e85760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606401610433565b600019818560a001516104fb91906131e8565b106105335760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606401610433565b60008460a00151116105745760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b6044820152606401610433565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190613207565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190613207565b9050600061066a6103e3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190613224565b6020880151604051634bf3ccad60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916397e7995a9161073f91869160040161323d565b602060405180830381865afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190613224565b6020890151604051639c8912f160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639c8912f1916107d191879160040161323d565b602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190613224565b60208a01516040516307218dad60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631c8636b49161086391889160040161323d565b602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190613224565b6108ae9190613256565b6108b89190613256565b106108fb5760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b6044820152606401610433565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190613224565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190613224565b10610a245760405162461bcd60e51b81526004016104339061326e565b60025487608001511115610a6a5760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b6044820152606401610433565b602087015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190613224565b8760e001518860800151610aed91906131e8565b1015610b2b5760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b6044820152606401610433565b60008760e00151118015610bb15750602087015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190613224565b8760e0015110155b8015610bce5750610bc6828860200151612a2b565b8760e0015111155b610c0f5760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b6044820152606401610433565b6101008701511580610c4357508660c00151610c36578660a0015187610100015110610c43565b8660a00151876101000151115b610c7a5760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b6044820152606401610433565b6101208701511580610cae57508660c00151610ca1578660a0015187610120015111610cae565b8660a00151876101200151105b610ce55760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b6044820152606401610433565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008a602001518b60c001518c60e001518d60800151610d3691906131e8565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015610d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da9919061329a565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e9190613224565b60e0890151610e3d90836131e8565b1115610e835760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b6044820152606401610433565b6080880151604051638a238ae560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016602482018190526044820192909252638a238ae590606401600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b5060009250610f1a915050565b876002811115610f2c57610f2c6132be565b03611198576000846001600160a01b0316636938c05d8a6020015160008c60e001518d60800151610f5d91906131e8565b610f65612b9f565b6040518563ffffffff1660e01b8152600401610f8494939291906132e8565b6020604051808303816000875af1158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613224565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190613207565b6001600160a01b0316638f93b660826040518060c00160405280604051806101400160405280896001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a81526020016000815260200160008152506040518363ffffffff1660e01b815260040161111892919061330e565b600060405180830381600087803b15801561113257600080fd5b505af1158015611146573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a86600160405161118e911515815260200190565b60405180910390a4505b5050505050505050565b6111aa61290f565b6005805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b6001600160a01b0383811660009081526020819052604090205460609116331461125c5760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b6044820152606401610433565b600180546001600160a01b0319166001600160a01b0386161790556040516000908190309061128e90879087906133d1565b600060405180830381855af49150503d80600081146112c9576040519150601f19603f3d011682016040523d82523d6000602084013e6112ce565b606091505b50915091508161131a576044815110156112e757600080fd5b6004810190508080602001905181019061130191906133e1565b60405162461bcd60e51b815260040161043391906130e3565b600180546001600160a01b03191690559150505b9392505050565b61133d6129de565b6113456129ea565b600061134f6103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08386866040518463ffffffff1660e01b81526004016113a39392919061348e565b61014060405180830381865afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e591906134c5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee51f6368487876040518463ffffffff1660e01b81526004016114399392919061348e565b60c060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190613557565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190613224565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190613224565b106115a55760405162461bcd60e51b81526004016104339061326e565b8060a00151156115ee5760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b6044820152606401610433565b60008260e00151116116125760405162461bcd60e51b8152600401610433906135d7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190613207565b6001600160a01b0316636938c05d8760016402540be4008760e00151876020015189606001516116c691906131e8565b6116d091906131e8565b6116da91906135f9565b6116e2612b9f565b6040518563ffffffff1660e01b815260040161170194939291906132e8565b6020604051808303816000875af1158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190613224565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190613207565b6001600160a01b0316638f93b660826040518060c001604052806040518061014001604052808a6001600160a01b031681526020018c81526020018b81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152506040518363ffffffff1660e01b815260040161187d92919061330e565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a8660006040516118ef911515815260200190565b60405180910390a4505050505050565b61190761290f565b6005805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936111ee9390049091161515815260200190565b61196761290f565b600081116119875760405162461bcd60e51b8152600401610433906131b1565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab90608001610491565b6119f16129de565b6119f96129ea565b6000611a036103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08387876040518463ffffffff1660e01b8152600401611a579392919061348e565b61014060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9991906134c5565b905060008160e0015111611abf5760405162461bcd60e51b8152600401610433906135d7565b60008160e001516064604b8460a00151611ad991906131e8565b611ae391906135f9565b611aed91906135f9565b9050831580611b2c57508160c00151611b1857808260a00151611b109190613256565b841115611b2c565b808260a00151611b28919061361b565b8410155b611b655760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b6044820152606401610433565b60405163a354418160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a354418190611bb79086908a908a908a90600401613632565b600060405180830381600087803b158015611bd157600080fd5b505af1158015611be5573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613207565b6001600160a01b031673F14E337172C4Ca4fEb22DF440238a71fAAc70cEc633c63a7d090918589896000611c9c612b9f565b6040518763ffffffff1660e01b8152600401611cbd96959493929190613668565b60006040518083038186803b158015611cd557600080fd5b505af4158015611ce9573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b323314611d785760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b6044820152606401610433565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b611daf6129de565b611db76129ea565b6000611dc16103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08387876040518463ffffffff1660e01b8152600401611e159392919061348e565b61014060405180830381865afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906134c5565b905060008160e0015111611e7d5760405162461bcd60e51b8152600401610433906135d7565b604051637fdb96f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f390611ecf908590899089908990600401613632565b600060405180830381600087803b158015611ee957600080fd5b505af1158015611efd573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f829190613207565b6001600160a01b031673F14E337172C4Ca4fEb22DF440238a71fAAc70cEc638fff7d8290918488886000611fb4612b9f565b6040518763ffffffff1660e01b8152600401611fd596959493929190613668565b60006040518083038186803b158015611fed57600080fd5b505af4158015612001573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b61205a6129de565b6120626129ea565b6000866004811115612076576120766132be565b905060006120826103e3565b90506000600383600481111561209a5761209a6132be565b1490506000816120ab5760006120ae565b60015b905061211160405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b821561216b5760405162461bcd60e51b815260206004820152602360248201527f4f70656e204c696d6974206f7264657273206e6f7420737570706f72746564206044820152621e595d60ea1b6064820152608401610433565b6040516302a0a1cb60e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a0a1cb0906121bb908d908d908d9060040161348e565b61014060405180830381865afa1580156121d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fd91906134c5565b905060008160e00151116122235760405162461bcd60e51b8152600401610433906135d7565b6002856004811115612237576122376132be565b036123765760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663706faf3a6040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b81526004016122e391906136ac565b602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123249190613224565b90508161012001516000148061235457508160c0015161234b578161012001518110612354565b81610120015181115b6123705760405162461bcd60e51b815260040161043390613700565b50612693565b600485600481111561238a5761238a6132be565b036125df5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364d372c66040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b815260040161243691906136ac565b602060405180830381865afa158015612453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124779190613224565b9050816101200151600014806124a757508160c0015161249e5781610120015181106124a7565b81610120015181115b6124c35760405162461bcd60e51b815260040161043390613700565b8151602083015160408085015190516304ec194160e21b81526000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016936313b065049361251c9360040161348e565b602060405180830381865afa158015612539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255d9190613224565b905060008184608001516125719190613720565b90506004548112156125d75760405162461bcd60e51b815260206004820152602960248201527f706f736974696f6e20746f20736d616c6c20666f72207061727469616c206c6960448201526838bab4b230ba34b7b760b91b6064820152608401610433565b505050612693565b60018560048111156125f3576125f36132be565b14158061260557506000816101200151115b6126395760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b6044820152606401610433565b600085600481111561264d5761264d6132be565b14158061265f57506000816101000151115b6126935760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b6044820152606401610433565b6000836126b1578160e0015182608001516126ae91906131e8565b90505b60006126c2858d8d8d888c88612c25565b5090506126fb6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038088168252602082018b90528d166040820152606081018c9052608081018b905260a0810188600481111561273a5761273a6132be565b9081600481111561274d5761274d6132be565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a49061279e90849086906004016137b9565b600060405180830381600087803b1580156127b857600080fd5b505af11580156127cc573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561282e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128529190613207565b6001600160a01b03166339fe9fd283836040518363ffffffff1660e01b815260040161287f9291906137d4565b600060405180830381600087803b15801561289957600080fd5b505af11580156128ad573d6000803e3d6000fd5b505050508b8d6001600160a01b0316886001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c00856040516128f791815260200190565b60405180910390a45050505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613207565b6001600160a01b0316336001600160a01b0316146129dc5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610433565b565b3233146129dc57600080fd5b600554610100900460ff16156129dc5760405162461bcd60e51b815260040161043390602080825260049082015263444f4e4560e01b604082015260600190565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaf9190613207565b6001600160a01b031663281b693c846040518263ffffffff1660e01b8152600401612adc91815260200190565b602060405180830381865afa158015612af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1d9190613224565b905060008111612b9557604051630a06da4f60e21b8152600481018490526001600160a01b0385169063281b693c90602401602060405180830381865afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b909190613224565b612b97565b805b949350505050565b600061a4b1461480612bb3575062066eed46145b15612c205760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1b9190613224565b905090565b504390565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cab9190613207565b6001600160a01b0316639bd24d838a8a8a8a6040518563ffffffff1660e01b8152600401612cdc94939291906137e8565b608060405180830381865afa158015612cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1d9190613830565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da39190613207565b9050806001600160a01b0316636938c05d8a8d612dc1576003612dc4565b60025b888f612e175760018b6004811115612dde57612dde6132be565b14612e0d5760008b6004811115612df757612df76132be565b14612e06578660600151612e1d565b8651612e1d565b8660200151612e1d565b86604001515b6040518563ffffffff1660e01b8152600401612e3c94939291906138ad565b6020604051808303816000875af1158015612e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7f9190613224565b9350505097509795505050505050565b600060208284031215612ea157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612ee257612ee2612ea8565b60405290565b6001600160a01b0381168114612efd57600080fd5b50565b8035612f0b81612ee8565b919050565b8015158114612efd57600080fd5b8035612f0b81612f10565b803560038110612f0b57600080fd5b6000806000808486036101a0811215612f5057600080fd5b61014080821215612f6057600080fd5b612f68612ebe565b9150612f7387612f00565b82526020870135602083015260408701356040830152606087013560608301526080870135608083015260a087013560a0830152612fb360c08801612f1e565b60c083015260e087013560e0830152610100808801358184015250610120808801358184015250819550612fe8818801612f29565b959895975050505061016084013593610180013592915050565b60008060006040848603121561301757600080fd5b833561302281612ee8565b9250602084013567ffffffffffffffff8082111561303f57600080fd5b818601915086601f83011261305357600080fd5b81358181111561306257600080fd5b87602082850101111561307457600080fd5b6020830194508093505050509250925092565b60005b838110156130a257818101518382015260200161308a565b838111156130b1576000848401525b50505050565b600081518084526130cf816020860160208601613087565b601f01601f19169290920160200192915050565b60208152600061132e60208301846130b7565b6000806040838503121561310957600080fd5b50508035926020909101359150565b60008060006060848603121561312d57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561315657600080fd5b8135612b9581612ee8565b60008060008060008060c0878903121561317a57600080fd5b86359550602087013561318c81612ee8565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825260079082015266056414c55455f360cc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613202576132026131d2565b500290565b60006020828403121561321957600080fd5b8151612b9581612ee8565b60006020828403121561323657600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60008219821115613269576132696131d2565b500190565b6020808252601290820152714d41585f50454e44494e475f4f524445525360701b604082015260600190565b600080604083850312156132ad57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fd5b600481106132e4576132e46132be565b9052565b848152608081016132fc60208301866132d4565b60408201939093526060015292915050565b828152815180516001600160a01b03166020830152610200820190602081015160408401526040810151606084015260608101516080840152608081015160a084015260a081015160c084015260c081015161336e60e085018215159052565b5060e0810151610100848101919091528101516101208085019190915201516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a0909201516101e090910152919050565b8183823760009101908152919050565b6000602082840312156133f357600080fd5b815167ffffffffffffffff8082111561340b57600080fd5b818401915084601f83011261341f57600080fd5b81518181111561343157613431612ea8565b604051601f8201601f19908116603f0116810190838211818310171561345957613459612ea8565b8160405282815287602084870101111561347257600080fd5b613483836020830160208801613087565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b8051612f0b81612ee8565b8051612f0b81612f10565b600061014082840312156134d857600080fd5b6134e0612ebe565b6134e9836134af565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015261352960c084016134ba565b60c082015260e083810151908201526101008084015190820152610120928301519281019290925250919050565b600060c0828403121561356957600080fd5b60405160c0810181811067ffffffffffffffff8211171561358c5761358c612ea8565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a08301516135cb81612f10565b60a08201529392505050565b6020808252600890820152674e4f5f545241444560c01b604082015260600190565b60008261361657634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561362d5761362d6131d2565b500390565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600281106132e4576132e46132be565b6001600160a01b03878116825286166020820152604081018590526060810184905260c0810161369b6080830185613658565b8260a0830152979650505050505050565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602080825260069082015265121054d7d4d360d21b604082015260600190565b600080821280156001600160ff1b0384900385131615613742576137426131d2565b600160ff1b839003841281161561375b5761375b6131d2565b50500190565b60018060a01b038082511683526020820151602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151600581106137ae576137ae6132be565b8060a0840152505050565b60e081016137c78285613761565b8260c08301529392505050565b82815260e0810161132e6020830184613761565b6001600160a01b03851681526020810184905260408101839052608081016138136060830184613658565b95945050505050565b805163ffffffff81168114612f0b57600080fd5b60006080828403121561384257600080fd5b6040516080810181811067ffffffffffffffff8211171561386557613865612ea8565b6040526138718361381c565b815261387f6020840161381c565b60208201526138906040840161381c565b60408201526138a16060840161381c565b60608201529392505050565b848152608081016138c160208301866132d4565b83604083015263ffffffff831660608301529594505050505056fea264697066735822122017d4cba69c289571dfa60849be10c7471d14402f806484b7a4abed09df11a3fd64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101625760003560e01c80639a10cc32116100ce578063be73fb9911610087578063be73fb991461033e578063bffe348614610351578063ca5eb5e11461037a578063ca9eb5771461038d578063d3dc753914610396578063d8defd15146103bd578063fa7fffba146103d057600080fd5b80639a10cc32146102da578063a2a3c0cb146102fa578063ae8421e11461030d578063b187bd2614610315578063b1dfd53014610322578063b81bfa051461032b57600080fd5b8063410c0b7c11610120578063410c0b7c14610238578063531cc9651461024f5780635ad9f9931461027657806368cd50881461029d5780638456cb59146102b05780638f062227146102b857600080fd5b8062b1278314610167578063119df25f146101ab5780631346b0ff146101b357806316fff074146101da5780632c1e4e551461020157806336fb8b1514610216575b600080fd5b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61018e6103e3565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61021461020f366004612e8f565b61040b565b005b61021433600090815260208190526040902080546001600160a01b0319169055565b61024160035481565b6040519081526020016101a2565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6102146102ab366004612f38565b61049c565b6102146111a2565b6005546102ca90610100900460ff1681565b60405190151581526020016101a2565b6102ed6102e8366004613002565b6111f8565b6040516101a291906130e3565b6102146103083660046130f6565b611335565b6102146118ff565b6005546102ca9060ff1681565b61024160025481565b610214610339366004612e8f565b61195f565b61021461034c366004613118565b6119e9565b61018e61035f366004613144565b6000602081905290815260409020546001600160a01b031681565b610214610388366004613144565b611d3b565b61024160045481565b61018e7f000000000000000000000000000000000000000000000000000000000000000081565b6102146103cb366004613118565b611da7565b6102146103de366004613161565b612052565b6001546000906001600160a01b03166103fb57503390565b506001546001600160a01b031690565b61041361290f565b6000811161043c5760405162461bcd60e51b8152600401610433906131b1565b60405180910390fd5b600281905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b6104a46129de565b6104ac6129ea565b60055460ff16156104e85760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606401610433565b600019818560a001516104fb91906131e8565b106105335760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b6044820152606401610433565b60008460a00151116105745760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b6044820152606401610433565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f89190613207565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190613207565b9050600061066a6103e3565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ee9190613224565b6020880151604051634bf3ccad60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916397e7995a9161073f91869160040161323d565b602060405180830381865afa15801561075c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107809190613224565b6020890151604051639c8912f160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639c8912f1916107d191879160040161323d565b602060405180830381865afa1580156107ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108129190613224565b60208a01516040516307218dad60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631c8636b49161086391889160040161323d565b602060405180830381865afa158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a49190613224565b6108ae9190613256565b6108b89190613256565b106108fb5760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b6044820152606401610433565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190613224565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a079190613224565b10610a245760405162461bcd60e51b81526004016104339061326e565b60025487608001511115610a6a5760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b6044820152606401610433565b602087015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa158015610ab5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad99190613224565b8760e001518860800151610aed91906131e8565b1015610b2b5760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b6044820152606401610433565b60008760e00151118015610bb15750602087015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa158015610b85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba99190613224565b8760e0015110155b8015610bce5750610bc6828860200151612a2b565b8760e0015111155b610c0f5760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b6044820152606401610433565b6101008701511580610c4357508660c00151610c36578660a0015187610100015110610c43565b8660a00151876101000151115b610c7a5760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b6044820152606401610433565b6101208701511580610cae57508660c00151610ca1578660a0015187610120015111610cae565b8660a00151876101200151105b610ce55760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b6044820152606401610433565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008a602001518b60c001518c60e001518d60800151610d3691906131e8565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa158015610d85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da9919061329a565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e2e9190613224565b60e0890151610e3d90836131e8565b1115610e835760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b6044820152606401610433565b6080880151604051638a238ae560e01b81526001600160a01b0384811660048301527f000000000000000000000000000000000000000000000000000000000000000016602482018190526044820192909252638a238ae590606401600060405180830381600087803b158015610ef957600080fd5b505af1158015610f0d573d6000803e3d6000fd5b5060009250610f1a915050565b876002811115610f2c57610f2c6132be565b03611198576000846001600160a01b0316636938c05d8a6020015160008c60e001518d60800151610f5d91906131e8565b610f65612b9f565b6040518563ffffffff1660e01b8152600401610f8494939291906132e8565b6020604051808303816000875af1158015610fa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fc79190613224565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611027573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104b9190613207565b6001600160a01b0316638f93b660826040518060c00160405280604051806101400160405280896001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a81526020016000815260200160008152506040518363ffffffff1660e01b815260040161111892919061330e565b600060405180830381600087803b15801561113257600080fd5b505af1158015611146573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a86600160405161118e911515815260200190565b60405180910390a4505b5050505050505050565b6111aa61290f565b6005805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b6001600160a01b0383811660009081526020819052604090205460609116331461125c5760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b6044820152606401610433565b600180546001600160a01b0319166001600160a01b0386161790556040516000908190309061128e90879087906133d1565b600060405180830381855af49150503d80600081146112c9576040519150601f19603f3d011682016040523d82523d6000602084013e6112ce565b606091505b50915091508161131a576044815110156112e757600080fd5b6004810190508080602001905181019061130191906133e1565b60405162461bcd60e51b815260040161043391906130e3565b600180546001600160a01b03191690559150505b9392505050565b61133d6129de565b6113456129ea565b600061134f6103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08386866040518463ffffffff1660e01b81526004016113a39392919061348e565b61014060405180830381865afa1580156113c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e591906134c5565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ee51f6368487876040518463ffffffff1660e01b81526004016114399392919061348e565b60c060405180830381865afa158015611456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147a9190613557565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fe9190613224565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa158015611564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115889190613224565b106115a55760405162461bcd60e51b81526004016104339061326e565b8060a00151156115ee5760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b6044820152606401610433565b60008260e00151116116125760405162461bcd60e51b8152600401610433906135d7565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116969190613207565b6001600160a01b0316636938c05d8760016402540be4008760e00151876020015189606001516116c691906131e8565b6116d091906131e8565b6116da91906135f9565b6116e2612b9f565b6040518563ffffffff1660e01b815260040161170194939291906132e8565b6020604051808303816000875af1158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190613224565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c89190613207565b6001600160a01b0316638f93b660826040518060c001604052806040518061014001604052808a6001600160a01b031681526020018c81526020018b81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152506040518363ffffffff1660e01b815260040161187d92919061330e565b600060405180830381600087803b15801561189757600080fd5b505af11580156118ab573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a8660006040516118ef911515815260200190565b60405180910390a4505050505050565b61190761290f565b6005805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd3888936111ee9390049091161515815260200190565b61196761290f565b600081116119875760405162461bcd60e51b8152600401610433906131b1565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab90608001610491565b6119f16129de565b6119f96129ea565b6000611a036103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08387876040518463ffffffff1660e01b8152600401611a579392919061348e565b61014060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9991906134c5565b905060008160e0015111611abf5760405162461bcd60e51b8152600401610433906135d7565b60008160e001516064604b8460a00151611ad991906131e8565b611ae391906135f9565b611aed91906135f9565b9050831580611b2c57508160c00151611b1857808260a00151611b109190613256565b841115611b2c565b808260a00151611b28919061361b565b8410155b611b655760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b6044820152606401610433565b60405163a354418160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a354418190611bb79086908a908a908a90600401613632565b600060405180830381600087803b158015611bd157600080fd5b505af1158015611be5573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6a9190613207565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__633c63a7d090918589896000611c9c612b9f565b6040518763ffffffff1660e01b8152600401611cbd96959493929190613668565b60006040518083038186803b158015611cd557600080fd5b505af4158015611ce9573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b323314611d785760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b6044820152606401610433565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b611daf6129de565b611db76129ea565b6000611dc16103e3565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632a0a1cb08387876040518463ffffffff1660e01b8152600401611e159392919061348e565b61014060405180830381865afa158015611e33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5791906134c5565b905060008160e0015111611e7d5760405162461bcd60e51b8152600401610433906135d7565b604051637fdb96f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f390611ecf908590899089908990600401613632565b600060405180830381600087803b158015611ee957600080fd5b505af1158015611efd573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f829190613207565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__638fff7d8290918488886000611fb4612b9f565b6040518763ffffffff1660e01b8152600401611fd596959493929190613668565b60006040518083038186803b158015611fed57600080fd5b505af4158015612001573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b61205a6129de565b6120626129ea565b6000866004811115612076576120766132be565b905060006120826103e3565b90506000600383600481111561209a5761209a6132be565b1490506000816120ab5760006120ae565b60015b905061211160405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b821561216b5760405162461bcd60e51b815260206004820152602360248201527f4f70656e204c696d6974206f7264657273206e6f7420737570706f72746564206044820152621e595d60ea1b6064820152608401610433565b6040516302a0a1cb60e41b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690632a0a1cb0906121bb908d908d908d9060040161348e565b61014060405180830381865afa1580156121d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fd91906134c5565b905060008160e00151116122235760405162461bcd60e51b8152600401610433906135d7565b6002856004811115612237576122376132be565b036123765760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663706faf3a6040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b81526004016122e391906136ac565b602060405180830381865afa158015612300573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123249190613224565b90508161012001516000148061235457508160c0015161234b578161012001518110612354565b81610120015181115b6123705760405162461bcd60e51b815260040161043390613700565b50612693565b600485600481111561238a5761238a6132be565b036125df5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364d372c66040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b815260040161243691906136ac565b602060405180830381865afa158015612453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124779190613224565b9050816101200151600014806124a757508160c0015161249e5781610120015181106124a7565b81610120015181115b6124c35760405162461bcd60e51b815260040161043390613700565b8151602083015160408085015190516304ec194160e21b81526000936001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016936313b065049361251c9360040161348e565b602060405180830381865afa158015612539573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061255d9190613224565b905060008184608001516125719190613720565b90506004548112156125d75760405162461bcd60e51b815260206004820152602960248201527f706f736974696f6e20746f20736d616c6c20666f72207061727469616c206c6960448201526838bab4b230ba34b7b760b91b6064820152608401610433565b505050612693565b60018560048111156125f3576125f36132be565b14158061260557506000816101200151115b6126395760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b6044820152606401610433565b600085600481111561264d5761264d6132be565b14158061265f57506000816101000151115b6126935760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b6044820152606401610433565b6000836126b1578160e0015182608001516126ae91906131e8565b90505b60006126c2858d8d8d888c88612c25565b5090506126fb6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038088168252602082018b90528d166040820152606081018c9052608081018b905260a0810188600481111561273a5761273a6132be565b9081600481111561274d5761274d6132be565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a49061279e90849086906004016137b9565b600060405180830381600087803b1580156127b857600080fd5b505af11580156127cc573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561282e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128529190613207565b6001600160a01b03166339fe9fd283836040518363ffffffff1660e01b815260040161287f9291906137d4565b600060405180830381600087803b15801561289957600080fd5b505af11580156128ad573d6000803e3d6000fd5b505050508b8d6001600160a01b0316886001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c00856040516128f791815260200190565b60405180910390a45050505050505050505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561296d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129919190613207565b6001600160a01b0316336001600160a01b0316146129dc5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610433565b565b3233146129dc57600080fd5b600554610100900460ff16156129dc5760405162461bcd60e51b815260040161043390602080825260049082015263444f4e4560e01b604082015260600190565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aaf9190613207565b6001600160a01b031663281b693c846040518263ffffffff1660e01b8152600401612adc91815260200190565b602060405180830381865afa158015612af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b1d9190613224565b905060008111612b9557604051630a06da4f60e21b8152600481018490526001600160a01b0385169063281b693c90602401602060405180830381865afa158015612b6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b909190613224565b612b97565b805b949350505050565b600061a4b1461480612bb3575062066eed46145b15612c205760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bf7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c1b9190613224565b905090565b504390565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cab9190613207565b6001600160a01b0316639bd24d838a8a8a8a6040518563ffffffff1660e01b8152600401612cdc94939291906137e8565b608060405180830381865afa158015612cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d1d9190613830565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da39190613207565b9050806001600160a01b0316636938c05d8a8d612dc1576003612dc4565b60025b888f612e175760018b6004811115612dde57612dde6132be565b14612e0d5760008b6004811115612df757612df76132be565b14612e06578660600151612e1d565b8651612e1d565b8660200151612e1d565b86604001515b6040518563ffffffff1660e01b8152600401612e3c94939291906138ad565b6020604051808303816000875af1158015612e5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7f9190613224565b9350505097509795505050505050565b600060208284031215612ea157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612ee257612ee2612ea8565b60405290565b6001600160a01b0381168114612efd57600080fd5b50565b8035612f0b81612ee8565b919050565b8015158114612efd57600080fd5b8035612f0b81612f10565b803560038110612f0b57600080fd5b6000806000808486036101a0811215612f5057600080fd5b61014080821215612f6057600080fd5b612f68612ebe565b9150612f7387612f00565b82526020870135602083015260408701356040830152606087013560608301526080870135608083015260a087013560a0830152612fb360c08801612f1e565b60c083015260e087013560e0830152610100808801358184015250610120808801358184015250819550612fe8818801612f29565b959895975050505061016084013593610180013592915050565b60008060006040848603121561301757600080fd5b833561302281612ee8565b9250602084013567ffffffffffffffff8082111561303f57600080fd5b818601915086601f83011261305357600080fd5b81358181111561306257600080fd5b87602082850101111561307457600080fd5b6020830194508093505050509250925092565b60005b838110156130a257818101518382015260200161308a565b838111156130b1576000848401525b50505050565b600081518084526130cf816020860160208601613087565b601f01601f19169290920160200192915050565b60208152600061132e60208301846130b7565b6000806040838503121561310957600080fd5b50508035926020909101359150565b60008060006060848603121561312d57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561315657600080fd5b8135612b9581612ee8565b60008060008060008060c0878903121561317a57600080fd5b86359550602087013561318c81612ee8565b95989597505050506040840135936060810135936080820135935060a0909101359150565b602080825260079082015266056414c55455f360cc1b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613202576132026131d2565b500290565b60006020828403121561321957600080fd5b8151612b9581612ee8565b60006020828403121561323657600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60008219821115613269576132696131d2565b500190565b6020808252601290820152714d41585f50454e44494e475f4f524445525360701b604082015260600190565b600080604083850312156132ad57600080fd5b505080516020909101519092909150565b634e487b7160e01b600052602160045260246000fd5b600481106132e4576132e46132be565b9052565b848152608081016132fc60208301866132d4565b60408201939093526060015292915050565b828152815180516001600160a01b03166020830152610200820190602081015160408401526040810151606084015260608101516080840152608081015160a084015260a081015160c084015260c081015161336e60e085018215159052565b5060e0810151610100848101919091528101516101208085019190915201516101408301526020830151610160830152604083015161018083015260608301516101a083015260808301516101c083015260a0909201516101e090910152919050565b8183823760009101908152919050565b6000602082840312156133f357600080fd5b815167ffffffffffffffff8082111561340b57600080fd5b818401915084601f83011261341f57600080fd5b81518181111561343157613431612ea8565b604051601f8201601f19908116603f0116810190838211818310171561345957613459612ea8565b8160405282815287602084870101111561347257600080fd5b613483836020830160208801613087565b979650505050505050565b6001600160a01b039390931683526020830191909152604082015260600190565b8051612f0b81612ee8565b8051612f0b81612f10565b600061014082840312156134d857600080fd5b6134e0612ebe565b6134e9836134af565b81526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015261352960c084016134ba565b60c082015260e083810151908201526101008084015190820152610120928301519281019290925250919050565b600060c0828403121561356957600080fd5b60405160c0810181811067ffffffffffffffff8211171561358c5761358c612ea8565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a08301516135cb81612f10565b60a08201529392505050565b6020808252600890820152674e4f5f545241444560c01b604082015260600190565b60008261361657634e487b7160e01b600052601260045260246000fd5b500490565b60008282101561362d5761362d6131d2565b500390565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b600281106132e4576132e46132be565b6001600160a01b03878116825286166020820152604081018590526060810184905260c0810161369b6080830185613658565b8260a0830152979650505050505050565b81516001600160a01b0316815260208083015190820152604080830151908201526060808301519082015260808083015115159082015260a0828101519082015260c0918201519181019190915260e00190565b602080825260069082015265121054d7d4d360d21b604082015260600190565b600080821280156001600160ff1b0384900385131615613742576137426131d2565b600160ff1b839003841281161561375b5761375b6131d2565b50500190565b60018060a01b038082511683526020820151602084015280604083015116604084015250606081015160608301526080810151608083015260a0810151600581106137ae576137ae6132be565b8060a0840152505050565b60e081016137c78285613761565b8260c08301529392505050565b82815260e0810161132e6020830184613761565b6001600160a01b03851681526020810184905260408101839052608081016138136060830184613658565b95945050505050565b805163ffffffff81168114612f0b57600080fd5b60006080828403121561384257600080fd5b6040516080810181811067ffffffffffffffff8211171561386557613865612ea8565b6040526138718361381c565b815261387f6020840161381c565b60208201526138906040840161381c565b60408201526138a16060840161381c565b60608201529392505050565b848152608081016138c160208301866132d4565b83604083015263ffffffff831660608301529594505050505056fea264697066735822122017d4cba69c289571dfa60849be10c7471d14402f806484b7a4abed09df11a3fd64736f6c634300080f0033",
  "libraries": {
    "TradeUtils": "0xF14E337172C4Ca4fEb22DF440238a71fAAc70cEc",
    "PackingUtils": "0x5914fC5B564E375906A496db0E096Ad9ED5F8E60"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9826,
        "contract": "contracts/Trading.sol:Trading",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 9828,
        "contract": "contracts/Trading.sol:Trading",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 21681,
        "contract": "contracts/Trading.sol:Trading",
        "label": "maxPosWETH",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 21683,
        "contract": "contracts/Trading.sol:Trading",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 21686,
        "contract": "contracts/Trading.sol:Trading",
        "label": "maxLeveragedPosWETH",
        "offset": 0,
        "slot": "4",
        "type": "t_int256"
      },
      {
        "astId": 21688,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isPaused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 21690,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isDone",
        "offset": 1,
        "slot": "5",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}