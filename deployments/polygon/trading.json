{
  "address": "0x9f965A742572d44d876D43CB32bC78B8E8030b48",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterfaceV5.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterfaceV5.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderSameBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract GNSBorrowingFeesInterfaceV6_4",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "cancelOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "packed",
          "type": "uint256"
        }
      ],
      "name": "executeNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterfaceV5.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "openTradeMarketTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract GNSPairInfosInterfaceV6",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract GNSReferralsInterfaceV6_2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "updateOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf131846f55f8f1c5ad532be215b03771532ffd94b0d4a36ceefcff9bc0fd5783",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x9f965A742572d44d876D43CB32bC78B8E8030b48",
    "transactionIndex": 11,
    "gasUsed": "5356214",
    "logsBloom": "0x
    "blockHash": "0x3d39bca42d58197e3b62d89a481ea7bfbc1205e4703ad24d2a6a811dbb428ae8",
    "transactionHash": "0xf131846f55f8f1c5ad532be215b03771532ffd94b0d4a36ceefcff9bc0fd5783",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 39744061,
        "transactionHash": "0xf131846f55f8f1c5ad532be215b03771532ffd94b0d4a36ceefcff9bc0fd5783",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002f929ee207060000000000000000000000000000000000000000000000000046b6e5b5c28be7a7000000000000000000000000000000000000000000003415018721a13487233e00000000000000000000000000000000000000000000000046875316e084e1a700000000000000000000000000000000000000000000341501b6b440168e293e",
        "logIndex": 46,
        "blockHash": "0x3d39bca42d58197e3b62d89a481ea7bfbc1205e4703ad24d2a6a811dbb428ae8"
      }
    ],
    "blockNumber": 39744061,
    "cumulativeGasUsed": "7904743",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xB9c1C0B7981029CFc289D3eA0d5a9a5919d60764",
    "0x9916051d60f572fC17339Fd5747e6C4D0c51C0E4",
    "0x970b089E4721DD3A4124b3240064b5daE0680393",
    "0x7985A05FF9916fbac219c651f5Da52E78c7eDAe7",
    "0x2016c28a38A8130cDB76d91DB89d972C24135EB6",
    2,
    2
  ],
  "numDeployments": 1,
  "solcInputHash": "ec3cbe74776f6123e7e1f431318f92a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterfaceV5.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderSameBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract GNSBorrowingFeesInterfaceV6_4\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"cancelOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"packed\",\"type\":\"uint256\"}],\"name\":\"executeNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterfaceV5.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"openTradeMarketTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract GNSPairInfosInterfaceV6\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract GNSReferralsInterfaceV6_2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"updateOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/contracts6_4/GNSTradingV6_4.sol\":\"GNSTradingV6_4\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/contract5/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData() external view returns (uint80, int, uint, uint, uint80);\\n}\",\"keccak256\":\"0x65dd2889864a18cc14ec4e1bdccf87ac171a4dc0002f07284919591e7e188247\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xf905733bd477ea861743a1eb451f946ce507402ae4ae3ef70a1446ffce3232ae\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\",\"keccak256\":\"0xe9a1bf37ab4d3d1c81384a660f1d01175df30ee5d4398217ff6e46d35e1d048a\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x3c0f19c1b86a0fe0fd5714c7cffb0b3bddfd0c98175810554724901faa6d5308\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\\n\\ninterface AggregatorInterfaceV6_2{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceWETH() external returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function openFeeP(uint) external view returns(uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface AggregatorInterfaceV6_3_1 is AggregatorInterfaceV6_2 {\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_3_1 {\\n    enum TradeType {MARKET, LIMIT}\\n    struct SimplifiedTradeId{ address trader; uint pairIndex; uint index; TradeType tradeType; }\\n    struct LastUpdated{ uint32 tp; uint32 sl; uint32 limit; uint32 created; }\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns(LastUpdated memory);\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n    function canExecuteTimeout() external view returns(uint);\\n}\",\"keccak256\":\"0x6f3b44cb9d44e21b89fc6c382f5f21c88ed93313d6facbd20772c7b2a4987d4c\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0xbdaf20e556c21925c2f710802174ce66026cbd1d08e62ae3533cdd9fe3b618d4\",\"license\":\"MIT\"},\"contracts/contracts6_2/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(address trader, bytes calldata call_data) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(call_data);\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\",\"keccak256\":\"0x51f520f78082533d9c837be301921725a97ba897d3dd99128c7fb59cd106fa68\",\"license\":\"MIT\"},\"contracts/contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSReferralsInterfaceV6_2 {\\n    function registerPotentialReferrer(address trader, address referral) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(address trader) external view returns (address referrer);\\n}\",\"keccak256\":\"0xa244d11cc21ef14ccf101d6cb39e223a80e5c1c3ef81c525cc687d5250add606\",\"license\":\"MIT\"},\"contracts/contracts6_4/GNSTradingV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"../contract5/interfaces/StorageInterfaceV5.sol\\\";\\nimport \\\"../contracts6_4/interfaces/GNSPairInfosInterfaceV6.sol\\\";\\nimport \\\"../contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\\\";\\nimport \\\"../contracts6_4/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\\\";\\nimport \\\"../contracts6_2/Delegatable.sol\\\";\\nimport \\\"../libraries/ChainUtils.sol\\\";\\nimport \\\"../libraries/TradeUtils.sol\\\";\\nimport \\\"../libraries/PackingUtils.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ncontract GNSTradingV6_4 is Delegatable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterfaceV5 public immutable storageT;\\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\\n    GNSPairInfosInterfaceV6 public immutable pairInfos;\\n    GNSReferralsInterfaceV6_2 public immutable referrals;\\n    GNSBorrowingFeesInterfaceV6_4 public immutable borrowingFees;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10;\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n\\n    event MarketOrderInitiated(uint indexed orderId, address indexed trader, uint indexed pairIndex, bool open);\\n\\n    event OpenLimitPlaced(address indexed trader, uint indexed pairIndex, uint index);\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(address indexed trader, uint indexed pairIndex, uint index);\\n\\n    event TpUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newTp);\\n    event SlUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newSl);\\n\\n    event NftOrderInitiated(uint orderId, address indexed nftHolder, address indexed trader, uint indexed pairIndex);\\n    event NftOrderSameBlock(address indexed nftHolder, address indexed trader, uint indexed pairIndex);\\n\\n    event ChainlinkCallbackTimeout(uint indexed orderId, StorageInterfaceV5.PendingMarketOrder order);\\n    event CouldNotCloseTrade(address indexed trader, uint indexed pairIndex, uint index);\\n\\n    constructor(\\n        StorageInterfaceV5 _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        GNSPairInfosInterfaceV6 _pairInfos,\\n        GNSReferralsInterfaceV6_2 _referrals,\\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\\n        uint _maxPosWETH,\\n        uint _marketOrdersTimeout\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_nftRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                _maxPosWETH > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosWETH = _maxPosWETH;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier notContract() {\\n        isNotContract();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n    }\\n\\n    function isNotContract() private view {\\n        require(tx.origin == msg.sender);\\n    }\\n\\n    function isNotDone() private view {\\n        require(!isDone, \\\"DONE\\\");\\n    }\\n\\n    // Manage params\\n    function setMaxPosWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosWETH = value;\\n        emit NumberUpdated(\\\"maxPosWETH\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterfaceV5.Trade memory t,\\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint spreadReductionId,\\n        uint slippageP, // 1e10 (%)\\n        address referrer\\n    ) external notContract notDone {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \\\"MAX_PENDING_ORDERS\\\");\\n        require(t.positionSizeWETH <= maxPosWETH, \\\"ABOVE_MAX_POS\\\");\\n        require(t.positionSizeWETH * t.leverage >= pairsStored.pairMinLevPosWETH(t.pairIndex), \\\"BELOW_MIN_POS\\\");\\n\\n        require(\\n            t.leverage > 0 &&\\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\\n            \\\"LEVERAGE_INCORRECT\\\"\\n        );\\n\\n        require(\\n            spreadReductionId == 0 || storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\\n            \\\"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\\\"\\n        );\\n\\n        require(t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice), \\\"WRONG_TP\\\");\\n        require(t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice), \\\"WRONG_SL\\\");\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, t.pairIndex, t.buy, t.positionSizeWETH * t.leverage);\\n        require(priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(), \\\"PRICE_IMPACT_TOO_HIGH\\\");\\n\\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\\n\\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\\n            uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n\\n            storageT.storeOpenLimitOrder(\\n                StorageInterfaceV5.OpenLimitOrder(\\n                    sender,\\n                    t.pairIndex,\\n                    index,\\n                    t.positionSizeWETH,\\n                    spreadReductionId > 0 ? storageT.spreadReductionsP(spreadReductionId - 1) : 0,\\n                    t.buy,\\n                    t.leverage,\\n                    t.tp,\\n                    t.sl,\\n                    t.openPrice,\\n                    t.openPrice,\\n                    block.number,\\n                    0\\n                )\\n            );\\n\\n            nftRewards.setOpenLimitOrderType(sender, t.pairIndex, index, orderType);\\n\\n            address c = storageT.callbacks();\\n            c.setTradeLastUpdated(\\n                sender,\\n                t.pairIndex,\\n                index,\\n                TradingCallbacksV6_4.TradeType.LIMIT,\\n                ChainUtils.getBlockNumber()\\n            );\\n            c.setTradeData(sender, t.pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, slippageP);\\n\\n            emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV6_4.OrderType.MARKET_OPEN,\\n                t.positionSizeWETH * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            storageT.storePendingMarketOrder(\\n                StorageInterfaceV5.PendingMarketOrder(\\n                    StorageInterfaceV5.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        0,\\n                        t.positionSizeWETH,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    spreadReductionId > 0 ? storageT.spreadReductionsP(spreadReductionId - 1) : 0,\\n                    0\\n                ),\\n                orderId,\\n                true\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(uint pairIndex, uint index) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(sender, pairIndex, index);\\n\\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \\\"MAX_PENDING_ORDERS\\\");\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = storageT.priceAggregator().getPrice(\\n            pairIndex,\\n            AggregatorInterfaceV6_4.OrderType.MARKET_CLOSE,\\n            (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        storageT.storePendingMarketOrder(\\n            StorageInterfaceV5.PendingMarketOrder(\\n                StorageInterfaceV5.Trade(sender, pairIndex, index, 0, 0, 0, false, 0, 0, 0),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            ),\\n            orderId,\\n            false\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    function updateOpenLimitOrder(\\n        uint pairIndex,\\n        uint index,\\n        uint price, // PRECISION\\n        uint tp,\\n        uint sl,\\n        uint maxSlippageP\\n    ) external notContract notDone {\\n        require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n        address sender = _msgSender();\\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \\\"NO_LIMIT\\\");\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\\n\\n        require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n        require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n        require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\\n\\n        o.minPrice = price;\\n        o.maxPrice = price;\\n        o.tp = tp;\\n        o.sl = sl;\\n\\n        storageT.updateOpenLimitOrder(o);\\n\\n        address c = storageT.callbacks();\\n        c.setTradeLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.LIMIT,\\n            ChainUtils.getBlockNumber()\\n        );\\n        c.setTradeData(sender, pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, maxSlippageP);\\n\\n        emit OpenLimitUpdated(sender, pairIndex, index, price, tp, sl, maxSlippageP);\\n    }\\n\\n    function cancelOpenLimitOrder(uint pairIndex, uint index) external notContract notDone {\\n        address sender = _msgSender();\\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \\\"NO_LIMIT\\\");\\n\\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\\n\\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\\n\\n        storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n        storageT.transferWETH(address(storageT), sender, o.positionSize);\\n\\n        emit OpenLimitCanceled(sender, pairIndex, index);\\n    }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(uint pairIndex, uint index, uint newTp) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.TP);\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        storageT.callbacks().setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(uint pairIndex, uint index, uint newSl) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.SL);\\n\\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 || (t.buy ? newSl >= t.openPrice - maxSlDist : newSl <= t.openPrice + maxSlDist),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        storageT.callbacks().setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksV6_4.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    // Execute limit order\\n    function executeNftOrder(uint256 packed) external notContract notDone {\\n        (uint _orderType, address trader, uint pairIndex, uint index, uint nftId, uint nftType) = packed\\n            .unpackExecuteNftOrder();\\n        StorageInterfaceV5.LimitOrder orderType = StorageInterfaceV5.LimitOrder(_orderType);\\n        address sender = _msgSender();\\n\\n        require(nftType >= 1 && nftType <= 5, \\\"WRONG_NFT_TYPE\\\");\\n        require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \\\"NO_NFT\\\");\\n\\n        require(block.number >= storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(), \\\"SUCCESS_TIMELOCK\\\");\\n\\n        bool isOpenLimit = orderType == StorageInterfaceV5.LimitOrder.OPEN;\\n        TradingCallbacksV6_4.TradeType tradeType = isOpenLimit\\n            ? TradingCallbacksV6_4.TradeType.LIMIT\\n            : TradingCallbacksV6_4.TradeType.MARKET;\\n\\n        require(\\n            canExecute(orderType, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, tradeType)),\\n            \\\"IN_TIMEOUT\\\"\\n        );\\n\\n        handleBotInUse(sender, nftId, trader, pairIndex, index);\\n\\n        StorageInterfaceV5.Trade memory t;\\n\\n        if (isOpenLimit) {\\n            require(storageT.hasOpenLimitOrder(trader, pairIndex, index), \\\"NO_LIMIT\\\");\\n        } else {\\n            t = storageT.openTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterfaceV5.LimitOrder.LIQ) {\\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        (t.initialPosToken * storageT.openTradesInfo(t.trader, t.pairIndex, t.index).tokenPriceWETH) /\\n                            PRECISION,\\n                        t.leverage\\n                    )\\n                );\\n\\n                require(t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl), \\\"HAS_SL\\\");\\n            } else {\\n                require(orderType != StorageInterfaceV5.LimitOrder.SL || t.sl > 0, \\\"NO_SL\\\");\\n                require(orderType != StorageInterfaceV5.LimitOrder.TP || t.tp > 0, \\\"NO_TP\\\");\\n            }\\n        }\\n\\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n            trader,\\n            pairIndex,\\n            index,\\n            orderType\\n        );\\n\\n        if (!nftRewards.triggered(triggeredLimitId) || nftRewards.timedOut(triggeredLimitId)) {\\n            uint leveragedPosWETH;\\n\\n            if (isOpenLimit) {\\n                StorageInterfaceV5.OpenLimitOrder memory l = storageT.getOpenLimitOrder(trader, pairIndex, index);\\n\\n                leveragedPosWETH = l.positionSize * l.leverage;\\n                (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, l.pairIndex, l.buy, leveragedPosWETH);\\n\\n                require(priceImpactP * l.leverage <= pairInfos.maxNegativePnlOnOpenP(), \\\"PRICE_IMPACT_TOO_HIGH\\\");\\n            } else {\\n                leveragedPosWETH =\\n                    (t.initialPosToken * storageT.openTradesInfo(trader, pairIndex, index).tokenPriceWETH * t.leverage) /\\n                    PRECISION;\\n            }\\n\\n            storageT.transferLinkToAggregator(sender, pairIndex, leveragedPosWETH);\\n\\n            (uint orderId, uint linkFee) = getPriceNftOrder(\\n                isOpenLimit,\\n                trader,\\n                pairIndex,\\n                index,\\n                tradeType,\\n                orderType,\\n                leveragedPosWETH\\n            );\\n\\n            StorageInterfaceV5.PendingNftOrder memory pendingNftOrder;\\n            pendingNftOrder.nftHolder = sender;\\n            pendingNftOrder.nftId = nftId;\\n            pendingNftOrder.trader = trader;\\n            pendingNftOrder.pairIndex = pairIndex;\\n            pendingNftOrder.index = index;\\n            pendingNftOrder.orderType = orderType;\\n\\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n            nftRewards.storeFirstToTrigger(triggeredLimitId, sender, linkFee);\\n\\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\\n        } else {\\n            nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\\n\\n            emit NftOrderSameBlock(sender, trader, pairIndex);\\n        }\\n    }\\n\\n    // Market timeout\\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \\\"WAIT_TIMEOUT\\\");\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, true);\\n        storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\\n        StorageInterfaceV5.Trade memory t = o.trade;\\n\\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \\\"WAIT_TIMEOUT\\\");\\n        require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n        require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n        storageT.unregisterPendingMarketOrder(_order, false);\\n\\n        (bool success, ) = address(this).delegatecall(\\n            abi.encodeWithSignature(\\\"closeTradeMarket(uint256,uint256)\\\", t.pairIndex, t.index)\\n        );\\n\\n        if (!success) {\\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n        }\\n\\n        emit ChainlinkCallbackTimeout(_order, o);\\n    }\\n\\n    // Helpers\\n    function checkNoPendingTrigger(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        StorageInterfaceV5.LimitOrder orderType\\n    ) private view {\\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n            trader,\\n            pairIndex,\\n            index,\\n            orderType\\n        );\\n        require(!nftRewards.triggered(triggeredLimitId) || nftRewards.timedOut(triggeredLimitId), \\\"PENDING_TRIGGER\\\");\\n    }\\n\\n    function canExecute(\\n        StorageInterfaceV5.LimitOrder orderType,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id\\n    ) private view returns (bool) {\\n        if (orderType == StorageInterfaceV5.LimitOrder.LIQ) return true;\\n\\n        uint b = ChainUtils.getBlockNumber();\\n        address cb = storageT.callbacks();\\n\\n        if (orderType == StorageInterfaceV5.LimitOrder.TP) return !cb.isTpInTimeout(id, b);\\n        if (orderType == StorageInterfaceV5.LimitOrder.SL) return !cb.isSlInTimeout(id, b);\\n\\n        return !cb.isLimitInTimeout(id, b);\\n    }\\n\\n    function pairMaxLeverage(PairsStorageInterfaceV6 pairsStored, uint pairIndex) private view returns (uint) {\\n        uint max = TradingCallbacksV6_4(storageT.callbacks()).pairMaxLeverage(pairIndex);\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    function handleBotInUse(address sender, uint nftId, address trader, uint pairIndex, uint index) private {\\n        (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\\n            block.number,\\n            sender,\\n            nftId,\\n            trader,\\n            pairIndex,\\n            index\\n        );\\n        require(!nftRewards.nftBotInUse(nftHash, botHash), \\\"BOT_IN_USE\\\");\\n\\n        nftRewards.setNftBotInUse(nftHash, botHash);\\n    }\\n\\n    function getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType tradeType,\\n        StorageInterfaceV5.LimitOrder orderType,\\n        uint leveragedPosWETH\\n    ) private returns (uint orderId, uint linkFee) {\\n        TradingCallbacksV6_4.LastUpdated memory lastUpdated = TradingCallbacksV6_4(storageT.callbacks())\\n            .tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit ? AggregatorInterfaceV6_4.OrderType.LIMIT_OPEN : AggregatorInterfaceV6_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosWETH,\\n            isOpenLimit ? lastUpdated.limit : orderType == StorageInterfaceV5.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterfaceV5.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n\\n        linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\\n    }\\n}\",\"keccak256\":\"0xfa9d82e919d347d6087db6e88c0398d44f353132b123d462086ba08858c69370\",\"license\":\"MIT\"},\"contracts/contracts6_4/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSBorrowingFeesInterfaceV6_4 {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n}\",\"keccak256\":\"0x8e7bf9ff0b9e2eb440cdbcc8710c52dfbef3c12e8d2f5bdcb60ebf58fc6cff43\",\"license\":\"MIT\"},\"contracts/contracts6_4/interfaces/GNSPairInfosInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface GNSPairInfosInterfaceV6 {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n}\",\"keccak256\":\"0x5b297f384235d48f30d8d3352fc7ab0f4984f85dfb41c4f479e3d8e11f1b3c0e\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\",\"keccak256\":\"0xf3fa14cf1093352a34a84b3a7bb3ed26e69adc742ee6709bbaf7b981d34c1802\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary PackingUtils {\\n    function pack(uint256[] memory values, uint256[] memory bitLengths) external pure returns (uint256 packed) {\\n        require(values.length == bitLengths.length, \\\"Mismatch in the lengths of values and bitLengths arrays\\\");\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(currentShift + bitLengths[i] <= 256, \\\"Packed value exceeds 256 bits\\\");\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(values[i] <= maxValue, \\\"Value too large for specified bit length\\\");\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(uint256 packed, uint256[] memory bitLengths) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(currentShift + bitLengths[i] <= 256, \\\"Unpacked value exceeds 256 bits\\\");\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(uint256 packed) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    ) external pure returns (uint256 a, address b, uint256 c, uint256 d, uint256 e, uint256 f) {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\",\"keccak256\":\"0x784da1ae9ea24d046ea8a97d98cbdbe9abae3e34addd1014fabfe65406462c71\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../contract5/interfaces/StorageInterfaceV5.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksV6_4,\\n            TradingCallbacksV6_4.LastUpdated memory,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeData(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\",\"keccak256\":\"0x56e7f04d09083bfa48962abcf895e6f7c7e9024a9072f6e72e0f29368bbe1fc8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101795760003560e01c80639a10cc32116100d9578063b9b6573a11610087578063b9b6573a14610367578063be73fb991461037a578063bffe34861461038d578063c641558e146103b6578063ca5eb5e1146103c9578063d3dc7539146103dc578063d8defd151461040357600080fd5b80639a10cc32146102f05780639aa7c0e514610310578063a2a3c0cb14610323578063ae8421e114610336578063b187bd261461033e578063b1dfd5301461034b578063b81bfa051461035457600080fd5b8063531cc96511610136578063531cc9651461023f5780635ad9f993146102665780636c53cc1c1461028d5780638456cb59146102a0578063876d3abd146102a85780638f062227146102bb578063990382cf146102dd57600080fd5b8063119df25f1461017e5780631346b0ff146101a357806316fff074146101ca5780632c1e4e55146101f157806336fb8b1514610206578063410c0b7c14610228575b600080fd5b610186610416565b6040516001600160a01b0390911681526020015b60405180910390f35b6101867f000000000000000000000000000000000000000000000000000000000000000081565b6101867f000000000000000000000000000000000000000000000000000000000000000081565b6102046101ff36600461503c565b61043e565b005b61020433600090815260208190526040902080546001600160a01b0319169055565b61023160035481565b60405190815260200161019a565b6101867f000000000000000000000000000000000000000000000000000000000000000081565b6101867f000000000000000000000000000000000000000000000000000000000000000081565b61020461029b36600461503c565b6104cf565b6102046115bf565b6102046102b636600461503c565b611615565b6004546102cd90610100900460ff1681565b604051901515815260200161019a565b6102046102eb36600461503c565b6118a2565b6103036102fe36600461507d565b611b96565b60405161019a9190615152565b61020461031e3660046151f8565b611cd1565b6102046103313660046152d7565b613007565b610204613573565b6004546102cd9060ff1681565b61023160025481565b61020461036236600461503c565b6135d3565b6102046103753660046152d7565b61365d565b6102046103883660046152f9565b61391c565b61018661039b366004615325565b6000602081905290815260409020546001600160a01b031681565b6102046103c4366004615342565b613c7c565b6102046103d7366004615325565b61412c565b6101867f000000000000000000000000000000000000000000000000000000000000000081565b6102046104113660046152f9565b614198565b6001546000906001600160a01b031661042e57503390565b506001546001600160a01b031690565b610446614451565b6000811161046f5760405162461bcd60e51b815260040161046690615385565b60405180910390fd5b600281905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b6104d7614520565b6104df61452c565b6000806000806000808673__$0a787ca790b72760fa5f2fae68e461a66f$__63cefbb3bd90916040518263ffffffff1660e01b815260040161052391815260200190565b60c060405180830381865af4158015610540573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056491906153b1565b955095509550955095509550600086600381111561058457610584615405565b90506000610590610416565b9050600183101580156105a4575060058311155b6105e15760405162461bcd60e51b815260206004820152600e60248201526d57524f4e475f4e46545f5459504560901b6044820152606401610466565b6001600160a01b03808216907f00000000000000000000000000000000000000000000000000000000000000001663265aa62161061f600187615431565b6040518263ffffffff1660e01b815260040161063d91815260200190565b602060405180830381865afa15801561065a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067e9190615444565b6001600160a01b0316636352211e866040518263ffffffff1660e01b81526004016106ab91815260200190565b602060405180830381865afa1580156106c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ec9190615444565b6001600160a01b03161461072b5760405162461bcd60e51b81526020600482015260066024820152651393d7d3919560d21b6044820152606401610466565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f8d24b486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190615461565b60405163aa3b7d7760e01b8152600481018690527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063aa3b7d7790602401602060405180830381865afa158015610812573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108369190615461565b610840919061547a565b4310156108825760405162461bcd60e51b815260206004820152601060248201526f535543434553535f54494d454c4f434b60801b6044820152606401610466565b6000600383600381111561089857610898615405565b1490506000816108a95760006108ac565b60015b90506108f18460405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018460018111156108ea576108ea615405565b905261456d565b61092a5760405162461bcd60e51b815260206004820152600a602482015269125397d512535153d55560b21b6044820152606401610466565b61093783878b8b8b6147b7565b61099860405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b8215610a5057604051636e6f99cd60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a906109ee908d908d908d9060040161548d565b602060405180830381865afa158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f91906154b9565b610a4b5760405162461bcd60e51b8152600401610466906154d6565b610e2d565b6040516351d407ff60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe90610aa0908d908d908d9060040161548d565b61014060405180830381865afa158015610abe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae2919061558b565b905060008160e0015111610b085760405162461bcd60e51b8152600401610466906155a8565b6002856003811115610b1c57610b1c615405565b03610d795760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663706faf3a6040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c00151151581526020016402540be4007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d5886000015189602001518a604001516040518463ffffffff1660e01b8152600401610bfc9392919061548d565b60c060405180830381865afa158015610c19573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c3d91906155ca565b602001518760600151610c50919061564a565b610c5a9190615661565b815260e086810151602092830152604080519185901b6001600160e01b031916825283516001600160a01b031660048301529183015160248201529082015160448201526060820151606482015260808201511515608482015260a082015160a482015260c0919091015160c482015260e401602060405180830381865afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190615461565b905081610120015160001480610d3e57508160c00151610d35578161012001518110610d3e565b81610120015181115b610d735760405162461bcd60e51b8152602060048201526006602482015265121054d7d4d360d21b6044820152606401610466565b50610e2d565b6001856003811115610d8d57610d8d615405565b141580610d9f57506000816101200151115b610dd35760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b6044820152606401610466565b6000856003811115610de757610de7615405565b141580610df957506000816101000151115b610e2d5760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b6044820152606401610466565b600060405180608001604052808c6001600160a01b031681526020018b81526020018a8152602001876003811115610e6757610e67615405565b905260405163108c3d4960e11b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906321187a9290610eb89084906004016156cd565b602060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906154b9565b1580610f8d5750604051633f1b72bf60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063fc6dcafc90610f4c9084906004016156cd565b602060405180830381865afa158015610f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8d91906154b9565b156114ee57600084156111ac5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b8878a2c8e8e8e6040518463ffffffff1660e01b8152600401610fec9392919061548d565b6101a060405180830381865afa15801561100a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102e91906156db565b90508060c001518160600151611044919061564a565b602082015160a0830151604051633f54af9960e11b81526000600482018190526024820193909352901515604482015260648101839052919350906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637ea95f32906084016040805180830381865afa1580156110cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f3919061578e565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611154573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111789190615461565b60c0830151611187908361564a565b11156111a55760405162461bcd60e51b8152600401610466906157b2565b5050611272565b6402540be4008360e001517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58f8f8f6040518463ffffffff1660e01b81526004016112079392919061548d565b60c060405180830381865afa158015611224573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124891906155ca565b60200151856060015161125b919061564a565b611265919061564a565b61126f9190615661565b90505b604051633348540360e11b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690636690a806906112c29089908f90869060040161548d565b600060405180830381600087803b1580156112dc57600080fd5b505af11580156112f0573d6000803e3d6000fd5b50505050600080611306878f8f8f8a8e896149c0565b915091506113406040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b03808a168252602082018d90528f166040820152606081018e9052608081018d905260a081018a600381111561137f5761137f615405565b9081600381111561139257611392615405565b90525060405163205fe86960e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063817fa1a4906113e390849087906004016157e1565b600060405180830381600087803b1580156113fd57600080fd5b505af1158015611411573d6000803e3d6000fd5b50506040516355447e9760e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016925063aa88fd2e91506114659088908d908790600401615841565b600060405180830381600087803b15801561147f57600080fd5b505af1158015611493573d6000803e3d6000fd5b505050508d8f6001600160a01b03168a6001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c00866040516114dd91815260200190565b60405180910390a4505050506115b0565b6040516346ea285b60e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906346ea285b9061153c9084908990600401615869565b600060405180830381600087803b15801561155657600080fd5b505af115801561156a573d6000803e3d6000fd5b50505050898b6001600160a01b0316866001600160a01b03167fde7da272dc52e28c3b33c5c74b461da89b05bd790d845e82db2f69bbf08108e760405160405180910390a45b50505050505050505050505050565b6115c7614451565b6004805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b61161d614520565b61162561452c565b600061162f610416565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa15801561169b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116bf919061588f565b8051602082015191925090158015906116e9575060035482602001516116e5919061547a565b4310155b6117055760405162461bcd60e51b815260040161046690615912565b826001600160a01b031681600001516001600160a01b03161461173a5760405162461bcd60e51b815260040161046690615938565b60008160e001511161175e5760405162461bcd60e51b815260040161046690615960565b604051630195728b60e71b815260048101859052600160248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b1580156117c757600080fd5b505af11580156117db573d6000803e3d6000fd5b505050506080810151604051638a238ae560e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03811692638a238ae59261183292918891600401615991565b600060405180830381600087803b15801561184c57600080fd5b505af1158015611860573d6000803e3d6000fd5b50505050837f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb1836040516118949190615a63565b60405180910390a250505050565b6118aa614520565b6118b261452c565b60006118bc610416565b60405163b66e6b0560e01b8152600481018490529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b66e6b05906024016101e060405180830381865afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c919061588f565b80516020820151919250901580159061197657506003548260200151611972919061547a565b4310155b6119925760405162461bcd60e51b815260040161046690615912565b826001600160a01b031681600001516001600160a01b0316146119c75760405162461bcd60e51b815260040161046690615938565b60e0810151156119e95760405162461bcd60e51b815260040161046690615960565b604051630195728b60e71b815260048101859052600060248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063cab9458090604401600060405180830381600087803b158015611a5257600080fd5b505af1158015611a66573d6000803e3d6000fd5b505050602082015160408084015190516024810192909252604482015260009150309060640160408051601f198184030181529181526020820180516001600160e01b031663a2a3c0cb60e01b17905251611ac19190615a72565b600060405180830381855af49150503d8060008114611afc576040519150601f19603f3d011682016040523d82523d6000602084013e611b01565b606091505b5050905080611b57578160200151846001600160a01b03167f60e497734ddabcd7293fd91739aaf65cf525eb539c97be528125a235a89288d88460400151604051611b4e91815260200190565b60405180910390a35b847f3adaa586cdbe84dd24e45bd7dada6da933d7c2d1c7b4e4cd02fce033356decb184604051611b879190615a63565b60405180910390a25050505050565b6001600160a01b03838116600090815260208190526040902054606091163314611bfa5760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b6044820152606401610466565b600180546001600160a01b0319166001600160a01b03861617905560405160009081903090611c2c9087908790615a8e565b600060405180830381855af49150503d8060008114611c67576040519150601f19603f3d011682016040523d82523d6000602084013e611c6c565b606091505b509150915081611cb857604481511015611c8557600080fd5b60048101905080806020019051810190611c9f9190615a9e565b60405162461bcd60e51b81526004016104669190615152565b600180546001600160a01b031916905595945050505050565b611cd9614520565b611ce161452c565b60045460ff1615611d1d5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b6044820152606401610466565b600019828660a00151611d30919061564a565b10611d4d5760405162461bcd60e51b815260040161046690615b4b565b60008560a0015111611d715760405162461bcd60e51b815260040161046690615b6d565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df59190615444565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e37573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e5b9190615444565b90506000611e67610416565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ec7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eeb9190615461565b6020890151604051634bf3ccad60e11b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916397e7995a91611f3c918691600401615b91565b602060405180830381865afa158015611f59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7d9190615461565b60208a0151604051639c8912f160e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691639c8912f191611fce918791600401615b91565b602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f9190615461565b60208b01516040516307218dad60e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691631c8636b491612060918891600401615b91565b602060405180830381865afa15801561207d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a19190615461565b6120ab919061547a565b6120b5919061547a565b106120f85760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b6044820152606401610466565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa158015612156573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061217a9190615461565b60405163f7b3c6fd60e01b81526001600160a01b0383811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa1580156121e0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122049190615461565b106122215760405162461bcd60e51b815260040161046690615baa565b600254886080015111156122675760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b6044820152606401610466565b602088015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa1580156122b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d69190615461565b8860e0015189608001516122ea919061564a565b10156123285760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b6044820152606401610466565b60008860e001511180156123ae5750602088015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa158015612382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a69190615461565b8860e0015110155b80156123cb57506123c3828960200151614c9d565b8860e0015111155b61240c5760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b6044820152606401610466565b85158061251d575060006001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663265aa62161245060018a615431565b6040518263ffffffff1660e01b815260040161246e91815260200190565b602060405180830381865afa15801561248b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124af9190615444565b6040516370a0823160e01b81526001600160a01b03848116600483015291909116906370a0823190602401602060405180830381865afa1580156124f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061251b9190615461565b115b6125775760405162461bcd60e51b815260206004820152602560248201527f4e4f5f434f52524553504f4e44494e475f4e46545f5350524541445f5245445560448201526421aa24a7a760d91b6064820152608401610466565b61010088015115806125ab57508760c0015161259e578760a00151886101000151106125ab565b8760a00151886101000151115b6125c75760405162461bcd60e51b815260040161046690615bd6565b61012088015115806125fb57508760c001516125ee578760a00151886101200151116125fb565b8760a00151886101200151105b6126175760405162461bcd60e51b815260040161046690615bf8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637ea95f3260008b602001518c60c001518d60e001518e60800151612668919061564a565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156126b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126db919061578e565b5090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561273c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127609190615461565b60e08a015161276f908361564a565b111561278d5760405162461bcd60e51b8152600401610466906157b2565b6080890151604051638a238ae560e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03811692638a238ae5926127e19287929091600401615991565b600060405180830381600087803b1580156127fb57600080fd5b505af115801561280f573d6000803e3d6000fd5b506000925061281c915050565b88600281111561282e5761282e615405565b14612cd957602089015160405163226a27ad60e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916344d44f5a9161288891879190600401615b91565b602060405180830381865afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c99190615461565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d3b5fe70604051806101a00160405280866001600160a01b031681526020018d6020015181526020018481526020018d60800151815260200160008c1161293e5760006129d7565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016633dae10a061297860018f615431565b6040518263ffffffff1660e01b815260040161299691815260200190565b602060405180830381865afa1580156129b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d79190615461565b81526020018d60c00151151581526020018d60e0015181526020018d610100015181526020018d610120015181526020018d60a0015181526020018d60a00151815260200143815260200160008152506040518263ffffffff1660e01b8152600401612a439190615c1a565b600060405180830381600087803b158015612a5d57600080fd5b505af1158015612a71573d6000803e3d6000fd5b5050505060208a0151604051630ec5706160e41b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169163ec57061091612aca91879186908f90600401615cba565b600060405180830381600087803b158015612ae457600080fd5b505af1158015612af8573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612b5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b7f9190615444565b9050806001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6395ecbbea9091868e60200151866001612bb8614e11565b6040518763ffffffff1660e01b8152600401612bd996959493929190615d0b565b60006040518083038186803b158015612bf157600080fd5b505af4158015612c05573d6000803e3d6000fd5b50505050806001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6325f40ef99091868e602001518660018e6040518763ffffffff1660e01b8152600401612c5a96959493929190615d0b565b60006040518083038186803b158015612c7257600080fd5b505af4158015612c86573d6000803e3d6000fd5b505050508a60200151846001600160a01b03167fdfabd6f206f17b7f2e1f9e0d33c40d30d1e8d7b6a4f520a03fdc1c181105934384604051612cca91815260200190565b60405180910390a35050612f88565b6000846001600160a01b0316636938c05d8b6020015160008d60e001518e60800151612d05919061564a565b612d0d614e11565b6040518563ffffffff1660e01b8152600401612d2c9493929190615d4f565b6020604051808303816000875af1158015612d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6f9190615461565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c76faf786040518060c00160405280604051806101400160405280886001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a815260200160008c11612e44576000612edd565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016633dae10a0612e7e60018f615431565b6040518263ffffffff1660e01b8152600401612e9c91815260200190565b602060405180830381865afa158015612eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edd9190615461565b815260200160008152508360016040518463ffffffff1660e01b8152600401612f0893929190615d7a565b600060405180830381600087803b158015612f2257600080fd5b505af1158015612f36573d6000803e3d6000fd5b505050508960200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866001604051612f7e911515815260200190565b60405180910390a4505b6040516326e2ada160e21b81526001600160a01b03838116600483015286811660248301527f00000000000000000000000000000000000000000000000000000000000000001690639b8ab68490604401600060405180830381600087803b158015612ff357600080fd5b505af11580156115b0573d6000803e3d6000fd5b61300f614520565b61301761452c565b6000613021610416565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a3a80ffe8386866040518463ffffffff1660e01b81526004016130759392919061548d565b61014060405180830381865afa158015613093573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b7919061558b565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c8ff1d58487876040518463ffffffff1660e01b815260040161310b9392919061548d565b60c060405180830381865afa158015613128573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314c91906155ca565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156131ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d09190615461565b60405163f7b3c6fd60e01b81526001600160a01b0385811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063f7b3c6fd90602401602060405180830381865afa158015613236573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325a9190615461565b106132775760405162461bcd60e51b815260040161046690615baa565b8060a00151156132c05760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b6044820152606401610466565b60008260e00151116132e45760405162461bcd60e51b8152600401610466906155a8565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015613344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133689190615444565b6001600160a01b0316636938c05d8760016402540be4008760e0015187602001518960600151613398919061564a565b6133a2919061564a565b6133ac9190615661565b6133b4614e11565b6040518563ffffffff1660e01b81526004016133d39493929190615d4f565b6020604051808303816000875af11580156133f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134169190615461565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c76faf786040518060c00160405280604051806101400160405280896001600160a01b031681526020018b81526020018a81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152508360006040518463ffffffff1660e01b81526004016134f193929190615d7a565b600060405180830381600087803b15801561350b57600080fd5b505af115801561351f573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866000604051613563911515815260200190565b60405180910390a4505050505050565b61357b614451565b6004805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd38889361160b9390049091161515815260200190565b6135db614451565b600081116135fb5760405162461bcd60e51b815260040161046690615385565b600381905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080016104c4565b613665614520565b61366d61452c565b6000613677610416565b604051636e6f99cd60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a906136ca9084908790879060040161548d565b602060405180830381865afa1580156136e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370b91906154b9565b6137275760405162461bcd60e51b8152600401610466906154d6565b604051632e21e28b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b8878a2c9061377a9085908890889060040161548d565b6101a060405180830381865afa158015613798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bc91906156db565b90506137cb8285856003614e97565b60405163b4b0f56760e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b4b0f5679061381b9085908890889060040161548d565b600060405180830381600087803b15801561383557600080fd5b505af1158015613849573d6000803e3d6000fd5b505050506060810151604051638a238ae560e01b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03811692638a238ae5926138a092918791600401615991565b600060405180830381600087803b1580156138ba57600080fd5b505af11580156138ce573d6000803e3d6000fd5b5050505083826001600160a01b03167ff1b38881d7f4b2b12141c5f39c5124545d6112532eb6afbe9630cdbde3ee53e98560405161390e91815260200190565b60405180910390a350505050565b613924614520565b61392c61452c565b6000613936610416565b90506139458185856001614e97565b6040516351d407ff60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe906139989085908990899060040161548d565b61014060405180830381865afa1580156139b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139da919061558b565b905060008160e0015111613a005760405162461bcd60e51b8152600401610466906155a8565b60008160e001516064604b8460a00151613a1a919061564a565b613a249190615661565b613a2e9190615661565b9050831580613a6d57508160c00151613a5957808260a00151613a51919061547a565b841115613a6d565b808260a00151613a699190615431565b8410155b613aa65760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b6044820152606401610466565b60405163a354418160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a354418190613af89086908a908a908a90600401615da1565b600060405180830381600087803b158015613b1257600080fd5b505af1158015613b26573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bab9190615444565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__63a6b8633d90918589896000613bdd614e11565b6040518763ffffffff1660e01b8152600401613bfe96959493929190615d0b565b60006040518083038186803b158015613c1657600080fd5b505af4158015613c2a573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b613c84614520565b613c8c61452c565b60008411613cac5760405162461bcd60e51b815260040161046690615b6d565b6000613cb6610416565b604051636e6f99cd60e11b81529091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063dcdf339a90613d099084908b908b9060040161548d565b602060405180830381865afa158015613d26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4a91906154b9565b613d665760405162461bcd60e51b8152600401610466906154d6565b604051632e21e28b60e21b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b8878a2c90613db99085908c908c9060040161548d565b6101a060405180830381865afa158015613dd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613dfb91906156db565b9050841580613e1a57508060a00151613e1657858510613e1a565b8585115b613e365760405162461bcd60e51b815260040161046690615bd6565b831580613e5357508060a00151613e4f57858411613e53565b8584105b613e6f5760405162461bcd60e51b815260040161046690615bf8565b600019613e7c848861564a565b10613e995760405162461bcd60e51b815260040161046690615b4b565b613ea68289896003614e97565b6101208101869052610140810186905260e081018590526101008101849052604051635bb3b04560e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b767608a90613f11908490600401615c1a565b600060405180830381600087803b158015613f2b57600080fd5b505af1158015613f3f573d6000803e3d6000fd5b5050505060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015613fa2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fc69190615444565b905073__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6395ecbbea6001600160a01b038316858c8c6001613ff9614e11565b6040518763ffffffff1660e01b815260040161401a96959493929190615d0b565b60006040518083038186803b15801561403257600080fd5b505af4158015614046573d6000803e3d6000fd5b50506040516325f40ef960e01b815273__$f600c6c046224cd62da9c8e7a0d00fc8b2$__92506325f40ef99150614095906001600160a01b0385169087908e908e906001908c90600401615d0b565b60006040518083038186803b1580156140ad57600080fd5b505af41580156140c1573d6000803e3d6000fd5b5050604080518b8152602081018b905290810189905260608101889052608081018790528b92506001600160a01b03861691507f710a8db87f04e82a9de40076812593a965f4aa48693196d2144c07ff9710e8909060a00160405180910390a3505050505050505050565b3233146141695760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b6044820152606401610466565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b6141a0614520565b6141a861452c565b60006141b2610416565b90506141c18185856000614e97565b6040516351d407ff60e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a3a80ffe906142149085908990899060040161548d565b61014060405180830381865afa158015614232573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614256919061558b565b905060008160e001511161427c5760405162461bcd60e51b8152600401610466906155a8565b604051637fdb96f360e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690637fdb96f3906142ce908590899089908990600401615da1565b600060405180830381600087803b1580156142e857600080fd5b505af11580156142fc573d6000803e3d6000fd5b505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561435d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143819190615444565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__6339e765e4909184888860006143b3614e11565b6040518763ffffffff1660e01b81526004016143d496959493929190615d0b565b60006040518083038186803b1580156143ec57600080fd5b505af4158015614400573d6000803e3d6000fd5b505060408051878152602081018790528893506001600160a01b03861692507f7e06a81c7a47891ccc7455b5ccb2ed850e32bb655ccda67eb3ebaaeed83242a4910160405180910390a35050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156144af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144d39190615444565b6001600160a01b0316336001600160a01b03161461451e5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b6044820152606401610466565b565b32331461451e57600080fd5b600454610100900460ff161561451e5760405162461bcd60e51b815260040161046690602080825260049082015263444f4e4560e01b604082015260600190565b6000600283600381111561458357614583615405565b03614590575060016147b1565b600061459a614e11565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156145fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061461f9190615444565b9050600085600381111561463557614635615405565b036146c957604051637d36408960e01b815273__$f600c6c046224cd62da9c8e7a0d00fc8b2$__90637d3640899061467e906001600160a01b0385169088908790600401615dc7565b602060405180830381865af415801561469b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146bf91906154b9565b15925050506147b1565b60018560038111156146dd576146dd615405565b036147265760405163934648bb60e01b815273__$f600c6c046224cd62da9c8e7a0d00fc8b2$__9063934648bb9061467e906001600160a01b0385169088908790600401615dc7565b6040516308af796360e01b815273__$f600c6c046224cd62da9c8e7a0d00fc8b2$",
  "libraries": {
    "TradeUtils": "0x956b22f49E41119228A7BE9E047fc2568473EC79",
    "PackingUtils": "0x64327f4740265D7813fB30dFA902F54567e98Ef6"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5181,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 5183,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 14227,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "maxPosWETH",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 14229,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 14231,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "isPaused",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      },
      {
        "astId": 14233,
        "contract": "contracts/contracts6_4/GNSTradingV6_4.sol:GNSTradingV6_4",
        "label": "isDone",
        "offset": 1,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}