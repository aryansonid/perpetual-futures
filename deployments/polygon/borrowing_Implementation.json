{
  "address": "0x1947B5AD2306f802FAD2F389a2e20DDbEfC7b691",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "GroupAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "increase",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "amount",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "indexed": false,
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        }
      ],
      "name": "GroupOiUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        }
      ],
      "name": "PairAccFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "prevGroupIndex",
          "type": "uint16"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "newGroupIndex",
          "type": "uint16"
        }
      ],
      "name": "PairGroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "indexed": false,
          "internalType": "uint72",
          "name": "maxOi",
          "type": "uint72"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeDai",
          "type": "uint256"
        }
      ],
      "name": "TradeActionHandled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialPairAccFee",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "initialGroupAccFee",
          "type": "uint64"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getAllPairs",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct BorrowingFeesInterface.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.Pair[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PairOi[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "name": "getGroup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.Group",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getGroupPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getGroupPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "groupAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        }
      ],
      "name": "getGroups",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint112",
              "name": "oiLong",
              "type": "uint112"
            },
            {
              "internalType": "uint112",
              "name": "oiShort",
              "type": "uint112"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "maxOi",
              "type": "uint80"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.Group[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "internalType": "uint48[]",
          "name": "",
          "type": "uint48[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint16",
                  "name": "groupIndex",
                  "type": "uint16"
                },
                {
                  "internalType": "uint48",
                  "name": "block",
                  "type": "uint48"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initialAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "prevGroupAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeLong",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "pairAccFeeShort",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "_placeholder",
                  "type": "uint64"
                }
              ],
              "internalType": "struct BorrowingFeesInterface.PairGroup[]",
              "name": "groups",
              "type": "tuple[]"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "accLastUpdatedBlock",
              "type": "uint48"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint256",
              "name": "lastAccBlockWeightedMarketCap",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.Pair",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint72",
              "name": "long",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "short",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "max",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "_placeholder",
              "type": "uint40"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PairOi",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "initialAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "prevGroupAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "pairAccFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "_placeholder",
              "type": "uint64"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PairGroup[]",
          "name": "pairGroups",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.InitialAccFees",
          "name": "initialFees",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupAccFeesDeltas",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "deltaGroup",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "deltaPair",
          "type": "uint64"
        },
        {
          "internalType": "bool",
          "name": "beforeTradeOpen",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairGroupIndex",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairMaxOi",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPairOpenInterestWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "getPairPendingAccFee",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFee",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPairPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "pairAccFeeDelta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accFeeLong",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accFeeShort",
              "type": "uint64"
            },
            {
              "internalType": "uint256",
              "name": "oiLong",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oiShort",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "currentBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "accLastUpdatedBlock",
              "type": "uint256"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PendingAccFeesInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getPendingAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "newAccFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "newAccFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "delta",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.BorrowingFeeInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeBorrowingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFees",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "accPairFee",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "accGroupFee",
              "type": "uint64"
            },
            {
              "internalType": "uint48",
              "name": "block",
              "type": "uint48"
            },
            {
              "internalType": "uint80",
              "name": "_placeholder",
              "type": "uint80"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.InitialAccFees",
          "name": "borrowingFees",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rollover",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "funding",
              "type": "int256"
            },
            {
              "internalType": "bool",
              "name": "openedAfterUpdate",
              "type": "bool"
            }
          ],
          "internalType": "struct PairInfosInterface.TradeInitialAccFees",
          "name": "otherFees",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.LiqPriceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "long",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.LiqPriceInput",
          "name": "input",
          "type": "tuple"
        }
      ],
      "name": "getTradePartialLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupFeeExponents",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "oiLong",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "oiShort",
          "type": "uint112"
        },
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "maxOi",
          "type": "uint80"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "handleTradeAction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "initialAccFees",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "accPairFee",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accGroupFee",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "block",
          "type": "uint48"
        },
        {
          "internalType": "uint80",
          "name": "_placeholder",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairOis",
      "outputs": [
        {
          "internalType": "uint72",
          "name": "long",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "short",
          "type": "uint72"
        },
        {
          "internalType": "uint72",
          "name": "max",
          "type": "uint72"
        },
        {
          "internalType": "uint40",
          "name": "_placeholder",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "feePerBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint64",
          "name": "accFeeLong",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "accFeeShort",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "accLastUpdatedBlock",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "feeExponent",
          "type": "uint48"
        },
        {
          "internalType": "uint256",
          "name": "lastAccBlockWeightedMarketCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "groupIndex",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.GroupParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setGroupParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "indices",
          "type": "uint16[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.GroupParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setGroupParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "groupIndex",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "feePerBlock",
              "type": "uint32"
            },
            {
              "internalType": "uint48",
              "name": "feeExponent",
              "type": "uint48"
            },
            {
              "internalType": "uint72",
              "name": "maxOi",
              "type": "uint72"
            }
          ],
          "internalType": "struct BorrowingFeesInterface.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        }
      ],
      "name": "withinMaxGroupOi",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4f29faae8ea1519b711cbff75f27bfe92672752ee7e1803f5e32e94c909ade42",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x1947B5AD2306f802FAD2F389a2e20DDbEfC7b691",
    "transactionIndex": 2,
    "gasUsed": "4191233",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000020000000000000002000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000004000000000000000000001000000000000000000000000000000100000001100000000000000000080000000000000000000000000010000000000000000100000",
    "blockHash": "0x55bae700117ee71085a523919bd853f0550b14c1bd23c207cc2cc20f9e41580d",
    "transactionHash": "0x4f29faae8ea1519b711cbff75f27bfe92672752ee7e1803f5e32e94c909ade42",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 41919099,
        "transactionHash": "0x4f29faae8ea1519b711cbff75f27bfe92672752ee7e1803f5e32e94c909ade42",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x0000000000000000000000005082f249cdb2f2c1ee035e4f423c46ea2dab3ab1"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000241bde21879c3f0000000000000000000000000000000000000000000000001abfb5606ce0bd3900000000000000000000000000000000000000000000033ca6e52a90686c1b060000000000000000000000000000000000000000000000001a9b99824b5920fa00000000000000000000000000000000000000000000033ca709466e89f3b745",
        "logIndex": 5,
        "blockHash": "0x55bae700117ee71085a523919bd853f0550b14c1bd23c207cc2cc20f9e41580d"
      }
    ],
    "blockNumber": 41919099,
    "cumulativeGasUsed": "4601465",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0f660eaf02b319e800391db4de42c79c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"GroupAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"increase\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"amount\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"}],\"name\":\"GroupOiUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"}],\"name\":\"PairAccFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"prevGroupIndex\",\"type\":\"uint16\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"newGroupIndex\",\"type\":\"uint16\"}],\"name\":\"PairGroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"indexed\":false,\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeDai\",\"type\":\"uint256\"}],\"name\":\"TradeActionHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialPairAccFee\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"initialGroupAccFee\",\"type\":\"uint64\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getAllPairs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct BorrowingFeesInterface.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.Pair[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct BorrowingFeesInterface.PairOi[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"name\":\"getGroup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.Group\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getGroupPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getGroupPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"groupAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"}],\"name\":\"getGroups\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.Group[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"internalType\":\"uint48[]\",\"name\":\"\",\"type\":\"uint48[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct BorrowingFeesInterface.PairGroup[]\",\"name\":\"groups\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.Pair\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"internalType\":\"struct BorrowingFeesInterface.PairOi\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initialAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"prevGroupAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_placeholder\",\"type\":\"uint64\"}],\"internalType\":\"struct BorrowingFeesInterface.PairGroup[]\",\"name\":\"pairGroups\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct BorrowingFeesInterface.InitialAccFees\",\"name\":\"initialFees\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairGroupAccFeesDeltas\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"deltaGroup\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deltaPair\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"beforeTradeOpen\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairGroupIndex\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairMaxOi\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPairOpenInterestWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"getPairPendingAccFee\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFee\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPairPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pairAccFeeDelta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"oiLong\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oiShort\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct BorrowingFeesInterface.PendingAccFeesInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getPendingAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"newAccFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"newAccFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"delta\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.BorrowingFeeInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeBorrowingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"internalType\":\"struct BorrowingFeesInterface.InitialAccFees\",\"name\":\"borrowingFees\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"internalType\":\"struct PairInfosInterface.TradeInitialAccFees\",\"name\":\"otherFees\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.LiqPriceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"internalType\":\"struct BorrowingFeesInterface.LiqPriceInput\",\"name\":\"input\",\"type\":\"tuple\"}],\"name\":\"getTradePartialLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupFeeExponents\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"oiLong\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"oiShort\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"maxOi\",\"type\":\"uint80\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"handleTradeAction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"initialAccFees\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"accPairFee\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accGroupFee\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"block\",\"type\":\"uint48\"},{\"internalType\":\"uint80\",\"name\":\"_placeholder\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairOis\",\"outputs\":[{\"internalType\":\"uint72\",\"name\":\"long\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"short\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"max\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"_placeholder\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"accFeeLong\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"accFeeShort\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"accLastUpdatedBlock\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint256\",\"name\":\"lastAccBlockWeightedMarketCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct BorrowingFeesInterface.GroupParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setGroupParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"indices\",\"type\":\"uint16[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"}],\"internalType\":\"struct BorrowingFeesInterface.GroupParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setGroupParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct BorrowingFeesInterface.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"groupIndex\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"feePerBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"feeExponent\",\"type\":\"uint48\"},{\"internalType\":\"uint72\",\"name\":\"maxOi\",\"type\":\"uint72\"}],\"internalType\":\"struct BorrowingFeesInterface.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"}],\"name\":\"withinMaxGroupOi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BorrowingFees.sol\":\"BorrowingFees\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/BorrowingFees.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n/// DEPLOY need storage and pair info\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_4.sol\\\";\\n\\ncontract BorrowingFees is Initializable, BorrowingFeesInterface {\\n    // Constants\\n    uint constant P_1 = 1e10;\\n    uint constant P_2 = 1e40;\\n\\n    // Addresses\\n    StorageInterface public storageT;\\n    PairInfosInterface public pairInfos;\\n\\n    // State\\n    mapping(uint16 => Group) public groups;\\n    mapping(uint => Pair) public pairs;\\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees)))\\n        public initialAccFees;\\n    mapping(uint => PairOi) public pairOis;\\n    mapping(uint => uint48) public groupFeeExponents;\\n\\n    // Note: Events and structs are in interface\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        PairInfosInterface _pairInfos\\n    ) external initializer {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_pairInfos) != address(0),\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        pairInfos = _pairInfos;\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(msg.sender == address(pairInfos.manager()), \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n\\n    modifier onlyCallbacks() {\\n        require(msg.sender == address(storageT.callbacks()), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Manage pair params\\n    function setPairParams(\\n        uint pairIndex,\\n        PairParams calldata value\\n    ) external onlyManager {\\n        _setPairParams(pairIndex, value);\\n    }\\n\\n    function setPairParamsArray(\\n        uint[] calldata indices,\\n        PairParams[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setPairParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\\n        require(\\n            value.feeExponent >= 1 && value.feeExponent <= 3,\\n            \\\"WRONG_EXPONENT\\\"\\n        );\\n\\n        Pair storage p = pairs[pairIndex];\\n\\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        _setPairPendingAccFees(pairIndex, currentBlock);\\n\\n        if (value.groupIndex != prevGroupIndex) {\\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\\n\\n            (uint oiLong, uint oiShort) = getPairOpenInterestWETH(pairIndex);\\n\\n            // Only remove OI from old group if old group is not 0\\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\\n\\n            // Add OI to new group if it's not group 0 (even if old group is 0)\\n            // So when we assign a pair to a group, it takes into account its OI\\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\\n            _setGroupOi(value.groupIndex, true, true, oiLong);\\n            _setGroupOi(value.groupIndex, false, true, oiShort);\\n\\n            Group memory newGroup = groups[value.groupIndex];\\n            Group memory prevGroup = groups[prevGroupIndex];\\n\\n            p.groups.push(\\n                PairGroup(\\n                    value.groupIndex,\\n                    ChainUtils.getUint48BlockNumber(currentBlock),\\n                    newGroup.accFeeLong,\\n                    newGroup.accFeeShort,\\n                    prevGroup.accFeeLong,\\n                    prevGroup.accFeeShort,\\n                    p.accFeeLong,\\n                    p.accFeeShort,\\n                    0 // placeholder\\n                )\\n            );\\n\\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\\n        }\\n\\n        p.feePerBlock = value.feePerBlock;\\n        p.feeExponent = value.feeExponent;\\n        pairOis[pairIndex].max = value.maxOi;\\n\\n        emit PairParamsUpdated(\\n            pairIndex,\\n            value.groupIndex,\\n            value.feePerBlock,\\n            value.feeExponent,\\n            value.maxOi\\n        );\\n    }\\n\\n    // Manage group params\\n    function setGroupParams(\\n        uint16 groupIndex,\\n        GroupParams calldata value\\n    ) external onlyManager {\\n        _setGroupParams(groupIndex, value);\\n    }\\n\\n    function setGroupParamsArray(\\n        uint16[] calldata indices,\\n        GroupParams[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n        require(len == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i; i < len; ) {\\n            _setGroupParams(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setGroupParams(\\n        uint16 groupIndex,\\n        GroupParams calldata value\\n    ) private {\\n        require(groupIndex > 0, \\\"GROUP_0\\\");\\n        require(\\n            value.feeExponent >= 1 && value.feeExponent <= 3,\\n            \\\"WRONG_EXPONENT\\\"\\n        );\\n\\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\\n\\n        Group storage g = groups[groupIndex];\\n        g.feePerBlock = value.feePerBlock;\\n        g.maxOi = uint80(value.maxOi);\\n        groupFeeExponents[groupIndex] = value.feeExponent;\\n\\n        emit GroupUpdated(\\n            groupIndex,\\n            value.feePerBlock,\\n            value.maxOi,\\n            value.feeExponent\\n        );\\n    }\\n\\n    // Group OI setter\\n    function _setGroupOi(\\n        uint16 groupIndex,\\n        bool long,\\n        bool increase,\\n        uint amount // 1e18\\n    ) private {\\n        Group storage group = groups[groupIndex];\\n        uint112 amountFinal;\\n\\n        if (groupIndex > 0) {\\n            amount = (amount * P_1) / 1e18; // 1e10\\n            require(amount <= type(uint112).max, \\\"OVERFLOW\\\");\\n\\n            amountFinal = uint112(amount);\\n\\n            if (long) {\\n                group.oiLong = increase\\n                    ? group.oiLong + amountFinal\\n                    : group.oiLong -\\n                        (\\n                            group.oiLong > amountFinal\\n                                ? amountFinal\\n                                : group.oiLong\\n                        );\\n            } else {\\n                group.oiShort = increase\\n                    ? group.oiShort + amountFinal\\n                    : group.oiShort -\\n                        (\\n                            group.oiShort > amountFinal\\n                                ? amountFinal\\n                                : group.oiShort\\n                        );\\n            }\\n        }\\n\\n        emit GroupOiUpdated(\\n            groupIndex,\\n            long,\\n            increase,\\n            amountFinal,\\n            group.oiLong,\\n            group.oiShort\\n        );\\n    }\\n\\n    // Acc fees getters for pairs and groups\\n    function getPendingAccFees(\\n        PendingAccFeesInput memory input\\n    )\\n        public\\n        view\\n        returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta)\\n    {\\n        require(input.currentBlock >= input.accLastUpdatedBlock, \\\"BLOCK_ORDER\\\");\\n\\n        bool moreShorts = input.oiLong < input.oiShort;\\n        uint netOi = moreShorts\\n            ? input.oiShort - input.oiLong\\n            : input.oiLong - input.oiShort;\\n\\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\\n                input.feePerBlock *\\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) /\\n                (1e18 ** input.feeExponent)\\n            : 0; // 1e10 (%)\\n\\n        require(_delta <= type(uint64).max, \\\"OVERFLOW\\\");\\n        delta = uint64(_delta);\\n\\n        newAccFeeLong = moreShorts\\n            ? input.accFeeLong\\n            : input.accFeeLong + delta;\\n        newAccFeeShort = moreShorts\\n            ? input.accFeeShort + delta\\n            : input.accFeeShort;\\n    }\\n\\n    function getPairGroupAccFeesDeltas(\\n        uint i,\\n        PairGroup[] memory pairGroups,\\n        InitialAccFees memory initialFees,\\n        uint pairIndex,\\n        bool long,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen)\\n    {\\n        PairGroup memory group = pairGroups[i];\\n\\n        beforeTradeOpen = group.block < initialFees.block;\\n\\n        if (i == pairGroups.length - 1) {\\n            // Last active group\\n            deltaGroup = getGroupPendingAccFee(\\n                group.groupIndex,\\n                currentBlock,\\n                long\\n            );\\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\\n        } else {\\n            // Previous groups\\n            PairGroup memory nextGroup = pairGroups[i + 1];\\n\\n            // If it's not the first group to be before the trade was opened then fee is 0\\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\\n                return (0, 0, beforeTradeOpen);\\n            }\\n\\n            deltaGroup = long\\n                ? nextGroup.prevGroupAccFeeLong\\n                : nextGroup.prevGroupAccFeeShort;\\n            deltaPair = long\\n                ? nextGroup.pairAccFeeLong\\n                : nextGroup.pairAccFeeShort;\\n        }\\n\\n        if (beforeTradeOpen) {\\n            deltaGroup -= initialFees.accGroupFee;\\n            deltaPair -= initialFees.accPairFee;\\n        } else {\\n            deltaGroup -= (\\n                long ? group.initialAccFeeLong : group.initialAccFeeShort\\n            );\\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\\n        }\\n    }\\n\\n    // Pair acc fees helpers\\n    function getPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta)\\n    {\\n        Pair memory pair = pairs[pairIndex];\\n\\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestWETH(\\n            pairIndex\\n        );\\n\\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                pair.accFeeLong,\\n                pair.accFeeShort,\\n                pairOiLong,\\n                pairOiShort,\\n                pair.feePerBlock,\\n                currentBlock,\\n                pair.accLastUpdatedBlock,\\n                pairOis[pairIndex].max,\\n                pair.feeExponent\\n            )\\n        );\\n    }\\n\\n    function getPairPendingAccFee(\\n        uint pairIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(\\n            pairIndex,\\n            currentBlock\\n        );\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setPairPendingAccFees(\\n        uint pairIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(\\n            pairIndex,\\n            currentBlock\\n        );\\n\\n        Pair storage pair = pairs[pairIndex];\\n\\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\\n            currentBlock\\n        );\\n\\n        emit PairAccFeesUpdated(\\n            pairIndex,\\n            currentBlock,\\n            pair.accFeeLong,\\n            pair.accFeeShort\\n        );\\n    }\\n\\n    // Group acc fees helpers\\n    function getGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    )\\n        public\\n        view\\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta)\\n    {\\n        Group memory group = groups[groupIndex];\\n\\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\\n            PendingAccFeesInput(\\n                group.accFeeLong,\\n                group.accFeeShort,\\n                (uint(group.oiLong) * 1e18) / P_1,\\n                (uint(group.oiShort) * 1e18) / P_1,\\n                group.feePerBlock,\\n                currentBlock,\\n                group.accLastUpdatedBlock,\\n                uint72(group.maxOi),\\n                groupFeeExponents[groupIndex]\\n            )\\n        );\\n    }\\n\\n    function getGroupPendingAccFee(\\n        uint16 groupIndex,\\n        uint currentBlock,\\n        bool long\\n    ) public view returns (uint64 accFee) {\\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(\\n            groupIndex,\\n            currentBlock\\n        );\\n        return long ? accFeeLong : accFeeShort;\\n    }\\n\\n    function _setGroupPendingAccFees(\\n        uint16 groupIndex,\\n        uint currentBlock\\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(\\n            groupIndex,\\n            currentBlock\\n        );\\n\\n        Group storage group = groups[groupIndex];\\n\\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\\n            currentBlock\\n        );\\n\\n        emit GroupAccFeesUpdated(\\n            groupIndex,\\n            currentBlock,\\n            group.accFeeLong,\\n            group.accFeeShort\\n        );\\n    }\\n\\n    // Interaction with callbacks\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeWETH, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external override onlyCallbacks {\\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        (\\n            uint64 pairAccFeeLong,\\n            uint64 pairAccFeeShort\\n        ) = _setPairPendingAccFees(pairIndex, currentBlock);\\n        (\\n            uint64 groupAccFeeLong,\\n            uint64 groupAccFeeShort\\n        ) = _setGroupPendingAccFees(groupIndex, currentBlock);\\n\\n        _setGroupOi(groupIndex, long, open, positionSizeWETH);\\n\\n        if (open) {\\n            InitialAccFees memory initialFees = InitialAccFees(\\n                long ? pairAccFeeLong : pairAccFeeShort,\\n                long ? groupAccFeeLong : groupAccFeeShort,\\n                ChainUtils.getUint48BlockNumber(currentBlock),\\n                0 // placeholder\\n            );\\n\\n            initialAccFees[trader][pairIndex][index] = initialFees;\\n\\n            emit TradeInitialAccFeesStored(\\n                trader,\\n                pairIndex,\\n                index,\\n                initialFees.accPairFee,\\n                initialFees.accGroupFee\\n            );\\n        }\\n\\n        emit TradeActionHandled(\\n            trader,\\n            pairIndex,\\n            index,\\n            open,\\n            long,\\n            positionSizeWETH\\n        );\\n    }\\n\\n    // Important trade getters\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory input\\n    ) public view returns (uint fee) {\\n        InitialAccFees memory initialFees = initialAccFees[input.trader][\\n            input.pairIndex\\n        ][input.index];\\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\\n\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n\\n        PairGroup memory firstPairGroup;\\n        if (pairGroups.length > 0) {\\n            firstPairGroup = pairGroups[0];\\n        }\\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\\n        if (\\n            pairGroups.length == 0 || firstPairGroup.block > initialFees.block\\n        ) {\\n            fee = ((\\n                pairGroups.length == 0\\n                    ? getPairPendingAccFee(\\n                        input.pairIndex,\\n                        currentBlock,\\n                        input.long\\n                    )\\n                    : (\\n                        input.long\\n                            ? firstPairGroup.pairAccFeeLong\\n                            : firstPairGroup.pairAccFeeShort\\n                    )\\n            ) - initialFees.accPairFee);\\n        }\\n\\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\\n        for (uint i = pairGroups.length; i > 0; ) {\\n            (\\n                uint64 deltaGroup,\\n                uint64 deltaPair,\\n                bool beforeTradeOpen\\n            ) = getPairGroupAccFeesDeltas(\\n                    i - 1,\\n                    pairGroups,\\n                    initialFees,\\n                    input.pairIndex,\\n                    input.long,\\n                    currentBlock\\n                );\\n\\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\\n\\n            // Exit loop at first group before trade was open\\n            if (beforeTradeOpen) break;\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (WETH)\\n    }\\n\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint) {\\n        return\\n            pairInfos.getTradeLiquidationPricePure(\\n                input.openPrice,\\n                input.long,\\n                input.collateral,\\n                input.leverage,\\n                pairInfos.getTradeRolloverFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.collateral\\n                ) +\\n                    getTradeBorrowingFee(\\n                        BorrowingFeeInput(\\n                            input.trader,\\n                            input.pairIndex,\\n                            input.index,\\n                            input.long,\\n                            input.collateral,\\n                            input.leverage\\n                        )\\n                    ),\\n                pairInfos.getTradeFundingFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.long,\\n                    input.collateral,\\n                    input.leverage\\n                )\\n            );\\n    }\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint) {\\n        return\\n            pairInfos.getTradePartialLiquidationPrice(\\n                input.openPrice,\\n                input.long,\\n                input.collateral,\\n                input.leverage,\\n                pairInfos.getTradeRolloverFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.collateral\\n                ) +\\n                    getTradeBorrowingFee(\\n                        BorrowingFeeInput(\\n                            input.trader,\\n                            input.pairIndex,\\n                            input.index,\\n                            input.long,\\n                            input.collateral,\\n                            input.leverage\\n                        )\\n                    ),\\n                pairInfos.getTradeFundingFee(\\n                    input.trader,\\n                    input.pairIndex,\\n                    input.index,\\n                    input.long,\\n                    input.collateral,\\n                    input.leverage\\n                )\\n            );\\n    }\\n\\n    // Public getters\\n    function getPairOpenInterestWETH(\\n        uint pairIndex\\n    ) public view returns (uint, uint) {\\n        return (\\n            storageT.openInterestWETH(pairIndex, 0),\\n            storageT.openInterestWETH(pairIndex, 1)\\n        );\\n    }\\n\\n    function getPairGroupIndex(\\n        uint pairIndex\\n    ) public view returns (uint16 groupIndex) {\\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\\n        return\\n            pairGroups.length == 0\\n                ? 0\\n                : pairGroups[pairGroups.length - 1].groupIndex;\\n    }\\n\\n    // External getters\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeWETH // 1e18\\n    ) external view returns (bool) {\\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\\n        return\\n            (g.maxOi == 0) ||\\n            ((long ? g.oiLong : g.oiShort) + (positionSizeWETH * P_1) / 1e18 <=\\n                g.maxOi);\\n    }\\n\\n    function getGroup(\\n        uint16 groupIndex\\n    ) external view returns (Group memory, uint48) {\\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\\n    }\\n\\n    function getPair(\\n        uint pairIndex\\n    ) external view returns (Pair memory, PairOi memory) {\\n        return (pairs[pairIndex], pairOis[pairIndex]);\\n    }\\n\\n    function getAllPairs()\\n        external\\n        view\\n        returns (Pair[] memory, PairOi[] memory)\\n    {\\n        uint len = AggregatorInterfaceV1_4(address(storageT.priceAggregator()))\\n            .pairsStorage()\\n            .pairsCount();\\n        Pair[] memory p = new Pair[](len);\\n        PairOi[] memory pairOi = new PairOi[](len);\\n\\n        for (uint i; i < len; ) {\\n            p[i] = pairs[i];\\n            pairOi[i] = pairOis[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (p, pairOi);\\n    }\\n\\n    function getGroups(\\n        uint16[] calldata indices\\n    ) external view returns (Group[] memory, uint48[] memory) {\\n        Group[] memory g = new Group[](indices.length);\\n        uint48[] memory e = new uint48[](indices.length);\\n        uint len = indices.length;\\n\\n        for (uint i; i < len; ) {\\n            g[i] = groups[indices[i]];\\n            e[i] = groupFeeExponents[indices[i]];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return (g, e);\\n    }\\n\\n    function getTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    )\\n        external\\n        view\\n        returns (\\n            InitialAccFees memory borrowingFees,\\n            PairInfosInterface.TradeInitialAccFees memory otherFees\\n        )\\n    {\\n        borrowingFees = initialAccFees[trader][pairIndex][index];\\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\\n    }\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint) {\\n        return pairOis[pairIndex].max;\\n    }\\n}\\n\",\"keccak256\":\"0x29aaf67d36a1730e08d08b91c153bdbbd85451ebf385da8b3b237c8d72720139\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x13048ee9355f58d301d80d4e8262cd1ac4de1723544f03fccbbc1eb1e96a6fbf\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xd008d26590a5588f3972b3ecf875584a8c6f73dac938dfe02feefeb3c2bd3c60\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x14a668265e52a52637f06d864fef4ec0e4b47feb4d18f37d70fd22898149922a\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0xe6903da90872488f13bdde146e3423a09b54f4a3a0838a51871469fd7bef8fa6\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32a4e5c386170b9da2ec3cd5ac53a4c82c64cfe94f41990f635cd18a73eccf73\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf439723f853b013721f9cc98c3e9ace8f63d178512916f35307be17c090b2a12\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    event OpenningInterestUpated(\\n        uint256 indexed pairIndex,\\n        uint256 indexed openingInterestShort,\\n        uint256 indexed openingInterestLong\\n    );\\n\\n    event TradeOpen(Trade indexed t);\\n\\n    event TradeClose(Trade indexed t);\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0xa19659fba0b03423e47b86410ef3dac74b997c1db803d3533f9505b888b96a9a\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc09affeca51307b54b5f7d9dfe274687a0fa6bbafd9185155c305ff8cafbc0ca\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614ad3806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a55760003560e01c806390895ff1116100ef578063bb219c7511610092578063bb219c75146106d3578063bcb7887114610757578063bdf391cc1461076a578063ce67edfb1461078b578063d62745051461079e578063e3e98a75146107c1578063f800ece914610800578063ff933fc41461081657600080fd5b806390895ff1146104d0578063911510dd14610579578063930842aa146105a157806393e0e533146105b4578063b0baf5d4146105c7578063b2c9dd8b146105da578063b91ac788146105ed578063b94ffa1c146106a357600080fd5b8063485cc95511610157578063485cc9551461039257806364d372c6146103a7578063651501b5146103ba578063706faf3a146103cd5780637b64112b146103e05780637cbd3c98146103f35780638ee1caa71461046d5780638f694238146104aa57600080fd5b80630f8df7e0146101aa5780631346b0ff146101ea57806316fff074146102155780631ab5911a1461022e57806322005202146102595780632d28a8171461027a5780633979324d1461029b575b600080fd5b6101bd6101b8366004613c31565b610837565b604080516001600160401b0394851681529390921660208401521515908201526060015b60405180910390f35b6001546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020016101e1565b6000546101fd906201000090046001600160a01b031681565b61024161023c366004613dc1565b6109b7565b6040516001600160401b0390911681526020016101e1565b61026c610267366004613e45565b6109e4565b6040516101e1929190613f0c565b61028d610288366004613faf565b610c10565b6040519081526020016101e1565b6103276102a9366004614039565b60026020819052600091825260409091208054600182015491909201546001600160701b0380841693600160701b810490911692600160e01b90910463ffffffff16916001600160401b0380831692600160401b810490911691600160801b820465ffffffffffff1691600160b01b90046001600160501b03169088565b604080516001600160701b03998a16815298909716602089015263ffffffff909516958701959095526001600160401b0392831660608701529116608085015265ffffffffffff1660a08401526001600160501b0390911660c083015260e0820152610100016101e1565b6103a56103a0366004614054565b610f2a565b005b61028d6103b536600461408d565b6110d6565b6103a56103c83660046140a5565b611377565b61028d6103db36600461408d565b611492565b6102416103ee36600461413e565b6114bb565b61040661040136600461416c565b6114ca565b6040805183516001600160401b039081168252602080860151909116818301528483015165ffffffffffff16828401526060948501516001600160501b031694820194909452825160808201529282015160a08401520151151560c082015260e0016101e1565b61048061047b3660046141a1565b6115ff565b604080516001600160401b03948516815292841660208401529216918101919091526060016101e1565b6104bd6104b83660046141c3565b61182e565b60405161ffff90911681526020016101e1565b6105386104de36600461416c565b60046020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b810490911690600160801b810465ffffffffffff1690600160b01b90046001600160501b031684565b604080516001600160401b03958616815294909316602085015265ffffffffffff909116918301919091526001600160501b031660608201526080016101e1565b61058c6105873660046141c3565b611950565b604080519283526020830191909152016101e1565b6103a56105af3660046141dc565b611a4d565b6104806105c2366004614246565b611b02565b6103a56105d53660046142e0565b611cc3565b6103a56105e836600461430a565b611d74565b6106576105fb3660046141c3565b6003602052600090815260409020600181015460029091015463ffffffff8216916001600160401b03600160201b8204811692600160601b83049091169165ffffffffffff600160a01b8204811692600160d01b909204169086565b6040805163ffffffff9790971687526001600160401b039586166020880152939094169285019290925265ffffffffffff908116606085015216608083015260a082015260c0016101e1565b61028d6106b13660046141c3565b600090815260056020526040902054600160901b90046001600160481b031690565b6107206106e13660046141c3565b6005602052600090815260409020546001600160481b0380821691600160481b8104821691600160901b82041690600160d81b900464ffffffffff1684565b604080516001600160481b0395861681529385166020850152919093169082015264ffffffffff90911660608201526080016101e1565b610480610765366004614394565b611e95565b61077d6107783660046141c3565b612034565b6040516101e1929190614531565b6103a5610799366004614553565b612221565b6107b16107ac3660046145ba565b612573565b60405190151581526020016101e1565b6107e96107cf3660046141c3565b60066020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff90911681526020016101e1565b610808612699565b6040516101e19291906145f2565b610829610824366004614039565b612aaa565b6040516101e1929190614697565b600080600080888a8151811061084f5761084f6146bc565b60200260200101519050876040015165ffffffffffff16816020015165ffffffffffff161091506001895161088491906146e8565b8a036108ab5780516108979086886109b7565b93506108a48786886114bb565b925061093b565b6000896108b98c60016146ff565b815181106108c9576108c96146bc565b602002602001015190508280156108f85750886040015165ffffffffffff16816020015165ffffffffffff1611155b1561090b576000809450945050506109ab565b8661091a578060a00151610920565b80608001515b945086610931578060e00151610937565b8060c001515b9350505b81156109665760208801516109509085614717565b885190945061095f9084614717565b92506109a9565b8561097557806060015161097b565b80604001515b6109859085614717565b935085610996578060e0015161099c565b8060c001515b6109a69084614717565b92505b505b96509650969350505050565b60008060006109c68686611e95565b5091509150836109d657806109d8565b815b925050505b9392505050565b6060806000836001600160401b03811115610a0157610a01613ad4565b604051908082528060200260200182016040528015610a3a57816020015b610a27613a54565b815260200190600190039081610a1f5790505b5090506000846001600160401b03811115610a5757610a57613ad4565b604051908082528060200260200182016040528015610a80578160200160208202803683370190505b5090508460005b81811015610c015760026000898984818110610aa557610aa56146bc565b9050602002016020810190610aba9190614039565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c08301526002015460e08201528451859083908110610b7557610b756146bc565b602002602001018190525060066000898984818110610b9657610b966146bc565b9050602002016020810190610bab9190614039565b61ffff16815260200190815260200160002060009054906101000a900465ffffffffffff16838281518110610be257610be26146bc565b65ffffffffffff90921660209283029190910190910152600101610a87565b509193509150505b9250929050565b80516001600160a01b03166000908152600460209081526040808320828501805185529083528184208286015185528352818420825160808101845290546001600160401b038082168352600160401b82041682860152600160801b810465ffffffffffff1682850152600160b01b90046001600160501b0316606082015290518452600383528184208054835181860281018601909452808452919385939290849084015b82821015610d67576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101610cb6565b5050505090506000610d77612b6a565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152909150825115610de85782600081518110610ddd57610ddd6146bc565b602002602001015190505b82511580610e0d5750836040015165ffffffffffff16816020015165ffffffffffff16115b15610e61578351835115610e38578660600151610e2e578160e00151610e4b565b8160c00151610e4b565b610e4b87602001518489606001516114bb565b610e559190614717565b6001600160401b031694505b82515b8015610ee45760008080610e8e610e7c6001866146e8565b888a8d602001518e606001518b610837565b925092509250816001600160401b0316836001600160401b031611610eb35781610eb5565b825b610ec8906001600160401b03168a6146ff565b98508015610ed857505050610ee4565b50505060001901610e64565b5060646402540be400868860a001518960800151610f02919061473f565b610f0c919061473f565b610f16919061475e565b610f20919061475e565b9695505050505050565b600054610100900460ff1615808015610f4a5750600054600160ff909116105b80610f645750303b158015610f64575060005460ff166001145b610fcc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610fef576000805461ff0019166101001790555b6001600160a01b0383161580159061100f57506001600160a01b03821615155b61104a5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610fc3565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110d1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001546000906001600160a01b031663ab7baf0460608401356110ff60a0860160808701614780565b8560a001358660c0013561117a6040518060c001604052808a600001602081019061112a919061479d565b6001600160a01b0316815260208b810135908201526040808c01359082015260600161115c60a08c0160808d01614780565b151581526020018a60a0013581526020018a60c00135815250610c10565b6001546001600160a01b03166358f796bc61119860208c018c61479d565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260208d013560248301528c0135604482015260a08c01356064820152608401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906147ba565b61122791906146ff565b6001546001600160a01b031663f6c50efe61124560208c018c61479d565b8b602001358c604001358d60800160208101906112629190614780565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301521515606482015260a08c0135608482015260c08c013560a482015260c401602060405180830381865afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f291906147ba565b6040516001600160e01b031960e089901b1681526004810196909652931515602486015260448501929092526064840152608483015260a482015260c401602060405180830381865afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906147ba565b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ee91906147d3565b6001600160a01b0316336001600160a01b03161461141e5760405162461bcd60e51b8152600401610fc3906147f0565b8281811461143e5760405162461bcd60e51b8152600401610fc390614816565b60005b8181101561148a5761148286868381811061145e5761145e6146bc565b90506020020135858584818110611477576114776146bc565b905060800201612bf0565b600101611441565b505050505050565b6001546000906001600160a01b0316636bcbe86060608401356110ff60a0860160808701614780565b60008060006109c686866115ff565b604080516080810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905292830152906001600160a01b0385811660008181526004602081815260408084208a85528252808420898552825292839020835160808101855290546001600160401b038082168352600160401b82041692820192909252600160801b820465ffffffffffff1681850152600160b01b9091046001600160501b031660608201526001549251632f6ac02760e11b815291820193909352602481018890526044810187905291945090911690635ed5804e90606401606060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f5919061483c565b9050935093915050565b6000828152600360209081526040808320815181546101009481028201850190935260e0810183815285948594859492849290918491879085015b828210156116eb576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161163a565b50505090825250600182015463ffffffff811660208301526001600160401b03600160201b820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c090910152905060008061176388611950565b9150915061181d60405180610120016040528085604001516001600160401b0316815260200185606001516001600160401b03168152602001848152602001838152602001856020015163ffffffff168152602001898152602001856080015165ffffffffffff168152602001600560008c815260200190815260200160002060000160129054906101000a90046001600160481b03166001600160481b031681526020018560a0015165ffffffffffff16815250611b02565b919a90995090975095505050505050565b600081815260036020908152604080832080548251818502810185019093528083528493849084015b82821015611908576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101611857565b505050509050805160001461194757806001825161192691906146e8565b81518110611936576119366146bc565b6020026020010151600001516109dd565b60009392505050565b600080546040516377a9fdcf60e01b8152600481018490526024810183905282916201000090046001600160a01b0316906377a9fdcf90604401602060405180830381865afa1580156119a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cb91906147ba565b6000546040516377a9fdcf60e01b81526004810186905260016024820152620100009091046001600160a01b0316906377a9fdcf90604401602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4491906147ba565b91509150915091565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906147d3565b6001600160a01b0316336001600160a01b031614611af45760405162461bcd60e51b8152600401610fc3906147f0565b611afe8282613445565b5050565b60008060008360c001518460a001511015611b4d5760405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606401610fc3565b6060840151604085015110600081611b785785606001518660400151611b7391906146e8565b611b8c565b85604001518660600151611b8c91906146e8565b90506000808760e001516001600160481b0316118015611bb95750600087610100015165ffffffffffff16115b611bc4576000611c50565b610100870151611bdc90670de0b6b3a7640000614981565b61010088015160e08901516001600160481b0316611bff856402540be40061473f565b611c09919061475e565b611c139190614981565b886080015163ffffffff168960c001518a60a00151611c3291906146e8565b611c3c919061473f565b611c46919061473f565b611c50919061475e565b90506001600160401b03811115611c795760405162461bcd60e51b8152600401610fc390614995565b80935082611c93578651611c8e9085906149b7565b611c96565b86515b955082611ca7578660200151611cb7565b838760200151611cb791906149b7565b94505050509193909250565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906147d3565b6001600160a01b0316336001600160a01b031614611d6a5760405162461bcd60e51b8152600401610fc3906147f0565b611afe8282612bf0565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb91906147d3565b6001600160a01b0316336001600160a01b031614611e1b5760405162461bcd60e51b8152600401610fc3906147f0565b82818114611e3b5760405162461bcd60e51b8152600401610fc390614816565b60005b8181101561148a57611e8d868683818110611e5b57611e5b6146bc565b9050602002016020810190611e709190614039565b858584818110611e8257611e826146bc565b905060600201613445565b600101611e3e565b61ffff8216600090815260026020818152604080842081516101008101835281546001600160701b038082168352600160701b8204811683870152600160e01b90910463ffffffff168285015260018301546001600160401b0380821660608501908152600160401b8304821660808601908152600160801b840465ffffffffffff1660a0870152600160b01b9093046001600160501b031660c0860152949097015460e08401528451610120810186529351871684525190951693820193909352825185948594936120259392908301916402540be40091611f819116670de0b6b3a764000061473f565b611f8b919061475e565b81526020016402540be40084602001516001600160701b0316670de0b6b3a7640000611fb7919061473f565b611fc1919061475e565b815260408085015163ffffffff166020808401919091528183018a905260a08087015165ffffffffffff908116606086015260c08801516001600160481b0316608086015261ffff8d16600090815260069093529290912054909116910152611b02565b91989097509095509350505050565b61203c613a98565b6040805160808101825260008082526020808301829052828401829052606083018290528582526003815283822060058252848320855182546101009481028201850190975260e0810187815295969295919490938693859392859285015b8282101561214c576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161209b565b50505090825250600182015463ffffffff8116602080840191909152600160201b82046001600160401b03908116604080860191909152600160601b8404909116606080860191909152600160a01b840465ffffffffffff908116608080880191909152600160d01b9095041660a086015260029095015460c0909401939093528251918201835294546001600160481b038082168352600160481b8204811696830196909652600160901b810490951691810191909152600160d81b90930464ffffffffff16908301529590945092505050565b600060029054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229791906147d3565b6001600160a01b0316336001600160a01b0316146122e85760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610fc3565b60006122f38661182e565b905060006122ff612b6a565b905060008061230e8984613637565b9150915060008061231f868661373b565b9150915061232f86888a8c613828565b871561250557600060405180608001604052808961234d578561234f565b865b6001600160401b0316815260200189612368578361236a565b845b6001600160401b0316815260200161238188613a28565b65ffffffffffff16815260200160006001600160501b0316815250905080600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160166101000a8154816001600160501b0302191690836001600160501b031602179055509050508b8d6001600160a01b03167faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e608d846000015185602001516040516124fb939291909283526001600160401b03918216602084015216604082015260600190565b60405180910390a3505b8a8c6001600160a01b03167f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f8c8b8b8e60405161255d9493929190938452911515602084015215156040830152606082015260800190565b60405180910390a3505050505050505050505050565b600080600260006125838761182e565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c0830181905260029091015460e08301529091501580612690575060c08101516001600160501b0316670de0b6b3a764000061265e6402540be4008661473f565b612668919061475e565b8561267757826020015161267a565b82515b6001600160701b031661268d91906146ff565b11155b95945050505050565b60608060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271491906147d3565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277591906147d3565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d691906147ba565b90506000816001600160401b038111156127f2576127f2613ad4565b60405190808252806020026020018201604052801561282b57816020015b612818613a98565b8152602001906001900390816128105790505b5090506000826001600160401b0381111561284857612848613ad4565b60405190808252806020026020018201604052801561289a57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128665790505b50905060005b83811015612a9f576000818152600360209081526040808320815181546101009481028201850190935260e08101838152909491938593919285929185015b82821015612990576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016128df565b50505090825250600182015463ffffffff811660208301526001600160401b03600160201b820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c0909101528351849083908110612a0e57612a0e6146bc565b602090810291909101810191909152600082815260058252604090819020815160808101835290546001600160481b038082168352600160481b8204811694830194909452600160901b810490931691810191909152600160d81b90910464ffffffffff1660608201528251839083908110612a8c57612a8c6146bc565b60209081029190910101526001016128a0565b509094909350915050565b612ab2613a54565b5061ffff16600090815260026020818152604080842060068352938190205481516101008101835285546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018401546001600160401b038082166060850152600160401b820416608084015265ffffffffffff600160801b8204811660a0850152600160b01b9091046001600160501b031660c0840152939092015460e082015292911690565b600061a4b1461480612b7e575062066eed46145b15612beb5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be691906147ba565b905090565b504390565b6001612c0260608301604084016149e2565b65ffffffffffff1610158015612c3057506003612c2560608301604084016149e2565b65ffffffffffff1611155b612c4c5760405162461bcd60e51b8152600401610fc3906149fd565b600082815260036020526040812090612c648461182e565b90506000612c70612b6a565b9050612c7c8582613637565b505061ffff8216612c906020860186614039565b61ffff16146132f657612ca3828261373b565b50612cbc9050612cb66020860186614039565b8261373b565b5050600080612cca87611950565b91509150612cdc846001600085613828565b612ce98460008084613828565b612d02612cf96020880188614039565b60018085613828565b612d1c612d126020880188614039565b6000600184613828565b6000600281612d2e60208a018a614039565b61ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b0316815260200160028201548152505090506000600260008761ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b031681526020016002820154815250509050866000016040518061012001604052808a600001602081019061302e9190614039565b61ffff16815260200161304088613a28565b65ffffffffffff16815260200184606001516001600160401b0316815260200184608001516001600160401b0316815260200183606001516001600160401b0316815260200183608001516001600160401b031681526020018960010160049054906101000a90046001600160401b03166001600160401b0316815260200189600101600c9054906101000a90046001600160401b03166001600160401b0316815260200160006001600160401b0316815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160000160106101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160000160186101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060c08201518160010160086101000a8154816001600160401b0302191690836001600160401b0316021790555060e08201518160010160106101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160010160186101000a8154816001600160401b0302191690836001600160401b0316021790555050508760000160208101906132bb9190614039565b61ffff168661ffff168a7f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d46860405160405180910390a4505050505b6133066040850160208601614a25565b60018401805463ffffffff191663ffffffff9290921691909117905561333260608501604086016149e2565b60018401805465ffffffffffff92909216600160d01b026001600160d01b0390921691909117905561336a6080850160608601614a40565b600086815260056020908152604090912080546001600160481b0393909316600160901b0268ffffffffffffffffff60901b19909316929092179091556133b390850185614039565b61ffff16857f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef46133e96040880160208901614a25565b6133f96060890160408a016149e2565b61340960808a0160608b01614a40565b6040805163ffffffff909416845265ffffffffffff90921660208401526001600160481b03169082015260600160405180910390a35050505050565b60008261ffff16116134835760405162461bcd60e51b8152602060048201526007602482015266047524f55505f360cc1b6044820152606401610fc3565b600161349560608301604084016149e2565b65ffffffffffff16101580156134c3575060036134b860608301604084016149e2565b65ffffffffffff1611155b6134df5760405162461bcd60e51b8152600401610fc3906149fd565b6134f0826134eb612b6a565b61373b565b505061ffff821660009081526002602090815260409091209061351590830183614a25565b815463ffffffff91909116600160e01b026001600160e01b039091161781556135446040830160208401614a40565b6001820180546001600160b01b03166001600160481b0392909216600160b01b0291909117905561357b60608301604084016149e2565b61ffff84166000818152600660209081526040909120805465ffffffffffff191665ffffffffffff9490941693909317909255907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681906135dd90850185614a25565b6135ed6040860160208701614a40565b6135fd60608701604088016149e2565b6040805163ffffffff90941684526001600160481b03909216602084015265ffffffffffff169082015260600160405180910390a2505050565b60008061364484846115ff565b5060008681526003602052604090206001810180546001600160401b03808616600160201b026bffffffffffffffff0000000019918616600160601b0291909116640100000000600160a01b03199092169190911717905591935091506136aa84613a28565b60018201805465ffffffffffff92909216600160a01b0265ffffffffffff60a01b199092169190911790819055604080518681526001600160401b03600160201b840481166020830152600160601b9093049092169082015285907ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4906060015b60405180910390a2509250929050565b6000806137488484611e95565b5061ffff861660009081526002602052604090206001810180546001600160801b031916600160401b6001600160401b038581169190910267ffffffffffffffff19169190911790851617905591935091506137a384613a28565b60018201805465ffffffffffff92909216600160801b0265ffffffffffff60801b198316811791829055604080518881526001600160401b03928316948316949094176020850152600160401b909204169082015261ffff8616907fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e9060600161372b565b61ffff8416600081815260026020526040812091156139bb57670de0b6b3a76400006138596402540be4008561473f565b613863919061475e565b92506001600160701b0383111561388c5760405162461bcd60e51b8152600401610fc390614995565b5081841561391657836138d95781546001600160701b038083169116116138bd5781546001600160701b03166138bf565b805b82546138d491906001600160701b0316614a5b565b6138ef565b81546138ef9082906001600160701b0316614a7b565b82546dffffffffffffffffffffffffffff19166001600160701b03919091161782556139bb565b836139705781546001600160701b03808316600160701b909204161161394d578154600160701b90046001600160701b031661394f565b805b825461396b9190600160701b90046001600160701b0316614a5b565b61398d565b815461398d908290600160701b90046001600160701b0316614a7b565b82546001600160701b0391909116600160701b026dffffffffffffffffffffffffffff60701b199091161782555b8154604080516001600160701b0380851682528084166020830152600160701b90930490921690820152841515908615159061ffff8916907f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339060600160405180910390a4505050505050565b600065ffffffffffff821115613a505760405162461bcd60e51b8152600401610fc390614995565b5090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040805160e081018252606080825260006020830181905292820183905281018290526080810182905260a0810182905260c081019190915290565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613b0d57613b0d613ad4565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613b3b57613b3b613ad4565b604052919050565b803561ffff81168114613b5557600080fd5b919050565b803565ffffffffffff81168114613b5557600080fd5b80356001600160401b0381168114613b5557600080fd5b600060808284031215613b9957600080fd5b604051608081018181106001600160401b0382111715613bbb57613bbb613ad4565b604052905080613bca83613b70565b8152613bd860208401613b70565b6020820152613be960408401613b5a565b604082015260608301356001600160501b0381168114613c0857600080fd5b6060919091015292915050565b8015158114613c2357600080fd5b50565b8035613b5581613c15565b60008060008060008061012080888a031215613c4c57600080fd5b873596506020808901356001600160401b0380821115613c6b57600080fd5b818b0191508b601f830112613c7f57600080fd5b813581811115613c9157613c91613ad4565b613c9f848260051b01613b13565b818152848101925090850283018401908d821115613cbc57600080fd5b928401925b81841015613d825785848f031215613cd95760008081fd5b613ce1613aea565b613cea85613b43565b8152613cf7868601613b5a565b868201526040613d08818701613b70565b908201526060613d19868201613b70565b908201526080613d2a868201613b70565b9082015260a0613d3b868201613b70565b9082015260c0613d4c868201613b70565b9082015260e0613d5d868201613b70565b90820152610100613d6f868201613b70565b9082015283529285019291840191613cc1565b809a50505050505050613d988860408901613b87565b935060c08701359250613dad60e08801613c26565b915061010087013590509295509295509295565b600080600060608486031215613dd657600080fd5b613ddf84613b43565b9250602084013591506040840135613df681613c15565b809150509250925092565b60008083601f840112613e1357600080fd5b5081356001600160401b03811115613e2a57600080fd5b6020830191508360208260051b8501011115610c0957600080fd5b60008060208385031215613e5857600080fd5b82356001600160401b03811115613e6e57600080fd5b613e7a85828601613e01565b90969095509350505050565b6001600160701b038082511683528060208301511660208401525063ffffffff604082015116604083015260608101516001600160401b038082166060850152806080840151166080850152505065ffffffffffff60a08201511660a083015260c0810151613f0060c08401826001600160501b03169052565b5060e090810151910152565b604080825283519082018190526000906020906060840190828701845b82811015613f5057613f3c848351613e86565b610100939093019290840190600101613f29565b5050508381038285015284518082528583019183019060005b81811015613f8d57835165ffffffffffff1683529284019291840191600101613f69565b5090979650505050505050565b6001600160a01b0381168114613c2357600080fd5b600060c08284031215613fc157600080fd5b60405160c081018181106001600160401b0382111715613fe357613fe3613ad4565b6040528235613ff181613f9a565b808252506020830135602082015260408301356040820152606083013561401781613c15565b60608201526080838101359082015260a0928301359281019290925250919050565b60006020828403121561404b57600080fd5b6109dd82613b43565b6000806040838503121561406757600080fd5b823561407281613f9a565b9150602083013561408281613f9a565b809150509250929050565b600060e0828403121561409f57600080fd5b50919050565b600080600080604085870312156140bb57600080fd5b84356001600160401b03808211156140d257600080fd5b6140de88838901613e01565b909650945060208701359150808211156140f757600080fd5b818701915087601f83011261410b57600080fd5b81358181111561411a57600080fd5b8860208260071b850101111561412f57600080fd5b95989497505060200194505050565b60008060006060848603121561415357600080fd5b83359250602084013591506040840135613df681613c15565b60008060006060848603121561418157600080fd5b833561418c81613f9a565b95602085013595506040909401359392505050565b600080604083850312156141b457600080fd5b50508035926020909101359150565b6000602082840312156141d557600080fd5b5035919050565b60008082840360808112156141f057600080fd5b6141f984613b43565b92506060601f198201121561420d57600080fd5b506020830190509250929050565b803563ffffffff81168114613b5557600080fd5b80356001600160481b0381168114613b5557600080fd5b6000610120828403121561425957600080fd5b614261613aea565b61426a83613b70565b815261427860208401613b70565b6020820152604083013560408201526060830135606082015261429d6080840161421b565b608082015260a083013560a082015260c083013560c08201526142c260e0840161422f565b60e08201526101006142d5818501613b5a565b908201529392505050565b60008082840360a08112156142f457600080fd5b833592506080601f198201121561420d57600080fd5b6000806000806040858703121561432057600080fd5b84356001600160401b038082111561433757600080fd5b61434388838901613e01565b9096509450602087013591508082111561435c57600080fd5b818701915087601f83011261437057600080fd5b81358181111561437f57600080fd5b88602060608302850101111561412f57600080fd5b600080604083850312156143a757600080fd5b6143b083613b43565b946020939093013593505050565b805160e08084528151848201819052600092610100916020918201918388019190865b82811015614471578451805161ffff1685528281015165ffffffffffff16838601526040808201516001600160401b039081169187019190915260608083015182169087015260808083015182169087015260a08083015182169087015260c0808301518216908701528882015181168987015290870151168685015293810193610120909301926001016143e1565b508781015163ffffffff1690890152506040808701516001600160401b0390811691890191909152606080880151918216908901529350608086015193506144c3608088018565ffffffffffff169052565b60a086015193506144de60a088018565ffffffffffff169052565b60c086015160c08801528094505050505092915050565b6001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b60a08152600061454460a08301856143be565b90506109dd60208301846144f5565b60008060008060008060c0878903121561456c57600080fd5b863561457781613f9a565b9550602087013594506040870135935060608701359250608087013561459c81613c15565b915060a08701356145ac81613c15565b809150509295509295509295565b6000806000606084860312156145cf57600080fd5b8335925060208401356145e181613c15565b929592945050506040919091013590565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561464957605f198887030185526146378683516143be565b9550938201939082019060010161461b565b50508584038187015286518085528782019482019350915060005b8281101561468a576146778486516144f5565b9381019360809390930192600101614664565b5091979650505050505050565b61012081016146a68285613e86565b65ffffffffffff83166101008301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156146fa576146fa6146d2565b500390565b60008219821115614712576147126146d2565b500190565b60006001600160401b0383811690831681811015614737576147376146d2565b039392505050565b6000816000190483118215151615614759576147596146d2565b500290565b60008261477b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561479257600080fd5b81356109dd81613c15565b6000602082840312156147af57600080fd5b81356109dd81613f9a565b6000602082840312156147cc57600080fd5b5051919050565b6000602082840312156147e557600080fd5b81516109dd81613f9a565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b60006060828403121561484e57600080fd5b604051606081018181106001600160401b038211171561487057614870613ad4565b80604052508251815260208301516020820152604083015161489181613c15565b60408201529392505050565b600181815b808511156148d85781600019048211156148be576148be6146d2565b808516156148cb57918102915b93841c93908002906148a2565b509250929050565b6000826148ef57506001611371565b816148fc57506000611371565b8160018114614912576002811461491c57614938565b6001915050611371565b60ff84111561492d5761492d6146d2565b50506001821b611371565b5060208310610133831016604e8410600b841016171561495b575081810a611371565b614965838361489d565b8060001904821115614979576149796146d2565b029392505050565b60006109dd65ffffffffffff8416836148e0565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b60006001600160401b038083168185168083038211156149d9576149d96146d2565b01949350505050565b6000602082840312156149f457600080fd5b6109dd82613b5a565b6020808252600e908201526d15d493d391d7d1561413d391539560921b604082015260600190565b600060208284031215614a3757600080fd5b6109dd8261421b565b600060208284031215614a5257600080fd5b6109dd8261422f565b60006001600160701b0383811690831681811015614737576147376146d2565b60006001600160701b038083168185168083038211156149d9576149d96146d256fea2646970667358221220680bdfc21c3643e9fd15d27ed22faff202c37c8f83c64df45e25a2e59d20576d64736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a55760003560e01c806390895ff1116100ef578063bb219c7511610092578063bb219c75146106d3578063bcb7887114610757578063bdf391cc1461076a578063ce67edfb1461078b578063d62745051461079e578063e3e98a75146107c1578063f800ece914610800578063ff933fc41461081657600080fd5b806390895ff1146104d0578063911510dd14610579578063930842aa146105a157806393e0e533146105b4578063b0baf5d4146105c7578063b2c9dd8b146105da578063b91ac788146105ed578063b94ffa1c146106a357600080fd5b8063485cc95511610157578063485cc9551461039257806364d372c6146103a7578063651501b5146103ba578063706faf3a146103cd5780637b64112b146103e05780637cbd3c98146103f35780638ee1caa71461046d5780638f694238146104aa57600080fd5b80630f8df7e0146101aa5780631346b0ff146101ea57806316fff074146102155780631ab5911a1461022e57806322005202146102595780632d28a8171461027a5780633979324d1461029b575b600080fd5b6101bd6101b8366004613c31565b610837565b604080516001600160401b0394851681529390921660208401521515908201526060015b60405180910390f35b6001546101fd906001600160a01b031681565b6040516001600160a01b0390911681526020016101e1565b6000546101fd906201000090046001600160a01b031681565b61024161023c366004613dc1565b6109b7565b6040516001600160401b0390911681526020016101e1565b61026c610267366004613e45565b6109e4565b6040516101e1929190613f0c565b61028d610288366004613faf565b610c10565b6040519081526020016101e1565b6103276102a9366004614039565b60026020819052600091825260409091208054600182015491909201546001600160701b0380841693600160701b810490911692600160e01b90910463ffffffff16916001600160401b0380831692600160401b810490911691600160801b820465ffffffffffff1691600160b01b90046001600160501b03169088565b604080516001600160701b03998a16815298909716602089015263ffffffff909516958701959095526001600160401b0392831660608701529116608085015265ffffffffffff1660a08401526001600160501b0390911660c083015260e0820152610100016101e1565b6103a56103a0366004614054565b610f2a565b005b61028d6103b536600461408d565b6110d6565b6103a56103c83660046140a5565b611377565b61028d6103db36600461408d565b611492565b6102416103ee36600461413e565b6114bb565b61040661040136600461416c565b6114ca565b6040805183516001600160401b039081168252602080860151909116818301528483015165ffffffffffff16828401526060948501516001600160501b031694820194909452825160808201529282015160a08401520151151560c082015260e0016101e1565b61048061047b3660046141a1565b6115ff565b604080516001600160401b03948516815292841660208401529216918101919091526060016101e1565b6104bd6104b83660046141c3565b61182e565b60405161ffff90911681526020016101e1565b6105386104de36600461416c565b60046020908152600093845260408085208252928452828420905282529020546001600160401b0380821691600160401b810490911690600160801b810465ffffffffffff1690600160b01b90046001600160501b031684565b604080516001600160401b03958616815294909316602085015265ffffffffffff909116918301919091526001600160501b031660608201526080016101e1565b61058c6105873660046141c3565b611950565b604080519283526020830191909152016101e1565b6103a56105af3660046141dc565b611a4d565b6104806105c2366004614246565b611b02565b6103a56105d53660046142e0565b611cc3565b6103a56105e836600461430a565b611d74565b6106576105fb3660046141c3565b6003602052600090815260409020600181015460029091015463ffffffff8216916001600160401b03600160201b8204811692600160601b83049091169165ffffffffffff600160a01b8204811692600160d01b909204169086565b6040805163ffffffff9790971687526001600160401b039586166020880152939094169285019290925265ffffffffffff908116606085015216608083015260a082015260c0016101e1565b61028d6106b13660046141c3565b600090815260056020526040902054600160901b90046001600160481b031690565b6107206106e13660046141c3565b6005602052600090815260409020546001600160481b0380821691600160481b8104821691600160901b82041690600160d81b900464ffffffffff1684565b604080516001600160481b0395861681529385166020850152919093169082015264ffffffffff90911660608201526080016101e1565b610480610765366004614394565b611e95565b61077d6107783660046141c3565b612034565b6040516101e1929190614531565b6103a5610799366004614553565b612221565b6107b16107ac3660046145ba565b612573565b60405190151581526020016101e1565b6107e96107cf3660046141c3565b60066020526000908152604090205465ffffffffffff1681565b60405165ffffffffffff90911681526020016101e1565b610808612699565b6040516101e19291906145f2565b610829610824366004614039565b612aaa565b6040516101e1929190614697565b600080600080888a8151811061084f5761084f6146bc565b60200260200101519050876040015165ffffffffffff16816020015165ffffffffffff161091506001895161088491906146e8565b8a036108ab5780516108979086886109b7565b93506108a48786886114bb565b925061093b565b6000896108b98c60016146ff565b815181106108c9576108c96146bc565b602002602001015190508280156108f85750886040015165ffffffffffff16816020015165ffffffffffff1611155b1561090b576000809450945050506109ab565b8661091a578060a00151610920565b80608001515b945086610931578060e00151610937565b8060c001515b9350505b81156109665760208801516109509085614717565b885190945061095f9084614717565b92506109a9565b8561097557806060015161097b565b80604001515b6109859085614717565b935085610996578060e0015161099c565b8060c001515b6109a69084614717565b92505b505b96509650969350505050565b60008060006109c68686611e95565b5091509150836109d657806109d8565b815b925050505b9392505050565b6060806000836001600160401b03811115610a0157610a01613ad4565b604051908082528060200260200182016040528015610a3a57816020015b610a27613a54565b815260200190600190039081610a1f5790505b5090506000846001600160401b03811115610a5757610a57613ad4565b604051908082528060200260200182016040528015610a80578160200160208202803683370190505b5090508460005b81811015610c015760026000898984818110610aa557610aa56146bc565b9050602002016020810190610aba9190614039565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c08301526002015460e08201528451859083908110610b7557610b756146bc565b602002602001018190525060066000898984818110610b9657610b966146bc565b9050602002016020810190610bab9190614039565b61ffff16815260200190815260200160002060009054906101000a900465ffffffffffff16838281518110610be257610be26146bc565b65ffffffffffff90921660209283029190910190910152600101610a87565b509193509150505b9250929050565b80516001600160a01b03166000908152600460209081526040808320828501805185529083528184208286015185528352818420825160808101845290546001600160401b038082168352600160401b82041682860152600160801b810465ffffffffffff1682850152600160b01b90046001600160501b0316606082015290518452600383528184208054835181860281018601909452808452919385939290849084015b82821015610d67576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101610cb6565b5050505090506000610d77612b6a565b6040805161012081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152909150825115610de85782600081518110610ddd57610ddd6146bc565b602002602001015190505b82511580610e0d5750836040015165ffffffffffff16816020015165ffffffffffff16115b15610e61578351835115610e38578660600151610e2e578160e00151610e4b565b8160c00151610e4b565b610e4b87602001518489606001516114bb565b610e559190614717565b6001600160401b031694505b82515b8015610ee45760008080610e8e610e7c6001866146e8565b888a8d602001518e606001518b610837565b925092509250816001600160401b0316836001600160401b031611610eb35781610eb5565b825b610ec8906001600160401b03168a6146ff565b98508015610ed857505050610ee4565b50505060001901610e64565b5060646402540be400868860a001518960800151610f02919061473f565b610f0c919061473f565b610f16919061475e565b610f20919061475e565b9695505050505050565b600054610100900460ff1615808015610f4a5750600054600160ff909116105b80610f645750303b158015610f64575060005460ff166001145b610fcc5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610fef576000805461ff0019166101001790555b6001600160a01b0383161580159061100f57506001600160a01b03821615155b61104a5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610fc3565b6000805462010000600160b01b031916620100006001600160a01b038681169190910291909117909155600180546001600160a01b03191691841691909117905580156110d1576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b6001546000906001600160a01b031663ab7baf0460608401356110ff60a0860160808701614780565b8560a001358660c0013561117a6040518060c001604052808a600001602081019061112a919061479d565b6001600160a01b0316815260208b810135908201526040808c01359082015260600161115c60a08c0160808d01614780565b151581526020018a60a0013581526020018a60c00135815250610c10565b6001546001600160a01b03166358f796bc61119860208c018c61479d565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015260208d013560248301528c0135604482015260a08c01356064820152608401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d91906147ba565b61122791906146ff565b6001546001600160a01b031663f6c50efe61124560208c018c61479d565b8b602001358c604001358d60800160208101906112629190614780565b6040516001600160e01b031960e087901b1681526001600160a01b039094166004850152602484019290925260448301521515606482015260a08c0135608482015260c08c013560a482015260c401602060405180830381865afa1580156112ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f291906147ba565b6040516001600160e01b031960e089901b1681526004810196909652931515602486015260448501929092526064840152608483015260a482015260c401602060405180830381865afa15801561134d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061137191906147ba565b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ee91906147d3565b6001600160a01b0316336001600160a01b03161461141e5760405162461bcd60e51b8152600401610fc3906147f0565b8281811461143e5760405162461bcd60e51b8152600401610fc390614816565b60005b8181101561148a5761148286868381811061145e5761145e6146bc565b90506020020135858584818110611477576114776146bc565b905060800201612bf0565b600101611441565b505050505050565b6001546000906001600160a01b0316636bcbe86060608401356110ff60a0860160808701614780565b60008060006109c686866115ff565b604080516080810182526000808252602080830182905282840182905260608084018390528451908101855282815290810182905292830152906001600160a01b0385811660008181526004602081815260408084208a85528252808420898552825292839020835160808101855290546001600160401b038082168352600160401b82041692820192909252600160801b820465ffffffffffff1681850152600160b01b9091046001600160501b031660608201526001549251632f6ac02760e11b815291820193909352602481018890526044810187905291945090911690635ed5804e90606401606060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f5919061483c565b9050935093915050565b6000828152600360209081526040808320815181546101009481028201850190935260e0810183815285948594859492849290918491879085015b828210156116eb576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161163a565b50505090825250600182015463ffffffff811660208301526001600160401b03600160201b820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c090910152905060008061176388611950565b9150915061181d60405180610120016040528085604001516001600160401b0316815260200185606001516001600160401b03168152602001848152602001838152602001856020015163ffffffff168152602001898152602001856080015165ffffffffffff168152602001600560008c815260200190815260200160002060000160129054906101000a90046001600160481b03166001600160481b031681526020018560a0015165ffffffffffff16815250611b02565b919a90995090975095505050505050565b600081815260036020908152604080832080548251818502810185019093528083528493849084015b82821015611908576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e086015292049091166101008301529083529092019101611857565b505050509050805160001461194757806001825161192691906146e8565b81518110611936576119366146bc565b6020026020010151600001516109dd565b60009392505050565b600080546040516377a9fdcf60e01b8152600481018490526024810183905282916201000090046001600160a01b0316906377a9fdcf90604401602060405180830381865afa1580156119a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cb91906147ba565b6000546040516377a9fdcf60e01b81526004810186905260016024820152620100009091046001600160a01b0316906377a9fdcf90604401602060405180830381865afa158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4491906147ba565b91509150915091565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac491906147d3565b6001600160a01b0316336001600160a01b031614611af45760405162461bcd60e51b8152600401610fc3906147f0565b611afe8282613445565b5050565b60008060008360c001518460a001511015611b4d5760405162461bcd60e51b815260206004820152600b60248201526a212627a1a5afa7a92222a960a91b6044820152606401610fc3565b6060840151604085015110600081611b785785606001518660400151611b7391906146e8565b611b8c565b85604001518660600151611b8c91906146e8565b90506000808760e001516001600160481b0316118015611bb95750600087610100015165ffffffffffff16115b611bc4576000611c50565b610100870151611bdc90670de0b6b3a7640000614981565b61010088015160e08901516001600160481b0316611bff856402540be40061473f565b611c09919061475e565b611c139190614981565b886080015163ffffffff168960c001518a60a00151611c3291906146e8565b611c3c919061473f565b611c46919061473f565b611c50919061475e565b90506001600160401b03811115611c795760405162461bcd60e51b8152600401610fc390614995565b80935082611c93578651611c8e9085906149b7565b611c96565b86515b955082611ca7578660200151611cb7565b838760200151611cb791906149b7565b94505050509193909250565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3a91906147d3565b6001600160a01b0316336001600160a01b031614611d6a5760405162461bcd60e51b8152600401610fc3906147f0565b611afe8282612bf0565b600160009054906101000a90046001600160a01b03166001600160a01b031663481c6a756040518163ffffffff1660e01b8152600401602060405180830381865afa158015611dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611deb91906147d3565b6001600160a01b0316336001600160a01b031614611e1b5760405162461bcd60e51b8152600401610fc3906147f0565b82818114611e3b5760405162461bcd60e51b8152600401610fc390614816565b60005b8181101561148a57611e8d868683818110611e5b57611e5b6146bc565b9050602002016020810190611e709190614039565b858584818110611e8257611e826146bc565b905060600201613445565b600101611e3e565b61ffff8216600090815260026020818152604080842081516101008101835281546001600160701b038082168352600160701b8204811683870152600160e01b90910463ffffffff168285015260018301546001600160401b0380821660608501908152600160401b8304821660808601908152600160801b840465ffffffffffff1660a0870152600160b01b9093046001600160501b031660c0860152949097015460e08401528451610120810186529351871684525190951693820193909352825185948594936120259392908301916402540be40091611f819116670de0b6b3a764000061473f565b611f8b919061475e565b81526020016402540be40084602001516001600160701b0316670de0b6b3a7640000611fb7919061473f565b611fc1919061475e565b815260408085015163ffffffff166020808401919091528183018a905260a08087015165ffffffffffff908116606086015260c08801516001600160481b0316608086015261ffff8d16600090815260069093529290912054909116910152611b02565b91989097509095509350505050565b61203c613a98565b6040805160808101825260008082526020808301829052828401829052606083018290528582526003815283822060058252848320855182546101009481028201850190975260e0810187815295969295919490938693859392859285015b8282101561214c576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e08601529204909116610100830152908352909201910161209b565b50505090825250600182015463ffffffff8116602080840191909152600160201b82046001600160401b03908116604080860191909152600160601b8404909116606080860191909152600160a01b840465ffffffffffff908116608080880191909152600160d01b9095041660a086015260029095015460c0909401939093528251918201835294546001600160481b038082168352600160481b8204811696830196909652600160901b810490951691810191909152600160d81b90930464ffffffffff16908301529590945092505050565b600060029054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612273573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061229791906147d3565b6001600160a01b0316336001600160a01b0316146122e85760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b6044820152606401610fc3565b60006122f38661182e565b905060006122ff612b6a565b905060008061230e8984613637565b9150915060008061231f868661373b565b9150915061232f86888a8c613828565b871561250557600060405180608001604052808961234d578561234f565b865b6001600160401b0316815260200189612368578361236a565b845b6001600160401b0316815260200161238188613a28565b65ffffffffffff16815260200160006001600160501b0316815250905080600460008f6001600160a01b03166001600160a01b0316815260200190815260200160002060008e815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060408201518160000160106101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160166101000a8154816001600160501b0302191690836001600160501b031602179055509050508b8d6001600160a01b03167faa00ca5c6f282cb9f35953ecb0eaf8e39c95b7c8df114efac12162a85c085e608d846000015185602001516040516124fb939291909283526001600160401b03918216602084015216604082015260600190565b60405180910390a3505b8a8c6001600160a01b03167f66baa1848f5d4d14567e9bc527e5608778c86e512490d413cfafc9250327308f8c8b8b8e60405161255d9493929190938452911515602084015215156040830152606082015260800190565b60405180910390a3505050505050505050505050565b600080600260006125838761182e565b61ffff168152602080820192909252604090810160002081516101008101835281546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018101546001600160401b038082166060850152600160401b8204166080840152600160801b810465ffffffffffff1660a0840152600160b01b90046001600160501b031660c0830181905260029091015460e08301529091501580612690575060c08101516001600160501b0316670de0b6b3a764000061265e6402540be4008661473f565b612668919061475e565b8561267757826020015161267a565b82515b6001600160701b031661268d91906146ff565b11155b95945050505050565b60608060008060029054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156126f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061271491906147d3565b6001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015612751573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277591906147d3565b6001600160a01b031663b81b2b716040518163ffffffff1660e01b8152600401602060405180830381865afa1580156127b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127d691906147ba565b90506000816001600160401b038111156127f2576127f2613ad4565b60405190808252806020026020018201604052801561282b57816020015b612818613a98565b8152602001906001900390816128105790505b5090506000826001600160401b0381111561284857612848613ad4565b60405190808252806020026020018201604052801561289a57816020015b6040805160808101825260008082526020808301829052928201819052606082015282526000199092019101816128665790505b50905060005b83811015612a9f576000818152600360209081526040808320815181546101009481028201850190935260e08101838152909491938593919285929185015b82821015612990576000848152602090819020604080516101208101825260028602909201805461ffff8116845265ffffffffffff62010000820416848601526001600160401b03600160401b808304821694860194909452600160801b80830482166060870152600160c01b928390048216608087015260019384015480831660a0880152948504821660c08701528404811660e0860152920490911661010083015290835290920191016128df565b50505090825250600182015463ffffffff811660208301526001600160401b03600160201b820481166040840152600160601b820416606083015265ffffffffffff600160a01b820481166080840152600160d01b9091041660a082015260029091015460c0909101528351849083908110612a0e57612a0e6146bc565b602090810291909101810191909152600082815260058252604090819020815160808101835290546001600160481b038082168352600160481b8204811694830194909452600160901b810490931691810191909152600160d81b90910464ffffffffff1660608201528251839083908110612a8c57612a8c6146bc565b60209081029190910101526001016128a0565b509094909350915050565b612ab2613a54565b5061ffff16600090815260026020818152604080842060068352938190205481516101008101835285546001600160701b038082168352600160701b82041694820194909452600160e01b90930463ffffffff169183019190915260018401546001600160401b038082166060850152600160401b820416608084015265ffffffffffff600160801b8204811660a0850152600160b01b9091046001600160501b031660c0840152939092015460e082015292911690565b600061a4b1461480612b7e575062066eed46145b15612beb5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be691906147ba565b905090565b504390565b6001612c0260608301604084016149e2565b65ffffffffffff1610158015612c3057506003612c2560608301604084016149e2565b65ffffffffffff1611155b612c4c5760405162461bcd60e51b8152600401610fc3906149fd565b600082815260036020526040812090612c648461182e565b90506000612c70612b6a565b9050612c7c8582613637565b505061ffff8216612c906020860186614039565b61ffff16146132f657612ca3828261373b565b50612cbc9050612cb66020860186614039565b8261373b565b5050600080612cca87611950565b91509150612cdc846001600085613828565b612ce98460008084613828565b612d02612cf96020880188614039565b60018085613828565b612d1c612d126020880188614039565b6000600184613828565b6000600281612d2e60208a018a614039565b61ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b0316815260200160028201548152505090506000600260008761ffff1661ffff168152602001908152602001600020604051806101000160405290816000820160009054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201600e9054906101000a90046001600160701b03166001600160701b03166001600160701b0316815260200160008201601c9054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820160009054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160089054906101000a90046001600160401b03166001600160401b03166001600160401b031681526020016001820160109054906101000a900465ffffffffffff1665ffffffffffff1665ffffffffffff1681526020016001820160169054906101000a90046001600160501b03166001600160501b03166001600160501b031681526020016002820154815250509050866000016040518061012001604052808a600001602081019061302e9190614039565b61ffff16815260200161304088613a28565b65ffffffffffff16815260200184606001516001600160401b0316815260200184608001516001600160401b0316815260200183606001516001600160401b0316815260200183608001516001600160401b031681526020018960010160049054906101000a90046001600160401b03166001600160401b0316815260200189600101600c9054906101000a90046001600160401b03166001600160401b0316815260200160006001600160401b0316815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548161ffff021916908361ffff16021790555060208201518160000160026101000a81548165ffffffffffff021916908365ffffffffffff16021790555060408201518160000160086101000a8154816001600160401b0302191690836001600160401b0316021790555060608201518160000160106101000a8154816001600160401b0302191690836001600160401b0316021790555060808201518160000160186101000a8154816001600160401b0302191690836001600160401b0316021790555060a08201518160010160006101000a8154816001600160401b0302191690836001600160401b0316021790555060c08201518160010160086101000a8154816001600160401b0302191690836001600160401b0316021790555060e08201518160010160106101000a8154816001600160401b0302191690836001600160401b031602179055506101008201518160010160186101000a8154816001600160401b0302191690836001600160401b0316021790555050508760000160208101906132bb9190614039565b61ffff168661ffff168a7f5beb7d73e1c3cd532d47c9e896931df26d9be450a833bd5fe1ace6bf5690d46860405160405180910390a4505050505b6133066040850160208601614a25565b60018401805463ffffffff191663ffffffff9290921691909117905561333260608501604086016149e2565b60018401805465ffffffffffff92909216600160d01b026001600160d01b0390921691909117905561336a6080850160608601614a40565b600086815260056020908152604090912080546001600160481b0393909316600160901b0268ffffffffffffffffff60901b19909316929092179091556133b390850185614039565b61ffff16857f1caa8de744ea74fb9e0c2f32b7fed3b30ea426105a6b73926010be6372458ef46133e96040880160208901614a25565b6133f96060890160408a016149e2565b61340960808a0160608b01614a40565b6040805163ffffffff909416845265ffffffffffff90921660208401526001600160481b03169082015260600160405180910390a35050505050565b60008261ffff16116134835760405162461bcd60e51b8152602060048201526007602482015266047524f55505f360cc1b6044820152606401610fc3565b600161349560608301604084016149e2565b65ffffffffffff16101580156134c3575060036134b860608301604084016149e2565b65ffffffffffff1611155b6134df5760405162461bcd60e51b8152600401610fc3906149fd565b6134f0826134eb612b6a565b61373b565b505061ffff821660009081526002602090815260409091209061351590830183614a25565b815463ffffffff91909116600160e01b026001600160e01b039091161781556135446040830160208401614a40565b6001820180546001600160b01b03166001600160481b0392909216600160b01b0291909117905561357b60608301604084016149e2565b61ffff84166000818152600660209081526040909120805465ffffffffffff191665ffffffffffff9490941693909317909255907ffe3f382c07994321b091a508fb27d2cec41f6dfa9f52b97a01af5b992fdc1681906135dd90850185614a25565b6135ed6040860160208701614a40565b6135fd60608701604088016149e2565b6040805163ffffffff90941684526001600160481b03909216602084015265ffffffffffff169082015260600160405180910390a2505050565b60008061364484846115ff565b5060008681526003602052604090206001810180546001600160401b03808616600160201b026bffffffffffffffff0000000019918616600160601b0291909116640100000000600160a01b03199092169190911717905591935091506136aa84613a28565b60018201805465ffffffffffff92909216600160a01b0265ffffffffffff60a01b199092169190911790819055604080518681526001600160401b03600160201b840481166020830152600160601b9093049092169082015285907ffc346088168e874385f54275cfc143d52a459a0fdc016c1bb6c237097ef27bf4906060015b60405180910390a2509250929050565b6000806137488484611e95565b5061ffff861660009081526002602052604090206001810180546001600160801b031916600160401b6001600160401b038581169190910267ffffffffffffffff19169190911790851617905591935091506137a384613a28565b60018201805465ffffffffffff92909216600160801b0265ffffffffffff60801b198316811791829055604080518881526001600160401b03928316948316949094176020850152600160401b909204169082015261ffff8616907fd246da22fc6064e2fae4f4affdb9425eac12bebcf4f08fb3892f08480513752e9060600161372b565b61ffff8416600081815260026020526040812091156139bb57670de0b6b3a76400006138596402540be4008561473f565b613863919061475e565b92506001600160701b0383111561388c5760405162461bcd60e51b8152600401610fc390614995565b5081841561391657836138d95781546001600160701b038083169116116138bd5781546001600160701b03166138bf565b805b82546138d491906001600160701b0316614a5b565b6138ef565b81546138ef9082906001600160701b0316614a7b565b82546dffffffffffffffffffffffffffff19166001600160701b03919091161782556139bb565b836139705781546001600160701b03808316600160701b909204161161394d578154600160701b90046001600160701b031661394f565b805b825461396b9190600160701b90046001600160701b0316614a5b565b61398d565b815461398d908290600160701b90046001600160701b0316614a7b565b82546001600160701b0391909116600160701b026dffffffffffffffffffffffffffff60701b199091161782555b8154604080516001600160701b0380851682528084166020830152600160701b90930490921690820152841515908615159061ffff8916907f946036ec838a96db6089510038e2de4a934fb985f2ba9ef85dd4166f622db2339060600160405180910390a4505050505050565b600065ffffffffffff821115613a505760405162461bcd60e51b8152600401610fc390614995565b5090565b6040805161010081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081019190915290565b6040805160e081018252606080825260006020830181905292820183905281018290526080810182905260a0810182905260c081019190915290565b634e487b7160e01b600052604160045260246000fd5b60405161012081016001600160401b0381118282101715613b0d57613b0d613ad4565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613b3b57613b3b613ad4565b604052919050565b803561ffff81168114613b5557600080fd5b919050565b803565ffffffffffff81168114613b5557600080fd5b80356001600160401b0381168114613b5557600080fd5b600060808284031215613b9957600080fd5b604051608081018181106001600160401b0382111715613bbb57613bbb613ad4565b604052905080613bca83613b70565b8152613bd860208401613b70565b6020820152613be960408401613b5a565b604082015260608301356001600160501b0381168114613c0857600080fd5b6060919091015292915050565b8015158114613c2357600080fd5b50565b8035613b5581613c15565b60008060008060008061012080888a031215613c4c57600080fd5b873596506020808901356001600160401b0380821115613c6b57600080fd5b818b0191508b601f830112613c7f57600080fd5b813581811115613c9157613c91613ad4565b613c9f848260051b01613b13565b818152848101925090850283018401908d821115613cbc57600080fd5b928401925b81841015613d825785848f031215613cd95760008081fd5b613ce1613aea565b613cea85613b43565b8152613cf7868601613b5a565b868201526040613d08818701613b70565b908201526060613d19868201613b70565b908201526080613d2a868201613b70565b9082015260a0613d3b868201613b70565b9082015260c0613d4c868201613b70565b9082015260e0613d5d868201613b70565b90820152610100613d6f868201613b70565b9082015283529285019291840191613cc1565b809a50505050505050613d988860408901613b87565b935060c08701359250613dad60e08801613c26565b915061010087013590509295509295509295565b600080600060608486031215613dd657600080fd5b613ddf84613b43565b9250602084013591506040840135613df681613c15565b809150509250925092565b60008083601f840112613e1357600080fd5b5081356001600160401b03811115613e2a57600080fd5b6020830191508360208260051b8501011115610c0957600080fd5b60008060208385031215613e5857600080fd5b82356001600160401b03811115613e6e57600080fd5b613e7a85828601613e01565b90969095509350505050565b6001600160701b038082511683528060208301511660208401525063ffffffff604082015116604083015260608101516001600160401b038082166060850152806080840151166080850152505065ffffffffffff60a08201511660a083015260c0810151613f0060c08401826001600160501b03169052565b5060e090810151910152565b604080825283519082018190526000906020906060840190828701845b82811015613f5057613f3c848351613e86565b610100939093019290840190600101613f29565b5050508381038285015284518082528583019183019060005b81811015613f8d57835165ffffffffffff1683529284019291840191600101613f69565b5090979650505050505050565b6001600160a01b0381168114613c2357600080fd5b600060c08284031215613fc157600080fd5b60405160c081018181106001600160401b0382111715613fe357613fe3613ad4565b6040528235613ff181613f9a565b808252506020830135602082015260408301356040820152606083013561401781613c15565b60608201526080838101359082015260a0928301359281019290925250919050565b60006020828403121561404b57600080fd5b6109dd82613b43565b6000806040838503121561406757600080fd5b823561407281613f9a565b9150602083013561408281613f9a565b809150509250929050565b600060e0828403121561409f57600080fd5b50919050565b600080600080604085870312156140bb57600080fd5b84356001600160401b03808211156140d257600080fd5b6140de88838901613e01565b909650945060208701359150808211156140f757600080fd5b818701915087601f83011261410b57600080fd5b81358181111561411a57600080fd5b8860208260071b850101111561412f57600080fd5b95989497505060200194505050565b60008060006060848603121561415357600080fd5b83359250602084013591506040840135613df681613c15565b60008060006060848603121561418157600080fd5b833561418c81613f9a565b95602085013595506040909401359392505050565b600080604083850312156141b457600080fd5b50508035926020909101359150565b6000602082840312156141d557600080fd5b5035919050565b60008082840360808112156141f057600080fd5b6141f984613b43565b92506060601f198201121561420d57600080fd5b506020830190509250929050565b803563ffffffff81168114613b5557600080fd5b80356001600160481b0381168114613b5557600080fd5b6000610120828403121561425957600080fd5b614261613aea565b61426a83613b70565b815261427860208401613b70565b6020820152604083013560408201526060830135606082015261429d6080840161421b565b608082015260a083013560a082015260c083013560c08201526142c260e0840161422f565b60e08201526101006142d5818501613b5a565b908201529392505050565b60008082840360a08112156142f457600080fd5b833592506080601f198201121561420d57600080fd5b6000806000806040858703121561432057600080fd5b84356001600160401b038082111561433757600080fd5b61434388838901613e01565b9096509450602087013591508082111561435c57600080fd5b818701915087601f83011261437057600080fd5b81358181111561437f57600080fd5b88602060608302850101111561412f57600080fd5b600080604083850312156143a757600080fd5b6143b083613b43565b946020939093013593505050565b805160e08084528151848201819052600092610100916020918201918388019190865b82811015614471578451805161ffff1685528281015165ffffffffffff16838601526040808201516001600160401b039081169187019190915260608083015182169087015260808083015182169087015260a08083015182169087015260c0808301518216908701528882015181168987015290870151168685015293810193610120909301926001016143e1565b508781015163ffffffff1690890152506040808701516001600160401b0390811691890191909152606080880151918216908901529350608086015193506144c3608088018565ffffffffffff169052565b60a086015193506144de60a088018565ffffffffffff169052565b60c086015160c08801528094505050505092915050565b6001600160481b038082511683528060208301511660208401528060408301511660408401525064ffffffffff60608201511660608301525050565b60a08152600061454460a08301856143be565b90506109dd60208301846144f5565b60008060008060008060c0878903121561456c57600080fd5b863561457781613f9a565b9550602087013594506040870135935060608701359250608087013561459c81613c15565b915060a08701356145ac81613c15565b809150509295509295509295565b6000806000606084860312156145cf57600080fd5b8335925060208401356145e181613c15565b929592945050506040919091013590565b6000604082016040835280855180835260608501915060608160051b8601019250602080880160005b8381101561464957605f198887030185526146378683516143be565b9550938201939082019060010161461b565b50508584038187015286518085528782019482019350915060005b8281101561468a576146778486516144f5565b9381019360809390930192600101614664565b5091979650505050505050565b61012081016146a68285613e86565b65ffffffffffff83166101008301529392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000828210156146fa576146fa6146d2565b500390565b60008219821115614712576147126146d2565b500190565b60006001600160401b0383811690831681811015614737576147376146d2565b039392505050565b6000816000190483118215151615614759576147596146d2565b500290565b60008261477b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561479257600080fd5b81356109dd81613c15565b6000602082840312156147af57600080fd5b81356109dd81613f9a565b6000602082840312156147cc57600080fd5b5051919050565b6000602082840312156147e557600080fd5b81516109dd81613f9a565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b60006060828403121561484e57600080fd5b604051606081018181106001600160401b038211171561487057614870613ad4565b80604052508251815260208301516020820152604083015161489181613c15565b60408201529392505050565b600181815b808511156148d85781600019048211156148be576148be6146d2565b808516156148cb57918102915b93841c93908002906148a2565b509250929050565b6000826148ef57506001611371565b816148fc57506000611371565b8160018114614912576002811461491c57614938565b6001915050611371565b60ff84111561492d5761492d6146d2565b50506001821b611371565b5060208310610133831016604e8410600b841016171561495b575081810a611371565b614965838361489d565b8060001904821115614979576149796146d2565b029392505050565b60006109dd65ffffffffffff8416836148e0565b6020808252600890820152674f564552464c4f5760c01b604082015260600190565b60006001600160401b038083168185168083038211156149d9576149d96146d2565b01949350505050565b6000602082840312156149f457600080fd5b6109dd82613b5a565b6020808252600e908201526d15d493d391d7d1561413d391539560921b604082015260600190565b600060208284031215614a3757600080fd5b6109dd8261421b565b600060208284031215614a5257600080fd5b6109dd8261422f565b60006001600160701b0383811690831681811015614737576147376146d2565b60006001600160701b038083168185168083038211156149d9576149d96146d256fea2646970667358221220680bdfc21c3643e9fd15d27ed22faff202c37c8f83c64df45e25a2e59d20576d64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2182,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2185,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3908,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterface)22861"
      },
      {
        "astId": 3911,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "pairInfos",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(PairInfosInterface)22132"
      },
      {
        "astId": 3916,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "groups",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint16,t_struct(Group)21140_storage)"
      },
      {
        "astId": 3921,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "pairs",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pair)21114_storage)"
      },
      {
        "astId": 3930,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "initialAccFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage)))"
      },
      {
        "astId": 3935,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "pairOis",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(PairOi)21123_storage)"
      },
      {
        "astId": 3939,
        "contract": "contracts/BorrowingFees.sol:BorrowingFees",
        "label": "groupFeeExponents",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint48)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PairGroup)21097_storage)dyn_storage": {
        "base": "t_struct(PairGroup)21097_storage",
        "encoding": "dynamic_array",
        "label": "struct BorrowingFeesInterface.PairGroup[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(PairInfosInterface)22132": {
        "encoding": "inplace",
        "label": "contract PairInfosInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterface)22861": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct BorrowingFeesInterface.InitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage))"
      },
      "t_mapping(t_uint16,t_struct(Group)21140_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct BorrowingFeesInterface.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)21140_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct BorrowingFeesInterface.InitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage)"
      },
      "t_mapping(t_uint256,t_struct(InitialAccFees)21149_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BorrowingFeesInterface.InitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(InitialAccFees)21149_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)21114_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BorrowingFeesInterface.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)21114_storage"
      },
      "t_mapping(t_uint256,t_struct(PairOi)21123_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BorrowingFeesInterface.PairOi)",
        "numberOfBytes": "32",
        "value": "t_struct(PairOi)21123_storage"
      },
      "t_mapping(t_uint256,t_uint48)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint48)",
        "numberOfBytes": "32",
        "value": "t_uint48"
      },
      "t_struct(Group)21140_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingFeesInterface.Group",
        "members": [
          {
            "astId": 21125,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "oiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 21127,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "oiShort",
            "offset": 14,
            "slot": "0",
            "type": "t_uint112"
          },
          {
            "astId": 21129,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "feePerBlock",
            "offset": 28,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 21131,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accFeeLong",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21133,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accFeeShort",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21135,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accLastUpdatedBlock",
            "offset": 16,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 21137,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "maxOi",
            "offset": 22,
            "slot": "1",
            "type": "t_uint80"
          },
          {
            "astId": 21139,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(InitialAccFees)21149_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingFeesInterface.InitialAccFees",
        "members": [
          {
            "astId": 21142,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accPairFee",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 21144,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accGroupFee",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 21146,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "block",
            "offset": 16,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 21148,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "_placeholder",
            "offset": 22,
            "slot": "0",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Pair)21114_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingFeesInterface.Pair",
        "members": [
          {
            "astId": 21101,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "groups",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(PairGroup)21097_storage)dyn_storage"
          },
          {
            "astId": 21103,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "feePerBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 21105,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accFeeLong",
            "offset": 4,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21107,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accFeeShort",
            "offset": 12,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21109,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "accLastUpdatedBlock",
            "offset": 20,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 21111,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "feeExponent",
            "offset": 26,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 21113,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "lastAccBlockWeightedMarketCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairGroup)21097_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingFeesInterface.PairGroup",
        "members": [
          {
            "astId": 21080,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "groupIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint16"
          },
          {
            "astId": 21082,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "block",
            "offset": 2,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 21084,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "initialAccFeeLong",
            "offset": 8,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 21086,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "initialAccFeeShort",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 21088,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "prevGroupAccFeeLong",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 21090,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "prevGroupAccFeeShort",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21092,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "pairAccFeeLong",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21094,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "pairAccFeeShort",
            "offset": 16,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 21096,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "_placeholder",
            "offset": 24,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PairOi)21123_storage": {
        "encoding": "inplace",
        "label": "struct BorrowingFeesInterface.PairOi",
        "members": [
          {
            "astId": 21116,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "long",
            "offset": 0,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 21118,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "short",
            "offset": 9,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 21120,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "max",
            "offset": 18,
            "slot": "0",
            "type": "t_uint72"
          },
          {
            "astId": 21122,
            "contract": "contracts/BorrowingFees.sol:BorrowingFees",
            "label": "_placeholder",
            "offset": 27,
            "slot": "0",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint112": {
        "encoding": "inplace",
        "label": "uint112",
        "numberOfBytes": "14"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint72": {
        "encoding": "inplace",
        "label": "uint72",
        "numberOfBytes": "9"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}