{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/Chainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CBORChainlink} from \"./vendor/CBORChainlink.sol\";\nimport {BufferChainlink} from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  ) internal pure returns (Chainlink.Request memory) {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(Request memory self, bytes memory data) internal pure {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(\n    Request memory self,\n    string memory key,\n    string memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(\n    Request memory self,\n    string memory key,\n    bytes memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(\n    Request memory self,\n    string memory key,\n    int256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(\n    Request memory self,\n    string memory key,\n    uint256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(\n    Request memory self,\n    string memory key,\n    string[] memory values\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ChainlinkClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/ChainlinkRequestInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport {ENSResolver as ENSResolver_Chainlink} from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\nabstract contract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\n  uint256 private constant AMOUNT_OVERRIDE = 0;\n  address private constant SENDER_OVERRIDE = address(0);\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private s_ens;\n  bytes32 private s_ensNode;\n  LinkTokenInterface private s_link;\n  OperatorInterface private s_oracle;\n  uint256 private s_requestCount = 1;\n  mapping(bytes32 => address) private s_pendingRequests;\n\n  event ChainlinkRequested(bytes32 indexed id);\n  event ChainlinkFulfilled(bytes32 indexed id);\n  event ChainlinkCancelled(bytes32 indexed id);\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddr address to operate the callback on\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddr,\n    bytes4 callbackFunctionSignature\n  ) internal pure returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\n    internal\n    view\n    returns (Chainlink.Request memory)\n  {\n    Chainlink.Request memory req;\n    return req.initialize(specId, address(this), callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      ChainlinkRequestInterface.oracleRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      address(this),\n      req.callbackFunctionId,\n      nonce,\n      ORACLE_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      OperatorInterface.operatorRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackFunctionId,\n      nonce,\n      OPERATOR_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param nonce used to generate the request ID\n   * @param payment The amount of LINK to send for the request\n   * @param encodedRequest data encoded for request type specific format\n   * @return requestId The request ID\n   */\n  function _rawRequest(\n    address oracleAddress,\n    uint256 nonce,\n    uint256 payment,\n    bytes memory encodedRequest\n  ) private returns (bytes32 requestId) {\n    requestId = keccak256(abi.encodePacked(this, nonce));\n    s_pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \"unable to transferAndCall to oracle\");\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  ) internal {\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\n    delete s_pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice the next request count to be used in generating a nonce\n   * @dev starts at 1 in order to ensure consistent gas cost\n   * @return returns the next request count to be used in a nonce\n   */\n  function getNextRequestCount() internal view returns (uint256) {\n    return s_requestCount;\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(address oracleAddress) internal {\n    s_oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(address linkAddress) internal {\n    s_link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() internal {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress() internal view returns (address) {\n    return address(s_link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress() internal view returns (address) {\n    return address(s_oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\n    s_pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\n    s_ens = ENSInterface(ensAddress);\n    s_ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS() internal {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(bytes32 requestId)\n    internal\n    recordChainlinkFulfillment(requestId)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\n    require(msg.sender == s_pendingRequests[requestId], \"Source must be the oracle of the request\");\n    delete s_pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 requestId) {\n    require(s_pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ENSInterface {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./ChainlinkRequestInterface.sol\";\n\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\n  function operatorRequest(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  ) external returns (bool);\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\n\n  function getAuthorizedSenders() external returns (address[] memory);\n\n  function setAuthorizedSenders(address[] calldata senders) external;\n\n  function getForwarder() external returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  ) external returns (bool);\n\n  function isAuthorizedSender(address node) external view returns (bool);\n\n  function withdraw(address recipient, uint256 amount) external;\n\n  function withdrawable() external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface PointerInterface {\n  function getAddress() external view returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary BufferChainlink {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    unchecked {\n      uint256 mask = (256**(32 - len)) - 1;\n      assembly {\n        let srcpart := and(mload(src), not(mask))\n        let destpart := and(mload(dest), mask)\n        mstore(dest, or(destpart, srcpart))\n      }\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    unchecked {\n      uint256 mask = (256**len) - 1;\n      // Right-align data\n      data = data >> (8 * (32 - len));\n      assembly {\n        // Memory address of the buffer data\n        let bufptr := mload(buf)\n        // Address = buffer address + sizeof(buffer length) + off + len\n        let dest := add(add(bufptr, off), len)\n        mstore(dest, or(and(mload(dest), not(mask)), data))\n        // Update buffer length if we extended it\n        if gt(add(off, len), mload(bufptr)) {\n          mstore(bufptr, add(off, len))\n        }\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = (256**len) - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.19;\n\nimport {BufferChainlink} from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if (value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if (value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if (value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n    if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n    }\n  }\n\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, uint(value));\n    } else if(value >= 0) {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\n    }\n  }\n\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n    buf.append(value);\n  }\n\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(value));\n  }\n\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\n  }\n\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n    buf.append(bytes(value));\n  }\n\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSResolver {\n  function addr(bytes32 node) public view virtual returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "contracts/contract5/interfaces/ChainlinkFeedInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface ChainlinkFeedInterfaceV5 {\n    function latestRoundData() external view returns (uint80, int, uint, uint, uint80);\n}"
    },
    "contracts/contract5/interfaces/IGToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IGToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceWETH() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\n}"
    },
    "contracts/contract5/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface NftInterfaceV5 {\n    function balanceOf(address) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n\n    function transferFrom(address, address, uint) external;\n\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\n}"
    },
    "contracts/contract5/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface PairsStorageInterfaceV6 {\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    function incrementCurrentOrderId() external returns (uint);\n\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\n\n    function pairFeed(uint) external view returns (Feed memory);\n\n    function pairSpreadP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function groupMaxCollateral(uint) external view returns (uint);\n\n    function groupCollateral(uint, bool) external view returns (uint);\n\n    function guaranteedSlEnabled(uint) external view returns (bool);\n\n    function pairOpenFeeP(uint) external view returns (uint);\n\n    function pairCloseFeeP(uint) external view returns (uint);\n\n    function pairOracleFeeP(uint) external view returns (uint);\n\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\n\n    function pairReferralFeeP(uint) external view returns (uint);\n\n    function pairMinLevPosWETH(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n}"
    },
    "contracts/contract5/interfaces/StorageInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"./TokenInterfaceV5.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IGToken.sol\";\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterfaceV5.sol\";\n\npragma solidity 0.8.17;\n\ninterface PoolInterfaceV5 {\n    function increaseAccTokensPerLp(uint) external;\n}\n\ninterface PausableInterfaceV5 {\n    function isPaused() external view returns (bool);\n}\n\ninterface StorageInterfaceV5 {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceWETH; // PRECISION\n        uint openInterestWETH; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (WETH or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function WETH() external view returns (TokenInterfaceV5);\n\n    function token() external view returns (TokenInterfaceV5);\n\n    function linkErc677() external view returns (TokenInterfaceV5);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\n\n    function vault() external view returns (IGToken);\n\n    function trading() external view returns (address);\n\n    function callbacks() external view returns (address);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferWETH(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\n\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\n\n    function openTrades(address, uint, uint) external view returns (Trade memory);\n\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestWETH(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    function fakeBlockNumber() external view returns (uint); // Testing\n}\n\ninterface IStateCopyUtils {\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\n\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\n}\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterfaceV5.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\n\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n\ninterface AggregatorInterfaceV6_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceWETH() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\n}\n\ninterface TradingCallbacksV6_4 {\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\n\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\n\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\n\n    function canExecuteTimeout() external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n}\n\n\ninterface AggregatorInterfaceV6_2{\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\n    function getPrice(uint,OrderType,uint) external returns(uint);\n    function tokenPriceWETH() external returns(uint);\n    function linkFee(uint,uint) external view returns(uint);\n    function openFeeP(uint) external view returns(uint);\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\n    function unregisterPendingSlOrder(uint orderId) external;\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\n}\n\ninterface AggregatorInterfaceV6_3_1 is AggregatorInterfaceV6_2 {\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\n}\n\ninterface TradingCallbacksV6_3_1 {\n    enum TradeType {MARKET, LIMIT}\n    struct SimplifiedTradeId{ address trader; uint pairIndex; uint index; TradeType tradeType; }\n    struct LastUpdated{ uint32 tp; uint32 sl; uint32 limit; uint32 created; }\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns(LastUpdated memory);\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\n    function canExecuteTimeout() external view returns(uint);\n}"
    },
    "contracts/contract5/interfaces/TokenInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface TokenInterfaceV5 {\n    function burn(address, uint256) external;\n\n    function mint(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(address, address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function hasRole(bytes32, address) external view returns (bool);\n\n    function approve(address, uint256) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n}"
    },
    "contracts/contracts6_2/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract Delegatable {\n    mapping(address => address) public delegations;\n    address private senderOverride;\n\n    function setDelegate(address delegate) external {\n        require(tx.origin == msg.sender, \"NO_CONTRACT\");\n\n        delegations[msg.sender] = delegate;\n    }\n\n    function removeDelegate() external {\n        delegations[msg.sender] = address(0);\n    }\n\n    function delegatedAction(address trader, bytes calldata call_data) external returns (bytes memory) {\n        require(delegations[trader] == msg.sender, \"DELEGATE_NOT_APPROVED\");\n\n        senderOverride = trader;\n        (bool success, bytes memory result) = address(this).delegatecall(call_data);\n        if (!success) {\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\n            if (result.length < 68) revert();\n            assembly {\n                result := add(result, 0x04)\n            }\n            revert(abi.decode(result, (string)));\n        }\n\n        senderOverride = address(0);\n\n        return result;\n    }\n\n    function _msgSender() public view returns (address) {\n        if (senderOverride == address(0)) {\n            return msg.sender;\n        } else {\n            return senderOverride;\n        }\n    }\n}"
    },
    "contracts/contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface GNSReferralsInterfaceV6_2 {\n    function registerPotentialReferrer(address trader, address referral) external;\n\n    function distributePotentialReward(\n        address trader,\n        uint volumeWETH,\n        uint pairOpenFeeP,\n        uint tokenPriceWETH\n    ) external returns (uint);\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\n\n    function getTraderReferrer(address trader) external view returns (address referrer);\n}"
    },
    "contracts/contracts6_2/interfaces/GNSStakingInterfaceV6_2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface GNSStakingInterfaceV6_2 {\n    function distributeRewardWETH(uint amount) external;\n}"
    },
    "contracts/contracts6_3/GNSNftRewardsV6_3_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n///DEPLOY need storage \nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport '../contract5/interfaces/StorageInterfaceV5.sol';\npragma solidity 0.8.17;\n\ncontract GNSNftRewardsV6_3_1 is Initializable {\n\n    // Contracts (constant)\n    StorageInterfaceV5 public storageT;\n\n    // Params (constant)\n    uint constant ROUND_LENGTH = 50;\n    uint constant MIN_TRIGGER_TIMEOUT = 1;\n    uint constant MIN_SAME_BLOCK_LIMIT = 5;\n    uint constant MAX_SAME_BLOCK_LIMIT = 50;\n    uint constant PRECISION = 1e10;  // 10 decimals\n\n    // Params (adjustable)\n    uint public triggerTimeout; // blocks\n    uint public sameBlockLimit; // bots\n\n    // Custom data types\n    struct TriggeredLimit{ address first; address[] sameBlock; uint block; uint240 linkFee; uint16 sameBlockLimit; }\n    struct TriggeredLimitId{ address trader; uint pairIndex; uint index; StorageInterfaceV5.LimitOrder order; }\n    struct RoundDetails{ uint240 tokens; uint16 totalEntries; }\n\n    enum OpenLimitOrderType{ LEGACY, REVERSAL, MOMENTUM }\n\n    // State\n    uint public currentOrder;                                               // current order in round\n    uint public currentRound;                                               // current round (1 round = 50 orders)\n\n    mapping(uint => RoundDetails) public roundTokens;                       // total token rewards and entries for a round\n    mapping(address => mapping(uint => uint)) public roundOrdersToClaim;    // orders to claim from a round (out of 50)\n\n    mapping(address => uint) public tokensToClaim;                          // rewards other than pool (first & same block)\n\n    mapping(\n        address => mapping(\n            uint => mapping(\n                uint => mapping(\n                    StorageInterfaceV5.LimitOrder => TriggeredLimit\n                )\n            )\n        )\n    ) public triggeredLimits;   // limits being triggered\n\n    mapping(address => mapping(uint => mapping(uint => OpenLimitOrderType))) public openLimitOrderTypes;\n    bool public stateCopied;\n\n    // Tracker to prevent multiple triggers from same address or same nft\n    mapping(bytes32 => bool) public botInUse;\n\n    // Statistics\n    mapping(address => uint) public tokensClaimed; // 1e18\n    uint public tokensClaimedTotal; // 1e18\n\n    // Events\n    event NumberUpdated(string name, uint value);\n\n    event TriggeredFirst(TriggeredLimitId id, address bot, uint linkFee);\n    event TriggeredSameBlock(TriggeredLimitId id, address bot, uint linkContribution);\n    event TriggerUnregistered(TriggeredLimitId id);\n    event TriggerRewarded(TriggeredLimitId id, address first, uint sameBlockCount, uint sameBlockLimit, uint reward);\n\n    event PoolTokensClaimed(address bot, uint fromRound, uint toRound, uint tokens);\n    event TokensClaimed(address bot, uint tokens);\n\n    function initialize(\n        StorageInterfaceV5 _storageT,\n        uint _triggerTimeout,\n        uint _sameBlockLimit\n    ) external initializer {\n        require(address(_storageT) != address(0) && _triggerTimeout >= MIN_TRIGGER_TIMEOUT\n            && _sameBlockLimit >= MIN_SAME_BLOCK_LIMIT && _sameBlockLimit <= MAX_SAME_BLOCK_LIMIT, \"WRONG_PARAMS\");\n\n        storageT = _storageT;\n\n        triggerTimeout = _triggerTimeout;\n        sameBlockLimit = _sameBlockLimit;\n\n        currentOrder = 1;\n    }\n\n    // Modifiers\n    modifier onlyGov(){ require(msg.sender == storageT.gov(), \"GOV_ONLY\"); _; }\n    modifier onlyTrading(){ require(msg.sender == storageT.trading(), \"TRADING_ONLY\"); _; }\n    modifier onlyCallbacks(){ require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\"); _; }\n\n    function copyOldLimitTypes(uint start, uint end) external onlyGov {\n        require(!stateCopied, \"COPY_DONE\");\n        require(start <= end, \"START_AFTER_END\");\n        \n        NftRewardsInterfaceV6_3_1 old;\n\n        if(block.chainid == 137) {\n            // Polygon Mainnet\n            old = NftRewardsInterfaceV6_3_1(0x3470756E5B490a974Bc25FeEeEb24c11102f5268);\n        } else if(block.chainid == 80001) {\n            // Mumbai\n            old = NftRewardsInterfaceV6_3_1(0x3982E3de77DAd60373C0c2c539fCb93Bd288D2f5);\n        } else if(block.chainid == 42161) {\n            // Arbitrum\n            old = NftRewardsInterfaceV6_3_1(0xc2d107e870927E3fb1127E6c1a33De5C863505b8);\n        } else {\n            revert(\"UNKNOWN_CHAIN\");\n        }\n\n        StorageInterfaceV5.OpenLimitOrder[] memory openLimitOrders = IStateCopyUtils(address(storageT)).getOpenLimitOrders();\n        require(start < openLimitOrders.length, \"START_TOO_BIG\");\n\n        if(end >= openLimitOrders.length){\n            end = openLimitOrders.length - 1;\n        }\n\n        for(uint i = start; i <= end;) {\n            StorageInterfaceV5.OpenLimitOrder memory o = openLimitOrders[i];\n            openLimitOrderTypes[o.trader][o.pairIndex][o.index] = OpenLimitOrderType(uint(old.openLimitOrderTypes(o.trader, o.pairIndex, o.index)));\n            ++i;\n        }\n    }\n    function setStateCopyAsDone() external onlyGov {\n        stateCopied = true;\n    }\n\n    // Manage params\n    function updateTriggerTimeout(uint _triggerTimeout) external onlyGov{\n        require(_triggerTimeout >= MIN_TRIGGER_TIMEOUT, \"BELOW_MIN\");\n        triggerTimeout = _triggerTimeout;\n        emit NumberUpdated(\"triggerTimeout\", _triggerTimeout);\n    }\n    function updateSameBlockLimit(uint _sameBlockLimit) external onlyGov{\n        require(_sameBlockLimit >= MIN_SAME_BLOCK_LIMIT, \"BELOW_MIN\");\n        require(_sameBlockLimit <= MAX_SAME_BLOCK_LIMIT, \"ABOVE_MAX\");\n\n        sameBlockLimit = _sameBlockLimit;\n\n        emit NumberUpdated(\"sameBlockLimit\", _sameBlockLimit);\n    }\n\n    // Triggers\n    function storeFirstToTrigger(TriggeredLimitId calldata _id, address _bot, uint _linkFee) external onlyTrading{\n        TriggeredLimit storage t = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n\n        t.first = _bot;\n        t.linkFee = uint240(_linkFee);\n        t.sameBlockLimit = uint16(sameBlockLimit);\n\n        delete t.sameBlock;\n        t.block = block.number;\n        t.sameBlock.push(_bot);\n\n        emit TriggeredFirst(_id, _bot, _linkFee);\n    }\n    function storeTriggerSameBlock(TriggeredLimitId calldata _id, address _bot) external onlyTrading{\n        TriggeredLimit storage t = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n\n        require(t.block == block.number, \"TOO_LATE\");\n        require(t.sameBlock.length < t.sameBlockLimit, \"SAME_BLOCK_LIMIT\");\n\n        uint linkContribution = t.linkFee / t.sameBlockLimit;\n\n        // transfer 1/N th of the trigger link cost in exchange for an equal share of reward\n        storageT.linkErc677().transferFrom(_bot, t.first, linkContribution);\n\n        t.sameBlock.push(_bot);\n\n        emit TriggeredSameBlock(_id, _bot, linkContribution);\n    }\n    function unregisterTrigger(TriggeredLimitId calldata _id) external onlyCallbacks{\n        delete triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n        emit TriggerUnregistered(_id);\n    }\n\n    // Distribute rewards\n    function distributeNftReward(TriggeredLimitId calldata _id, uint _reward, uint _tokenPriceWETH) external onlyCallbacks{\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n\n        require(t.block > 0, \"NOT_TRIGGERED\");\n\n        uint nextRound = currentRound + 1;\n        uint linkEquivalentRewards = linkToTokenRewards(t.linkFee, _tokenPriceWETH); // amount of link spent in gns\n\n        // if we've somehow ended up with an odd rate revert to using full rewards\n        if (linkEquivalentRewards > _reward)\n            linkEquivalentRewards = _reward;\n\n        // rewards per trigger\n        uint sameBlockReward = linkEquivalentRewards / t.sameBlockLimit;\n\n        for(uint i = 0; i < t.sameBlock.length; i++){\n            address bot = t.sameBlock[i];\n\n            tokensToClaim[bot] += sameBlockReward; // link refund\n            roundOrdersToClaim[bot][nextRound]++; // next round pool entry\n        }\n\n        uint missingSameBlocks = t.sameBlockLimit - t.sameBlock.length;\n        if (missingSameBlocks > 0) {\n            // reward first trigger equivalent amount of missed link refunds in gns, but no extra entries into the pool\n            tokensToClaim[t.first] += sameBlockReward * missingSameBlocks;\n        }\n\n        // REWARD POOLS ARE BLIND\n        // when you trigger orders you earn entries for next round\n        // next round tokens can't be predicted\n        // rewards are added to current round and claimable by previous round (currentRound - 1) entrants\n\n        roundTokens[currentRound].tokens += uint240(_reward - linkEquivalentRewards);\n        roundTokens[nextRound].totalEntries += uint16(t.sameBlock.length);\n\n        storageT.handleTokens(address(this), currentRound > 0 ? _reward : linkEquivalentRewards, true);\n\n        if(currentOrder == ROUND_LENGTH){\n            currentOrder = 1;\n            currentRound ++;\n        }else{\n            currentOrder ++;\n        }\n\n        emit TriggerRewarded(_id, t.first, t.sameBlock.length, t.sameBlockLimit, _reward);\n    }\n\n    // Claim rewards\n    function claimPoolTokens(uint _fromRound, uint _toRound) external{\n        require(_toRound >= _fromRound, \"TO_BEFORE_FROM\");\n        require(_toRound < currentRound, \"TOO_EARLY\");\n\n        uint tokens;\n\n        // due to blind rewards round 0 will have 0 entries; r[0] rewards are effectively burned/never minted\n        for(uint i = _fromRound; i <= _toRound; i++){\n            uint roundEntries = roundOrdersToClaim[msg.sender][i];\n\n            if (roundEntries > 0) {\n                RoundDetails memory roundDetails = roundTokens[i];\n                tokens += roundEntries * roundDetails.tokens / roundDetails.totalEntries;\n                roundOrdersToClaim[msg.sender][i] = 0;\n            }\n        }\n\n        require(tokens > 0, \"NOTHING_TO_CLAIM\");\n        storageT.token().transfer(msg.sender, tokens);\n\n        tokensClaimed[msg.sender] += tokens;\n        tokensClaimedTotal += tokens;\n\n        emit PoolTokensClaimed(msg.sender, _fromRound, _toRound, tokens);\n    }\n\n    function claimTokens() external{\n        uint tokens = tokensToClaim[msg.sender];\n        require(tokens > 0, \"NOTHING_TO_CLAIM\");\n\n        tokensToClaim[msg.sender] = 0;\n        storageT.token().transfer(msg.sender, tokens);\n\n        tokensClaimed[msg.sender] += tokens;\n        tokensClaimedTotal += tokens;\n\n        emit TokensClaimed(msg.sender, tokens);\n    }\n\n    // Manage open limit order types\n    function setOpenLimitOrderType(address _trader, uint _pairIndex, uint _index, OpenLimitOrderType _type) external onlyTrading{\n        openLimitOrderTypes[_trader][_pairIndex][_index] = _type;\n    }\n\n    // Set bot address and NFT in use so it cannot be used in the same order twice\n    function setNftBotInUse(bytes32 nftHash, bytes32 botHash) external onlyTrading {\n        botInUse[nftHash] = true;\n        botInUse[botHash] = true;\n    }\n\n    // Getters\n    function triggered(TriggeredLimitId calldata _id) external view returns(bool){\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n        return t.block > 0;\n    }\n    function timedOut(TriggeredLimitId calldata _id) external view returns(bool){\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n        return t.block > 0 && block.number - t.block >= triggerTimeout;\n    }\n    function sameBlockTriggers(TriggeredLimitId calldata _id) external view returns(address[] memory){\n        return triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order].sameBlock;\n    }\n    function getNftBotHashes(uint triggerBlock, address bot, uint nftId, address trader, uint pairIndex, uint index) external pure returns(bytes32, bytes32) {\n        return (\n            keccak256(abi.encodePacked(\"N\", triggerBlock, nftId, trader, pairIndex, index)),\n            keccak256(abi.encodePacked(\"B\", triggerBlock, bot, trader, pairIndex, index))\n        );\n    }\n    function nftBotInUse(bytes32 nftHash, bytes32 botHash) external view returns (bool) {\n        return botInUse[nftHash] || botInUse[botHash];\n    }\n\n    function linkToTokenRewards(uint linkFee, uint tokenPrice) public view returns (uint) {\n        (, int linkPriceUsd, , , ) = AggregatorInterfaceV6_3_1(address(storageT.priceAggregator())).linkPriceFeed().latestRoundData();\n        return linkFee * uint(linkPriceUsd) * PRECISION  / tokenPrice / 1e8;\n    }\n}"
    },
    "contracts/contracts6_3/TWAPPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\n\npragma solidity 0.8.17;\n\nabstract contract TWAPPriceGetter {\n    // Constants\n    uint32 constant MIN_TWAP_PERIOD = 1 hours / 2;\n    uint32 constant MAX_TWAP_PERIOD = 4 hours;\n\n    uint immutable precision;\n    address public immutable token;\n\n    // Adjustable parameters\n    IUniswapV3Pool public uniV3Pool;\n    uint32 public twapInterval;\n\n    // State\n    bool public isGnsToken0InLp;\n\n    // Events\n    event UniV3PoolUpdated(IUniswapV3Pool newValue);\n    event TwapIntervalUpdated(uint32 newValue);\n\n    constructor(IUniswapV3Pool _uniV3Pool, address _token, uint32 _twapInterval, uint _precision) {\n        require(\n            address(_uniV3Pool) != address(0) &&\n                _twapInterval >= MIN_TWAP_PERIOD &&\n                _twapInterval <= MAX_TWAP_PERIOD &&\n                _precision > 0,\n            \"WRONG_TWAP_CONSTRUCTOR\"\n        );\n\n        uniV3Pool = _uniV3Pool;\n        token = _token;\n        twapInterval = _twapInterval;\n        precision = _precision;\n\n        isGnsToken0InLp = uniV3Pool.token0() == _token;\n    }\n\n    // Manage variables\n    function _updateUniV3Pool(IUniswapV3Pool _uniV3Pool) internal {\n        require(address(_uniV3Pool) != address(0), \"WRONG_VALUE\");\n        uniV3Pool = _uniV3Pool;\n        isGnsToken0InLp = uniV3Pool.token0() == token;\n        emit UniV3PoolUpdated(_uniV3Pool);\n    }\n\n    function _updateTwapInterval(uint32 _twapInterval) internal {\n        require(_twapInterval >= MIN_TWAP_PERIOD && _twapInterval <= MAX_TWAP_PERIOD, \"WRONG_VALUE\");\n        twapInterval = _twapInterval;\n        emit TwapIntervalUpdated(_twapInterval);\n    }\n\n    // Returns price with \"precision\" decimals\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/OracleLibrary.sol\n    function tokenPriceWETH() public view returns (uint price) {\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = twapInterval;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) = uniV3Pool.observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        int56 twapIntervalInt = int56(int32(twapInterval));\n\n        int24 arithmeticMeanTick = int24(tickCumulativesDelta / twapIntervalInt);\n        // Always round to negative infinity\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % twapIntervalInt != 0)) arithmeticMeanTick--;\n\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(arithmeticMeanTick);\n        price = (FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96) * precision) / 2 ** 96;\n\n        if (!isGnsToken0InLp) {\n            price = precision ** 2 / price;\n        }\n    }\n}"
    },
    "contracts/contracts6_4/GNSBorrowingFeesV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// DEPLOY need storage and pair info\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\nimport \"../contract5/interfaces/StorageInterfaceV5.sol\";\nimport \"./interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../libraries/ChainUtils.sol\";\n\ncontract GNSBorrowingFeesV6_4 is Initializable, GNSBorrowingFeesInterfaceV6_4 {\n    // Constants\n    uint constant P_1 = 1e10;\n    uint constant P_2 = 1e40;\n\n    // Addresses\n    StorageInterfaceV5 public storageT;\n    GNSPairInfosInterfaceV6 public pairInfos;\n\n    // State\n    mapping(uint16 => Group) public groups;\n    mapping(uint => Pair) public pairs;\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees))) public initialAccFees;\n    mapping(uint => PairOi) public pairOis;\n    mapping(uint => uint48) public groupFeeExponents;\n\n    // Note: Events and structs are in interface\n\n    function initialize(StorageInterfaceV5 _storageT, GNSPairInfosInterfaceV6 _pairInfos) external initializer {\n        require(address(_storageT) != address(0) && address(_pairInfos) != address(0), \"WRONG_PARAMS\");\n\n        storageT = _storageT;\n        pairInfos = _pairInfos;\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(msg.sender == pairInfos.manager(), \"MANAGER_ONLY\");\n        _;\n    }\n\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage pair params\n    function setPairParams(uint pairIndex, PairParams calldata value) external onlyManager {\n        _setPairParams(pairIndex, value);\n    }\n\n    function setPairParamsArray(uint[] calldata indices, PairParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setPairParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        Pair storage p = pairs[pairIndex];\n\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        _setPairPendingAccFees(pairIndex, currentBlock);\n\n        if (value.groupIndex != prevGroupIndex) {\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\n\n            (uint oiLong, uint oiShort) = getPairOpenInterestWETH(pairIndex);\n\n            // Only remove OI from old group if old group is not 0\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\n\n            // Add OI to new group if it's not group 0 (even if old group is 0)\n            // So when we assign a pair to a group, it takes into account its OI\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\n            _setGroupOi(value.groupIndex, true, true, oiLong);\n            _setGroupOi(value.groupIndex, false, true, oiShort);\n\n            Group memory newGroup = groups[value.groupIndex];\n            Group memory prevGroup = groups[prevGroupIndex];\n\n            p.groups.push(\n                PairGroup(\n                    value.groupIndex,\n                    ChainUtils.getUint48BlockNumber(currentBlock),\n                    newGroup.accFeeLong,\n                    newGroup.accFeeShort,\n                    prevGroup.accFeeLong,\n                    prevGroup.accFeeShort,\n                    p.accFeeLong,\n                    p.accFeeShort,\n                    0 // placeholder\n                )\n            );\n\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\n        }\n\n        p.feePerBlock = value.feePerBlock;\n        p.feeExponent = value.feeExponent;\n        pairOis[pairIndex].max = value.maxOi;\n\n        emit PairParamsUpdated(pairIndex, value.groupIndex, value.feePerBlock, value.feeExponent, value.maxOi);\n    }\n\n    // Manage group params\n    function setGroupParams(uint16 groupIndex, GroupParams calldata value) external onlyManager {\n        _setGroupParams(groupIndex, value);\n    }\n\n    function setGroupParamsArray(uint16[] calldata indices, GroupParams[] calldata values) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setGroupParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setGroupParams(uint16 groupIndex, GroupParams calldata value) private {\n        require(groupIndex > 0, \"GROUP_0\");\n        require(value.feeExponent >= 1 && value.feeExponent <= 3, \"WRONG_EXPONENT\");\n\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\n\n        Group storage g = groups[groupIndex];\n        g.feePerBlock = value.feePerBlock;\n        g.maxOi = uint80(value.maxOi);\n        groupFeeExponents[groupIndex] = value.feeExponent;\n\n        emit GroupUpdated(groupIndex, value.feePerBlock, value.maxOi, value.feeExponent);\n    }\n\n    // Group OI setter\n    function _setGroupOi(\n        uint16 groupIndex,\n        bool long,\n        bool increase,\n        uint amount // 1e18\n    ) private {\n        Group storage group = groups[groupIndex];\n        uint112 amountFinal;\n\n        if (groupIndex > 0) {\n            amount = (amount * P_1) / 1e18; // 1e10\n            require(amount <= type(uint112).max, \"OVERFLOW\");\n\n            amountFinal = uint112(amount);\n\n            if (long) {\n                group.oiLong = increase\n                    ? group.oiLong + amountFinal\n                    : group.oiLong - (group.oiLong > amountFinal ? amountFinal : group.oiLong);\n            } else {\n                group.oiShort = increase\n                    ? group.oiShort + amountFinal\n                    : group.oiShort - (group.oiShort > amountFinal ? amountFinal : group.oiShort);\n            }\n        }\n\n        emit GroupOiUpdated(groupIndex, long, increase, amountFinal, group.oiLong, group.oiShort);\n    }\n\n    // Acc fees getters for pairs and groups\n    function getPendingAccFees(\n        PendingAccFeesInput memory input\n    ) public pure returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta) {\n        require(input.currentBlock >= input.accLastUpdatedBlock, \"BLOCK_ORDER\");\n\n        bool moreShorts = input.oiLong < input.oiShort;\n        uint netOi = moreShorts ? input.oiShort - input.oiLong : input.oiLong - input.oiShort;\n\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\n                input.feePerBlock *\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) / (1e18 ** input.feeExponent)\n            : 0; // 1e10 (%)\n\n        require(_delta <= type(uint64).max, \"OVERFLOW\");\n        delta = uint64(_delta);\n\n        newAccFeeLong = moreShorts ? input.accFeeLong : input.accFeeLong + delta;\n        newAccFeeShort = moreShorts ? input.accFeeShort + delta : input.accFeeShort;\n    }\n\n    function getPairGroupAccFeesDeltas(\n        uint i,\n        PairGroup[] memory pairGroups,\n        InitialAccFees memory initialFees,\n        uint pairIndex,\n        bool long,\n        uint currentBlock\n    ) public view returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) {\n        PairGroup memory group = pairGroups[i];\n\n        beforeTradeOpen = group.block < initialFees.block;\n\n        if (i == pairGroups.length - 1) {\n            // Last active group\n            deltaGroup = getGroupPendingAccFee(group.groupIndex, currentBlock, long);\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\n        } else {\n            // Previous groups\n            PairGroup memory nextGroup = pairGroups[i + 1];\n\n            // If it's not the first group to be before the trade was opened then fee is 0\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\n                return (0, 0, beforeTradeOpen);\n            }\n\n            deltaGroup = long ? nextGroup.prevGroupAccFeeLong : nextGroup.prevGroupAccFeeShort;\n            deltaPair = long ? nextGroup.pairAccFeeLong : nextGroup.pairAccFeeShort;\n        }\n\n        if (beforeTradeOpen) {\n            deltaGroup -= initialFees.accGroupFee;\n            deltaPair -= initialFees.accPairFee;\n        } else {\n            deltaGroup -= (long ? group.initialAccFeeLong : group.initialAccFeeShort);\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\n        }\n    }\n\n    // Pair acc fees helpers\n    function getPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta) {\n        Pair memory pair = pairs[pairIndex];\n\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestWETH(pairIndex);\n\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                pair.accFeeLong,\n                pair.accFeeShort,\n                pairOiLong,\n                pairOiShort,\n                pair.feePerBlock,\n                currentBlock,\n                pair.accLastUpdatedBlock,\n                pairOis[pairIndex].max,\n                pair.feeExponent\n            )\n        );\n    }\n\n    function getPairPendingAccFee(uint pairIndex, uint currentBlock, bool long) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(pairIndex, currentBlock);\n\n        Pair storage pair = pairs[pairIndex];\n\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit PairAccFeesUpdated(pairIndex, currentBlock, pair.accFeeLong, pair.accFeeShort);\n    }\n\n    // Group acc fees helpers\n    function getGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) public view returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta) {\n        Group memory group = groups[groupIndex];\n\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                group.accFeeLong,\n                group.accFeeShort,\n                (uint(group.oiLong) * 1e18) / P_1,\n                (uint(group.oiShort) * 1e18) / P_1,\n                group.feePerBlock,\n                currentBlock,\n                group.accLastUpdatedBlock,\n                uint72(group.maxOi),\n                groupFeeExponents[groupIndex]\n            )\n        );\n    }\n\n    function getGroupPendingAccFee(\n        uint16 groupIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(groupIndex, currentBlock);\n\n        Group storage group = groups[groupIndex];\n\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(currentBlock);\n\n        emit GroupAccFeesUpdated(groupIndex, currentBlock, group.accFeeLong, group.accFeeShort);\n    }\n\n    // Interaction with callbacks\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeWETH, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external override onlyCallbacks {\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        (uint64 pairAccFeeLong, uint64 pairAccFeeShort) = _setPairPendingAccFees(pairIndex, currentBlock);\n        (uint64 groupAccFeeLong, uint64 groupAccFeeShort) = _setGroupPendingAccFees(groupIndex, currentBlock);\n\n        _setGroupOi(groupIndex, long, open, positionSizeWETH);\n\n        if (open) {\n            InitialAccFees memory initialFees = InitialAccFees(\n                long ? pairAccFeeLong : pairAccFeeShort,\n                long ? groupAccFeeLong : groupAccFeeShort,\n                ChainUtils.getUint48BlockNumber(currentBlock),\n                0 // placeholder\n            );\n\n            initialAccFees[trader][pairIndex][index] = initialFees;\n\n            emit TradeInitialAccFeesStored(trader, pairIndex, index, initialFees.accPairFee, initialFees.accGroupFee);\n        }\n\n        emit TradeActionHandled(trader, pairIndex, index, open, long, positionSizeWETH);\n    }\n\n    // Important trade getters\n    function getTradeBorrowingFee(BorrowingFeeInput memory input) public view returns (uint fee) {\n        InitialAccFees memory initialFees = initialAccFees[input.trader][input.pairIndex][input.index];\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\n\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        PairGroup memory firstPairGroup;\n        if (pairGroups.length > 0) {\n            firstPairGroup = pairGroups[0];\n        }\n\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\n        if (pairGroups.length == 0 || firstPairGroup.block > initialFees.block) {\n            fee = ((\n                pairGroups.length == 0\n                    ? getPairPendingAccFee(input.pairIndex, currentBlock, input.long)\n                    : (input.long ? firstPairGroup.pairAccFeeLong : firstPairGroup.pairAccFeeShort)\n            ) - initialFees.accPairFee);\n        }\n\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\n        for (uint i = pairGroups.length; i > 0; ) {\n            (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen) = getPairGroupAccFeesDeltas(\n                i - 1,\n                pairGroups,\n                initialFees,\n                input.pairIndex,\n                input.long,\n                currentBlock\n            );\n\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\n\n            // Exit loop at first group before trade was open\n            if (beforeTradeOpen) break;\n            unchecked {\n                --i;\n            }\n        }\n\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (WETH)\n    }\n\n    function getTradeLiquidationPrice(LiqPriceInput calldata input) external view returns (uint) {\n        return\n            pairInfos.getTradeLiquidationPricePure(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(input.trader, input.pairIndex, input.index, input.collateral) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    // Public getters\n    function getPairOpenInterestWETH(uint pairIndex) public view returns (uint, uint) {\n        return (storageT.openInterestWETH(pairIndex, 0), storageT.openInterestWETH(pairIndex, 1));\n    }\n\n    function getPairGroupIndex(uint pairIndex) public view returns (uint16 groupIndex) {\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\n        return pairGroups.length == 0 ? 0 : pairGroups[pairGroups.length - 1].groupIndex;\n    }\n\n    // External getters\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeWETH // 1e18\n    ) external view returns (bool) {\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\n        return (g.maxOi == 0) || ((long ? g.oiLong : g.oiShort) + (positionSizeWETH * P_1) / 1e18 <= g.maxOi);\n    }\n\n    function getGroup(uint16 groupIndex) external view returns (Group memory, uint48) {\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\n    }\n\n    function getPair(uint pairIndex) external view returns (Pair memory, PairOi memory) {\n        return (pairs[pairIndex], pairOis[pairIndex]);\n    }\n\n    function getAllPairs() external view returns (Pair[] memory, PairOi[] memory) {\n        uint len = storageT.priceAggregator().pairsStorage().pairsCount();\n        Pair[] memory p = new Pair[](len);\n        PairOi[] memory pairOi = new PairOi[](len);\n\n        for (uint i; i < len; ) {\n            p[i] = pairs[i];\n            pairOi[i] = pairOis[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (p, pairOi);\n    }\n\n    function getGroups(uint16[] calldata indices) external view returns (Group[] memory, uint48[] memory) {\n        Group[] memory g = new Group[](indices.length);\n        uint48[] memory e = new uint48[](indices.length);\n        uint len = indices.length;\n\n        for (uint i; i < len; ) {\n            g[i] = groups[indices[i]];\n            e[i] = groupFeeExponents[indices[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (g, e);\n    }\n\n    function getTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index\n    )\n        external\n        view\n        returns (InitialAccFees memory borrowingFees, GNSPairInfosInterfaceV6.TradeInitialAccFees memory otherFees)\n    {\n        borrowingFees = initialAccFees[trader][pairIndex][index];\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\n    }\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint) {\n        return pairOis[pairIndex].max;\n    }\n}"
    },
    "contracts/contracts6_4/GNSPriceAggregatorV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"../contracts6_3/TWAPPriceGetter.sol\";\n\nimport \"./interfaces/CallbacksInterfaceV6_4.sol\";\nimport \"../contract5/interfaces/ChainlinkFeedInterfaceV5.sol\";\nimport \"../contract5/interfaces/StorageInterfaceV5.sol\";\n\nimport \"../libraries/PackingUtils.sol\";\n\npragma solidity 0.8.17;\n\ncontract GNSPriceAggregatorV6_4 is ChainlinkClient, TWAPPriceGetter {\n    using Chainlink for Chainlink.Request;\n    using PackingUtils for uint;\n\n    // Contracts (constant)\n    StorageInterfaceV5 public immutable storageT;\n\n    // Contracts (adjustable)\n    PairsStorageInterfaceV6 public pairsStorage;\n    ChainlinkFeedInterfaceV5 public linkPriceFeed;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_ORACLE_NODES = 20;\n    uint constant MIN_ANSWERS = 3;\n\n    // Params (adjustable)\n    uint public minAnswers;\n\n    // Custom data types\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    struct Order {\n        uint16 pairIndex;\n        uint112 linkFeePerNode;\n        OrderType orderType;\n        bool active;\n        bool isLookback;\n    }\n\n    struct LookbackOrderAnswer {\n        uint64 open;\n        uint64 high;\n        uint64 low;\n        uint64 ts;\n    }\n\n    // State\n    address[] public nodes;\n    bytes32[2] public jobIds;\n\n    mapping(uint => Order) public orders;\n    mapping(bytes32 => uint) public orderIdByRequest;\n    mapping(uint => uint[]) public ordersAnswers;\n    mapping(uint => LookbackOrderAnswer[]) public lookbackOrderAnswers;\n\n    // Events\n    event PairsStorageUpdated(address value);\n    event LinkPriceFeedUpdated(address value);\n    event MinAnswersUpdated(uint value);\n\n    event NodeAdded(uint index, address value);\n    event NodeReplaced(uint index, address oldNode, address newNode);\n    event NodeRemoved(uint index, address oldNode);\n\n    event JobIdUpdated(uint index, bytes32 jobId);\n\n    event PriceRequested(\n        uint indexed orderId,\n        bytes32 indexed job,\n        uint indexed pairIndex,\n        OrderType orderType,\n        uint nodesCount,\n        uint linkFeePerNode,\n        uint fromBlock,\n        bool isLookback\n    );\n\n    event PriceReceived(\n        bytes32 request,\n        uint indexed orderId,\n        address indexed node,\n        uint16 indexed pairIndex,\n        uint price,\n        uint referencePrice,\n        uint112 linkFee,\n        bool isLookback,\n        bool usedInMedian\n    );\n\n    event CallbackExecuted(CallbacksInterfaceV6_4.AggregatorAnswer a, OrderType orderType);\n\n    constructor(\n        address _linkToken,\n        IUniswapV3Pool _tokenWETHLp,\n        uint32 _twapInterval,\n        StorageInterfaceV5 _storageT,\n        PairsStorageInterfaceV6 _pairsStorage,\n        ChainlinkFeedInterfaceV5 _linkPriceFeed,\n        uint _minAnswers,\n        address[] memory _nodes,\n        bytes32[2] memory _jobIds\n    ) TWAPPriceGetter(_tokenWETHLp, address(_storageT.token()), _twapInterval, PRECISION) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_pairsStorage) != address(0) &&\n                address(_linkPriceFeed) != address(0) &&\n                _minAnswers >= MIN_ANSWERS &&\n                _minAnswers % 2 == 1 &&\n                _nodes.length > 0 &&\n                _linkToken != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n\n        pairsStorage = _pairsStorage;\n        linkPriceFeed = _linkPriceFeed;\n\n        minAnswers = _minAnswers;\n        nodes = _nodes;\n        jobIds = _jobIds;\n\n        setChainlinkToken(_linkToken);\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == storageT.trading(), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage contracts\n    function updatePairsStorage(PairsStorageInterfaceV6 value) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        pairsStorage = value;\n\n        emit PairsStorageUpdated(address(value));\n    }\n\n    function updateLinkPriceFeed(ChainlinkFeedInterfaceV5 value) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        linkPriceFeed = value;\n\n        emit LinkPriceFeedUpdated(address(value));\n    }\n\n    // Manage TWAP variables\n    function updateUniV3Pool(IUniswapV3Pool _uniV3Pool) external onlyGov {\n        _updateUniV3Pool(_uniV3Pool);\n    }\n\n    function updateTwapInterval(uint32 _twapInterval) external onlyGov {\n        _updateTwapInterval(_twapInterval);\n    }\n\n    // Manage params\n    function updateMinAnswers(uint value) external onlyGov {\n        require(value >= MIN_ANSWERS, \"MIN_ANSWERS\");\n        require(value % 2 == 1, \"EVEN\");\n\n        minAnswers = value;\n\n        emit MinAnswersUpdated(value);\n    }\n\n    // Manage nodes\n    function addNode(address a) external onlyGov {\n        require(a != address(0), \"VALUE_0\");\n        require(nodes.length < MAX_ORACLE_NODES, \"MAX_ORACLE_NODES\");\n\n        for (uint i; i < nodes.length; i++) {\n            require(nodes[i] != a, \"ALREADY_LISTED\");\n        }\n\n        nodes.push(a);\n\n        emit NodeAdded(nodes.length - 1, a);\n    }\n\n    function replaceNode(uint index, address a) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n        require(a != address(0), \"VALUE_0\");\n\n        emit NodeReplaced(index, nodes[index], a);\n\n        nodes[index] = a;\n    }\n\n    function removeNode(uint index) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n\n        emit NodeRemoved(index, nodes[index]);\n\n        nodes[index] = nodes[nodes.length - 1];\n        nodes.pop();\n    }\n\n    function setMarketJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[0] = jobId;\n\n        emit JobIdUpdated(0, jobId);\n    }\n\n    function setLimitJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[1] = jobId;\n\n        emit JobIdUpdated(1, jobId);\n    }\n\n    // On-demand price request to oracles network\n    function getPrice(\n        uint pairIndex,\n        OrderType orderType,\n        uint leveragedPosWETH,\n        uint fromBlock\n    ) external onlyTrading returns (uint) {\n        require(pairIndex <= type(uint16).max, \"PAIR_OVERFLOW\");\n\n        bool isLookback = orderType == OrderType.LIMIT_OPEN || orderType == OrderType.LIMIT_CLOSE;\n        bytes32 job = isLookback ? jobIds[1] : jobIds[0];\n\n        Chainlink.Request memory linkRequest = buildChainlinkRequest(job, address(this), this.fulfill.selector);\n\n        uint orderId;\n        {\n            (string memory from, string memory to, , uint _orderId) = pairsStorage.pairJob(pairIndex);\n            orderId = _orderId;\n\n            linkRequest.add(\"from\", from);\n            linkRequest.add(\"to\", to);\n\n            if (isLookback) {\n                linkRequest.addUint(\"fromBlock\", fromBlock);\n            }\n        }\n\n        uint length;\n        uint linkFeePerNode;\n        {\n            address[] memory _nodes = nodes;\n            length = _nodes.length;\n            linkFeePerNode = linkFee(pairIndex, leveragedPosWETH) / length;\n\n            require(linkFeePerNode <= type(uint112).max, \"LINK_OVERFLOW\");\n\n            orders[orderId] = Order(uint16(pairIndex), uint112(linkFeePerNode), orderType, true, isLookback);\n            for (uint i; i < length; ) {\n                orderIdByRequest[sendChainlinkRequestTo(_nodes[i], linkRequest, linkFeePerNode)] = orderId;\n                unchecked {\n                    ++i;\n                }\n            }\n        }\n\n        emit PriceRequested(orderId, job, pairIndex, orderType, length, linkFeePerNode, fromBlock, isLookback);\n\n        return orderId;\n    }\n\n    // Fulfill on-demand price requests\n    function fulfill(bytes32 requestId, uint priceData) external recordChainlinkFulfillment(requestId) {\n        uint orderId = orderIdByRequest[requestId];\n        delete orderIdByRequest[requestId];\n\n        Order memory r = orders[orderId];\n        bool usedInMedian = false;\n\n        PairsStorageInterfaceV6.Feed memory f = pairsStorage.pairFeed(r.pairIndex);\n        uint feedPrice = fetchFeedPrice(f);\n\n        if (r.active) {\n            if (r.isLookback) {\n                LookbackOrderAnswer memory newAnswer;\n                (newAnswer.open, newAnswer.high, newAnswer.low, newAnswer.ts) = priceData.unpack256To64();\n\n                require(\n                    (newAnswer.high == 0 && newAnswer.low == 0) ||\n                        (newAnswer.high >= newAnswer.open && newAnswer.low <= newAnswer.open && newAnswer.low > 0),\n                    \"INVALID_CANDLE\"\n                );\n\n                if (\n                    isPriceWithinDeviation(newAnswer.high, feedPrice, f.maxDeviationP) &&\n                    isPriceWithinDeviation(newAnswer.low, feedPrice, f.maxDeviationP)\n                ) {\n                    usedInMedian = true;\n\n                    LookbackOrderAnswer[] storage answers = lookbackOrderAnswers[orderId];\n                    answers.push(newAnswer);\n\n                    if (answers.length == minAnswers) {\n                        CallbacksInterfaceV6_4.AggregatorAnswer memory a;\n                        a.orderId = orderId;\n                        (a.open, a.high, a.low) = medianLookbacks(answers);\n                        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n                        CallbacksInterfaceV6_4 c = CallbacksInterfaceV6_4(storageT.callbacks());\n\n                        if (r.orderType == OrderType.LIMIT_OPEN) {\n                            c.executeNftOpenOrderCallback(a);\n                        } else {\n                            c.executeNftCloseOrderCallback(a);\n                        }\n\n                        emit CallbackExecuted(a, r.orderType);\n\n                        orders[orderId].active = false;\n                        delete lookbackOrderAnswers[orderId];\n                    }\n                }\n            } else {\n                (uint64 price, , , ) = priceData.unpack256To64();\n\n                if (isPriceWithinDeviation(price, feedPrice, f.maxDeviationP)) {\n                    usedInMedian = true;\n\n                    uint[] storage answers = ordersAnswers[orderId];\n                    answers.push(price);\n\n                    if (answers.length == minAnswers) {\n                        CallbacksInterfaceV6_4.AggregatorAnswer memory a;\n\n                        a.orderId = orderId;\n                        a.price = median(answers);\n                        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n                        CallbacksInterfaceV6_4 c = CallbacksInterfaceV6_4(storageT.callbacks());\n\n                        if (r.orderType == OrderType.MARKET_OPEN) {\n                            c.openTradeMarketCallback(a);\n                        } else {\n                            c.closeTradeMarketCallback(a);\n                        }\n\n                        emit CallbackExecuted(a, r.orderType);\n\n                        orders[orderId].active = false;\n                        delete ordersAnswers[orderId];\n                    }\n                }\n            }\n        }\n\n        emit PriceReceived(\n            requestId,\n            orderId,\n            msg.sender,\n            r.pairIndex,\n            priceData,\n            feedPrice,\n            r.linkFeePerNode,\n            r.isLookback,\n            usedInMedian\n        );\n    }\n\n    // Calculate LINK fee for each request\n    function linkFee(uint pairIndex, uint leveragedPosWETH) public view returns (uint) {\n        (, int linkPriceUsd, , , ) = linkPriceFeed.latestRoundData();\n\n        return (pairsStorage.pairOracleFeeP(pairIndex) * leveragedPosWETH * 1e8) / uint(linkPriceUsd) / PRECISION / 100;\n    }\n\n    // Claim back LINK tokens (if contract will be replaced for example)\n    function claimBackLink() external onlyGov {\n        TokenInterfaceV5 link = storageT.linkErc677();\n\n        link.transfer(storageT.gov(), link.balanceOf(address(this)));\n    }\n\n    // Utils\n    function fetchFeedPrice(PairsStorageInterfaceV6.Feed memory f) private view returns (uint) {\n        if (f.feed1 == address(0)) {\n            return 0;\n        }\n\n        uint feedPrice;\n        (, int feedPrice1, , , ) = ChainlinkFeedInterfaceV5(f.feed1).latestRoundData();\n\n        if (f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.DEFAULT) {\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / 1e8);\n        } else if (f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.INVERT) {\n            feedPrice = uint((int(PRECISION) * 1e8) / feedPrice1);\n        } else {\n            (, int feedPrice2, , , ) = ChainlinkFeedInterfaceV5(f.feed2).latestRoundData();\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / feedPrice2);\n        }\n\n        return feedPrice;\n    }\n\n    function isPriceWithinDeviation(uint price, uint feedPrice, uint maxDeviationP) private pure returns (bool) {\n        return\n            price == 0 ||\n            feedPrice == 0 ||\n            ((price >= feedPrice ? price - feedPrice : feedPrice - price) * PRECISION * 100) / feedPrice <=\n            maxDeviationP;\n    }\n\n    // Median function\n    function swap(uint[] memory array, uint i, uint j) private pure {\n        (array[i], array[j]) = (array[j], array[i]);\n    }\n\n    function sort(uint[] memory array, uint begin, uint end) private pure {\n        if (begin >= end) {\n            return;\n        }\n\n        uint j = begin;\n        uint pivot = array[j];\n\n        for (uint i = begin + 1; i < end; ++i) {\n            if (array[i] < pivot) {\n                swap(array, i, ++j);\n            }\n        }\n\n        swap(array, begin, j);\n        sort(array, begin, j);\n        sort(array, j + 1, end);\n    }\n\n    function median(uint[] memory array) private pure returns (uint) {\n        sort(array, 0, array.length);\n\n        return\n            array.length % 2 == 0\n                ? (array[array.length / 2 - 1] + array[array.length / 2]) / 2\n                : array[array.length / 2];\n    }\n\n    function medianLookbacks(LookbackOrderAnswer[] memory array) private pure returns (uint open, uint high, uint low) {\n        uint length = array.length;\n\n        uint[] memory opens = new uint[](length);\n        uint[] memory highs = new uint[](length);\n        uint[] memory lows = new uint[](length);\n\n        for (uint i; i < length; ) {\n            opens[i] = array[i].open;\n            highs[i] = array[i].high;\n            lows[i] = array[i].low;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        sort(opens, 0, length);\n        sort(highs, 0, length);\n        sort(lows, 0, length);\n\n        bool isLengthEven = length % 2 == 0;\n        uint halfLength = length / 2;\n\n        open = isLengthEven ? (opens[halfLength - 1] + opens[halfLength]) / 2 : opens[halfLength];\n        high = isLengthEven ? (highs[halfLength - 1] + highs[halfLength]) / 2 : highs[halfLength];\n        low = isLengthEven ? (lows[halfLength - 1] + lows[halfLength]) / 2 : lows[halfLength];\n    }\n\n    // Storage v5 compatibility\n    function openFeeP(uint pairIndex) external view returns (uint) {\n        return pairsStorage.pairOpenFeeP(pairIndex);\n    }\n}"
    },
    "contracts/contracts6_4/GNSTradingCallbacksV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../contract5/interfaces/StorageInterfaceV5.sol\";\nimport \"./interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\";\nimport \"../contracts6_2/interfaces/GNSStakingInterfaceV6_2.sol\";\nimport \"../libraries/ChainUtils.sol\";\nimport \"./interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\n\npragma solidity 0.8.17;\n\ncontract GNSTradingCallbacksV6_4 is Initializable {\n    // Contracts (constant)\n    StorageInterfaceV5 public storageT;\n    NftRewardsInterfaceV6_3_1 public nftRewards;\n    GNSPairInfosInterfaceV6 public pairInfos;\n    GNSReferralsInterfaceV6_2 public referrals;\n    GNSStakingInterfaceV6_2 public staking;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10; // 10 decimals\n\n    uint constant MAX_SL_P = 75; // -75% PNL\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\n\n    // Params (adjustable)\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\n\n    // Last Updated State\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated)))) public tradeLastUpdated; // Block numbers for last updated\n\n    // v6.3.2 Storage/State\n    GNSBorrowingFeesInterfaceV6_4 public borrowingFees;\n\n    mapping(uint => uint) public pairMaxLeverage;\n\n    // v6.4 Storage\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData)))) public tradeData; // More storage for trades / limit orders\n\n    // Custom data types\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    // Useful to avoid stack too deep errors\n    struct Values {\n        uint posWETH;\n        uint levPosWETH;\n        uint tokenPriceWETH;\n        int profitP;\n        uint price;\n        uint liqPrice;\n        uint WETHSentToTrader;\n        uint reward1;\n        uint reward2;\n        uint reward3;\n        bool exactExecution;\n    }\n\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    struct OpenTradePrepInput {\n        uint executionPrice;\n        uint wantedPrice;\n        uint marketPrice;\n        uint spreadP;\n        uint spreadReductionP;\n        bool buy;\n        uint pairIndex;\n        uint positionSize;\n        uint leverage;\n        uint maxSlippageP;\n        uint tp;\n        uint sl;\n    }\n\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n\n    enum CancelReason {\n        NONE,\n        PAUSED,\n        MARKET_CLOSED,\n        SLIPPAGE,\n        TP_REACHED,\n        SL_REACHED,\n        EXPOSURE_LIMITS,\n        PRICE_IMPACT,\n        MAX_LEVERAGE,\n        NO_TRADE,\n        WRONG_TRADE,\n        NOT_HIT\n    }\n\n    // Events\n    event MarketExecuted(\n        uint indexed orderId,\n        StorageInterfaceV5.Trade t,\n        bool open,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit, // before fees\n        uint WETHSentToTrader\n    );\n\n    event LimitExecuted(\n        uint indexed orderId,\n        uint limitIndex,\n        StorageInterfaceV5.Trade t,\n        address indexed nftHolder,\n        StorageInterfaceV5.LimitOrder orderType,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit,\n        uint WETHSentToTrader,\n        bool exactExecution\n    );\n\n    event MarketOpenCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        CancelReason cancelReason\n    );\n    event MarketCloseCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        CancelReason cancelReason\n    );\n    event NftOrderCanceled(\n        uint indexed orderId,\n        address indexed nftHolder,\n        StorageInterfaceV5.LimitOrder orderType,\n        CancelReason cancelReason\n    );\n\n    event ClosingFeeSharesPUpdated(uint WETHVaultFeeP, uint lpFeeP, uint sssFeeP);\n    event CanExecuteTimeoutUpdated(uint newValue);\n\n    event Pause(bool paused);\n    event Done(bool done);\n\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\n    event SssFeeCharged(address indexed trader, uint valueWETH);\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\n    event BorrowingFeeCharged(address indexed trader, uint tradeValueWETH, uint feeValueWETH);\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\n\n    // Custom errors (save gas)\n    error WrongParams();\n    error Forbidden();\n\n    function initialize(\n        StorageInterfaceV5 _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        GNSPairInfosInterfaceV6 _pairInfos,\n        GNSReferralsInterfaceV6_2 _referrals,\n        GNSStakingInterfaceV6_2 _staking,\n        address vaultToApprove,\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP,\n        uint _canExecuteTimeout\n    ) external initializer {\n        if (\n            address(_storageT) == address(0) ||\n            address(_nftRewards) == address(0) ||\n            address(_pairInfos) == address(0) ||\n            address(_referrals) == address(0) ||\n            address(_staking) == address(0) ||\n            vaultToApprove == address(0) ||\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\n        ) {\n            revert WrongParams();\n        }\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        staking = _staking;\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        canExecuteTimeout = _canExecuteTimeout;\n\n        TokenInterfaceV5 t = storageT.WETH();\n        t.approve(address(staking), type(uint256).max);\n        t.approve(vaultToApprove, type(uint256).max);\n    }\n\n    function initializeV2(GNSBorrowingFeesInterfaceV6_4 _borrowingFees) external reinitializer(2) {\n        if (address(_borrowingFees) == address(0)) {\n            revert WrongParams();\n        }\n        borrowingFees = _borrowingFees;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier onlyPriceAggregator() {\n        isPriceAggregator();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n    modifier onlyTrading() {\n        isTrading();\n        _;\n    }\n    modifier onlyManager() {\n        isManager();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        if (msg.sender != storageT.gov()) {\n            revert Forbidden();\n        }\n    }\n\n    function isPriceAggregator() private view {\n        if (msg.sender != address(storageT.priceAggregator())) {\n            revert Forbidden();\n        }\n    }\n\n    function isNotDone() private view {\n        if (isDone) {\n            revert Forbidden();\n        }\n    }\n\n    function isTrading() private view {\n        if (msg.sender != storageT.trading()) {\n            revert Forbidden();\n        }\n    }\n\n    function isManager() private view {\n        if (msg.sender != pairInfos.manager()) {\n            revert Forbidden();\n        }\n    }\n\n    // Manage params\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external onlyManager {\n        _setPairMaxLeverage(pairIndex, maxLeverage);\n    }\n\n    function setPairMaxLeverageArray(uint[] calldata indices, uint[] calldata values) external onlyManager {\n        uint len = indices.length;\n\n        if (len != values.length) {\n            revert WrongParams();\n        }\n\n        for (uint i; i < len; ) {\n            _setPairMaxLeverage(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\n        pairMaxLeverage[pairIndex] = maxLeverage;\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\n    }\n\n    function setClosingFeeSharesP(uint _WETHVaultFeeP, uint _lpFeeP, uint _sssFeeP) external onlyGov {\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\n            revert WrongParams();\n        }\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\n    }\n\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\n            revert WrongParams();\n        }\n        canExecuteTimeout = _canExecuteTimeout;\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n\n        emit Pause(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n\n        emit Done(isDone);\n    }\n\n    // Callbacks\n    function openTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\n        StorageInterfaceV5.PendingMarketOrder memory o = getPendingMarketOrder(a.orderId);\n\n        if (o.block == 0) {\n            return;\n        }\n\n        StorageInterfaceV5.Trade memory t = o.trade;\n\n        (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) = _openTradePrep(\n            OpenTradePrepInput(\n                a.price,\n                o.wantedPrice,\n                a.price,\n                a.spreadP,\n                o.spreadReductionP,\n                t.buy,\n                t.pairIndex,\n                t.positionSizeWETH,\n                t.leverage,\n                o.slippageP,\n                t.tp,\n                t.sl\n            )\n        );\n\n        t.openPrice = priceAfterImpact;\n\n        if (cancelReason == CancelReason.NONE) {\n            (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceWETH) = registerTrade(t, 1500, 0);\n\n            emit MarketExecuted(\n                a.orderId,\n                finalTrade,\n                true,\n                finalTrade.openPrice,\n                priceImpactP,\n                (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\n                0,\n                0\n            );\n        } else {\n            uint devGovFeesWETH = storageT.handleDevGovFees(t.pairIndex, t.positionSizeWETH * t.leverage, true, true);\n            transferFromStorageToAddress(t.trader, t.positionSizeWETH - devGovFeesWETH);\n\n            emit DevGovFeeCharged(t.trader, devGovFeesWETH);\n            emit MarketOpenCanceled(a.orderId, t.trader, t.pairIndex, cancelReason);\n        }\n\n        storageT.unregisterPendingMarketOrder(a.orderId, true);\n    }\n\n    function closeTradeMarketCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\n        StorageInterfaceV5.PendingMarketOrder memory o = getPendingMarketOrder(a.orderId);\n\n        if (o.block == 0) {\n            return;\n        }\n\n        StorageInterfaceV5.Trade memory t = getOpenTrade(o.trade.trader, o.trade.pairIndex, o.trade.index);\n\n        CancelReason cancelReason = t.leverage == 0\n            ? CancelReason.NO_TRADE\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\n\n        if (cancelReason != CancelReason.NO_TRADE) {\n            StorageInterfaceV5.TradeInfo memory i = getOpenTradeInfo(t.trader, t.pairIndex, t.index);\n            AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n\n            Values memory v;\n            v.levPosWETH = (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION;\n            v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(t.openPrice, a.price, t.buy, t.leverage);\n                v.posWETH = v.levPosWETH / t.leverage;\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    true,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    (v.levPosWETH * aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\n                    (v.levPosWETH * aggregator.pairsStorage().pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\n                );\n\n                emit MarketExecuted(a.orderId, t, false, a.price, 0, v.posWETH, v.profitP, v.WETHSentToTrader);\n            } else {\n                // Dev / gov rewards to pay for oracle cost\n                // Charge in WETH if collateral in storage or token if collateral in vault\n                v.reward1 = t.positionSizeWETH > 0\n                    ? storageT.handleDevGovFees(t.pairIndex, v.levPosWETH, true, true)\n                    : (storageT.handleDevGovFees(\n                        t.pairIndex,\n                        (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\n                        false,\n                        true\n                    ) * v.tokenPriceWETH) / PRECISION;\n\n                t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\n                storageT.updateTrade(t);\n\n                emit DevGovFeeCharged(t.trader, v.reward1);\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit MarketCloseCanceled(a.orderId, o.trade.trader, o.trade.pairIndex, o.trade.index, cancelReason);\n        }\n\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\n    }\n\n    function executeNftOpenOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\n        StorageInterfaceV5.PendingNftOrder memory n = storageT.reqID_pendingNftOrder(a.orderId);\n\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(n.trader, n.pairIndex, n.index)\n            ? CancelReason.NO_TRADE\n            : CancelReason.NONE;\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(n.trader, n.pairIndex, n.index);\n\n            NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards.openLimitOrderTypes(\n                n.trader,\n                n.pairIndex,\n                n.index\n            );\n\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice) ? CancelReason.NONE : CancelReason.NOT_HIT;\n\n            // Note: o.minPrice always equals o.maxPrice so can use either\n            (uint priceImpactP, uint priceAfterImpact, CancelReason _cancelReason) = _openTradePrep(\n                OpenTradePrepInput(\n                    cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\n                    o.maxPrice,\n                    a.open,\n                    a.spreadP,\n                    o.spreadReductionP,\n                    o.buy,\n                    o.pairIndex,\n                    o.positionSize,\n                    o.leverage,\n                    tradeData[o.trader][o.pairIndex][o.index][TradeType.LIMIT].maxSlippageP,\n                    o.tp,\n                    o.sl\n                )\n            );\n\n            bool exactExecution = cancelReason == CancelReason.NONE;\n\n            cancelReason = !exactExecution &&\n                (\n                    o.maxPrice == 0 || t == NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\n                )\n                ? CancelReason.NOT_HIT\n                : _cancelReason;\n\n            if (cancelReason == CancelReason.NONE) {\n                (StorageInterfaceV5.Trade memory finalTrade, uint tokenPriceWETH) = registerTrade(\n                    StorageInterfaceV5.Trade(\n                        o.trader,\n                        o.pairIndex,\n                        0,\n                        0,\n                        o.positionSize,\n                        priceAfterImpact,\n                        o.buy,\n                        o.leverage,\n                        o.tp,\n                        o.sl\n                    ),\n                    n.nftId,\n                    n.index\n                );\n\n                storageT.unregisterOpenLimitOrder(o.trader, o.pairIndex, o.index);\n\n                emit LimitExecuted(\n                    a.orderId,\n                    n.index,\n                    finalTrade,\n                    n.nftHolder,\n                    StorageInterfaceV5.LimitOrder.OPEN,\n                    finalTrade.openPrice,\n                    priceImpactP,\n                    (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\n                    0,\n                    0,\n                    exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(a.orderId, n.nftHolder, StorageInterfaceV5.LimitOrder.OPEN, cancelReason);\n        }\n\n        nftRewards.unregisterTrigger(\n            NftRewardsInterfaceV6_3_1.TriggeredLimitId(n.trader, n.pairIndex, n.index, n.orderType)\n        );\n\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    function executeNftCloseOrderCallback(AggregatorAnswer memory a) external onlyPriceAggregator notDone {\n        StorageInterfaceV5.PendingNftOrder memory o = storageT.reqID_pendingNftOrder(a.orderId);\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n            o.trader,\n            o.pairIndex,\n            o.index,\n            o.orderType\n        );\n        StorageInterfaceV5.Trade memory t = getOpenTrade(o.trader, o.pairIndex, o.index);\n\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n\n        CancelReason cancelReason = a.open == 0\n            ? CancelReason.MARKET_CLOSED\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterfaceV5.TradeInfo memory i = getOpenTradeInfo(t.trader, t.pairIndex, t.index);\n\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n            Values memory v;\n            v.levPosWETH = (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION;\n            v.posWETH = v.levPosWETH / t.leverage;\n\n            if (o.orderType == StorageInterfaceV5.LimitOrder.LIQ) {\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        v.posWETH,\n                        t.leverage\n                    )\n                );\n            }\n\n            v.price = o.orderType == StorageInterfaceV5.LimitOrder.TP\n                ? t.tp\n                : (o.orderType == StorageInterfaceV5.LimitOrder.SL ? t.sl : v.liqPrice);\n\n            v.exactExecution = v.price > 0 && a.low <= v.price && a.high >= v.price;\n\n            if (v.exactExecution) {\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\n                    ? (v.posWETH * 5) / 100\n                    : (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION;\n            } else {\n                v.price = a.open;\n\n                v.reward1 = o.orderType == StorageInterfaceV5.LimitOrder.LIQ\n                    ? ((t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice) ? (v.posWETH * 5) / 100 : 0)\n                    : (\n                        ((o.orderType == StorageInterfaceV5.LimitOrder.TP &&\n                            t.tp > 0 &&\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\n                            (o.orderType == StorageInterfaceV5.LimitOrder.SL &&\n                                t.sl > 0 &&\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\n                            ? (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) / 100 / PRECISION\n                            : 0\n                    );\n            }\n\n            cancelReason = v.reward1 == 0 ? CancelReason.NOT_HIT : CancelReason.NONE;\n\n            // If can be triggered\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(t.openPrice, v.price, t.buy, t.leverage);\n                v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    false,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    o.orderType == StorageInterfaceV5.LimitOrder.LIQ\n                        ? v.reward1\n                        : (v.levPosWETH * pairsStored.pairCloseFeeP(t.pairIndex)) / 100 / PRECISION,\n                    v.reward1\n                );\n\n                // Convert NFT bot fee from WETH to token value\n                v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\n\n                nftRewards.distributeNftReward(triggeredLimitId, v.reward2, v.tokenPriceWETH);\n\n                storageT.increaseNftRewards(o.nftId, v.reward2);\n\n                emit NftBotFeeCharged(t.trader, v.reward1);\n\n                emit LimitExecuted(\n                    a.orderId,\n                    o.index,\n                    t,\n                    o.nftHolder,\n                    o.orderType,\n                    v.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader,\n                    v.exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(a.orderId, o.nftHolder, o.orderType, cancelReason);\n        }\n\n        nftRewards.unregisterTrigger(triggeredLimitId);\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    // Shared code between market & limit callbacks\n    function registerTrade(\n        StorageInterfaceV5.Trade memory trade,\n        uint nftId,\n        uint limitIndex\n    ) private returns (StorageInterfaceV5.Trade memory, uint) {\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        Values memory v;\n\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\n        v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\n        if (referrals.getTraderReferrer(trade.trader) != address(0)) {\n            // Use this variable to store lev pos WETH for dev/gov fees after referral fees\n            // and before volumeReferredWETH increases\n            v.posWETH =\n                (v.levPosWETH * (100 * PRECISION - referrals.getPercentOfOpenFeeP(trade.trader))) /\n                100 /\n                PRECISION;\n\n            v.reward1 = referrals.distributePotentialReward(\n                trade.trader,\n                v.levPosWETH,\n                pairsStored.pairOpenFeeP(trade.pairIndex),\n                v.tokenPriceWETH\n            );\n\n            sendToVault(v.reward1, trade.trader);\n            trade.positionSizeWETH -= v.reward1;\n\n            emit ReferralFeeCharged(trade.trader, v.reward1);\n        }\n\n        // 2. Charge opening fee - referral fee (if applicable)\n        v.reward2 = storageT.handleDevGovFees(trade.pairIndex, (v.posWETH > 0 ? v.posWETH : v.levPosWETH), true, true);\n\n        trade.positionSizeWETH -= v.reward2;\n\n        emit DevGovFeeCharged(trade.trader, v.reward2);\n\n        // 3. Charge NFT / SSS fee\n        v.reward2 = (v.levPosWETH * pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) / 100 / PRECISION;\n        trade.positionSizeWETH -= v.reward2;\n\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\n        if (nftId < 1500) {\n            sendToVault(v.reward2, trade.trader);\n\n            // Convert NFT bot fee from WETH to token value\n            v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\n\n            nftRewards.distributeNftReward(\n                NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n                    trade.trader,\n                    trade.pairIndex,\n                    limitIndex,\n                    StorageInterfaceV5.LimitOrder.OPEN\n                ),\n                v.reward3,\n                v.tokenPriceWETH\n            );\n            storageT.increaseNftRewards(nftId, v.reward3);\n\n            emit NftBotFeeCharged(trade.trader, v.reward2);\n\n            // 3.2 Distribute SSS fee (if applicable)\n        } else {\n            distributeStakingReward(trade.trader, v.reward2);\n        }\n\n        // 4. Set trade final details\n        trade.index = storageT.firstEmptyTradeIndex(trade.trader, trade.pairIndex);\n        trade.initialPosToken = (trade.positionSizeWETH * PRECISION) / v.tokenPriceWETH;\n\n        trade.tp = correctTp(trade.openPrice, trade.leverage, trade.tp, trade.buy);\n        trade.sl = correctSl(trade.openPrice, trade.leverage, trade.sl, trade.buy);\n\n        // 5. Call other contracts\n        pairInfos.storeTradeInitialAccFees(trade.trader, trade.pairIndex, trade.index, trade.buy);\n        pairsStored.updateGroupCollateral(trade.pairIndex, trade.positionSizeWETH, trade.buy, true);\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.positionSizeWETH * trade.leverage,\n            true,\n            trade.buy\n        );\n\n        // 6. Store final trade in storage contract\n        storageT.storeTrade(\n            trade,\n            StorageInterfaceV5.TradeInfo(0, v.tokenPriceWETH, trade.positionSizeWETH * trade.leverage, 0, 0, false)\n        );\n\n        // 7. Store tradeLastUpdated\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][trade.pairIndex][trade.index][\n            TradeType.MARKET\n        ];\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\n        lastUpdated.tp = currBlock;\n        lastUpdated.sl = currBlock;\n        lastUpdated.created = currBlock;\n\n        return (trade, v.tokenPriceWETH);\n    }\n\n    function unregisterTrade(\n        StorageInterfaceV5.Trade memory trade,\n        bool marketOrder,\n        int percentProfit, // PRECISION\n        uint currentWETHPos, // 1e18\n        uint openInterestWETH, // 1e18\n        uint closingFeeWETH, // 1e18\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\n    ) private returns (uint WETHSentToTrader) {\n        IGToken vault = storageT.vault();\n\n        // 1. Calculate net PnL (after all closing and holding fees)\n        (WETHSentToTrader, ) = _getTradeValue(trade, currentWETHPos, percentProfit, closingFeeWETH + nftFeeWETH);\n\n        // 2. Calls to other contracts\n        borrowingFees.handleTradeAction(trade.trader, trade.pairIndex, trade.index, openInterestWETH, false, trade.buy);\n        getPairsStorage().updateGroupCollateral(trade.pairIndex, openInterestWETH / trade.leverage, trade.buy, false);\n\n        // 3. Unregister trade from storage\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\n\n        // 4.1 If collateral in storage (opened after update)\n        if (trade.positionSizeWETH > 0) {\n            Values memory v;\n\n            // 4.1.1 WETH vault reward\n            v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\n            transferFromStorageToAddress(address(this), v.reward2);\n            vault.distributeReward(v.reward2);\n\n            emit WETHVaultFeeCharged(trade.trader, v.reward2);\n\n            // 4.1.2 SSS reward\n            v.reward3 = marketOrder ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100 : (closingFeeWETH * sssFeeP) / 100;\n\n            distributeStakingReward(trade.trader, v.reward3);\n\n            // 4.1.3 Take WETH from vault if winning trade\n            // or send WETH to vault if losing trade\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\n\n            if (WETHSentToTrader > WETHLeftInStorage) {\n                vault.sendAssets(WETHSentToTrader - WETHLeftInStorage, trade.trader);\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\n            } else {\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\n            }\n\n            // 4.2 If collateral in vault (opened before update)\n        } else {\n            vault.sendAssets(WETHSentToTrader, trade.trader);\n        }\n    }\n\n    // Utils (external)\n    function setTradeLastUpdated(SimplifiedTradeId calldata _id, LastUpdated memory _lastUpdated) external onlyTrading {\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _lastUpdated;\n    }\n\n    function setTradeData(SimplifiedTradeId calldata _id, TradeData memory _tradeData) external onlyTrading {\n        tradeData[_id.trader][_id.pairIndex][_id.index][_id.tradeType] = _tradeData;\n    }\n\n    // Utils (getters)\n    function _getTradeValue(\n        StorageInterfaceV5.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit, // PRECISION\n        uint closingFees // 1e18\n    ) private returns (uint value, uint borrowingFee) {\n        int netProfitP;\n\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(trade, currentWETHPos, percentProfit);\n        value = pairInfos.getTradeValue(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy,\n            currentWETHPos,\n            trade.leverage,\n            netProfitP,\n            closingFees\n        );\n\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\n    }\n\n    function _getBorrowingFeeAdjustedPercentProfit(\n        StorageInterfaceV5.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit // PRECISION\n    ) private view returns (int netProfitP, uint borrowingFee) {\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\n            GNSBorrowingFeesInterfaceV6_4.BorrowingFeeInput(\n                trade.trader,\n                trade.pairIndex,\n                trade.index,\n                trade.buy,\n                currentWETHPos,\n                trade.leverage\n            )\n        );\n        netProfitP = percentProfit - int((borrowingFee * 100 * PRECISION) / currentWETHPos);\n    }\n\n    function withinMaxLeverage(uint pairIndex, uint leverage) private view returns (bool) {\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\n        return pairMaxLev == 0 ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex) : leverage <= pairMaxLev;\n    }\n\n    function withinExposureLimits(\n        uint pairIndex,\n        bool buy,\n        uint positionSizeWETH,\n        uint leverage\n    ) private view returns (bool) {\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\n\n        return\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) + levPositionSizeWETH <=\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\n    }\n\n    function currentPercentProfit(\n        uint openPrice,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) private pure returns (int p) {\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\n\n        p = openPrice > 0\n            ? ((buy ? int(currentPrice) - int(openPrice) : int(openPrice) - int(currentPrice)) *\n                100 *\n                int(PRECISION) *\n                int(leverage)) / int(openPrice)\n            : int(0);\n\n        p = p > maxPnlP ? maxPnlP : p;\n    }\n\n    function correctTp(uint openPrice, uint leverage, uint tp, bool buy) private pure returns (uint) {\n        if (tp == 0 || currentPercentProfit(openPrice, tp, buy, leverage) == int(MAX_GAIN_P) * int(PRECISION)) {\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\n\n            return buy ? openPrice + tpDiff : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\n        }\n\n        return tp;\n    }\n\n    function correctSl(uint openPrice, uint leverage, uint sl, bool buy) private pure returns (uint) {\n        if (sl > 0 && currentPercentProfit(openPrice, sl, buy, leverage) < int(MAX_SL_P) * int(PRECISION) * -1) {\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\n\n            return buy ? openPrice - slDiff : openPrice + slDiff;\n        }\n\n        return sl;\n    }\n\n    function marketExecutionPrice(\n        uint price,\n        uint spreadP,\n        uint spreadReductionP,\n        bool long\n    ) private pure returns (uint) {\n        uint priceDiff = (price * (spreadP - (spreadP * spreadReductionP) / 100)) / 100 / PRECISION;\n\n        return long ? price + priceDiff : price - priceDiff;\n    }\n\n    function _openTradePrep(\n        OpenTradePrepInput memory c\n    ) private view returns (uint priceImpactP, uint priceAfterImpact, CancelReason cancelReason) {\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\n            marketExecutionPrice(c.executionPrice, c.spreadP, c.spreadReductionP, c.buy),\n            c.pairIndex,\n            c.buy,\n            c.positionSize * c.leverage\n        );\n\n        uint maxSlippage = c.maxSlippageP > 0\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\n            : c.wantedPrice / 100; // 1% by default\n\n        cancelReason = isPaused\n            ? CancelReason.PAUSED\n            : (\n                c.marketPrice == 0\n                    ? CancelReason.MARKET_CLOSED\n                    : (\n                        c.buy\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\n                    )\n                    ? CancelReason.SLIPPAGE\n                    : (c.tp > 0 && (c.buy ? priceAfterImpact >= c.tp : priceAfterImpact <= c.tp))\n                    ? CancelReason.TP_REACHED\n                    : (c.sl > 0 && (c.buy ? priceAfterImpact <= c.sl : priceAfterImpact >= c.sl))\n                    ? CancelReason.SL_REACHED\n                    : !withinExposureLimits(c.pairIndex, c.buy, c.positionSize, c.leverage)\n                    ? CancelReason.EXPOSURE_LIMITS\n                    : priceImpactP * c.leverage > pairInfos.maxNegativePnlOnOpenP()\n                    ? CancelReason.PRICE_IMPACT\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\n                    ? CancelReason.MAX_LEVERAGE\n                    : CancelReason.NONE\n            );\n    }\n\n    function getPendingMarketOrder(uint orderId) private view returns (StorageInterfaceV5.PendingMarketOrder memory) {\n        return storageT.reqID_pendingMarketOrder(orderId);\n    }\n\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\n        return storageT.priceAggregator().pairsStorage();\n    }\n\n    function getOpenTrade(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterfaceV5.Trade memory) {\n        return storageT.openTrades(trader, pairIndex, index);\n    }\n\n    function getOpenTradeInfo(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterfaceV5.TradeInfo memory) {\n        return storageT.openTradesInfo(trader, pairIndex, index);\n    }\n\n    // Utils (private)\n    function distributeStakingReward(address trader, uint amountWETH) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        staking.distributeRewardWETH(amountWETH);\n        emit SssFeeCharged(trader, amountWETH);\n    }\n\n    function sendToVault(uint amountWETH, address trader) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        storageT.vault().receiveAssets(amountWETH, trader);\n    }\n\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\n        storageT.transferWETH(address(storageT), to, amountWETH);\n    }\n\n    // Public views\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\n        uint len = getPairsStorage().pairsCount();\n        uint[] memory lev = new uint[](len);\n\n        for (uint i; i < len; ) {\n            lev[i] = pairMaxLeverage[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return lev;\n    }\n}"
    },
    "contracts/contracts6_4/GNSTradingV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"../contract5/interfaces/StorageInterfaceV5.sol\";\nimport \"../contracts6_4/interfaces/GNSPairInfosInterfaceV6.sol\";\nimport \"../contracts6_2/interfaces/GNSReferralsInterfaceV6_2.sol\";\nimport \"../contracts6_4/interfaces/GNSBorrowingFeesInterfaceV6_4.sol\";\nimport \"../contracts6_2/Delegatable.sol\";\nimport \"../libraries/ChainUtils.sol\";\nimport \"../libraries/TradeUtils.sol\";\nimport \"../libraries/PackingUtils.sol\";\n\npragma solidity 0.8.17;\n\ncontract GNSTradingV6_4 is Delegatable {\n    using TradeUtils for address;\n    using PackingUtils for uint256;\n\n    // Contracts (constant)\n    StorageInterfaceV5 public immutable storageT;\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\n    GNSPairInfosInterfaceV6 public immutable pairInfos;\n    GNSReferralsInterfaceV6_2 public immutable referrals;\n    GNSBorrowingFeesInterfaceV6_4 public immutable borrowingFees;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_SL_P = 75; // -75% PNL\n\n    // Params (adjustable)\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\n    uint public marketOrdersTimeout; // block (eg. 30)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n\n    // Events\n    event Done(bool done);\n    event Paused(bool paused);\n\n    event NumberUpdated(string name, uint value);\n\n    event MarketOrderInitiated(uint indexed orderId, address indexed trader, uint indexed pairIndex, bool open);\n\n    event OpenLimitPlaced(address indexed trader, uint indexed pairIndex, uint index);\n    event OpenLimitUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newPrice,\n        uint newTp,\n        uint newSl,\n        uint maxSlippageP\n    );\n    event OpenLimitCanceled(address indexed trader, uint indexed pairIndex, uint index);\n\n    event TpUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newTp);\n    event SlUpdated(address indexed trader, uint indexed pairIndex, uint index, uint newSl);\n\n    event NftOrderInitiated(uint orderId, address indexed nftHolder, address indexed trader, uint indexed pairIndex);\n    event NftOrderSameBlock(address indexed nftHolder, address indexed trader, uint indexed pairIndex);\n\n    event ChainlinkCallbackTimeout(uint indexed orderId, StorageInterfaceV5.PendingMarketOrder order);\n    event CouldNotCloseTrade(address indexed trader, uint indexed pairIndex, uint index);\n\n    constructor(\n        StorageInterfaceV5 _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        GNSPairInfosInterfaceV6 _pairInfos,\n        GNSReferralsInterfaceV6_2 _referrals,\n        GNSBorrowingFeesInterfaceV6_4 _borrowingFees,\n        uint _maxPosWETH,\n        uint _marketOrdersTimeout\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_nftRewards) != address(0) &&\n                address(_pairInfos) != address(0) &&\n                address(_referrals) != address(0) &&\n                address(_borrowingFees) != address(0) &&\n                _maxPosWETH > 0 &&\n                _marketOrdersTimeout > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        borrowingFees = _borrowingFees;\n\n        maxPosWETH = _maxPosWETH;\n        marketOrdersTimeout = _marketOrdersTimeout;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier notContract() {\n        isNotContract();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n    }\n\n    function isNotContract() private view {\n        require(tx.origin == msg.sender);\n    }\n\n    function isNotDone() private view {\n        require(!isDone, \"DONE\");\n    }\n\n    // Manage params\n    function setMaxPosWETH(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        maxPosWETH = value;\n        emit NumberUpdated(\"maxPosWETH\", value);\n    }\n\n    function setMarketOrdersTimeout(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        marketOrdersTimeout = value;\n        emit NumberUpdated(\"marketOrdersTimeout\", value);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n        emit Paused(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n        emit Done(isDone);\n    }\n\n    // Open new trade (MARKET/LIMIT)\n    function openTrade(\n        StorageInterfaceV5.Trade memory t,\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\n        uint spreadReductionId,\n        uint slippageP, // 1e10 (%)\n        address referrer\n    ) external notContract notDone {\n        require(!isPaused, \"PAUSED\");\n        require(t.openPrice * slippageP < type(uint256).max, \"OVERFLOW\");\n        require(t.openPrice > 0, \"PRICE_ZERO\");\n\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        address sender = _msgSender();\n\n        require(\n            storageT.openTradesCount(sender, t.pairIndex) +\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\n                storageT.maxTradesPerPair(),\n            \"MAX_TRADES_PER_PAIR\"\n        );\n\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \"MAX_PENDING_ORDERS\");\n        require(t.positionSizeWETH <= maxPosWETH, \"ABOVE_MAX_POS\");\n        require(t.positionSizeWETH * t.leverage >= pairsStored.pairMinLevPosWETH(t.pairIndex), \"BELOW_MIN_POS\");\n\n        require(\n            t.leverage > 0 &&\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\n            \"LEVERAGE_INCORRECT\"\n        );\n\n        require(\n            spreadReductionId == 0 || storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\n            \"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\"\n        );\n\n        require(t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice), \"WRONG_TP\");\n        require(t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice), \"WRONG_SL\");\n\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, t.pairIndex, t.buy, t.positionSizeWETH * t.leverage);\n        require(priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(), \"PRICE_IMPACT_TOO_HIGH\");\n\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\n\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\n            uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\n\n            storageT.storeOpenLimitOrder(\n                StorageInterfaceV5.OpenLimitOrder(\n                    sender,\n                    t.pairIndex,\n                    index,\n                    t.positionSizeWETH,\n                    spreadReductionId > 0 ? storageT.spreadReductionsP(spreadReductionId - 1) : 0,\n                    t.buy,\n                    t.leverage,\n                    t.tp,\n                    t.sl,\n                    t.openPrice,\n                    t.openPrice,\n                    block.number,\n                    0\n                )\n            );\n\n            nftRewards.setOpenLimitOrderType(sender, t.pairIndex, index, orderType);\n\n            address c = storageT.callbacks();\n            c.setTradeLastUpdated(\n                sender,\n                t.pairIndex,\n                index,\n                TradingCallbacksV6_4.TradeType.LIMIT,\n                ChainUtils.getBlockNumber()\n            );\n            c.setTradeData(sender, t.pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, slippageP);\n\n            emit OpenLimitPlaced(sender, t.pairIndex, index);\n        } else {\n            uint orderId = aggregator.getPrice(\n                t.pairIndex,\n                AggregatorInterfaceV6_4.OrderType.MARKET_OPEN,\n                t.positionSizeWETH * t.leverage,\n                ChainUtils.getBlockNumber()\n            );\n\n            storageT.storePendingMarketOrder(\n                StorageInterfaceV5.PendingMarketOrder(\n                    StorageInterfaceV5.Trade(\n                        sender,\n                        t.pairIndex,\n                        0,\n                        0,\n                        t.positionSizeWETH,\n                        0,\n                        t.buy,\n                        t.leverage,\n                        t.tp,\n                        t.sl\n                    ),\n                    0,\n                    t.openPrice,\n                    slippageP,\n                    spreadReductionId > 0 ? storageT.spreadReductionsP(spreadReductionId - 1) : 0,\n                    0\n                ),\n                orderId,\n                true\n            );\n\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\n        }\n\n        referrals.registerPotentialReferrer(sender, referrer);\n    }\n\n    // Close trade (MARKET)\n    function closeTradeMarket(uint pairIndex, uint index) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        StorageInterfaceV5.TradeInfo memory i = storageT.openTradesInfo(sender, pairIndex, index);\n\n        require(storageT.pendingOrderIdsCount(sender) < storageT.maxPendingMarketOrders(), \"MAX_PENDING_ORDERS\");\n        require(!i.beingMarketClosed, \"ALREADY_BEING_CLOSED\");\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint orderId = storageT.priceAggregator().getPrice(\n            pairIndex,\n            AggregatorInterfaceV6_4.OrderType.MARKET_CLOSE,\n            (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\n            ChainUtils.getBlockNumber()\n        );\n\n        storageT.storePendingMarketOrder(\n            StorageInterfaceV5.PendingMarketOrder(\n                StorageInterfaceV5.Trade(sender, pairIndex, index, 0, 0, 0, false, 0, 0, 0),\n                0,\n                0,\n                0,\n                0,\n                0\n            ),\n            orderId,\n            false\n        );\n\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\n    }\n\n    // Manage limit order (OPEN)\n    function updateOpenLimitOrder(\n        uint pairIndex,\n        uint index,\n        uint price, // PRECISION\n        uint tp,\n        uint sl,\n        uint maxSlippageP\n    ) external notContract notDone {\n        require(price > 0, \"PRICE_ZERO\");\n\n        address sender = _msgSender();\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \"NO_LIMIT\");\n\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\n\n        require(tp == 0 || (o.buy ? tp > price : tp < price), \"WRONG_TP\");\n        require(sl == 0 || (o.buy ? sl < price : sl > price), \"WRONG_SL\");\n\n        require(price * maxSlippageP < type(uint256).max, \"OVERFLOW\");\n\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\n\n        o.minPrice = price;\n        o.maxPrice = price;\n        o.tp = tp;\n        o.sl = sl;\n\n        storageT.updateOpenLimitOrder(o);\n\n        address c = storageT.callbacks();\n        c.setTradeLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.LIMIT,\n            ChainUtils.getBlockNumber()\n        );\n        c.setTradeData(sender, pairIndex, index, TradingCallbacksV6_4.TradeType.LIMIT, maxSlippageP);\n\n        emit OpenLimitUpdated(sender, pairIndex, index, price, tp, sl, maxSlippageP);\n    }\n\n    function cancelOpenLimitOrder(uint pairIndex, uint index) external notContract notDone {\n        address sender = _msgSender();\n        require(storageT.hasOpenLimitOrder(sender, pairIndex, index), \"NO_LIMIT\");\n\n        StorageInterfaceV5.OpenLimitOrder memory o = storageT.getOpenLimitOrder(sender, pairIndex, index);\n\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.OPEN);\n\n        storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\n        storageT.transferWETH(address(storageT), sender, o.positionSize);\n\n        emit OpenLimitCanceled(sender, pairIndex, index);\n    }\n\n    // Manage limit order (TP/SL)\n    function updateTp(uint pairIndex, uint index, uint newTp) external notContract notDone {\n        address sender = _msgSender();\n\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.TP);\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        storageT.updateTp(sender, pairIndex, index, newTp);\n        storageT.callbacks().setTpLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit TpUpdated(sender, pairIndex, index, newTp);\n    }\n\n    function updateSl(uint pairIndex, uint index, uint newSl) external notContract notDone {\n        address sender = _msgSender();\n\n        checkNoPendingTrigger(sender, pairIndex, index, StorageInterfaceV5.LimitOrder.SL);\n\n        StorageInterfaceV5.Trade memory t = storageT.openTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\n\n        require(\n            newSl == 0 || (t.buy ? newSl >= t.openPrice - maxSlDist : newSl <= t.openPrice + maxSlDist),\n            \"SL_TOO_BIG\"\n        );\n\n        storageT.updateSl(sender, pairIndex, index, newSl);\n        storageT.callbacks().setSlLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksV6_4.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit SlUpdated(sender, pairIndex, index, newSl);\n    }\n\n    // Execute limit order\n    function executeNftOrder(uint256 packed) external notContract notDone {\n        (uint _orderType, address trader, uint pairIndex, uint index, uint nftId, uint nftType) = packed\n            .unpackExecuteNftOrder();\n        StorageInterfaceV5.LimitOrder orderType = StorageInterfaceV5.LimitOrder(_orderType);\n        address sender = _msgSender();\n\n        require(nftType >= 1 && nftType <= 5, \"WRONG_NFT_TYPE\");\n        require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \"NO_NFT\");\n\n        require(block.number >= storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(), \"SUCCESS_TIMELOCK\");\n\n        bool isOpenLimit = orderType == StorageInterfaceV5.LimitOrder.OPEN;\n        TradingCallbacksV6_4.TradeType tradeType = isOpenLimit\n            ? TradingCallbacksV6_4.TradeType.LIMIT\n            : TradingCallbacksV6_4.TradeType.MARKET;\n\n        require(\n            canExecute(orderType, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, tradeType)),\n            \"IN_TIMEOUT\"\n        );\n\n        handleBotInUse(sender, nftId, trader, pairIndex, index);\n\n        StorageInterfaceV5.Trade memory t;\n\n        if (isOpenLimit) {\n            require(storageT.hasOpenLimitOrder(trader, pairIndex, index), \"NO_LIMIT\");\n        } else {\n            t = storageT.openTrades(trader, pairIndex, index);\n\n            require(t.leverage > 0, \"NO_TRADE\");\n\n            if (orderType == StorageInterfaceV5.LimitOrder.LIQ) {\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    GNSBorrowingFeesInterfaceV6_4.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        (t.initialPosToken * storageT.openTradesInfo(t.trader, t.pairIndex, t.index).tokenPriceWETH) /\n                            PRECISION,\n                        t.leverage\n                    )\n                );\n\n                require(t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl), \"HAS_SL\");\n            } else {\n                require(orderType != StorageInterfaceV5.LimitOrder.SL || t.sl > 0, \"NO_SL\");\n                require(orderType != StorageInterfaceV5.LimitOrder.TP || t.tp > 0, \"NO_TP\");\n            }\n        }\n\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n            trader,\n            pairIndex,\n            index,\n            orderType\n        );\n\n        if (!nftRewards.triggered(triggeredLimitId) || nftRewards.timedOut(triggeredLimitId)) {\n            uint leveragedPosWETH;\n\n            if (isOpenLimit) {\n                StorageInterfaceV5.OpenLimitOrder memory l = storageT.getOpenLimitOrder(trader, pairIndex, index);\n\n                leveragedPosWETH = l.positionSize * l.leverage;\n                (uint priceImpactP, ) = pairInfos.getTradePriceImpact(0, l.pairIndex, l.buy, leveragedPosWETH);\n\n                require(priceImpactP * l.leverage <= pairInfos.maxNegativePnlOnOpenP(), \"PRICE_IMPACT_TOO_HIGH\");\n            } else {\n                leveragedPosWETH =\n                    (t.initialPosToken * storageT.openTradesInfo(trader, pairIndex, index).tokenPriceWETH * t.leverage) /\n                    PRECISION;\n            }\n\n            storageT.transferLinkToAggregator(sender, pairIndex, leveragedPosWETH);\n\n            (uint orderId, uint linkFee) = getPriceNftOrder(\n                isOpenLimit,\n                trader,\n                pairIndex,\n                index,\n                tradeType,\n                orderType,\n                leveragedPosWETH\n            );\n\n            StorageInterfaceV5.PendingNftOrder memory pendingNftOrder;\n            pendingNftOrder.nftHolder = sender;\n            pendingNftOrder.nftId = nftId;\n            pendingNftOrder.trader = trader;\n            pendingNftOrder.pairIndex = pairIndex;\n            pendingNftOrder.index = index;\n            pendingNftOrder.orderType = orderType;\n\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\n            nftRewards.storeFirstToTrigger(triggeredLimitId, sender, linkFee);\n\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\n        } else {\n            nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\n\n            emit NftOrderSameBlock(sender, trader, pairIndex);\n        }\n    }\n\n    // Market timeout\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\n        StorageInterfaceV5.Trade memory t = o.trade;\n\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \"WAIT_TIMEOUT\");\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage > 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, true);\n        storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterfaceV5.PendingMarketOrder memory o = storageT.reqID_pendingMarketOrder(_order);\n        StorageInterfaceV5.Trade memory t = o.trade;\n\n        require(o.block > 0 && block.number >= o.block + marketOrdersTimeout, \"WAIT_TIMEOUT\");\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage == 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, false);\n\n        (bool success, ) = address(this).delegatecall(\n            abi.encodeWithSignature(\"closeTradeMarket(uint256,uint256)\", t.pairIndex, t.index)\n        );\n\n        if (!success) {\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\n        }\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    // Helpers\n    function checkNoPendingTrigger(\n        address trader,\n        uint pairIndex,\n        uint index,\n        StorageInterfaceV5.LimitOrder orderType\n    ) private view {\n        NftRewardsInterfaceV6_3_1.TriggeredLimitId memory triggeredLimitId = NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n            trader,\n            pairIndex,\n            index,\n            orderType\n        );\n        require(!nftRewards.triggered(triggeredLimitId) || nftRewards.timedOut(triggeredLimitId), \"PENDING_TRIGGER\");\n    }\n\n    function canExecute(\n        StorageInterfaceV5.LimitOrder orderType,\n        TradingCallbacksV6_4.SimplifiedTradeId memory id\n    ) private view returns (bool) {\n        if (orderType == StorageInterfaceV5.LimitOrder.LIQ) return true;\n\n        uint b = ChainUtils.getBlockNumber();\n        address cb = storageT.callbacks();\n\n        if (orderType == StorageInterfaceV5.LimitOrder.TP) return !cb.isTpInTimeout(id, b);\n        if (orderType == StorageInterfaceV5.LimitOrder.SL) return !cb.isSlInTimeout(id, b);\n\n        return !cb.isLimitInTimeout(id, b);\n    }\n\n    function pairMaxLeverage(PairsStorageInterfaceV6 pairsStored, uint pairIndex) private view returns (uint) {\n        uint max = TradingCallbacksV6_4(storageT.callbacks()).pairMaxLeverage(pairIndex);\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\n    }\n\n    function handleBotInUse(address sender, uint nftId, address trader, uint pairIndex, uint index) private {\n        (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\n            block.number,\n            sender,\n            nftId,\n            trader,\n            pairIndex,\n            index\n        );\n        require(!nftRewards.nftBotInUse(nftHash, botHash), \"BOT_IN_USE\");\n\n        nftRewards.setNftBotInUse(nftHash, botHash);\n    }\n\n    function getPriceNftOrder(\n        bool isOpenLimit,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType tradeType,\n        StorageInterfaceV5.LimitOrder orderType,\n        uint leveragedPosWETH\n    ) private returns (uint orderId, uint linkFee) {\n        TradingCallbacksV6_4.LastUpdated memory lastUpdated = TradingCallbacksV6_4(storageT.callbacks())\n            .tradeLastUpdated(trader, pairIndex, index, tradeType);\n\n        AggregatorInterfaceV6_4 aggregator = storageT.priceAggregator();\n\n        orderId = aggregator.getPrice(\n            pairIndex,\n            isOpenLimit ? AggregatorInterfaceV6_4.OrderType.LIMIT_OPEN : AggregatorInterfaceV6_4.OrderType.LIMIT_CLOSE,\n            leveragedPosWETH,\n            isOpenLimit ? lastUpdated.limit : orderType == StorageInterfaceV5.LimitOrder.SL\n                ? lastUpdated.sl\n                : orderType == StorageInterfaceV5.LimitOrder.TP\n                ? lastUpdated.tp\n                : lastUpdated.created\n        );\n\n        linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\n    }\n}"
    },
    "contracts/contracts6_4/interfaces/CallbacksInterfaceV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface CallbacksInterfaceV6_4 {\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    function openTradeMarketCallback(AggregatorAnswer memory) external;\n\n    function closeTradeMarketCallback(AggregatorAnswer memory) external;\n\n    function executeNftOpenOrderCallback(AggregatorAnswer memory) external;\n\n    function executeNftCloseOrderCallback(AggregatorAnswer memory) external;\n}"
    },
    "contracts/contracts6_4/interfaces/GNSBorrowingFeesInterfaceV6_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface GNSBorrowingFeesInterfaceV6_4 {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(uint indexed pairIndex, uint16 indexed prevGroupIndex, uint16 indexed newGroupIndex);\n    event GroupUpdated(uint16 indexed groupIndex, uint32 feePerBlock, uint72 maxOi, uint48 feeExponent);\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(uint indexed pairIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupAccFeesUpdated(uint16 indexed groupIndex, uint currentBlock, uint64 accFeeLong, uint64 accFeeShort);\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(LiqPriceInput calldata) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(BorrowingFeeInput memory) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(uint pairIndex, bool long, uint positionSizeDai) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n}"
    },
    "contracts/contracts6_4/interfaces/GNSPairInfosInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface GNSPairInfosInterfaceV6 {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(address, uint, uint) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(address trader, uint pairIndex, uint index, bool long) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n}"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (block.chainid == ARBITRUM_MAINNET || block.chainid == ARBITRUM_GOERLI) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(uint blockNumber) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}"
    },
    "contracts/libraries/PackingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary PackingUtils {\n    function pack(uint256[] memory values, uint256[] memory bitLengths) external pure returns (uint256 packed) {\n        require(values.length == bitLengths.length, \"Mismatch in the lengths of values and bitLengths arrays\");\n\n        uint256 currentShift;\n\n        for (uint256 i; i < values.length; i++) {\n            require(currentShift + bitLengths[i] <= 256, \"Packed value exceeds 256 bits\");\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            require(values[i] <= maxValue, \"Value too large for specified bit length\");\n\n            uint256 maskedValue = values[i] & maxValue;\n            packed |= maskedValue << currentShift;\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack(uint256 packed, uint256[] memory bitLengths) external pure returns (uint256[] memory values) {\n        values = new uint256[](bitLengths.length);\n\n        uint256 currentShift;\n        for (uint256 i; i < bitLengths.length; i++) {\n            require(currentShift + bitLengths[i] <= 256, \"Unpacked value exceeds 256 bits\");\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            uint256 mask = maxValue << currentShift;\n            values[i] = (packed & mask) >> currentShift;\n\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack256To64(uint256 packed) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\n        a = uint64(packed);\n        b = uint64(packed >> 64);\n        c = uint64(packed >> 128);\n        d = uint64(packed >> 192);\n    }\n\n    // Function-specific unpacking utils\n    function unpackExecuteNftOrder(\n        uint256 packed\n    ) external pure returns (uint256 a, address b, uint256 c, uint256 d, uint256 e, uint256 f) {\n        a = packed & 0xFF; // 8 bits\n        b = address(uint160(packed >> 8)); // 160 bits\n        c = (packed >> 168) & 0xFFFF; // 16 bits\n        d = (packed >> 184) & 0xFFFF; // 16 bits\n        e = (packed >> 200) & 0xFFFF; // 16 bits\n        f = (packed >> 216) & 0xFFFF; // 16 bits\n    }\n}"
    },
    "contracts/libraries/TradeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../contract5/interfaces/StorageInterfaceV5.sol\";\n\nlibrary TradeUtils {\n    function _getTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type\n    )\n        internal\n        view\n        returns (\n            TradingCallbacksV6_4,\n            TradingCallbacksV6_4.LastUpdated memory,\n            TradingCallbacksV6_4.SimplifiedTradeId memory\n        )\n    {\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\n\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\n    }\n\n    function setTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        uint32 b = uint32(blockNumber);\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        callbacks.setTradeLastUpdated(\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\n        );\n    }\n\n    function setSlLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksV6_4 callbacks,\n            TradingCallbacksV6_4.LastUpdated memory l,\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.sl = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function setTpLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksV6_4 callbacks,\n            TradingCallbacksV6_4.LastUpdated memory l,\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.tp = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function isTpInTimeout(\n        address _callbacks,\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\n            _callbacks,\n            id.trader,\n            id.pairIndex,\n            id.index,\n            id.tradeType\n        );\n\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\n    }\n\n    function isSlInTimeout(\n        address _callbacks,\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\n            _callbacks,\n            id.trader,\n            id.pairIndex,\n            id.index,\n            id.tradeType\n        );\n\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\n    }\n\n    function isLimitInTimeout(\n        address _callbacks,\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\n            _callbacks,\n            id.trader,\n            id.pairIndex,\n            id.index,\n            id.tradeType\n        );\n\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\n    }\n\n    function setTradeData(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksV6_4.TradeType _type,\n        uint maxSlippageP\n    ) external {\n        require(maxSlippageP <= type(uint40).max, \"OVERFLOW\");\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\n        callbacks.setTradeData(\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\n        );\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 125
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}