{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterface.sol\";\nimport \"./StorageInterface.sol\";\n\ninterface AggregatorInterfaceV1_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceWETH() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\n\n    function marketOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function nftOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n}\n"
    },
    "contracts/interfaces/BorrowingFeesInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface BorrowingFeesInterface {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(\n        uint indexed pairIndex,\n        uint16 indexed prevGroupIndex,\n        uint16 indexed newGroupIndex\n    );\n    event GroupUpdated(\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint72 maxOi,\n        uint48 feeExponent\n    );\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(\n        uint indexed pairIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupAccFeesUpdated(\n        uint16 indexed groupIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(\n        LiqPriceInput calldata\n    ) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(\n        BorrowingFeeInput memory\n    ) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeDai\n    ) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ChainlinkFeedInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ChainlinkFeedInterface {\n    function latestRoundData()\n        external\n        view\n        returns (uint80, int, uint, uint, uint80);\n}\n"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IOracle {\n    function getPrice(\n        uint256 tokenIndex\n    ) external view returns (uint256 price, uint256 lastupdateTime);\n}\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(\n        uint prevPositiveOpenPnl,\n        uint newPositiveOpenPnl\n    ) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(\n        uint depositId\n    ) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceWETH() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(\n        uint currentBlock\n    ) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface NftInterfaceV5 {\n    function balanceOf(address) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n\n    function transferFrom(address, address, uint) external;\n\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NFTRewardInterfaceV6_3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./StorageInterface.sol\";\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterface.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(\n        TriggeredLimitId calldata,\n        address,\n        uint\n    ) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(\n        TriggeredLimitId calldata,\n        uint,\n        uint\n    ) external;\n\n    function openLimitOrderTypes(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(\n        address,\n        uint,\n        uint,\n        OpenLimitOrderType\n    ) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(\n        uint,\n        address,\n        uint,\n        address,\n        uint,\n        uint\n    ) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/PairInfosInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PairInfosInterface {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long\n    ) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n}\n"
    },
    "contracts/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PairsStorageInterfaceV6 {\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    function incrementCurrentOrderId() external returns (uint);\n\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n\n    function pairJob(\n        uint\n    ) external returns (string memory, string memory, bytes32, uint);\n\n    function pairFeed(uint) external view returns (Feed memory);\n\n    function pairSpreadP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function groupMaxCollateral(uint) external view returns (uint);\n\n    function groupCollateral(uint, bool) external view returns (uint);\n\n    function guaranteedSlEnabled(uint) external view returns (bool);\n\n    function pairOpenFeeP(uint) external view returns (uint);\n\n    function pairCloseFeeP(uint) external view returns (uint);\n\n    function pairOracleFeeP(uint) external view returns (uint);\n\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\n\n    function pairReferralFeeP(uint) external view returns (uint);\n\n    function pairMinLevPosWETH(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ReferralsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ReferralsInterface {\n    function registerPotentialReferrer(\n        address trader,\n        address referral\n    ) external;\n\n    function distributePotentialReward(\n        address trader,\n        uint volumeWETH,\n        uint pairOpenFeeP,\n        uint tokenPriceWETH\n    ) external returns (uint);\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\n\n    function getTraderReferrer(\n        address trader\n    ) external view returns (address referrer);\n}\n"
    },
    "contracts/interfaces/StakingInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface StakingInterface {\n    function distributeRewardWETH(uint amount) external;\n}\n"
    },
    "contracts/interfaces/StorageInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./TokenInterface.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IToken.sol\";\nimport \"./AggregatorInterfaceV1_4.sol\";\nimport \"./IOracle.sol\";\n\ninterface StorageInterface {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceWETH; // PRECISION\n        uint openInterestWETH; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (WETH or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function WETH() external view returns (TokenInterface);\n\n    function token() external view returns (TokenInterface);\n\n    function linkErc677() external view returns (TokenInterface);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\n\n    function vault() external view returns (IToken);\n\n    function trading() external view returns (address);\n\n    function callbacks() external view returns (address);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferWETH(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (bool);\n\n    function storePendingMarketOrder(\n        PendingMarketOrder memory,\n        uint,\n        bool\n    ) external;\n\n    function openTrades(\n        address,\n        uint,\n        uint\n    ) external view returns (Trade memory);\n\n    function openTradesInfo(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function reqID_pendingMarketOrder(\n        uint\n    ) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function reqID_pendingNftOrder(\n        uint\n    ) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestWETH(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    function fakeBlockNumber() external view returns (uint); // Testing\n\n    function getGov() external view returns (address); // checking\n\n    function mintWETH(address _to, uint _amount) external;\n\n    function oracle() external returns (IOracle);\n}\n"
    },
    "contracts/interfaces/TokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface TokenInterface {\n    function burn(address, uint256) external;\n\n    function mint(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(address, address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function hasRole(bytes32, address) external view returns (bool);\n\n    function approve(address, uint256) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (\n            block.chainid == ARBITRUM_MAINNET ||\n            block.chainid == ARBITRUM_GOERLI\n        ) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(\n        uint blockNumber\n    ) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\ncontract Oracle is AccessControlUpgradeable {\n    struct Observation {\n        uint256 price;\n        uint256 lastupdateTime;\n    }\n\n    bytes32 public constant PRICE_SETTER_ROLE = keccak256(\"PRICE_SETTER_ROLE\");\n\n    mapping(uint256 => Observation) priceData;\n\n    function __Oracle_init(address priceSetter) external initializer {\n        __AccessControl_init_unchained();\n        __Context_init_unchained();\n        _grantRole(PRICE_SETTER_ROLE, priceSetter);\n        _setRoleAdmin(PRICE_SETTER_ROLE, PRICE_SETTER_ROLE);\n    }\n\n    function feedPrice(\n        uint256 tokenIndex,\n        uint256 price\n    ) public onlyRole(PRICE_SETTER_ROLE) {\n        _feedPrice(tokenIndex, price);\n    }\n\n    function feedPriceArray(\n        uint256[] calldata tokenIndexes,\n        uint256[] calldata prices\n    ) external onlyRole(PRICE_SETTER_ROLE) {\n        for (uint256 i; i < tokenIndexes.length; i++) {\n            _feedPrice(tokenIndexes[i], prices[i]);\n        }\n    }\n\n    function _feedPrice(uint256 tokenIndex, uint256 price) internal {\n        require(price > 0, \"Price can't be zero\");\n        priceData[tokenIndex] = Observation({\n            price: price,\n            lastupdateTime: block.timestamp\n        });\n    }\n\n    function getPrice(\n        uint256 tokenIndex\n    ) external view returns (uint256 price, uint256 lastupdateTime) {\n        Observation memory tokenPriceData = priceData[tokenIndex];\n        return (tokenPriceData.price, tokenPriceData.lastupdateTime);\n    }\n}\n"
    },
    "contracts/TradingCallbacks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./interfaces/ReferralsInterface.sol\";\nimport \"./interfaces/StakingInterface.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\n\ncontract TradingCallbacks is Initializable {\n    // Contracts (constant)\n    StorageInterface public storageT;\n    NftRewardsInterfaceV6_3_1 public nftRewards;\n    PairInfosInterface public pairInfos;\n    ReferralsInterface public referrals;\n    StakingInterface public staking;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10; // 10 decimals\n\n    uint constant MAX_SL_P = 75; // -75% PNL\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\n\n    // Params (adjustable)\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\n\n    // Last Updated State\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\n        public tradeLastUpdated; // Block numbers for last updated\n\n    // v6.3.2 Storage/State\n    BorrowingFeesInterface public borrowingFees;\n\n    mapping(uint => uint) public pairMaxLeverage;\n\n    // v6.4 Storage\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\n        public tradeData; // More storage for trades / limit orders\n\n    // Custom data types\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n\n    // Useful to avoid stack too deep errors\n    struct Values {\n        uint posWETH;\n        uint levPosWETH;\n        uint tokenPriceWETH;\n        int profitP;\n        uint price;\n        uint liqPrice;\n        uint WETHSentToTrader;\n        uint reward1;\n        uint reward2;\n        uint reward3;\n        bool exactExecution;\n    }\n\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    struct OpenTradePrepInput {\n        uint executionPrice;\n        uint wantedPrice;\n        uint marketPrice;\n        uint spreadP;\n        uint spreadReductionP;\n        bool buy;\n        uint pairIndex;\n        uint positionSize;\n        uint leverage;\n        uint maxSlippageP;\n        uint tp;\n        uint sl;\n    }\n\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n\n    enum CancelReason {\n        NONE,\n        PAUSED,\n        MARKET_CLOSED,\n        SLIPPAGE,\n        TP_REACHED,\n        SL_REACHED,\n        EXPOSURE_LIMITS,\n        PRICE_IMPACT,\n        MAX_LEVERAGE,\n        NO_TRADE,\n        WRONG_TRADE,\n        NOT_HIT\n    }\n\n    // Events\n    event MarketExecuted(\n        uint indexed orderId,\n        StorageInterface.Trade t,\n        bool open,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit, // before fees\n        uint WETHSentToTrader\n    );\n\n    event LimitExecuted(\n        uint indexed orderId,\n        uint limitIndex,\n        StorageInterface.Trade t,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit,\n        uint WETHSentToTrader,\n        bool exactExecution\n    );\n\n    event MarketOpenCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        CancelReason cancelReason\n    );\n    event MarketCloseCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        CancelReason cancelReason\n    );\n    event NftOrderCanceled(\n        uint indexed orderId,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        CancelReason cancelReason\n    );\n\n    event ClosingFeeSharesPUpdated(\n        uint WETHVaultFeeP,\n        uint lpFeeP,\n        uint sssFeeP\n    );\n    event CanExecuteTimeoutUpdated(uint newValue);\n\n    event Pause(bool paused);\n    event Done(bool done);\n\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\n    event SssFeeCharged(address indexed trader, uint valueWETH);\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\n    event BorrowingFeeCharged(\n        address indexed trader,\n        uint tradeValueWETH,\n        uint feeValueWETH\n    );\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\n\n    // Custom errors (save gas)\n    error WrongParams();\n    error Forbidden();\n\n    function initialize(\n        StorageInterface _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        PairInfosInterface _pairInfos,\n        ReferralsInterface _referrals,\n        StakingInterface _staking,\n        BorrowingFeesInterface _borrowingFees,\n        address vaultToApprove,\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP,\n        uint _canExecuteTimeout\n    ) external initializer {\n        if (\n            address(_storageT) == address(0) ||\n            address(_nftRewards) == address(0) ||\n            address(_pairInfos) == address(0) ||\n            address(_referrals) == address(0) ||\n            address(_staking) == address(0) ||\n            vaultToApprove == address(0) ||\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\n        ) {\n            revert WrongParams();\n        }\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        staking = _staking;\n        borrowingFees = _borrowingFees;\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        canExecuteTimeout = _canExecuteTimeout;\n        TokenInterface t = storageT.WETH();\n        t.approve(address(staking), type(uint256).max);\n        t.approve(vaultToApprove, type(uint256).max);\n    }\n\n    // function initializeV2(\n    //     BorrowingFeesInterface _borrowingFees\n    // ) external reinitializer(2) {\n    //     if (address(_borrowingFees) == address(0)) {\n    //         revert WrongParams();\n    //     }\n    //     borrowingFees = _borrowingFees;\n    // }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier onlyPriceAggregator() {\n        isPriceAggregator();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n    modifier onlyTrading() {\n        isTrading();\n        _;\n    }\n    modifier onlyManager() {\n        isManager();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        if (msg.sender != storageT.gov()) {\n            revert Forbidden();\n        }\n    }\n\n    function isPriceAggregator() private view {\n        if (msg.sender != address(storageT.priceAggregator())) {\n            revert Forbidden();\n        }\n    }\n\n    function isNotDone() private view {\n        if (isDone) {\n            revert Forbidden();\n        }\n    }\n\n    function isTrading() private view {\n        if (msg.sender != storageT.trading()) {\n            revert Forbidden();\n        }\n    }\n\n    function isManager() private view {\n        if (msg.sender != pairInfos.manager()) {\n            revert Forbidden();\n        }\n    }\n\n    // Manage params\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\n        _setPairMaxLeverage(pairIndex, maxLeverage);\n    }\n\n    function setPairMaxLeverageArray(\n        uint[] calldata indices,\n        uint[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n\n        if (len != values.length) {\n            revert WrongParams();\n        }\n\n        for (uint i; i < len; ) {\n            _setPairMaxLeverage(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\n        pairMaxLeverage[pairIndex] = maxLeverage;\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\n    }\n\n    function setClosingFeeSharesP(\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP\n    ) external onlyGov {\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\n            revert WrongParams();\n        }\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\n    }\n\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\n            revert WrongParams();\n        }\n        canExecuteTimeout = _canExecuteTimeout;\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n\n        emit Pause(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n\n        emit Done(isDone);\n    }\n\n    // Callbacks\n    function openTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = o.trade;\n\n        (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        ) = _openTradePrep(\n                OpenTradePrepInput(\n                    a.price,\n                    o.wantedPrice,\n                    a.price,\n                    a.spreadP,\n                    o.spreadReductionP,\n                    t.buy,\n                    t.pairIndex,\n                    t.positionSizeWETH,\n                    t.leverage,\n                    o.slippageP,\n                    t.tp,\n                    t.sl\n                )\n            );\n\n        t.openPrice = priceAfterImpact;\n        if (cancelReason == CancelReason.NONE) {\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\n                t,\n                1500,\n                0\n            );\n\n            emit MarketExecuted(\n                a.orderId,\n                finalTrade,\n                true,\n                finalTrade.openPrice,\n                priceImpactP,\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\n                0,\n                0\n            );\n        } else {\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\n            //     t.pairIndex,\n            //     t.positionSizeWETH * t.leverage,\n            //     true,\n            //     true\n            // );\n            // transferFromStorageToAddress(\n            //     t.trader,\n            //     t.positionSizeWETH - devGovFeesWETH\n            // );\n\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\n            emit MarketOpenCanceled(\n                a.orderId,\n                t.trader,\n                t.pairIndex,\n                cancelReason\n            );\n        }\n\n        // storageT.unregisterPendingMarketOrder(a.orderId, true);\n    }\n\n    function closeTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trade.trader,\n            o.trade.pairIndex,\n            o.trade.index\n        );\n\n        CancelReason cancelReason = t.leverage == 0\n            ? CancelReason.NO_TRADE\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\n\n        if (cancelReason != CancelReason.NO_TRADE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n            AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n\n            Values memory v;\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    a.price,\n                    t.buy,\n                    t.leverage\n                );\n                v.posWETH = v.levPosWETH / t.leverage;\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    true,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    (v.levPosWETH *\n                        aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\n                        100 /\n                        PRECISION,\n                    (v.levPosWETH *\n                        aggregator.pairsStorage().pairNftLimitOrderFeeP(\n                            t.pairIndex\n                        )) /\n                        100 /\n                        PRECISION\n                );\n\n                emit MarketExecuted(\n                    a.orderId,\n                    t,\n                    false,\n                    a.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader\n                );\n            } else {\n                // Dev / gov rewards to pay for oracle cost\n                // Charge in WETH if collateral in storage or token if collateral in vault\n                // v.reward1 = t.positionSizeWETH > 0\n                //     ? storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         v.levPosWETH,\n                //         true,\n                //         true\n                //     )\n                //     : (storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\n                //         false,\n                //         true\n                //     ) * v.tokenPriceWETH) / PRECISION;\n\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\n                // storageT.updateTrade(t);\n\n                emit DevGovFeeCharged(t.trader, v.reward1);\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit MarketCloseCanceled(\n                a.orderId,\n                o.trade.trader,\n                o.trade.pairIndex,\n                o.trade.index,\n                cancelReason\n            );\n        }\n\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\n    }\n\n    function executeNftOpenOrderCallback(\n        AggregatorAnswer memory a\n    ) external onlyPriceAggregator notDone {\n        StorageInterface.PendingNftOrder memory n = storageT\n            .reqID_pendingNftOrder(a.orderId);\n\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(\n            n.trader,\n            n.pairIndex,\n            n.index\n        )\n            ? CancelReason.NO_TRADE\n            : CancelReason.NONE;\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterface.OpenLimitOrder memory o = storageT\n                .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\n\n            NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\n                .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\n\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\n                ? CancelReason.NONE\n                : CancelReason.NOT_HIT;\n\n            // Note: o.minPrice always equals o.maxPrice so can use either\n            (\n                uint priceImpactP,\n                uint priceAfterImpact,\n                CancelReason _cancelReason\n            ) = _openTradePrep(\n                    OpenTradePrepInput(\n                        cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\n                        o.maxPrice,\n                        a.open,\n                        a.spreadP,\n                        o.spreadReductionP,\n                        o.buy,\n                        o.pairIndex,\n                        o.positionSize,\n                        o.leverage,\n                        tradeData[o.trader][o.pairIndex][o.index][\n                            TradeType.LIMIT\n                        ].maxSlippageP,\n                        o.tp,\n                        o.sl\n                    )\n                );\n\n            bool exactExecution = cancelReason == CancelReason.NONE;\n\n            cancelReason = !exactExecution &&\n                (\n                    o.maxPrice == 0 ||\n                        t ==\n                        NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\n                )\n                ? CancelReason.NOT_HIT\n                : _cancelReason;\n\n            if (cancelReason == CancelReason.NONE) {\n                (\n                    StorageInterface.Trade memory finalTrade,\n                    uint tokenPriceWETH\n                ) = registerTrade(\n                        StorageInterface.Trade(\n                            o.trader,\n                            o.pairIndex,\n                            0,\n                            0,\n                            o.positionSize,\n                            priceAfterImpact,\n                            o.buy,\n                            o.leverage,\n                            o.tp,\n                            o.sl\n                        ),\n                        n.nftId,\n                        n.index\n                    );\n\n                storageT.unregisterOpenLimitOrder(\n                    o.trader,\n                    o.pairIndex,\n                    o.index\n                );\n\n                emit LimitExecuted(\n                    a.orderId,\n                    n.index,\n                    finalTrade,\n                    n.nftHolder,\n                    StorageInterface.LimitOrder.OPEN,\n                    finalTrade.openPrice,\n                    priceImpactP,\n                    (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\n                    0,\n                    0,\n                    exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(\n                a.orderId,\n                n.nftHolder,\n                StorageInterface.LimitOrder.OPEN,\n                cancelReason\n            );\n        }\n\n        nftRewards.unregisterTrigger(\n            NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n                n.trader,\n                n.pairIndex,\n                n.index,\n                n.orderType\n            )\n        );\n\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    function executeNftCloseOrderCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingNftOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingNftOrder memory o = storageT\n        //     .reqID_pendingNftOrder(a.orderId);\n\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n        //         .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trader,\n            o.pairIndex,\n            o.index\n        );\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n\n        CancelReason cancelReason = a.price == 0\n            ? CancelReason.MARKET_CLOSED\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n            Values memory v;\n            v.levPosWETH = t.positionSizeWETH * t.leverage;\n            v.posWETH = v.levPosWETH / t.leverage;\n\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        v.posWETH,\n                        t.leverage\n                    )\n                );\n            }\n\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\n                ? t.tp\n                : (\n                    o.orderType == StorageInterface.LimitOrder.SL\n                        ? t.sl\n                        : v.liqPrice\n                );\n\n            v.exactExecution =\n                // v.price > 0 &&\n                // a.low <= v.price &&\n                // a.high >= v.price;\n                v.price == a.price;\n            if (v.exactExecution) {\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (v.posWETH * 5) / 100\n                    : (v.levPosWETH *\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\n                        100 /\n                        PRECISION;\n            } else {\n                // revert(\"only exact execution allowed\");\n                v.price = a.open;\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\n                            ? (v.posWETH * 5) / 100\n                            : 0\n                    )\n                    : (\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\n                            t.tp > 0 &&\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\n                                t.sl > 0 &&\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\n                            ? (v.levPosWETH *\n                                pairsStored.pairNftLimitOrderFeeP(\n                                    t.pairIndex\n                                )) /\n                                100 /\n                                PRECISION\n                            : 0\n                    );\n            }\n\n            cancelReason = v.reward1 == 0\n                ? CancelReason.NOT_HIT\n                : CancelReason.NONE;\n\n            // If can be triggered\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    v.price,\n                    t.buy,\n                    t.leverage\n                );\n                // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    false,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    o.orderType == StorageInterface.LimitOrder.LIQ\n                        ? v.reward1\n                        : (v.levPosWETH *\n                            pairsStored.pairCloseFeeP(t.pairIndex)) /\n                            100 /\n                            PRECISION,\n                    v.reward1\n                );\n\n                // Convert NFT bot fee from WETH to token value\n                // v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\n\n                // nftRewards.distributeNftReward(\n                //     triggeredLimitId,\n                //     v.reward2,\n                //     v.tokenPriceWETH\n                // );\n\n                // storageT.increaseNftRewards(o.nftId, v.reward2);\n\n                emit NftBotFeeCharged(t.trader, v.reward1);\n\n                emit LimitExecuted(\n                    a.orderId,\n                    o.index,\n                    t,\n                    o.nftHolder,\n                    o.orderType,\n                    v.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader,\n                    v.exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(\n                a.orderId,\n                o.nftHolder,\n                o.orderType,\n                cancelReason\n            );\n        }\n\n        // nftRewards.unregisterTrigger(triggeredLimitId);\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    // Shared code between market & limit callbacks\n    function registerTrade(\n        StorageInterface.Trade memory trade,\n        uint nftId,\n        uint limitIndex\n    ) private returns (StorageInterface.Trade memory, uint) {\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        Values memory v;\n\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\n        //     // and before volumeReferredWETH increases\n        //     v.posWETH =\n        //         (v.levPosWETH *\n        //             (100 *\n        //                 PRECISION -\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\n        //         100 /\n        //         PRECISION;\n\n        //     v.reward1 = referrals.distributePotentialReward(\n        //         trade.trader,\n        //         v.levPosWETH,\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\n        //         v.tokenPriceWETH\n        //     );\n\n        //     sendToVault(v.reward1, trade.trader);\n        //     trade.positionSizeWETH -= v.reward1;\n\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\n        // }\n\n        // // 2. Charge opening fee - referral fee (if applicable)\n        // v.reward2 = storageT.handleDevGovFees(\n        //     trade.pairIndex,\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\n        //     true,\n        //     true\n        // );\n\n        // trade.positionSizeWETH -= v.reward2;\n\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\n\n        // // 3. Charge NFT / SSS fee\n        // v.reward2 =\n        //     (v.levPosWETH *\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\n        //     100 /\n        //     PRECISION;\n        // trade.positionSizeWETH -= v.reward2;\n\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\n        // if (nftId < 1500) {\n        //     sendToVault(v.reward2, trade.trader);\n\n        //     // Convert NFT bot fee from WETH to token value\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\n\n        //     nftRewards.distributeNftReward(\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n        //             trade.trader,\n        //             trade.pairIndex,\n        //             limitIndex,\n        //             StorageInterface.LimitOrder.OPEN\n        //         ),\n        //         v.reward3,\n        //         v.tokenPriceWETH\n        //     );\n        //     storageT.increaseNftRewards(nftId, v.reward3);\n\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\n\n        //     // 3.2 Distribute SSS fee (if applicable)\n        // } else {\n        //     distributeStakingReward(trade.trader, v.reward2);\n        // }\n\n        // 4. Set trade final details\n        trade.index = storageT.firstEmptyTradeIndex(\n            trade.trader,\n            trade.pairIndex\n        );\n\n        // trade.initialPosToken =\n        //     (trade.positionSizeWETH * PRECISION) /\n        //     v.tokenPriceWETH;\n\n        trade.tp = correctTp(\n            trade.openPrice,\n            trade.leverage,\n            trade.tp,\n            trade.buy\n        );\n        trade.sl = correctSl(\n            trade.openPrice,\n            trade.leverage,\n            trade.sl,\n            trade.buy\n        );\n\n        // 5. Call other contracts\n        pairInfos.storeTradeInitialAccFees(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy\n        );\n        pairsStored.updateGroupCollateral(\n            trade.pairIndex,\n            trade.positionSizeWETH,\n            trade.buy,\n            true\n        );\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.positionSizeWETH * trade.leverage,\n            true,\n            trade.buy\n        );\n\n        // 6. Store final trade in storage contract\n        storageT.storeTrade(\n            trade,\n            StorageInterface.TradeInfo(\n                0,\n                v.tokenPriceWETH,\n                trade.positionSizeWETH * trade.leverage,\n                0,\n                0,\n                false\n            )\n        );\n\n        // 7. Store tradeLastUpdated\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\n            trade.pairIndex\n        ][trade.index][TradeType.MARKET];\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\n        lastUpdated.tp = currBlock;\n        lastUpdated.sl = currBlock;\n        lastUpdated.created = currBlock;\n\n        return (trade, v.tokenPriceWETH);\n    }\n\n    function unregisterTrade(\n        StorageInterface.Trade memory trade,\n        bool marketOrder,\n        int percentProfit, // PRECISION\n        uint currentWETHPos, // 1e18\n        uint openInterestWETH, // 1e18\n        uint closingFeeWETH, // 1e18\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\n    ) private returns (uint WETHSentToTrader) {\n        IToken vault = storageT.vault();\n\n        // 1. Calculate net PnL (after all closing and holding fees)\n        (WETHSentToTrader, ) = _getTradeValue(\n            trade,\n            currentWETHPos,\n            percentProfit,\n            closingFeeWETH + nftFeeWETH\n        );\n\n        // 2. Calls to other contracts\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            openInterestWETH,\n            false,\n            trade.buy\n        );\n        getPairsStorage().updateGroupCollateral(\n            trade.pairIndex,\n            openInterestWETH / trade.leverage,\n            trade.buy,\n            false\n        );\n\n        // 3. Unregister trade from storage\n\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\n        // 4.1 If collateral in storage (opened after update)\n        if (trade.positionSizeWETH > 0) {\n            Values memory v;\n\n            // 4.1.1 WETH vault reward\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\n            // transferFromStorageToAddress(address(this), v.reward2);\n            // vault.distributeReward(v.reward2);\n\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\n\n            // 4.1.2 SSS reward\n            // v.reward3 = marketOrder\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\n            //     : (closingFeeWETH * sssFeeP) / 100;\n\n            // distributeStakingReward(trade.trader, v.reward3);\n\n            // 4.1.3 Take WETH from vault if winning trade\n            // or send WETH to vault if losing trade\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\n            if (WETHSentToTrader > WETHLeftInStorage) {\n                vault.sendAssets(\n                    WETHSentToTrader - WETHLeftInStorage,\n                    trade.trader\n                );\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\n            } else {\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\n            }\n\n            // 4.2 If collateral in vault (opened before update)\n        } else {\n            vault.sendAssets(WETHSentToTrader, trade.trader);\n        }\n    }\n\n    // Utils (external)\n    function setTradeLastUpdated(\n        SimplifiedTradeId calldata _id,\n        LastUpdated memory _lastUpdated\n    ) external onlyTrading {\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _lastUpdated;\n    }\n\n    function setTradeData(\n        SimplifiedTradeId calldata _id,\n        TradeData memory _tradeData\n    ) external onlyTrading {\n        tradeData[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _tradeData;\n    }\n\n    // Utils (getters)\n    function _getTradeValue(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit, // PRECISION\n        uint closingFees // 1e18\n    ) private returns (uint value, uint borrowingFee) {\n        int netProfitP;\n\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\n            trade,\n            currentWETHPos,\n            percentProfit\n        );\n        value = pairInfos.getTradeValue(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy,\n            currentWETHPos,\n            trade.leverage,\n            netProfitP,\n            closingFees\n        );\n\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\n    }\n\n    function _getBorrowingFeeAdjustedPercentProfit(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit // PRECISION\n    ) private view returns (int netProfitP, uint borrowingFee) {\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\n            BorrowingFeesInterface.BorrowingFeeInput(\n                trade.trader,\n                trade.pairIndex,\n                trade.index,\n                trade.buy,\n                currentWETHPos,\n                trade.leverage\n            )\n        );\n        netProfitP =\n            percentProfit -\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\n    }\n\n    function withinMaxLeverage(\n        uint pairIndex,\n        uint leverage\n    ) private view returns (bool) {\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\n        return\n            pairMaxLev == 0\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\n                : leverage <= pairMaxLev;\n    }\n\n    function withinExposureLimits(\n        uint pairIndex,\n        bool buy,\n        uint positionSizeWETH,\n        uint leverage\n    ) private view returns (bool) {\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\n\n        return\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\n                levPositionSizeWETH <=\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\n    }\n\n    function currentPercentProfit(\n        uint openPrice,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) private view returns (int p) {\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\n\n        p = openPrice > 0\n            ? ((\n                buy\n                    ? int(currentPrice) - int(openPrice)\n                    : int(openPrice) - int(currentPrice)\n            ) *\n                100 *\n                int(PRECISION) *\n                int(leverage)) / int(openPrice)\n            : int(0);\n\n        p = p > maxPnlP ? maxPnlP : p;\n    }\n\n    function correctTp(\n        uint openPrice,\n        uint leverage,\n        uint tp,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            tp == 0 ||\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\n            int(MAX_GAIN_P) * int(PRECISION)\n        ) {\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\n\n            return\n                buy\n                    ? openPrice + tpDiff\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\n        }\n        return tp;\n    }\n\n    function correctSl(\n        uint openPrice,\n        uint leverage,\n        uint sl,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            sl > 0 &&\n            currentPercentProfit(openPrice, sl, buy, leverage) <\n            int(MAX_SL_P) * int(PRECISION) * -1\n        ) {\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\n            return buy ? openPrice - slDiff : openPrice + slDiff;\n        }\n\n        return sl;\n    }\n\n    function marketExecutionPrice(\n        uint price,\n        uint spreadP,\n        uint spreadReductionP,\n        bool long\n    ) private pure returns (uint) {\n        uint priceDiff = (price *\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\n            100 /\n            PRECISION;\n\n        return long ? price + priceDiff : price - priceDiff;\n    }\n\n    function _openTradePrep(\n        OpenTradePrepInput memory c\n    )\n        private\n        view\n        returns (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        )\n    {\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\n            marketExecutionPrice(\n                c.executionPrice,\n                c.spreadP,\n                c.spreadReductionP,\n                c.buy\n            ),\n            c.pairIndex,\n            c.buy,\n            c.positionSize * c.leverage\n        );\n\n        uint maxSlippage = c.maxSlippageP > 0\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\n            : c.wantedPrice / 100; // 1% by default\n\n        cancelReason = isPaused\n            ? CancelReason.PAUSED\n            : (\n                c.marketPrice == 0\n                    ? CancelReason.MARKET_CLOSED\n                    : (\n                        c.buy\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\n                    )\n                    ? CancelReason.SLIPPAGE\n                    : (c.tp > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact >= c.tp\n                                : priceAfterImpact <= c.tp\n                        ))\n                    ? CancelReason.TP_REACHED\n                    : (c.sl > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact <= c.sl\n                                : priceAfterImpact >= c.sl\n                        ))\n                    ? CancelReason.SL_REACHED\n                    : !withinExposureLimits(\n                        c.pairIndex,\n                        c.buy,\n                        c.positionSize,\n                        c.leverage\n                    )\n                    ? CancelReason.EXPOSURE_LIMITS\n                    : priceImpactP * c.leverage >\n                        pairInfos.maxNegativePnlOnOpenP()\n                    ? CancelReason.PRICE_IMPACT\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\n                    ? CancelReason.MAX_LEVERAGE\n                    : CancelReason.NONE\n            );\n    }\n\n    function getPendingMarketOrder(\n        uint orderId\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\n        return storageT.reqID_pendingMarketOrder(orderId);\n    }\n\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\n        return storageT.priceAggregator().pairsStorage();\n    }\n\n    function getOpenTrade(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterface.Trade memory) {\n        return storageT.openTrades(trader, pairIndex, index);\n    }\n\n    function getOpenTradeInfo(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterface.TradeInfo memory) {\n        return storageT.openTradesInfo(trader, pairIndex, index);\n    }\n\n    // Utils (private)\n    function distributeStakingReward(address trader, uint amountWETH) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        staking.distributeRewardWETH(amountWETH);\n        emit SssFeeCharged(trader, amountWETH);\n    }\n\n    function sendToVault(uint amountWETH, address trader) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        storageT.vault().receiveAssets(amountWETH, trader);\n    }\n\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\n        storageT.transferWETH(address(storageT), to, amountWETH);\n    }\n\n    // Public views\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\n        uint len = getPairsStorage().pairsCount();\n        uint[] memory lev = new uint[](len);\n\n        for (uint i; i < len; ) {\n            lev[i] = pairMaxLeverage[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return lev;\n    }\n\n    function giveApproval() external {\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\n    }\n\n    // function getTradePnl(\n    //     address trader,\n    //     uint pairIndex,\n    //     uint index\n    // ) external  returns (uint256 pnl) {\n    //     StorageInterface.Trade memory t = storageT.openTrades(\n    //         trader,\n    //         pairIndex,\n    //         index\n    //     );\n    //     (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\n    //        pairIndex\n    //     );\n    // }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 125
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}