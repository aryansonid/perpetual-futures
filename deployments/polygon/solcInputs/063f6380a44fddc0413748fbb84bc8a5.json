{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/Chainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CBORChainlink} from \"./vendor/CBORChainlink.sol\";\nimport {BufferChainlink} from \"./vendor/BufferChainlink.sol\";\n\n/**\n * @title Library for common Chainlink functions\n * @dev Uses imported CBOR library for encoding to buffer\n */\nlibrary Chainlink {\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\n\n  using CBORChainlink for BufferChainlink.buffer;\n\n  struct Request {\n    bytes32 id;\n    address callbackAddress;\n    bytes4 callbackFunctionId;\n    uint256 nonce;\n    BufferChainlink.buffer buf;\n  }\n\n  /**\n   * @notice Initializes a Chainlink request\n   * @dev Sets the ID, callback address, and callback function signature on the request\n   * @param self The uninitialized request\n   * @param jobId The Job Specification ID\n   * @param callbackAddr The callback address\n   * @param callbackFunc The callback function signature\n   * @return The initialized request\n   */\n  function initialize(\n    Request memory self,\n    bytes32 jobId,\n    address callbackAddr,\n    bytes4 callbackFunc\n  ) internal pure returns (Chainlink.Request memory) {\n    BufferChainlink.init(self.buf, defaultBufferSize);\n    self.id = jobId;\n    self.callbackAddress = callbackAddr;\n    self.callbackFunctionId = callbackFunc;\n    return self;\n  }\n\n  /**\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\n   * @param self The initialized request\n   * @param data The CBOR data\n   */\n  function setBuffer(Request memory self, bytes memory data) internal pure {\n    BufferChainlink.init(self.buf, data.length);\n    BufferChainlink.append(self.buf, data);\n  }\n\n  /**\n   * @notice Adds a string value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The string value to add\n   */\n  function add(\n    Request memory self,\n    string memory key,\n    string memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeString(value);\n  }\n\n  /**\n   * @notice Adds a bytes value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The bytes value to add\n   */\n  function addBytes(\n    Request memory self,\n    string memory key,\n    bytes memory value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeBytes(value);\n  }\n\n  /**\n   * @notice Adds a int256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The int256 value to add\n   */\n  function addInt(\n    Request memory self,\n    string memory key,\n    int256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeInt(value);\n  }\n\n  /**\n   * @notice Adds a uint256 value to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param value The uint256 value to add\n   */\n  function addUint(\n    Request memory self,\n    string memory key,\n    uint256 value\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.encodeUInt(value);\n  }\n\n  /**\n   * @notice Adds an array of strings to the request with a given key name\n   * @param self The initialized request\n   * @param key The name of the key\n   * @param values The array of string values to add\n   */\n  function addStringArray(\n    Request memory self,\n    string memory key,\n    string[] memory values\n  ) internal pure {\n    self.buf.encodeString(key);\n    self.buf.startArray();\n    for (uint256 i = 0; i < values.length; i++) {\n      self.buf.encodeString(values[i]);\n    }\n    self.buf.endSequence();\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/ChainlinkClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./Chainlink.sol\";\nimport \"./interfaces/ENSInterface.sol\";\nimport \"./interfaces/LinkTokenInterface.sol\";\nimport \"./interfaces/ChainlinkRequestInterface.sol\";\nimport \"./interfaces/OperatorInterface.sol\";\nimport \"./interfaces/PointerInterface.sol\";\nimport {ENSResolver as ENSResolver_Chainlink} from \"./vendor/ENSResolver.sol\";\n\n/**\n * @title The ChainlinkClient contract\n * @notice Contract writers can inherit this contract in order to create requests for the\n * Chainlink network\n */\nabstract contract ChainlinkClient {\n  using Chainlink for Chainlink.Request;\n\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\n  uint256 private constant AMOUNT_OVERRIDE = 0;\n  address private constant SENDER_OVERRIDE = address(0);\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\"link\");\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\"oracle\");\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\n\n  ENSInterface private s_ens;\n  bytes32 private s_ensNode;\n  LinkTokenInterface private s_link;\n  OperatorInterface private s_oracle;\n  uint256 private s_requestCount = 1;\n  mapping(bytes32 => address) private s_pendingRequests;\n\n  event ChainlinkRequested(bytes32 indexed id);\n  event ChainlinkFulfilled(bytes32 indexed id);\n  event ChainlinkCancelled(bytes32 indexed id);\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackAddr address to operate the callback on\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildChainlinkRequest(\n    bytes32 specId,\n    address callbackAddr,\n    bytes4 callbackFunctionSignature\n  ) internal pure returns (Chainlink.Request memory) {\n    Chainlink.Request memory req;\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a request that can hold additional parameters\n   * @param specId The Job Specification ID that the request will be created for\n   * @param callbackFunctionSignature function signature to use for the callback\n   * @return A Chainlink Request struct in memory\n   */\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\n    internal\n    view\n    returns (Chainlink.Request memory)\n  {\n    Chainlink.Request memory req;\n    return req.initialize(specId, address(this), callbackFunctionSignature);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendChainlinkRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      ChainlinkRequestInterface.oracleRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      address(this),\n      req.callbackFunctionId,\n      nonce,\n      ORACLE_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the stored oracle address\n   * @dev This function supports multi-word response\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\n  }\n\n  /**\n   * @notice Creates a Chainlink request to the specified oracle address\n   * @dev This function supports multi-word response\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\n   * send LINK which creates a request on the target oracle contract.\n   * Emits ChainlinkRequested event.\n   * @param oracleAddress The address of the oracle for the request\n   * @param req The initialized Chainlink Request\n   * @param payment The amount of LINK to send for the request\n   * @return requestId The request ID\n   */\n  function sendOperatorRequestTo(\n    address oracleAddress,\n    Chainlink.Request memory req,\n    uint256 payment\n  ) internal returns (bytes32 requestId) {\n    uint256 nonce = s_requestCount;\n    s_requestCount = nonce + 1;\n    bytes memory encodedRequest = abi.encodeWithSelector(\n      OperatorInterface.operatorRequest.selector,\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\n      req.id,\n      req.callbackFunctionId,\n      nonce,\n      OPERATOR_ARGS_VERSION,\n      req.buf.buf\n    );\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\n  }\n\n  /**\n   * @notice Make a request to an oracle\n   * @param oracleAddress The address of the oracle for the request\n   * @param nonce used to generate the request ID\n   * @param payment The amount of LINK to send for the request\n   * @param encodedRequest data encoded for request type specific format\n   * @return requestId The request ID\n   */\n  function _rawRequest(\n    address oracleAddress,\n    uint256 nonce,\n    uint256 payment,\n    bytes memory encodedRequest\n  ) private returns (bytes32 requestId) {\n    requestId = keccak256(abi.encodePacked(this, nonce));\n    s_pendingRequests[requestId] = oracleAddress;\n    emit ChainlinkRequested(requestId);\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \"unable to transferAndCall to oracle\");\n  }\n\n  /**\n   * @notice Allows a request to be cancelled if it has not been fulfilled\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\n   * Deletes the request from the `pendingRequests` mapping.\n   * Emits ChainlinkCancelled event.\n   * @param requestId The request ID\n   * @param payment The amount of LINK sent for the request\n   * @param callbackFunc The callback function specified for the request\n   * @param expiration The time of the expiration for the request\n   */\n  function cancelChainlinkRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunc,\n    uint256 expiration\n  ) internal {\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\n    delete s_pendingRequests[requestId];\n    emit ChainlinkCancelled(requestId);\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\n  }\n\n  /**\n   * @notice the next request count to be used in generating a nonce\n   * @dev starts at 1 in order to ensure consistent gas cost\n   * @return returns the next request count to be used in a nonce\n   */\n  function getNextRequestCount() internal view returns (uint256) {\n    return s_requestCount;\n  }\n\n  /**\n   * @notice Sets the stored oracle address\n   * @param oracleAddress The address of the oracle contract\n   */\n  function setChainlinkOracle(address oracleAddress) internal {\n    s_oracle = OperatorInterface(oracleAddress);\n  }\n\n  /**\n   * @notice Sets the LINK token address\n   * @param linkAddress The address of the LINK token contract\n   */\n  function setChainlinkToken(address linkAddress) internal {\n    s_link = LinkTokenInterface(linkAddress);\n  }\n\n  /**\n   * @notice Sets the Chainlink token address for the public\n   * network as given by the Pointer contract\n   */\n  function setPublicChainlinkToken() internal {\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\n  }\n\n  /**\n   * @notice Retrieves the stored address of the LINK token\n   * @return The address of the LINK token\n   */\n  function chainlinkTokenAddress() internal view returns (address) {\n    return address(s_link);\n  }\n\n  /**\n   * @notice Retrieves the stored address of the oracle contract\n   * @return The address of the oracle contract\n   */\n  function chainlinkOracleAddress() internal view returns (address) {\n    return address(s_oracle);\n  }\n\n  /**\n   * @notice Allows for a request which was created on another contract to be fulfilled\n   * on this contract\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\n   * @param requestId The request ID used for the response\n   */\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\n    s_pendingRequests[requestId] = oracleAddress;\n  }\n\n  /**\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\n   * @dev Accounts for subnodes having different resolvers\n   * @param ensAddress The address of the ENS contract\n   * @param node The ENS node hash\n   */\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\n    s_ens = ENSInterface(ensAddress);\n    s_ensNode = node;\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\n    setChainlinkToken(resolver.addr(linkSubnode));\n    updateChainlinkOracleWithENS();\n  }\n\n  /**\n   * @notice Sets the stored oracle contract with the address resolved by ENS\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\n   */\n  function updateChainlinkOracleWithENS() internal {\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\n    setChainlinkOracle(resolver.addr(oracleSubnode));\n  }\n\n  /**\n   * @notice Ensures that the fulfillment is valid for this contract\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\n   * @param requestId The request ID for fulfillment\n   */\n  function validateChainlinkCallback(bytes32 requestId)\n    internal\n    recordChainlinkFulfillment(requestId)\n  // solhint-disable-next-line no-empty-blocks\n  {\n\n  }\n\n  /**\n   * @dev Reverts if the sender is not the oracle of the request.\n   * Emits ChainlinkFulfilled event.\n   * @param requestId The request ID for fulfillment\n   */\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\n    require(msg.sender == s_pendingRequests[requestId], \"Source must be the oracle of the request\");\n    delete s_pendingRequests[requestId];\n    emit ChainlinkFulfilled(requestId);\n    _;\n  }\n\n  /**\n   * @dev Reverts if the request is already pending\n   * @param requestId The request ID for fulfillment\n   */\n  modifier notPendingRequest(bytes32 requestId) {\n    require(s_pendingRequests[requestId] == address(0), \"Request is already pending\");\n    _;\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ChainlinkRequestInterface {\n  function oracleRequest(\n    address sender,\n    uint256 requestPrice,\n    bytes32 serviceAgreementID,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function cancelOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    bytes4 callbackFunctionId,\n    uint256 expiration\n  ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ENSInterface {\n  // Logged when the owner of a node assigns a new owner to a subnode.\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\n\n  // Logged when the owner of a node transfers ownership to a new account.\n  event Transfer(bytes32 indexed node, address owner);\n\n  // Logged when the resolver for a node changes.\n  event NewResolver(bytes32 indexed node, address resolver);\n\n  // Logged when the TTL of a node changes\n  event NewTTL(bytes32 indexed node, uint64 ttl);\n\n  function setSubnodeOwner(\n    bytes32 node,\n    bytes32 label,\n    address owner\n  ) external;\n\n  function setResolver(bytes32 node, address resolver) external;\n\n  function setOwner(bytes32 node, address owner) external;\n\n  function setTTL(bytes32 node, uint64 ttl) external;\n\n  function owner(bytes32 node) external view returns (address);\n\n  function resolver(bytes32 node) external view returns (address);\n\n  function ttl(bytes32 node) external view returns (uint64);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./OracleInterface.sol\";\nimport \"./ChainlinkRequestInterface.sol\";\n\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\n  function operatorRequest(\n    address sender,\n    uint256 payment,\n    bytes32 specId,\n    bytes4 callbackFunctionId,\n    uint256 nonce,\n    uint256 dataVersion,\n    bytes calldata data\n  ) external;\n\n  function fulfillOracleRequest2(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes calldata data\n  ) external returns (bool);\n\n  function ownerTransferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\n\n  function getAuthorizedSenders() external returns (address[] memory);\n\n  function setAuthorizedSenders(address[] calldata senders) external;\n\n  function getForwarder() external returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface OracleInterface {\n  function fulfillOracleRequest(\n    bytes32 requestId,\n    uint256 payment,\n    address callbackAddress,\n    bytes4 callbackFunctionId,\n    uint256 expiration,\n    bytes32 data\n  ) external returns (bool);\n\n  function isAuthorizedSender(address node) external view returns (bool);\n\n  function withdraw(address recipient, uint256 amount) external;\n\n  function withdrawable() external view returns (uint256);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface PointerInterface {\n  function getAddress() external view returns (address);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @dev A library for working with mutable byte buffers in Solidity.\n *\n * Byte buffers are mutable and expandable, and provide a variety of primitives\n * for writing to them. At any time you can fetch a bytes object containing the\n * current contents of the buffer. The bytes object should not be stored between\n * operations, as it may change due to resizing of the buffer.\n */\nlibrary BufferChainlink {\n  /**\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\n   *      a capacity. The capacity may be longer than the current value, in\n   *      which case it can be extended without the need to allocate more memory.\n   */\n  struct buffer {\n    bytes buf;\n    uint256 capacity;\n  }\n\n  /**\n   * @dev Initializes a buffer with an initial capacity.\n   * @param buf The buffer to initialize.\n   * @param capacity The number of bytes of space to allocate the buffer.\n   * @return The buffer, for chaining.\n   */\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\n    if (capacity % 32 != 0) {\n      capacity += 32 - (capacity % 32);\n    }\n    // Allocate space for the buffer data\n    buf.capacity = capacity;\n    assembly {\n      let ptr := mload(0x40)\n      mstore(buf, ptr)\n      mstore(ptr, 0)\n      mstore(0x40, add(32, add(ptr, capacity)))\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Initializes a new buffer from an existing bytes object.\n   *      Changes to the buffer may mutate the original value.\n   * @param b The bytes object to initialize the buffer with.\n   * @return A new buffer.\n   */\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\n    buffer memory buf;\n    buf.buf = b;\n    buf.capacity = b.length;\n    return buf;\n  }\n\n  function resize(buffer memory buf, uint256 capacity) private pure {\n    bytes memory oldbuf = buf.buf;\n    init(buf, capacity);\n    append(buf, oldbuf);\n  }\n\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  /**\n   * @dev Sets buffer length to 0.\n   * @param buf The buffer to truncate.\n   * @return The original buffer, for chaining..\n   */\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\n    assembly {\n      let bufptr := mload(buf)\n      mstore(bufptr, 0)\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The start offset to write to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    require(len <= data.length);\n\n    if (off + len > buf.capacity) {\n      resize(buf, max(buf.capacity, len + off) * 2);\n    }\n\n    uint256 dest;\n    uint256 src;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Start address = buffer address + offset + sizeof(buffer length)\n      dest := add(add(bufptr, 32), off)\n      // Update buffer length if we're extending it\n      if gt(add(len, off), buflen) {\n        mstore(bufptr, add(len, off))\n      }\n      src := add(data, 32)\n    }\n\n    // Copy word-length chunks while possible\n    for (; len >= 32; len -= 32) {\n      assembly {\n        mstore(dest, mload(src))\n      }\n      dest += 32;\n      src += 32;\n    }\n\n    // Copy remaining bytes\n    unchecked {\n      uint256 mask = (256**(32 - len)) - 1;\n      assembly {\n        let srcpart := and(mload(src), not(mask))\n        let destpart := and(mload(dest), mask)\n        mstore(dest, or(destpart, srcpart))\n      }\n    }\n\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @param len The number of bytes to copy.\n   * @return The original buffer, for chaining.\n   */\n  function append(\n    buffer memory buf,\n    bytes memory data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, len);\n  }\n\n  /**\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, data.length);\n  }\n\n  /**\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write the byte at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeUint8(\n    buffer memory buf,\n    uint256 off,\n    uint8 data\n  ) internal pure returns (buffer memory) {\n    if (off >= buf.capacity) {\n      resize(buf, buf.capacity * 2);\n    }\n\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Length of existing buffer data\n      let buflen := mload(bufptr)\n      // Address = buffer address + sizeof(buffer length) + off\n      let dest := add(add(bufptr, off), 32)\n      mstore8(dest, data)\n      // Update buffer length if we extended it\n      if eq(off, buflen) {\n        mstore(bufptr, add(buflen, 1))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\n    return writeUint8(buf, buf.buf.length, data);\n  }\n\n  /**\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\n   *      exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (left-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function write(\n    buffer memory buf,\n    uint256 off,\n    bytes32 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    unchecked {\n      uint256 mask = (256**len) - 1;\n      // Right-align data\n      data = data >> (8 * (32 - len));\n      assembly {\n        // Memory address of the buffer data\n        let bufptr := mload(buf)\n        // Address = buffer address + sizeof(buffer length) + off + len\n        let dest := add(add(bufptr, off), len)\n        mstore(dest, or(and(mload(dest), not(mask)), data))\n        // Update buffer length if we extended it\n        if gt(add(off, len), mload(bufptr)) {\n          mstore(bufptr, add(off, len))\n        }\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\n   *      capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function writeBytes20(\n    buffer memory buf,\n    uint256 off,\n    bytes20 data\n  ) internal pure returns (buffer memory) {\n    return write(buf, off, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chhaining.\n   */\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, bytes32(data), 20);\n  }\n\n  /**\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer, for chaining.\n   */\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\n    return write(buf, buf.buf.length, data, 32);\n  }\n\n  /**\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\n   *      the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param off The offset to write at.\n   * @param data The data to append.\n   * @param len The number of bytes to write (right-aligned).\n   * @return The original buffer, for chaining.\n   */\n  function writeInt(\n    buffer memory buf,\n    uint256 off,\n    uint256 data,\n    uint256 len\n  ) private pure returns (buffer memory) {\n    if (len + off > buf.capacity) {\n      resize(buf, (len + off) * 2);\n    }\n\n    uint256 mask = (256**len) - 1;\n    assembly {\n      // Memory address of the buffer data\n      let bufptr := mload(buf)\n      // Address = buffer address + off + sizeof(buffer length) + len\n      let dest := add(add(bufptr, off), len)\n      mstore(dest, or(and(mload(dest), not(mask)), data))\n      // Update buffer length if we extended it\n      if gt(add(off, len), mload(bufptr)) {\n        mstore(bufptr, add(off, len))\n      }\n    }\n    return buf;\n  }\n\n  /**\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\n   * exceed the capacity of the buffer.\n   * @param buf The buffer to append to.\n   * @param data The data to append.\n   * @return The original buffer.\n   */\n  function appendInt(\n    buffer memory buf,\n    uint256 data,\n    uint256 len\n  ) internal pure returns (buffer memory) {\n    return writeInt(buf, buf.buf.length, data, len);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.19;\n\nimport {BufferChainlink} from \"./BufferChainlink.sol\";\n\nlibrary CBORChainlink {\n  using BufferChainlink for BufferChainlink.buffer;\n\n  uint8 private constant MAJOR_TYPE_INT = 0;\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\n  uint8 private constant MAJOR_TYPE_STRING = 3;\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\n  uint8 private constant MAJOR_TYPE_MAP = 5;\n  uint8 private constant MAJOR_TYPE_TAG = 6;\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\n\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\n\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\n    if(value <= 23) {\n      buf.appendUint8(uint8((major << 5) | value));\n    } else if (value <= 0xFF) {\n      buf.appendUint8(uint8((major << 5) | 24));\n      buf.appendInt(value, 1);\n    } else if (value <= 0xFFFF) {\n      buf.appendUint8(uint8((major << 5) | 25));\n      buf.appendInt(value, 2);\n    } else if (value <= 0xFFFFFFFF) {\n      buf.appendUint8(uint8((major << 5) | 26));\n      buf.appendInt(value, 4);\n    } else {\n      buf.appendUint8(uint8((major << 5) | 27));\n      buf.appendInt(value, 8);\n    }\n  }\n\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\n    buf.appendUint8(uint8((major << 5) | 31));\n  }\n\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\n    if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, value);\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\n    }\n  }\n\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\n    if(value < -0x10000000000000000) {\n      encodeSignedBigNum(buf, value);\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\n      encodeBigNum(buf, uint(value));\n    } else if(value >= 0) {\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\n    } else {\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\n    }\n  }\n\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\n    buf.append(value);\n  }\n\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\n    encodeBytes(buf, abi.encode(value));\n  }\n\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\n  }\n\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\n    buf.append(bytes(value));\n  }\n\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\n  }\n\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\n  }\n\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSResolver {\n  function addr(bytes32 node) public view virtual returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControlUpgradeable.sol\";\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../utils/StringsUpgradeable.sol\";\nimport \"../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\n    function __AccessControl_init() internal onlyInitializing {\n    }\n\n    function __AccessControl_init_unchained() internal onlyInitializing {\n    }\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\n     *\n     * Format of the revert message is described in {_checkRole}.\n     *\n     * _Available since v4.6._\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        StringsUpgradeable.toHexString(account),\n                        \" is missing role \",\n                        StringsUpgradeable.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * May emit a {RoleGranted} event.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControlUpgradeable {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\nimport \"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\";\n\n/**\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\n *\n * _Available since v4.7._\n */\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\n\n    event Withdraw(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint256 assets,\n        uint256 shares\n    );\n\n    /**\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\n     *\n     * - MUST be an ERC-20 token contract.\n     * - MUST NOT revert.\n     */\n    function asset() external view returns (address assetTokenAddress);\n\n    /**\n     * @dev Returns the total amount of the underlying asset that is “managed” by Vault.\n     *\n     * - SHOULD include any compounding that occurs from yield.\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT revert.\n     */\n    function totalAssets() external view returns (uint256 totalManagedAssets);\n\n    /**\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\n     * scenario where all the conditions are met.\n     *\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\n     * - MUST NOT show any variations depending on the caller.\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\n     * - MUST NOT revert.\n     *\n     * NOTE: This calculation MAY NOT reflect the “per-user” price-per-share, and instead should reflect the\n     * “average-user’s” price-per-share, meaning what the average user should expect to see when exchanging to and\n     * from.\n     */\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\n     * through a deposit call.\n     *\n     * - MUST return a limited value if receiver is subject to some deposit limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\n     * - MUST NOT revert.\n     */\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\n     *   in the same transaction.\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   deposit execution, and are accounted for during deposit.\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\n     * - MUST return a limited value if receiver is subject to some mint limit.\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\n     * - MUST NOT revert.\n     */\n    function maxMint(address receiver) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\n     * current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\n     *   same transaction.\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\n     */\n    function previewMint(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\n     *\n     * - MUST emit the Deposit event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\n     *   execution, and are accounted for during mint.\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\n     *   approving enough underlying tokens to the Vault contract, etc).\n     *\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault’s underlying asset token.\n     */\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\n\n    /**\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\n     * Vault, through a withdraw call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\n     *   called\n     *   in the same transaction.\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\n     */\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\n\n    /**\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   withdraw execution, and are accounted for during withdraw.\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\n\n    /**\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\n     * through a redeem call.\n     *\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\n     * - MUST NOT revert.\n     */\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\n\n    /**\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\n     * given current on-chain conditions.\n     *\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\n     *   same transaction.\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\n     * - MUST NOT revert.\n     *\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\n     */\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\n\n    /**\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\n     *\n     * - MUST emit the Withdraw event.\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\n     *   redeem execution, and are accounted for during redeem.\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\n     *   not having enough shares, etc).\n     *\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\n     * Those methods should be performed separately.\n     */\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20Upgradeable.sol\";\nimport \"../utils/SafeERC20Upgradeable.sol\";\nimport \"../../../interfaces/IERC4626Upgradeable.sol\";\nimport \"../../../utils/math/MathUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\nimport \"hardhat/console.sol\";\n\n/**\n * @dev Implementation of the ERC4626 \"Tokenized Vault Standard\" as defined in\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\n *\n * This extension allows the minting and burning of \"shares\" (represented using the ERC20 inheritance) in exchange for\n * underlying \"assets\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\n * the ERC20 standard. Any additional extensions included along it would affect the \"shares\" token represented by this\n * contract and not the \"assets\" token which is an independent contract.\n *\n * [CAUTION]\n * ====\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\n * with a \"donation\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\n *\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\n * expensive than it is profitable. More details about the underlying math can be found\n * xref:erc4626.adoc#inflation-attack[here].\n *\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\n * `_convertToShares` and `_convertToAssets` functions.\n *\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\n * ====\n *\n * _Available since v4.7._\n */\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\n    using MathUpgradeable for uint256;\n\n    IERC20Upgradeable private _asset;\n    uint8 private _underlyingDecimals;\n\n    /**\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\n     */\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\n        __ERC4626_init_unchained(asset_);\n    }\n\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\n        _underlyingDecimals = success ? assetDecimals : 18;\n        _asset = asset_;\n    }\n\n    /**\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\n     */\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\n        );\n        if (success && encodedDecimals.length >= 32) {\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\n            if (returnedDecimals <= type(uint8).max) {\n                return (true, uint8(returnedDecimals));\n            }\n        }\n        return (false, 0);\n    }\n\n    /**\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\n     * \"original\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\n     *\n     * See {IERC20Metadata-decimals}.\n     */\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\n        return _underlyingDecimals + _decimalsOffset();\n    }\n\n    /** @dev See {IERC4626-asset}. */\n    function asset() public view virtual override returns (address) {\n        return address(_asset);\n    }\n\n    /** @dev See {IERC4626-totalAssets}. */\n    function totalAssets() public view virtual override returns (uint256) {\n        return _asset.balanceOf(address(this));\n    }\n\n    /** @dev See {IERC4626-convertToShares}. */\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-convertToAssets}. */\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-maxDeposit}. */\n    function maxDeposit(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxMint}. */\n    function maxMint(address) public view virtual override returns (uint256) {\n        return type(uint256).max;\n    }\n\n    /** @dev See {IERC4626-maxWithdraw}. */\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-maxRedeem}. */\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\n        return balanceOf(owner);\n    }\n\n    /** @dev See {IERC4626-previewDeposit}. */\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-previewMint}. */\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\n    }\n\n    /** @dev See {IERC4626-previewWithdraw}. */\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\n    }\n\n    /** @dev See {IERC4626-previewRedeem}. */\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\n    }\n\n    /** @dev See {IERC4626-deposit}. */\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\n        require(assets <= maxDeposit(receiver), \"ERC4626: deposit more than max\");\n\n        uint256 shares = previewDeposit(assets);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-mint}.\n     *\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\n     * In this case, the shares will be minted without requiring any assets to be deposited.\n     */\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint256 assets = previewMint(shares);\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    /** @dev See {IERC4626-withdraw}. */\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\n        console.log(balanceOf(owner), \"balance\");\n        require(assets <= maxWithdraw(owner), \"ERC4626: withdraw more than max\");\n\n        uint256 shares = previewWithdraw(assets);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return shares;\n    }\n\n    /** @dev See {IERC4626-redeem}. */\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        uint256 assets = previewRedeem(shares);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n\n        return assets;\n    }\n\n    /**\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\n     */\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\n    }\n\n    /**\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\n     */\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\n    }\n\n    /**\n     * @dev Deposit/mint common workflow.\n     */\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\n        // assets are transferred and before the shares are minted, which is a valid state.\n        // slither-disable-next-line reentrancy-no-eth\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\n        _mint(receiver, shares);\n\n        emit Deposit(caller, receiver, assets, shares);\n    }\n\n    /**\n     * @dev Withdraw/redeem common workflow.\n     */\n    function _withdraw(\n        address caller,\n        address receiver,\n        address owner,\n        uint256 assets,\n        uint256 shares\n    ) internal virtual {\n        if (caller != owner) {\n            _spendAllowance(owner, caller, shares);\n        }\n\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\n        // calls the vault, which is assumed not malicious.\n        //\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\n        // shares are burned and after the assets are transferred, which is a valid state.\n        _burn(owner, shares);\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\n\n        emit Withdraw(caller, receiver, owner, assets, shares);\n    }\n\n    function _decimalsOffset() internal view virtual returns (uint8) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../extensions/IERC20PermitUpgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20PermitUpgradeable token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary MathUpgradeable {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SignedMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMathUpgradeable {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/MathUpgradeable.sol\";\nimport \"./math/SignedMathUpgradeable.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = MathUpgradeable.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMathUpgradeable.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport {IUniswapV3PoolImmutables} from './pool/IUniswapV3PoolImmutables.sol';\nimport {IUniswapV3PoolState} from './pool/IUniswapV3PoolState.sol';\nimport {IUniswapV3PoolDerivedState} from './pool/IUniswapV3PoolDerivedState.sol';\nimport {IUniswapV3PoolActions} from './pool/IUniswapV3PoolActions.sol';\nimport {IUniswapV3PoolOwnerActions} from './pool/IUniswapV3PoolOwnerActions.sol';\nimport {IUniswapV3PoolErrors} from './pool/IUniswapV3PoolErrors.sol';\nimport {IUniswapV3PoolEvents} from './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolErrors,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolErrors.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Errors emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolErrors {\n    error LOK();\n    error TLU();\n    error TLM();\n    error TUM();\n    error AI();\n    error M0();\n    error M1();\n    error AS();\n    error IIA();\n    error L();\n    error F0();\n    error F1();\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// @return observationIndex The index of the last oracle observation that was written,\n    /// @return observationCardinality The current maximum number of observations stored in the pool,\n    /// @return observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// @return feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    /// @return The liquidity at the current price of the pool\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper\n    /// @return liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// @return feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// @return feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// @return tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// @return secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// @return secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// @return initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return liquidity The amount of liquidity in the position,\n    /// @return feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// @return feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// @return tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// @return tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// @return tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// @return secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// @return initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            uint256 twos = (0 - denominator) & denominator;\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            result = mulDiv(a, b, denominator);\n            if (mulmod(a, b, denominator) > 0) {\n                require(result < type(uint256).max);\n                result++;\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity ^0.8.0;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    error T();\n    error R();\n\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        unchecked {\n            uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n            if (absTick > uint256(int256(MAX_TICK))) revert T();\n\n            uint256 ratio = absTick & 0x1 != 0\n                ? 0xfffcb933bd6fad37aa2d162d1a594001\n                : 0x100000000000000000000000000000000;\n            if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n            if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n            if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n            if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n            if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n            if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n            if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n            if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n            if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n            if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n            if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n            if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n            if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n            if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n            if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n            if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n            if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n            if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n            if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n            if (tick > 0) ratio = type(uint256).max / ratio;\n\n            // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n            // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n            // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n            sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n        }\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        unchecked {\n            // second inequality must be < because the price can never reach the price at the max tick\n            if (!(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO)) revert R();\n            uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n            uint256 r = ratio;\n            uint256 msb = 0;\n\n            assembly {\n                let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(5, gt(r, 0xFFFFFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(4, gt(r, 0xFFFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(3, gt(r, 0xFF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(2, gt(r, 0xF))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := shl(1, gt(r, 0x3))\n                msb := or(msb, f)\n                r := shr(f, r)\n            }\n            assembly {\n                let f := gt(r, 0x1)\n                msb := or(msb, f)\n            }\n\n            if (msb >= 128) r = ratio >> (msb - 127);\n            else r = ratio << (127 - msb);\n\n            int256 log_2 = (int256(msb) - 128) << 64;\n\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(63, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(62, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(61, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(60, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(59, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(58, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(57, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(56, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(55, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(54, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(53, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(52, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(51, f))\n                r := shr(f, r)\n            }\n            assembly {\n                r := shr(127, mul(r, r))\n                let f := shr(128, r)\n                log_2 := or(log_2, shl(50, f))\n            }\n\n            int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n            int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n            int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n            tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n        }\n    }\n}\n"
    },
    "contracts/BorrowingFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\n/// DEPLOY need storage and pair info\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_4.sol\";\n\ncontract BorrowingFees is Initializable, BorrowingFeesInterface {\n    // Constants\n    uint constant P_1 = 1e10;\n    uint constant P_2 = 1e40;\n\n    // Addresses\n    StorageInterface public storageT;\n    PairInfosInterface public pairInfos;\n\n    // State\n    mapping(uint16 => Group) public groups;\n    mapping(uint => Pair) public pairs;\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees)))\n        public initialAccFees;\n    mapping(uint => PairOi) public pairOis;\n    mapping(uint => uint48) public groupFeeExponents;\n\n    // Note: Events and structs are in interface\n\n    function initialize(\n        StorageInterface _storageT,\n        PairInfosInterface _pairInfos\n    ) external initializer {\n        require(\n            address(_storageT) != address(0) &&\n                address(_pairInfos) != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        pairInfos = _pairInfos;\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(msg.sender == address(pairInfos.manager()), \"MANAGER_ONLY\");\n        _;\n    }\n\n    modifier onlyCallbacks() {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage pair params\n    function setPairParams(\n        uint pairIndex,\n        PairParams calldata value\n    ) external onlyManager {\n        _setPairParams(pairIndex, value);\n    }\n\n    function setPairParamsArray(\n        uint[] calldata indices,\n        PairParams[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setPairParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\n        require(\n            value.feeExponent >= 1 && value.feeExponent <= 3,\n            \"WRONG_EXPONENT\"\n        );\n\n        Pair storage p = pairs[pairIndex];\n\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        _setPairPendingAccFees(pairIndex, currentBlock);\n\n        if (value.groupIndex != prevGroupIndex) {\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\n\n            (uint oiLong, uint oiShort) = getPairOpenInterestWETH(pairIndex);\n\n            // Only remove OI from old group if old group is not 0\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\n\n            // Add OI to new group if it's not group 0 (even if old group is 0)\n            // So when we assign a pair to a group, it takes into account its OI\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\n            _setGroupOi(value.groupIndex, true, true, oiLong);\n            _setGroupOi(value.groupIndex, false, true, oiShort);\n\n            Group memory newGroup = groups[value.groupIndex];\n            Group memory prevGroup = groups[prevGroupIndex];\n\n            p.groups.push(\n                PairGroup(\n                    value.groupIndex,\n                    ChainUtils.getUint48BlockNumber(currentBlock),\n                    newGroup.accFeeLong,\n                    newGroup.accFeeShort,\n                    prevGroup.accFeeLong,\n                    prevGroup.accFeeShort,\n                    p.accFeeLong,\n                    p.accFeeShort,\n                    0 // placeholder\n                )\n            );\n\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\n        }\n\n        p.feePerBlock = value.feePerBlock;\n        p.feeExponent = value.feeExponent;\n        pairOis[pairIndex].max = value.maxOi;\n\n        emit PairParamsUpdated(\n            pairIndex,\n            value.groupIndex,\n            value.feePerBlock,\n            value.feeExponent,\n            value.maxOi\n        );\n    }\n\n    // Manage group params\n    function setGroupParams(\n        uint16 groupIndex,\n        GroupParams calldata value\n    ) external onlyManager {\n        _setGroupParams(groupIndex, value);\n    }\n\n    function setGroupParamsArray(\n        uint16[] calldata indices,\n        GroupParams[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setGroupParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setGroupParams(\n        uint16 groupIndex,\n        GroupParams calldata value\n    ) private {\n        require(groupIndex > 0, \"GROUP_0\");\n        require(\n            value.feeExponent >= 1 && value.feeExponent <= 3,\n            \"WRONG_EXPONENT\"\n        );\n\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\n\n        Group storage g = groups[groupIndex];\n        g.feePerBlock = value.feePerBlock;\n        g.maxOi = uint80(value.maxOi);\n        groupFeeExponents[groupIndex] = value.feeExponent;\n\n        emit GroupUpdated(\n            groupIndex,\n            value.feePerBlock,\n            value.maxOi,\n            value.feeExponent\n        );\n    }\n\n    // Group OI setter\n    function _setGroupOi(\n        uint16 groupIndex,\n        bool long,\n        bool increase,\n        uint amount // 1e18\n    ) private {\n        Group storage group = groups[groupIndex];\n        uint112 amountFinal;\n\n        if (groupIndex > 0) {\n            amount = (amount * P_1) / 1e18; // 1e10\n            require(amount <= type(uint112).max, \"OVERFLOW\");\n\n            amountFinal = uint112(amount);\n\n            if (long) {\n                group.oiLong = increase\n                    ? group.oiLong + amountFinal\n                    : group.oiLong -\n                        (\n                            group.oiLong > amountFinal\n                                ? amountFinal\n                                : group.oiLong\n                        );\n            } else {\n                group.oiShort = increase\n                    ? group.oiShort + amountFinal\n                    : group.oiShort -\n                        (\n                            group.oiShort > amountFinal\n                                ? amountFinal\n                                : group.oiShort\n                        );\n            }\n        }\n\n        emit GroupOiUpdated(\n            groupIndex,\n            long,\n            increase,\n            amountFinal,\n            group.oiLong,\n            group.oiShort\n        );\n    }\n\n    // Acc fees getters for pairs and groups\n    function getPendingAccFees(\n        PendingAccFeesInput memory input\n    )\n        public\n        view\n        returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta)\n    {\n        require(input.currentBlock >= input.accLastUpdatedBlock, \"BLOCK_ORDER\");\n\n        bool moreShorts = input.oiLong < input.oiShort;\n        uint netOi = moreShorts\n            ? input.oiShort - input.oiLong\n            : input.oiLong - input.oiShort;\n\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\n                input.feePerBlock *\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) /\n                (1e18 ** input.feeExponent)\n            : 0; // 1e10 (%)\n\n        require(_delta <= type(uint64).max, \"OVERFLOW\");\n        delta = uint64(_delta);\n\n        newAccFeeLong = moreShorts\n            ? input.accFeeLong\n            : input.accFeeLong + delta;\n        newAccFeeShort = moreShorts\n            ? input.accFeeShort + delta\n            : input.accFeeShort;\n    }\n\n    function getPairGroupAccFeesDeltas(\n        uint i,\n        PairGroup[] memory pairGroups,\n        InitialAccFees memory initialFees,\n        uint pairIndex,\n        bool long,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen)\n    {\n        PairGroup memory group = pairGroups[i];\n\n        beforeTradeOpen = group.block < initialFees.block;\n\n        if (i == pairGroups.length - 1) {\n            // Last active group\n            deltaGroup = getGroupPendingAccFee(\n                group.groupIndex,\n                currentBlock,\n                long\n            );\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\n        } else {\n            // Previous groups\n            PairGroup memory nextGroup = pairGroups[i + 1];\n\n            // If it's not the first group to be before the trade was opened then fee is 0\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\n                return (0, 0, beforeTradeOpen);\n            }\n\n            deltaGroup = long\n                ? nextGroup.prevGroupAccFeeLong\n                : nextGroup.prevGroupAccFeeShort;\n            deltaPair = long\n                ? nextGroup.pairAccFeeLong\n                : nextGroup.pairAccFeeShort;\n        }\n\n        if (beforeTradeOpen) {\n            deltaGroup -= initialFees.accGroupFee;\n            deltaPair -= initialFees.accPairFee;\n        } else {\n            deltaGroup -= (\n                long ? group.initialAccFeeLong : group.initialAccFeeShort\n            );\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\n        }\n    }\n\n    // Pair acc fees helpers\n    function getPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta)\n    {\n        Pair memory pair = pairs[pairIndex];\n\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestWETH(\n            pairIndex\n        );\n\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                pair.accFeeLong,\n                pair.accFeeShort,\n                pairOiLong,\n                pairOiShort,\n                pair.feePerBlock,\n                currentBlock,\n                pair.accLastUpdatedBlock,\n                pairOis[pairIndex].max,\n                pair.feeExponent\n            )\n        );\n    }\n\n    function getPairPendingAccFee(\n        uint pairIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(\n            pairIndex,\n            currentBlock\n        );\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(\n            pairIndex,\n            currentBlock\n        );\n\n        Pair storage pair = pairs[pairIndex];\n\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\n            currentBlock\n        );\n\n        emit PairAccFeesUpdated(\n            pairIndex,\n            currentBlock,\n            pair.accFeeLong,\n            pair.accFeeShort\n        );\n    }\n\n    // Group acc fees helpers\n    function getGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta)\n    {\n        Group memory group = groups[groupIndex];\n\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                group.accFeeLong,\n                group.accFeeShort,\n                (uint(group.oiLong) * 1e18) / P_1,\n                (uint(group.oiShort) * 1e18) / P_1,\n                group.feePerBlock,\n                currentBlock,\n                group.accLastUpdatedBlock,\n                uint72(group.maxOi),\n                groupFeeExponents[groupIndex]\n            )\n        );\n    }\n\n    function getGroupPendingAccFee(\n        uint16 groupIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(\n            groupIndex,\n            currentBlock\n        );\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(\n            groupIndex,\n            currentBlock\n        );\n\n        Group storage group = groups[groupIndex];\n\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\n            currentBlock\n        );\n\n        emit GroupAccFeesUpdated(\n            groupIndex,\n            currentBlock,\n            group.accFeeLong,\n            group.accFeeShort\n        );\n    }\n\n    // Interaction with callbacks\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeWETH, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external override onlyCallbacks {\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        (\n            uint64 pairAccFeeLong,\n            uint64 pairAccFeeShort\n        ) = _setPairPendingAccFees(pairIndex, currentBlock);\n        (\n            uint64 groupAccFeeLong,\n            uint64 groupAccFeeShort\n        ) = _setGroupPendingAccFees(groupIndex, currentBlock);\n\n        _setGroupOi(groupIndex, long, open, positionSizeWETH);\n\n        if (open) {\n            InitialAccFees memory initialFees = InitialAccFees(\n                long ? pairAccFeeLong : pairAccFeeShort,\n                long ? groupAccFeeLong : groupAccFeeShort,\n                ChainUtils.getUint48BlockNumber(currentBlock),\n                0 // placeholder\n            );\n\n            initialAccFees[trader][pairIndex][index] = initialFees;\n\n            emit TradeInitialAccFeesStored(\n                trader,\n                pairIndex,\n                index,\n                initialFees.accPairFee,\n                initialFees.accGroupFee\n            );\n        }\n\n        emit TradeActionHandled(\n            trader,\n            pairIndex,\n            index,\n            open,\n            long,\n            positionSizeWETH\n        );\n    }\n\n    // Important trade getters\n    function getTradeBorrowingFee(\n        BorrowingFeeInput memory input\n    ) public view returns (uint fee) {\n        InitialAccFees memory initialFees = initialAccFees[input.trader][\n            input.pairIndex\n        ][input.index];\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\n\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        PairGroup memory firstPairGroup;\n        if (pairGroups.length > 0) {\n            firstPairGroup = pairGroups[0];\n        }\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\n        if (\n            pairGroups.length == 0 || firstPairGroup.block > initialFees.block\n        ) {\n            fee = ((\n                pairGroups.length == 0\n                    ? getPairPendingAccFee(\n                        input.pairIndex,\n                        currentBlock,\n                        input.long\n                    )\n                    : (\n                        input.long\n                            ? firstPairGroup.pairAccFeeLong\n                            : firstPairGroup.pairAccFeeShort\n                    )\n            ) - initialFees.accPairFee);\n        }\n\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\n        for (uint i = pairGroups.length; i > 0; ) {\n            (\n                uint64 deltaGroup,\n                uint64 deltaPair,\n                bool beforeTradeOpen\n            ) = getPairGroupAccFeesDeltas(\n                    i - 1,\n                    pairGroups,\n                    initialFees,\n                    input.pairIndex,\n                    input.long,\n                    currentBlock\n                );\n\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\n\n            // Exit loop at first group before trade was open\n            if (beforeTradeOpen) break;\n            unchecked {\n                --i;\n            }\n        }\n\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (WETH)\n    }\n\n    function getTradeLiquidationPrice(\n        LiqPriceInput calldata input\n    ) external view returns (uint) {\n        return\n            pairInfos.getTradeLiquidationPricePure(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.collateral\n                ) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    function getTradePartialLiquidationPrice(\n        LiqPriceInput calldata input\n    ) external view returns (uint) {\n        return\n            pairInfos.getTradePartialLiquidationPrice(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.collateral\n                ) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    // Public getters\n    function getPairOpenInterestWETH(\n        uint pairIndex\n    ) public view returns (uint, uint) {\n        return (\n            storageT.openInterestWETH(pairIndex, 0),\n            storageT.openInterestWETH(pairIndex, 1)\n        );\n    }\n\n    function getPairGroupIndex(\n        uint pairIndex\n    ) public view returns (uint16 groupIndex) {\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\n        return\n            pairGroups.length == 0\n                ? 0\n                : pairGroups[pairGroups.length - 1].groupIndex;\n    }\n\n    // External getters\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeWETH // 1e18\n    ) external view returns (bool) {\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\n        return\n            (g.maxOi == 0) ||\n            ((long ? g.oiLong : g.oiShort) + (positionSizeWETH * P_1) / 1e18 <=\n                g.maxOi);\n    }\n\n    function getGroup(\n        uint16 groupIndex\n    ) external view returns (Group memory, uint48) {\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\n    }\n\n    function getPair(\n        uint pairIndex\n    ) external view returns (Pair memory, PairOi memory) {\n        return (pairs[pairIndex], pairOis[pairIndex]);\n    }\n\n    function getAllPairs()\n        external\n        view\n        returns (Pair[] memory, PairOi[] memory)\n    {\n        uint len = AggregatorInterfaceV1_4(address(storageT.priceAggregator()))\n            .pairsStorage()\n            .pairsCount();\n        Pair[] memory p = new Pair[](len);\n        PairOi[] memory pairOi = new PairOi[](len);\n\n        for (uint i; i < len; ) {\n            p[i] = pairs[i];\n            pairOi[i] = pairOis[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (p, pairOi);\n    }\n\n    function getGroups(\n        uint16[] calldata indices\n    ) external view returns (Group[] memory, uint48[] memory) {\n        Group[] memory g = new Group[](indices.length);\n        uint48[] memory e = new uint48[](indices.length);\n        uint len = indices.length;\n\n        for (uint i; i < len; ) {\n            g[i] = groups[indices[i]];\n            e[i] = groupFeeExponents[indices[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (g, e);\n    }\n\n    function getTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index\n    )\n        external\n        view\n        returns (\n            InitialAccFees memory borrowingFees,\n            PairInfosInterface.TradeInitialAccFees memory otherFees\n        )\n    {\n        borrowingFees = initialAccFees[trader][pairIndex][index];\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\n    }\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint) {\n        return pairOis[pairIndex].max;\n    }\n}\n"
    },
    "contracts/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nabstract contract Delegatable {\n    mapping(address => address) public delegations;\n    address private senderOverride;\n\n    function setDelegate(address delegate) external {\n        require(tx.origin == msg.sender, \"NO_CONTRACT\");\n\n        delegations[msg.sender] = delegate;\n    }\n\n    function removeDelegate() external {\n        delegations[msg.sender] = address(0);\n    }\n\n    function delegatedAction(\n        address trader,\n        bytes calldata call_data\n    ) external returns (bytes memory) {\n        require(delegations[trader] == msg.sender, \"DELEGATE_NOT_APPROVED\");\n\n        senderOverride = trader;\n        (bool success, bytes memory result) = address(this).delegatecall(\n            call_data\n        );\n        if (!success) {\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\n            if (result.length < 68) revert();\n            assembly {\n                result := add(result, 0x04)\n            }\n            revert(abi.decode(result, (string)));\n        }\n\n        senderOverride = address(0);\n\n        return result;\n    }\n\n    function _msgSender() public view returns (address) {\n        if (senderOverride == address(0)) {\n            return msg.sender;\n        } else {\n            return senderOverride;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./NftRewardsInterfaceV6.sol\";\n\ninterface AggregatorInterfaceV1_1 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE,\n        UPDATE_SL\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function nftRewards() external view returns (NftRewardsInterfaceV6);\n\n    function getPrice(uint, OrderType, uint) external returns (uint);\n\n    function tokenPriceWETH() external view returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function tokenWETHReservesLp() external view returns (uint, uint);\n\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\n\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\n\n    function unregisterPendingSlOrder(uint orderId) external;\n\n    struct PendingSl {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice;\n        bool buy;\n        uint newSl;\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./PairsStorageInterfaceV6.sol\";\n\ninterface AggregatorInterfaceV1_2 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE,\n        UPDATE_SL\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint) external returns (uint);\n\n    function tokenPriceWETH() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\n\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\n\n    function unregisterPendingSlOrder(uint orderId) external;\n\n    struct PendingSl {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice;\n        bool buy;\n        uint newSl;\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./AggregatorInterfaceV1_2.sol\";\nimport \"./ChainlinkFeedInterface.sol\";\n\ninterface AggregatorInterfaceV1_3 is AggregatorInterfaceV1_2 {\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterface.sol\";\nimport \"./StorageInterface.sol\";\n\ninterface AggregatorInterfaceV1_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceWETH() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\n\n    function marketOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function nftOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\nimport \"./StorageInterface.sol\";\n\ninterface AggregatorInterfaceV1 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function getPrice(uint, OrderType, uint) external returns (uint);\n\n    function tokenPriceWETH() external view returns (uint);\n\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\n\n    function closeFeeP(uint) external view returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n\n    function tokenWETHReservesLp() external view returns (uint, uint);\n\n    function referralP(uint) external view returns (uint);\n\n    function nftLimitOrderFeeP(uint) external view returns (uint);\n\n    function marketOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function nftOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n}\n"
    },
    "contracts/interfaces/BorrowingFeesInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface BorrowingFeesInterface {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(\n        uint indexed pairIndex,\n        uint16 indexed prevGroupIndex,\n        uint16 indexed newGroupIndex\n    );\n    event GroupUpdated(\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint72 maxOi,\n        uint48 feeExponent\n    );\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(\n        uint indexed pairIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupAccFeesUpdated(\n        uint16 indexed groupIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(\n        LiqPriceInput calldata\n    ) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(\n        BorrowingFeeInput memory\n    ) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeDai\n    ) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n\n    function getTradePartialLiquidationPrice(\n        LiqPriceInput calldata input\n    ) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/CallbacksInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./StorageInterface.sol\";\n\ninterface CallbacksInterface {\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    // struct PendingMarketOrder {\n    //     Trade trade;\n    //     uint block;\n    //     uint wantedPrice; // PRECISION\n    //     uint slippageP; // PRECISION (%)\n    //     uint spreadReductionP;\n    //     uint tokenId; // index in supportedTokens\n    // }\n\n    // struct Trade {\n    //     address trader;\n    //     uint pairIndex;\n    //     uint index;\n    //     uint initialPosToken; // 1e18\n    //     uint positionSizeWETH; // 1e18\n    //     uint openPrice; // PRECISION\n    //     bool buy;\n    //     uint leverage;\n    //     uint tp; // PRECISION\n    //     uint sl; // PRECISION\n    // }\n\n    function openTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function closeTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function executeNftOpenOrderCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n\n    function executeNftCloseOrderCallback(\n        AggregatorAnswer memory,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n\n    function getTradePnl(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (int256 pnl);\n}\n"
    },
    "contracts/interfaces/ChainlinkFeedInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ChainlinkFeedInterface {\n    function latestRoundData()\n        external\n        view\n        returns (uint80, int, uint, uint, uint80);\n}\n"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/interfaces/IGnsToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IGnsToken {\n    function burn(address to, uint amount) external;\n\n    function mint(address from, uint amount) external;\n}\n"
    },
    "contracts/interfaces/INft.sol": {
      "content": "// SPDX-License-Identifier: MIT\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\npragma solidity 0.8.15;\n\ninterface INft is IERC721 {\n    function mint(address to, uint tokenId) external;\n\n    function burn(uint tokenId) external;\n}\n"
    },
    "contracts/interfaces/IOpenTradesPnlFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IOpenTradesPnlFeed {\n    function nextEpochValuesRequestCount() external view returns (uint);\n\n    function newOpenPnlRequestOrEpoch() external;\n}\n"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IOracle {\n    function getPrice(\n        uint256 tokenIndex\n    ) external view returns (uint256 price, uint256 lastupdateTime);\n\n    function getFundingFee(\n        uint256 tokenIndex\n    ) external view returns (uint256 fee);\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IOwnable {\n    function owner() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IStateCopyUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./StorageInterface.sol\";\nimport \"./NFTRewardInterfaceV6_3.sol\";\n\ninterface IStateCopyUtils {\n    function getOpenLimitOrders()\n        external\n        view\n        returns (StorageInterface.OpenLimitOrder[] memory);\n\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\n}\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface IToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(\n        uint prevPositiveOpenPnl,\n        uint newPositiveOpenPnl\n    ) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(\n        uint depositId\n    ) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceWETH() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(\n        uint currentBlock\n    ) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface NftInterfaceV5 {\n    function balanceOf(address) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n\n    function transferFrom(address, address, uint) external;\n\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NFTRewardInterfaceV6_3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./StorageInterface.sol\";\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterface.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(\n        TriggeredLimitId calldata,\n        address,\n        uint\n    ) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(\n        TriggeredLimitId calldata,\n        uint,\n        uint\n    ) external;\n\n    function openLimitOrderTypes(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(\n        address,\n        uint,\n        uint,\n        OpenLimitOrderType\n    ) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(\n        uint,\n        address,\n        uint,\n        address,\n        uint,\n        uint\n    ) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NftRewardsInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./StorageInterface.sol\";\n\ninterface NftRewardsInterfaceV6 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterface.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\n\n    function openLimitOrderTypes(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(\n        address,\n        uint,\n        uint,\n        OpenLimitOrderType\n    ) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/PairInfosInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface PairInfosInterface {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long\n    ) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n\n    function getTradeValuePure(\n        uint collateral, // 1e18 (WETH)\n        int percentProfit, // PRECISION (%)\n        uint rolloverFee, // 1e18 (WETH)\n        int fundingFee, // 1e18 (WETH)\n        uint closingFee // 1e18 (WETH)\n    ) external view returns (uint);\n\n    function getTradePartialLiquidationPrice(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n}\n"
    },
    "contracts/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface PairsStorageInterfaceV6 {\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    function incrementCurrentOrderId() external returns (uint);\n\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n\n    function pairJob(\n        uint\n    ) external returns (string memory, string memory, bytes32, uint);\n\n    function pairFeed(uint) external view returns (Feed memory);\n\n    function pairSpreadP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function groupMaxCollateral(uint) external view returns (uint);\n\n    function groupCollateral(uint, bool) external view returns (uint);\n\n    function guaranteedSlEnabled(uint) external view returns (bool);\n\n    function pairOpenFeeP(uint) external view returns (uint);\n\n    function pairCloseFeeP(uint) external view returns (uint);\n\n    function pairOracleFeeP(uint) external view returns (uint);\n\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\n\n    function pairReferralFeeP(uint) external view returns (uint);\n\n    function pairMinLevPosWETH(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/PausableInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface PausableInterfaceV5 {\n    function isPaused() external view returns (bool);\n}\n"
    },
    "contracts/interfaces/PoolInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface PoolInterfaceV5 {\n    function increaseAccTokensPerLp(uint) external;\n}\n"
    },
    "contracts/interfaces/ReferralsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface ReferralsInterface {\n    function registerPotentialReferrer(\n        address trader,\n        address referral\n    ) external;\n\n    function distributePotentialReward(\n        address trader,\n        uint volumeWETH,\n        uint pairOpenFeeP,\n        uint tokenPriceWETH\n    ) external returns (uint);\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\n\n    function getTraderReferrer(\n        address trader\n    ) external view returns (address referrer);\n}\n"
    },
    "contracts/interfaces/StakingInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface StakingInterface {\n    function distributeRewardWETH(uint amount) external;\n}\n"
    },
    "contracts/interfaces/StorageInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./TokenInterface.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IToken.sol\";\nimport \"./AggregatorInterfaceV1.sol\";\nimport \"./IOracle.sol\";\nimport \"./PausableInterfaceV5.sol\";\n\ninterface StorageInterface {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN,\n        PAR_LIQ\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceWETH; // PRECISION\n        uint openInterestWETH; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (WETH or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function WETH() external view returns (TokenInterface);\n\n    function token() external view returns (TokenInterface);\n\n    function linkErc677() external view returns (TokenInterface);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\n\n    function vault() external view returns (address);\n\n    function trading() external view returns (PausableInterfaceV5);\n\n    function callbacks() external view returns (PausableInterfaceV5);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferWETH(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (bool);\n\n    function storePendingMarketOrder(\n        PendingMarketOrder memory,\n        uint,\n        bool\n    ) external;\n\n    function getOpenTrades(\n        address,\n        uint,\n        uint\n    ) external view returns (Trade memory);\n\n    function getOpenTradesInfo(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function getPendingMarketOrder(\n        uint\n    ) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function getPendingNftOrder(\n        uint\n    ) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestWETH(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    // function fakeBlockNumber() external view returns (uint); // Testing\n\n    function getGov() external view returns (address); // checking\n\n    function mintWETH(address _to, uint _amount) external;\n\n    function oracle() external view returns (IOracle);\n}\n"
    },
    "contracts/interfaces/TokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface TokenInterface {\n    function burn(address, uint256) external;\n\n    function mint(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(address, address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function hasRole(bytes32, address) external view returns (bool);\n\n    function approve(address, uint256) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/TradingCallbacksInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface TradingCallbacksInterface {\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    function tradeLastUpdated(\n        address,\n        uint,\n        uint,\n        TradeType\n    ) external view returns (LastUpdated memory);\n\n    function setTradeLastUpdated(\n        SimplifiedTradeId calldata,\n        LastUpdated memory\n    ) external;\n\n    function setTradeData(\n        SimplifiedTradeId calldata,\n        TradeData memory\n    ) external;\n\n    function canExecuteTimeout() external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/UniswapRouterInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface UniswapRouterInterface {\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n}\n"
    },
    "contracts/interfaces/VaultInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\ninterface VaultInterface {\n    function sendWETHToTrader(address, uint) external;\n\n    function receiveWETHFromTrader(address, uint, uint) external;\n\n    function currentBalanceWETH() external view returns (uint);\n\n    function distributeRewardWETH(uint) external;\n}\n"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (\n            block.chainid == ARBITRUM_MAINNET ||\n            block.chainid == ARBITRUM_GOERLI\n        ) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(\n        uint blockNumber\n    ) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}\n"
    },
    "contracts/libraries/PackingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nlibrary PackingUtils {\n    function pack(\n        uint256[] memory values,\n        uint256[] memory bitLengths\n    ) external pure returns (uint256 packed) {\n        require(\n            values.length == bitLengths.length,\n            \"Mismatch in the lengths of values and bitLengths arrays\"\n        );\n\n        uint256 currentShift;\n\n        for (uint256 i; i < values.length; i++) {\n            require(\n                currentShift + bitLengths[i] <= 256,\n                \"Packed value exceeds 256 bits\"\n            );\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            require(\n                values[i] <= maxValue,\n                \"Value too large for specified bit length\"\n            );\n\n            uint256 maskedValue = values[i] & maxValue;\n            packed |= maskedValue << currentShift;\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack(\n        uint256 packed,\n        uint256[] memory bitLengths\n    ) external pure returns (uint256[] memory values) {\n        values = new uint256[](bitLengths.length);\n\n        uint256 currentShift;\n        for (uint256 i; i < bitLengths.length; i++) {\n            require(\n                currentShift + bitLengths[i] <= 256,\n                \"Unpacked value exceeds 256 bits\"\n            );\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            uint256 mask = maxValue << currentShift;\n            values[i] = (packed & mask) >> currentShift;\n\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack256To64(\n        uint256 packed\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\n        a = uint64(packed);\n        b = uint64(packed >> 64);\n        c = uint64(packed >> 128);\n        d = uint64(packed >> 192);\n    }\n\n    // Function-specific unpacking utils\n    function unpackExecuteNftOrder(\n        uint256 packed\n    )\n        external\n        pure\n        returns (\n            uint256 a,\n            address b,\n            uint256 c,\n            uint256 d,\n            uint256 e,\n            uint256 f\n        )\n    {\n        a = packed & 0xFF; // 8 bits\n        b = address(uint160(packed >> 8)); // 160 bits\n        c = (packed >> 168) & 0xFFFF; // 16 bits\n        d = (packed >> 184) & 0xFFFF; // 16 bits\n        e = (packed >> 200) & 0xFFFF; // 16 bits\n        f = (packed >> 216) & 0xFFFF; // 16 bits\n    }\n}\n"
    },
    "contracts/libraries/TradeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"../interfaces/StorageInterface.sol\";\nimport \"../interfaces/TradingCallbacksInterface.sol\";\n\nlibrary TradeUtils {\n    function _getTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type\n    )\n        internal\n        view\n        returns (\n            TradingCallbacksInterface,\n            TradingCallbacksInterface.LastUpdated memory,\n            TradingCallbacksInterface.SimplifiedTradeId memory\n        )\n    {\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\n            .tradeLastUpdated(trader, pairIndex, index, _type);\n\n        return (\n            callbacks,\n            l,\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            )\n        );\n    }\n\n    function setTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        uint32 b = uint32(blockNumber);\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        callbacks.setTradeLastUpdated(\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            ),\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\n        );\n    }\n\n    function setSlLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n            TradingCallbacksInterface.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.sl = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function setTpLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n            TradingCallbacksInterface.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.tp = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function isTpInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\n    }\n\n    function isSlInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\n    }\n\n    function isLimitInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\n    }\n\n    function setTradeData(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint maxSlippageP\n    ) external {\n        require(maxSlippageP <= type(uint40).max, \"OVERFLOW\");\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        callbacks.setTradeData(\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            ),\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\n        );\n    }\n}\n"
    },
    "contracts/OpenPnlFeed.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IToken.sol\";\nimport \"./interfaces/IOwnable.sol\";\nimport \"./interfaces/IOpenTradesPnlFeed.sol\";\n\ncontract OpenPnlFeed is ChainlinkClient, IOpenTradesPnlFeed {\n    using Chainlink for Chainlink.Request;\n\n    // Constants\n    uint public immutable LINK_FEE_BALANCE_DIVIDER;\n    uint constant MIN_ANSWERS = 3;\n    uint constant MIN_REQUESTS_START = 1 hours;\n    uint constant MAX_REQUESTS_START = 1 weeks;\n    uint constant MIN_REQUESTS_EVERY = 1 hours;\n    uint constant MAX_REQUESTS_EVERY = 1 days;\n    uint constant MIN_REQUESTS_COUNT = 3;\n    uint constant MAX_REQUESTS_COUNT = 10;\n\n    // Params\n    IToken public immutable vault;\n\n    uint public requestsStart = 2 hours;\n    uint public requestsEvery = 30 minutes;\n    uint public requestsCount = 4;\n\n    address[] public oracles;\n    bytes32 public job;\n    uint public minAnswers;\n\n    // State\n    int[] public nextEpochValues;\n    uint public nextEpochValuesRequestCount;\n    uint public nextEpochValuesLastRequest;\n\n    uint public requestId;\n    uint public lastRequestId;\n    mapping(uint => uint) public requestIds; // chainlink request id => requestId\n    mapping(uint => Request) public requests; // requestId => request\n    mapping(uint => int[]) public requestAnswers; // requestId => open pnl (1e18)\n\n    struct Request {\n        bool initiated;\n        bool active;\n        uint linkFeePerNode;\n    }\n\n    // Events\n    event NumberParamUpdated(string name, uint newValue);\n    event OracleUpdated(uint index, address newValue);\n    event OraclesUpdated(address[] newValues);\n    event JobUpdated(bytes32 newValue);\n\n    event NextEpochValuesReset(uint indexed currEpoch, uint requestsResetCount);\n\n    event NewEpochForced(uint indexed newEpoch);\n\n    event NextEpochValueRequested(\n        uint indexed currEpoch,\n        uint indexed requestId,\n        bytes32 job,\n        uint oraclesCount,\n        uint linkFeePerNode\n    );\n\n    event NewEpoch(\n        uint indexed newEpoch,\n        uint indexed requestId,\n        int[] epochMedianValues,\n        int epochAverageValue,\n        uint newEpochPositiveOpenPnl\n    );\n\n    event RequestValueReceived(\n        bool isLate,\n        uint indexed currEpoch,\n        uint indexed requestId,\n        uint oracleRequestId,\n        address indexed oracle,\n        int requestValue,\n        uint linkFee\n    );\n\n    event RequestMedianValueSet(\n        uint indexed currEpoch,\n        uint indexed requestId,\n        int[] requestValues,\n        int medianValue\n    );\n\n    constructor(\n        uint _LINK_FEE_BALANCE_DIVIDER,\n        address _linkToken,\n        IToken _vault,\n        address[] memory _oracles,\n        bytes32 _job,\n        uint _minAnswers\n    ) {\n        require(\n            _LINK_FEE_BALANCE_DIVIDER > 0 &&\n                _linkToken != address(0) &&\n                address(_vault) != address(0) &&\n                _oracles.length > 0 &&\n                _job != bytes32(0) &&\n                _minAnswers >= MIN_ANSWERS &&\n                _minAnswers % 2 == 1 &&\n                _minAnswers <= _oracles.length / 2,\n            \"WRONG_PARAMS\"\n        );\n\n        LINK_FEE_BALANCE_DIVIDER = _LINK_FEE_BALANCE_DIVIDER;\n\n        setChainlinkToken(_linkToken);\n\n        vault = _vault;\n        oracles = _oracles;\n        job = _job;\n        minAnswers = _minAnswers;\n    }\n\n    // Modifiers\n    modifier onlyOwner() {\n        // 2-week timelock\n        require(msg.sender == IOwnable(address(vault)).owner(), \"ONLY_OWNER\");\n        _;\n    }\n\n    modifier onlyManager() {\n        // 3-day timelock\n        require(msg.sender == vault.manager(), \"ONLY_MANAGER\");\n        _;\n    }\n\n    modifier onlyAdmin() {\n        // bypasses timelock, emergency functions only\n        require(msg.sender == vault.admin(), \"ONLY_ADMIN\");\n        _;\n    }\n\n    // Manage parameters\n    function updateRequestsStart(uint newValue) public onlyOwner {\n        require(newValue >= MIN_REQUESTS_START, \"BELOW_MIN\");\n        require(newValue <= MAX_REQUESTS_START, \"ABOVE_MAX\");\n        requestsStart = newValue;\n        emit NumberParamUpdated(\"requestsStart\", newValue);\n    }\n\n    function updateRequestsEvery(uint newValue) public onlyOwner {\n        require(newValue >= MIN_REQUESTS_EVERY, \"BELOW_MIN\");\n        require(newValue <= MAX_REQUESTS_EVERY, \"ABOVE_MAX\");\n        requestsEvery = newValue;\n        emit NumberParamUpdated(\"requestsEvery\", newValue);\n    }\n\n    function updateRequestsCount(uint newValue) public onlyOwner {\n        require(newValue >= MIN_REQUESTS_COUNT, \"BELOW_MIN\");\n        require(newValue <= MAX_REQUESTS_COUNT, \"ABOVE_MAX\");\n        requestsCount = newValue;\n        emit NumberParamUpdated(\"requestsCount\", newValue);\n    }\n\n    function updateRequestsInfoBatch(\n        uint newRequestsStart,\n        uint newRequestsEvery,\n        uint newRequestsCount\n    ) external onlyOwner {\n        updateRequestsStart(newRequestsStart);\n        updateRequestsEvery(newRequestsEvery);\n        updateRequestsCount(newRequestsCount);\n    }\n\n    function updateMinAnswers(uint newValue) external onlyManager {\n        require(newValue >= MIN_ANSWERS, \"BELOW_MIN\");\n        require(newValue % 2 == 1, \"EVEN\");\n        require(newValue <= oracles.length / 2, \"ABOVE_MAX\");\n        minAnswers = newValue;\n        emit NumberParamUpdated(\"minAnswers\", newValue);\n    }\n\n    function updateOracle(uint _index, address newValue) external onlyOwner {\n        require(_index < oracles.length, \"INDEX_TOO_BIG\");\n        require(newValue != address(0), \"VALUE_0\");\n        oracles[_index] = newValue;\n        emit OracleUpdated(_index, newValue);\n    }\n\n    function updateOracles(address[] memory newValues) external onlyOwner {\n        require(newValues.length >= minAnswers * 2, \"ARRAY_TOO_SMALL\");\n        oracles = newValues;\n        emit OraclesUpdated(newValues);\n    }\n\n    function updateJob(bytes32 newValue) external onlyManager {\n        require(newValue != bytes32(0), \"VALUE_0\");\n        job = newValue;\n        emit JobUpdated(newValue);\n    }\n\n    // Emergency function in case of oracle manipulation\n    function resetNextEpochValueRequests() external onlyAdmin {\n        uint reqToResetCount = nextEpochValuesRequestCount;\n        require(reqToResetCount > 0, \"NO_REQUEST_TO_RESET\");\n\n        delete nextEpochValues;\n\n        nextEpochValuesRequestCount = 0;\n        nextEpochValuesLastRequest = 0;\n\n        for (uint i; i < reqToResetCount; i++) {\n            requests[lastRequestId - i].active = false;\n        }\n\n        emit NextEpochValuesReset(vault.currentEpoch(), reqToResetCount);\n    }\n\n    // Safety function that anyone can call in case the function above is used in an abusive manner,\n    // which could theoretically delay withdrawals indefinitely since it prevents new epochs\n    function forceNewEpoch() external {\n        require(\n            block.timestamp - vault.currentEpochStart() >=\n                requestsStart + requestsEvery * requestsCount,\n            \"TOO_EARLY\"\n        );\n        uint newEpoch = startNewEpoch();\n        emit NewEpochForced(newEpoch);\n    }\n\n    // Called by  contract\n    function newOpenPnlRequestOrEpoch() external {\n        bool firstRequest = nextEpochValuesLastRequest == 0;\n\n        if (\n            firstRequest &&\n            block.timestamp - vault.currentEpochStart() >= requestsStart\n        ) {\n            makeOpenPnlRequest();\n        } else if (\n            !firstRequest &&\n            block.timestamp - nextEpochValuesLastRequest >= requestsEvery\n        ) {\n            if (nextEpochValuesRequestCount < requestsCount) {\n                makeOpenPnlRequest();\n            } else if (nextEpochValues.length >= requestsCount) {\n                startNewEpoch();\n            }\n        }\n    }\n\n    // Create requests\n    function makeOpenPnlRequest() private {\n        // Chainlink.Request memory linkRequest = buildChainlinkRequest(\n        //     job,\n        //     address(this),\n        //     this.fulfill.selector\n        // );\n\n        // uint linkFeePerNode = IERC20(chainlinkTokenAddress()).balanceOf(\n        //     address(this)\n        // ) /\n        //     LINK_FEE_BALANCE_DIVIDER /\n        //     oracles.length;\n        ++lastRequestId;\n        requests[lastRequestId] = Request({\n            initiated: true,\n            active: true,\n            linkFeePerNode: 0\n        });\n\n        nextEpochValuesRequestCount++;\n        nextEpochValuesLastRequest = block.timestamp;\n\n        for (uint i; i < oracles.length; i++) {\n            ++requestId;\n            requestIds[requestId] = lastRequestId;\n        }\n\n        emit NextEpochValueRequested(\n            vault.currentEpoch(),\n            lastRequestId,\n            job,\n            oracles.length,\n            0\n        );\n    }\n\n    // Handle answers\n    function fulfill(\n        uint requestId,\n        int value // 1e18\n    ) external /*recordChainlinkFulfillment(requestId)*/ {\n        uint reqId = requestIds[requestId];\n        delete requestIds[requestId];\n\n        Request memory r = requests[reqId];\n        uint currentEpoch = vault.currentEpoch();\n\n        emit RequestValueReceived(\n            !r.active,\n            currentEpoch,\n            reqId,\n            requestId,\n            msg.sender,\n            value,\n            r.linkFeePerNode\n        );\n\n        if (!r.active) {\n            return;\n        }\n        int[] storage answers = requestAnswers[reqId];\n        answers.push(value);\n\n        if (answers.length == minAnswers) {\n            int medianValue = median(answers);\n            nextEpochValues.push(medianValue);\n\n            emit RequestMedianValueSet(\n                currentEpoch,\n                reqId,\n                answers,\n                medianValue\n            );\n\n            requests[reqId].active = false;\n            delete requestAnswers[reqId];\n        }\n    }\n\n    // Increment epoch and update feed value\n    function startNewEpoch() private returns (uint newEpoch) {\n        nextEpochValuesRequestCount = 0;\n        nextEpochValuesLastRequest = 0;\n\n        uint currentEpochPositiveOpenPnl = vault.currentEpochPositiveOpenPnl();\n\n        // If all responses arrived, use mean, otherwise it means we forced a new epoch,\n        // so as a safety we use the last epoch value\n        int newEpochOpenPnl = nextEpochValues.length >= requestsCount\n            ? average(nextEpochValues)\n            : int(currentEpochPositiveOpenPnl);\n        uint finalNewEpochPositiveOpenPnl = vault.updateAccPnlPerTokenUsed(\n            currentEpochPositiveOpenPnl,\n            newEpochOpenPnl > 0 ? uint(newEpochOpenPnl) : 0\n        );\n\n        newEpoch = vault.currentEpoch();\n\n        emit NewEpoch(\n            newEpoch,\n            lastRequestId,\n            nextEpochValues,\n            newEpochOpenPnl,\n            finalNewEpochPositiveOpenPnl\n        );\n\n        delete nextEpochValues;\n    }\n\n    // Median function\n    function swap(int[] memory array, uint i, uint j) private pure {\n        (array[i], array[j]) = (array[j], array[i]);\n    }\n\n    function sort(int[] memory array, uint begin, uint end) private pure {\n        if (begin >= end) {\n            return;\n        }\n\n        uint j = begin;\n        int pivot = array[j];\n\n        for (uint i = begin + 1; i < end; ++i) {\n            if (array[i] < pivot) {\n                swap(array, i, ++j);\n            }\n        }\n\n        swap(array, begin, j);\n        sort(array, begin, j);\n        sort(array, j + 1, end);\n    }\n\n    function median(int[] memory array) private pure returns (int) {\n        sort(array, 0, array.length);\n\n        return\n            array.length % 2 == 0\n                ? (array[array.length / 2 - 1] + array[array.length / 2]) / 2\n                : array[array.length / 2];\n    }\n\n    // Average function\n    function average(int[] memory array) private pure returns (int) {\n        int sum;\n        for (uint i; i < array.length; i++) {\n            sum += array[i];\n        }\n\n        return sum / int(array.length);\n    }\n\n    //getters\n\n    // function getRequestAnswers(\n    //     uint256 _requestId,\n    //     uint256 answerIndex\n    // ) external view returns (int ans) {\n    //     int[] memory ansArr = requestAnswers[_requestId];\n    //     return ansArr[answerIndex];\n    // }\n}\n"
    },
    "contracts/Oracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\";\n\ncontract Oracle is AccessControlUpgradeable {\n    struct Observation {\n        uint256 price;\n        uint256 lastupdateTime;\n    }\n\n    struct FundingFeeObservation {\n        uint256 price;\n        uint256 lastupdateTime;\n        uint256 lastupdateBlockNumber;\n        int fundingFeeRate; // funding fee rate per block\n    }\n\n    bytes32 public constant PRICE_SETTER_ROLE = keccak256(\"PRICE_SETTER_ROLE\");\n    uint constant PRECISION = 1e10;\n\n    uint256 public fundingFeeEpoch;\n\n    mapping(uint256 => Observation) priceData;\n    mapping(uint256 => FundingFeeObservation) fundinFeeData;\n\n    function __Oracle_init(\n        address priceSetter,\n        uint256 _fundingFeeEpoch\n    ) external initializer {\n        __AccessControl_init_unchained();\n        __Context_init_unchained();\n        _grantRole(PRICE_SETTER_ROLE, priceSetter);\n        _setRoleAdmin(PRICE_SETTER_ROLE, PRICE_SETTER_ROLE);\n        fundingFeeEpoch = _fundingFeeEpoch;\n    }\n\n    function feedPrice(\n        uint256 tokenIndex,\n        uint256 price\n    ) public onlyRole(PRICE_SETTER_ROLE) {\n        _feedPrice(tokenIndex, price);\n        _feedFundingFeeData(tokenIndex, price);\n    }\n\n    function feedPriceArray(\n        uint256[] calldata tokenIndexes,\n        uint256[] calldata prices\n    ) external onlyRole(PRICE_SETTER_ROLE) {\n        for (uint256 i; i < tokenIndexes.length; i++) {\n            _feedPrice(tokenIndexes[i], prices[i]);\n            _feedFundingFeeData(tokenIndexes[i], prices[i]);\n        }\n    }\n\n    function _feedPrice(uint256 tokenIndex, uint256 price) internal {\n        require(price > 0, \"Price can't be zero\");\n        priceData[tokenIndex] = Observation({\n            price: price,\n            lastupdateTime: block.timestamp\n        });\n    }\n\n    function _feedFundingFeeData(uint256 tokenIndex, uint256 price) internal {\n        require(price > 0, \"Price can't be zero\");\n        FundingFeeObservation memory data = fundinFeeData[tokenIndex];\n        bool feedData = data.lastupdateTime == 0;\n        bool updateFee = (fundingFeeEpoch <=\n            block.timestamp - data.lastupdateTime) && data.lastupdateTime != 0;\n        if (feedData) {\n            fundinFeeData[tokenIndex] = FundingFeeObservation({\n                price: price,\n                lastupdateTime: block.timestamp,\n                lastupdateBlockNumber: block.number,\n                fundingFeeRate: 0\n            });\n        }\n        if (updateFee) {\n            int256 rate = (((int(price) - int(data.price))) * int(PRECISION)) /\n                int(data.price);\n            int fee = rate / int(block.number - data.lastupdateBlockNumber);\n            fundinFeeData[tokenIndex] = FundingFeeObservation({\n                price: price,\n                lastupdateTime: block.timestamp,\n                lastupdateBlockNumber: block.number,\n                fundingFeeRate: fee\n            });\n        }\n    }\n\n    function getPrice(\n        uint256 tokenIndex\n    ) external view returns (uint256 price, uint256 lastupdateTime) {\n        Observation memory tokenPriceData = priceData[tokenIndex];\n        return (tokenPriceData.price, tokenPriceData.lastupdateTime);\n    }\n\n    // set EPOCH as seconds in the period\n    function setFundingFeeEPOCH(uint256 _seconds) external {\n        fundingFeeEpoch = _seconds;\n    }\n\n    function getFundingFee(\n        uint256 tokenIndex\n    ) external view returns (uint256 fee) {\n        if (fundinFeeData[tokenIndex].fundingFeeRate < 0) {\n            fee = uint256(fundinFeeData[tokenIndex].fundingFeeRate * -1);\n        } else {\n            fee = uint256(fundinFeeData[tokenIndex].fundingFeeRate);\n        }\n    }\n}\n"
    },
    "contracts/PairInfos.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/UniswapRouterInterface.sol\";\nimport \"./interfaces/TokenInterface.sol\";\nimport \"./interfaces/NftInterfaceV5.sol\";\nimport \"./interfaces/VaultInterface.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_1.sol\";\nimport \"./interfaces/NftRewardsInterfaceV6.sol\";\n\ncontract PairInfos {\n    // Addresses\n    StorageInterface immutable storageT;\n    address public manager;\n\n    // Constant parameters\n    uint constant PRECISION = 1e10; // 10 decimals\n    uint constant LIQ_THRESHOLD_P = 90; // -90% (of collateral)\n    uint constant PAR_LIQ_THRESHOLD_P = 80; // -90% (of collateral)\n\n    // Adjustable parameters\n    uint public maxNegativePnlOnOpenP = 40 * PRECISION; // PRECISION (%)\n\n    // Pair parameters\n    struct PairParams {\n        uint onePercentDepthAbove; // WETH\n        uint onePercentDepthBelow; // WETH\n        uint rolloverFeePerBlockP; // PRECISION (%)\n        uint fundingFeePerBlockP; // PRECISION (%)\n    }\n\n    mapping(uint => PairParams) public pairParams;\n\n    // Pair acc funding fees\n    struct PairFundingFees {\n        int accPerOiLong; // 1e18 (WETH)\n        int accPerOiShort; // 1e18 (WETH)\n        uint lastUpdateBlock;\n    }\n\n    mapping(uint => PairFundingFees) public pairFundingFees;\n\n    // Pair acc rollover fees\n    struct PairRolloverFees {\n        uint accPerCollateral; // 1e18 (WETH)\n        uint lastUpdateBlock;\n    }\n\n    mapping(uint => PairRolloverFees) public pairRolloverFees;\n\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (WETH)\n        int funding; // 1e18 (WETH)\n        bool openedAfterUpdate;\n    }\n\n    mapping(address => mapping(uint => mapping(uint => TradeInitialAccFees)))\n        public tradeInitialAccFees;\n\n    // Events\n    event ManagerUpdated(address value);\n    event MaxNegativePnlOnOpenPUpdated(uint value);\n\n    event PairParamsUpdated(uint pairIndex, PairParams value);\n    event OnePercentDepthUpdated(\n        uint pairIndex,\n        uint valueAbove,\n        uint valueBelow\n    );\n    event RolloverFeePerBlockPUpdated(uint pairIndex, uint value);\n    event FundingFeePerBlockPUpdated(uint pairIndex, uint value);\n\n    event TradeInitialAccFeesStored(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint rollover,\n        int funding\n    );\n\n    event AccFundingFeesStored(uint pairIndex, int valueLong, int valueShort);\n    event AccRolloverFeesStored(uint pairIndex, uint value);\n\n    event FeesCharged(\n        uint pairIndex,\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint rolloverFees, // 1e18 (WETH)\n        int fundingFees // 1e18 (WETH)\n    );\n\n    constructor(StorageInterface _storageT) {\n        storageT = _storageT;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyManager() {\n        require(msg.sender == manager, \"MANAGER_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Set manager address\n    function setManager(address _manager) external onlyGov {\n        manager = _manager;\n\n        emit ManagerUpdated(_manager);\n    }\n\n    // Set max negative PnL % on trade opening\n    function setMaxNegativePnlOnOpenP(uint value) external onlyManager {\n        maxNegativePnlOnOpenP = value;\n\n        emit MaxNegativePnlOnOpenPUpdated(value);\n    }\n\n    // Set parameters for pair\n    function setPairParams(\n        uint pairIndex,\n        PairParams memory value\n    ) public onlyManager {\n        storeAccRolloverFees(pairIndex);\n        storeAccFundingFees(pairIndex);\n\n        pairParams[pairIndex] = value;\n\n        emit PairParamsUpdated(pairIndex, value);\n    }\n\n    function setPairParamsArray(\n        uint[] memory indices,\n        PairParams[] memory values\n    ) external onlyManager {\n        require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for (uint i = 0; i < indices.length; i++) {\n            setPairParams(indices[i], values[i]);\n        }\n    }\n\n    // Set one percent depth for pair\n    function setOnePercentDepth(\n        uint pairIndex,\n        uint valueAbove,\n        uint valueBelow\n    ) public onlyManager {\n        PairParams storage p = pairParams[pairIndex];\n\n        p.onePercentDepthAbove = valueAbove;\n        p.onePercentDepthBelow = valueBelow;\n\n        emit OnePercentDepthUpdated(pairIndex, valueAbove, valueBelow);\n    }\n\n    function setOnePercentDepthArray(\n        uint[] memory indices,\n        uint[] memory valuesAbove,\n        uint[] memory valuesBelow\n    ) external onlyManager {\n        require(\n            indices.length == valuesAbove.length &&\n                indices.length == valuesBelow.length,\n            \"WRONG_LENGTH\"\n        );\n\n        for (uint i = 0; i < indices.length; i++) {\n            setOnePercentDepth(indices[i], valuesAbove[i], valuesBelow[i]);\n        }\n    }\n\n    // Set rollover fee for pair\n    function setRolloverFeePerBlockP(\n        uint pairIndex,\n        uint value\n    ) public onlyManager {\n        require(value <= 25000000, \"TOO_HIGH\"); // ≈ 100% per day\n\n        storeAccRolloverFees(pairIndex);\n\n        pairParams[pairIndex].rolloverFeePerBlockP = value;\n\n        emit RolloverFeePerBlockPUpdated(pairIndex, value);\n    }\n\n    function setRolloverFeePerBlockPArray(\n        uint[] memory indices,\n        uint[] memory values\n    ) external onlyManager {\n        require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for (uint i = 0; i < indices.length; i++) {\n            setRolloverFeePerBlockP(indices[i], values[i]);\n        }\n    }\n\n    // Set funding fee for pair\n    function setFundingFeePerBlockP(uint pairIndex) public /*onlyManager*/ {\n        _setFundingFeePerBlockP(pairIndex);\n    }\n\n    function _setFundingFeePerBlockP(uint pairIndex) internal {\n        uint value = (storageT.oracle()).getFundingFee(pairIndex);\n        require(value <= 10000000, \"TOO_HIGH\"); // ≈ 40% per day\n\n        storeAccFundingFees(pairIndex);\n\n        uint256 oldFee = pairParams[pairIndex].fundingFeePerBlockP;\n        if (oldFee != value) {\n            pairParams[pairIndex].fundingFeePerBlockP = value;\n            emit FundingFeePerBlockPUpdated(pairIndex, value);\n        }\n    }\n\n    function setFundingFeePerBlockPArray(\n        uint[] memory indices\n    ) external onlyManager {\n        // require(indices.length == values.length, \"WRONG_LENGTH\");\n\n        for (uint i = 0; i < indices.length; i++) {\n            _setFundingFeePerBlockP(indices[i]);\n        }\n    }\n\n    // Store trade details when opened (acc fee values)\n    function storeTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long\n    ) external onlyCallbacks {\n        _setFundingFeePerBlockP(pairIndex);\n        TradeInitialAccFees storage t = tradeInitialAccFees[trader][pairIndex][\n            index\n        ];\n\n        t.rollover = getPendingAccRolloverFees(pairIndex);\n\n        t.funding = long\n            ? pairFundingFees[pairIndex].accPerOiLong\n            : pairFundingFees[pairIndex].accPerOiShort;\n\n        t.openedAfterUpdate = true;\n\n        emit TradeInitialAccFeesStored(\n            trader,\n            pairIndex,\n            index,\n            t.rollover,\n            t.funding\n        );\n    }\n\n    // Acc rollover fees (store right before fee % update)\n    function storeAccRolloverFees(uint pairIndex) private {\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\n\n        r.accPerCollateral = getPendingAccRolloverFees(pairIndex);\n        r.lastUpdateBlock = block.number;\n\n        emit AccRolloverFeesStored(pairIndex, r.accPerCollateral);\n    }\n\n    function getPendingAccRolloverFees(\n        uint pairIndex\n    ) public view returns (uint) {\n        // 1e18 (WETH)\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\n\n        return\n            r.accPerCollateral +\n            ((block.number - r.lastUpdateBlock) *\n                pairParams[pairIndex].rolloverFeePerBlockP *\n                1e18) /\n            PRECISION /\n            100;\n    }\n\n    // Acc funding fees (store right before trades opened / closed and fee % update)\n    function storeAccFundingFees(uint pairIndex) private {\n        PairFundingFees storage f = pairFundingFees[pairIndex];\n\n        (f.accPerOiLong, f.accPerOiShort) = getPendingAccFundingFees(pairIndex);\n        f.lastUpdateBlock = block.number;\n\n        emit AccFundingFeesStored(pairIndex, f.accPerOiLong, f.accPerOiShort);\n    }\n\n    function getPendingAccFundingFees(\n        uint pairIndex\n    ) public view returns (int valueLong, int valueShort) {\n        PairFundingFees storage f = pairFundingFees[pairIndex];\n\n        valueLong = f.accPerOiLong;\n        valueShort = f.accPerOiShort;\n\n        int openInterestWETHLong = int(storageT.openInterestWETH(pairIndex, 0));\n        int openInterestWETHShort = int(\n            storageT.openInterestWETH(pairIndex, 1)\n        );\n        int fundingFeesPaidByLongs = ((openInterestWETHLong -\n            openInterestWETHShort) *\n            int(block.number - f.lastUpdateBlock) *\n            int(pairParams[pairIndex].fundingFeePerBlockP)) /\n            int(PRECISION) /\n            100;\n\n        if (openInterestWETHLong > 0) {\n            valueLong += (fundingFeesPaidByLongs * 1e18) / openInterestWETHLong;\n        }\n\n        if (openInterestWETHShort > 0) {\n            valueShort +=\n                (fundingFeesPaidByLongs * 1e18 * (-1)) /\n                openInterestWETHShort;\n        }\n    }\n\n    // Dynamic price impact value on trade opening\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint tradeOpenInterest // 1e18 (WETH)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        )\n    {\n        (priceImpactP, priceAfterImpact) = getTradePriceImpactPure(\n            openPrice,\n            long,\n            storageT.openInterestWETH(pairIndex, long ? 0 : 1),\n            tradeOpenInterest,\n            long\n                ? pairParams[pairIndex].onePercentDepthAbove\n                : pairParams[pairIndex].onePercentDepthBelow\n        );\n    }\n\n    function getTradePriceImpactPure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint startOpenInterest, // 1e18 (WETH)\n        uint tradeOpenInterest, // 1e18 (WETH)\n        uint onePercentDepth\n    )\n        public\n        pure\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        )\n    {\n        if (onePercentDepth == 0) {\n            return (0, openPrice);\n        }\n\n        priceImpactP =\n            ((startOpenInterest + tradeOpenInterest / 2) * PRECISION) /\n            1e18 /\n            onePercentDepth;\n\n        uint priceImpact = (priceImpactP * openPrice) / PRECISION / 100;\n\n        priceAfterImpact = long\n            ? openPrice + priceImpact\n            : openPrice - priceImpact;\n    }\n\n    // Rollover fee value\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (WETH)\n    ) public view returns (uint) {\n        // 1e18 (WETH)\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][\n            index\n        ];\n\n        if (!t.openedAfterUpdate) {\n            return 0;\n        }\n        return\n            getTradeRolloverFeePure(\n                t.rollover,\n                getPendingAccRolloverFees(pairIndex),\n                collateral\n            );\n    }\n\n    function getTradeRolloverFeePure(\n        uint accRolloverFeesPerCollateral,\n        uint endAccRolloverFeesPerCollateral,\n        uint collateral // 1e18 (WETH)\n    ) public pure returns (uint) {\n        // 1e18 (WETH)\n        return\n            ((endAccRolloverFeesPerCollateral - accRolloverFeesPerCollateral) *\n                collateral) / 1e18;\n    }\n\n    // Funding fee value\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage\n    )\n        public\n        view\n        returns (\n            int // 1e18 (WETH) | Positive => Fee, Negative => Reward\n        )\n    {\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][\n            index\n        ];\n\n        if (!t.openedAfterUpdate) {\n            return 0;\n        }\n        (int pendingLong, int pendingShort) = getPendingAccFundingFees(\n            pairIndex\n        );\n\n        return\n            getTradeFundingFeePure(\n                t.funding,\n                long ? pendingLong : pendingShort,\n                collateral,\n                leverage\n            );\n    }\n\n    function getTradeFundingFeePure(\n        int accFundingFeesPerOi,\n        int endAccFundingFeesPerOi,\n        uint collateral, // 1e18 (WETH)\n        uint leverage\n    )\n        public\n        pure\n        returns (\n            int // 1e18 (WETH) | Positive => Fee, Negative => Reward\n        )\n    {\n        return\n            ((endAccFundingFeesPerOi - accFundingFeesPerOi) *\n                int(collateral) *\n                int(leverage)) / 1e18;\n    }\n\n    // Liquidation price value after rollover and funding fees\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage\n    ) external view returns (uint) {\n        // PRECISION\n        return\n            getTradeLiquidationPricePure(\n                openPrice,\n                long,\n                collateral,\n                leverage,\n                getTradeRolloverFee(trader, pairIndex, index, collateral),\n                getTradeFundingFee(\n                    trader,\n                    pairIndex,\n                    index,\n                    long,\n                    collateral,\n                    leverage\n                )\n            );\n    }\n\n    function getTradePartialLiquidationPrice(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage,\n        uint rolloverFee, // 1e18 (WETH)\n        int fundingFee // 1e18 (WETH)\n    ) public pure returns (uint) {\n        // PRECISION\n        int liqPriceDistance = (int(openPrice) *\n            (int((collateral * PAR_LIQ_THRESHOLD_P) / 100) -\n                int(rolloverFee) -\n                fundingFee)) /\n            int(collateral) /\n            int(leverage);\n\n        int liqPrice = long\n            ? int(openPrice) - liqPriceDistance\n            : int(openPrice) + liqPriceDistance;\n\n        return liqPrice > 0 ? uint(liqPrice) : 0;\n    }\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage,\n        uint rolloverFee, // 1e18 (WETH)\n        int fundingFee // 1e18 (WETH)\n    ) public pure returns (uint) {\n        // PRECISION\n        int liqPriceDistance = (int(openPrice) *\n            (int((collateral * LIQ_THRESHOLD_P) / 100) -\n                int(rolloverFee) -\n                fundingFee)) /\n            int(collateral) /\n            int(leverage);\n\n        int liqPrice = long\n            ? int(openPrice) - liqPriceDistance\n            : int(openPrice) + liqPriceDistance;\n\n        return liqPrice > 0 ? uint(liqPrice) : 0;\n    }\n\n    // WETH sent to trader after PnL and fees\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (WETH)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (WETH)\n    ) external onlyCallbacks returns (uint amount) {\n        // 1e18 (WETH)\n        _setFundingFeePerBlockP(pairIndex);\n\n        uint r = getTradeRolloverFee(trader, pairIndex, index, collateral);\n        int f = getTradeFundingFee(\n            trader,\n            pairIndex,\n            index,\n            long,\n            collateral,\n            leverage\n        );\n\n        amount = getTradeValuePure(collateral, percentProfit, r, f, closingFee);\n\n        emit FeesCharged(\n            pairIndex,\n            long,\n            collateral,\n            leverage,\n            percentProfit,\n            r,\n            f\n        );\n    }\n\n    function getTradeValuePure(\n        uint collateral, // 1e18 (WETH)\n        int percentProfit, // PRECISION (%)\n        uint rolloverFee, // 1e18 (WETH)\n        int fundingFee, // 1e18 (WETH)\n        uint closingFee // 1e18 (WETH)\n    ) public view returns (uint) {\n        // 1e18 (WETH)\n        int value = int(collateral) +\n            (int(collateral) * percentProfit) /\n            int(PRECISION) /\n            100 -\n            int(rolloverFee) -\n            fundingFee;\n\n        if (value <= (int(collateral) * int(100 - LIQ_THRESHOLD_P)) / 100) {\n            return 0;\n        }\n        value -= int(closingFee);\n\n        return value > 0 ? uint(value) : 0;\n    }\n\n    // Useful getters\n    function getPairInfos(\n        uint[] memory indices\n    )\n        external\n        view\n        returns (\n            PairParams[] memory,\n            PairRolloverFees[] memory,\n            PairFundingFees[] memory\n        )\n    {\n        PairParams[] memory params = new PairParams[](indices.length);\n        PairRolloverFees[] memory rolloverFees = new PairRolloverFees[](\n            indices.length\n        );\n        PairFundingFees[] memory fundingFees = new PairFundingFees[](\n            indices.length\n        );\n\n        for (uint i = 0; i < indices.length; i++) {\n            uint index = indices[i];\n\n            params[i] = pairParams[index];\n            rolloverFees[i] = pairRolloverFees[index];\n            fundingFees[i] = pairFundingFees[index];\n        }\n\n        return (params, rolloverFees, fundingFees);\n    }\n\n    function getOnePercentDepthAbove(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairParams[pairIndex].onePercentDepthAbove;\n    }\n\n    function getOnePercentDepthBelow(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairParams[pairIndex].onePercentDepthBelow;\n    }\n\n    function getRolloverFeePerBlockP(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairParams[pairIndex].rolloverFeePerBlockP;\n    }\n\n    function getFundingFeePerBlockP(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairParams[pairIndex].fundingFeePerBlockP;\n    }\n\n    function getAccRolloverFees(uint pairIndex) external view returns (uint) {\n        return pairRolloverFees[pairIndex].accPerCollateral;\n    }\n\n    function getAccRolloverFeesUpdateBlock(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairRolloverFees[pairIndex].lastUpdateBlock;\n    }\n\n    function getAccFundingFeesLong(uint pairIndex) external view returns (int) {\n        return pairFundingFees[pairIndex].accPerOiLong;\n    }\n\n    function getAccFundingFeesShort(\n        uint pairIndex\n    ) external view returns (int) {\n        return pairFundingFees[pairIndex].accPerOiShort;\n    }\n\n    function getAccFundingFeesUpdateBlock(\n        uint pairIndex\n    ) external view returns (uint) {\n        return pairFundingFees[pairIndex].lastUpdateBlock;\n    }\n\n    function getTradeInitialAccRolloverFeesPerCollateral(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (uint) {\n        return tradeInitialAccFees[trader][pairIndex][index].rollover;\n    }\n\n    function getTradeInitialAccFundingFeesPerOi(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (int) {\n        return tradeInitialAccFees[trader][pairIndex][index].funding;\n    }\n\n    function getTradeOpenedAfterUpdate(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (bool) {\n        return tradeInitialAccFees[trader][pairIndex][index].openedAfterUpdate;\n    }\n}\n"
    },
    "contracts/PairsStorage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/UniswapRouterInterface.sol\";\nimport \"./interfaces/TokenInterface.sol\";\nimport \"./interfaces/NftInterfaceV5.sol\";\nimport \"./interfaces/VaultInterface.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_1.sol\";\nimport \"./interfaces/NftRewardsInterfaceV6.sol\";\nimport \"./interfaces/VaultInterface.sol\";\n\ncontract PairsStorage {\n    // Contracts (constant)\n    StorageInterface public storageT;\n\n    // Params (constant)\n    uint constant MIN_LEVERAGE = 2;\n    uint constant MAX_LEVERAGE = 1000;\n\n    // Custom data types\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    }\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    struct Pair {\n        string from;\n        string to;\n        Feed feed;\n        uint spreadP; // PRECISION\n        uint groupIndex;\n        uint feeIndex;\n    }\n    struct Group {\n        string name;\n        bytes32 job;\n        uint minLeverage;\n        uint maxLeverage;\n        uint maxCollateralP; // % (of WETH vault current balance)\n    }\n    struct Fee {\n        string name;\n        uint openFeeP; // PRECISION (% of leveraged pos)\n        uint closeFeeP; // PRECISION (% of leveraged pos)\n        uint oracleFeeP; // PRECISION (% of leveraged pos)\n        uint nftLimitOrderFeeP; // PRECISION (% of leveraged pos)\n        uint referralFeeP; // PRECISION (% of leveraged pos)\n        uint minLevPosWETH; // 1e18 (collateral x leverage, useful for min fee)\n    }\n\n    // State\n    uint public currentOrderId;\n\n    uint public pairsCount;\n    uint public groupsCount;\n    uint public feesCount;\n\n    mapping(uint => Pair) public pairs;\n    mapping(uint => Group) public groups;\n    mapping(uint => Fee) public fees;\n\n    mapping(string => mapping(string => bool)) public isPairListed;\n\n    mapping(uint => uint[2]) public groupsCollaterals; // (long, short)\n\n    // Events\n    event PairAdded(uint index, string from, string to);\n    event PairUpdated(uint index);\n\n    event GroupAdded(uint index, string name);\n    event GroupUpdated(uint index);\n\n    event FeeAdded(uint index, string name);\n    event FeeUpdated(uint index);\n\n    constructor(uint _currentOrderId, address _storage) {\n        require(_currentOrderId > 0, \"ORDER_ID_0\");\n        currentOrderId = _currentOrderId;\n        storageT = StorageInterface(_storage);\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\"); //// TODO check error function returned an unexpected amount of data\n        _;\n    }\n\n    modifier groupListed(uint _groupIndex) {\n        require(groups[_groupIndex].minLeverage > 0, \"GROUP_NOT_LISTED\");\n        _;\n    }\n    modifier feeListed(uint _feeIndex) {\n        require(fees[_feeIndex].openFeeP > 0, \"FEE_NOT_LISTED\");\n        _;\n    }\n\n    modifier feedOk(Feed calldata _feed) {\n        require(\n            _feed.maxDeviationP > 0 && _feed.feed1 != address(0),\n            \"WRONG_FEED\"\n        );\n        require(\n            _feed.feedCalculation != FeedCalculation.COMBINE ||\n                _feed.feed2 != address(0),\n            \"FEED_2_MISSING\"\n        );\n        _;\n    }\n    modifier groupOk(Group calldata _group) {\n        require(_group.job != bytes32(0), \"JOB_EMPTY\");\n        require(\n            _group.minLeverage >= MIN_LEVERAGE &&\n                _group.maxLeverage <= MAX_LEVERAGE &&\n                _group.minLeverage < _group.maxLeverage,\n            \"WRONG_LEVERAGES\"\n        );\n        _;\n    }\n    modifier feeOk(Fee calldata _fee) {\n        require(\n            _fee.openFeeP > 0 &&\n                _fee.closeFeeP > 0 &&\n                _fee.oracleFeeP > 0 &&\n                _fee.nftLimitOrderFeeP > 0 &&\n                _fee.referralFeeP > 0 &&\n                _fee.minLevPosWETH > 0,\n            \"WRONG_FEES\"\n        );\n        _;\n    }\n\n    // Manage pairs\n    function addPair(\n        Pair calldata _pair\n    )\n        public\n        onlyGov // feedOk(_pair.feed)\n    // groupListed(_pair.groupIndex) /// TODO : uncomment\n    // feeListed(_pair.feeIndex)\n    {\n        require(!isPairListed[_pair.from][_pair.to], \"PAIR_ALREADY_LISTED\");\n        pairs[pairsCount] = _pair;\n        isPairListed[_pair.from][_pair.to] = true;\n\n        emit PairAdded(pairsCount++, _pair.from, _pair.to);\n    }\n\n    function addPairs(Pair[] calldata _pairs) external {\n        for (uint i = 0; i < _pairs.length; i++) {\n            addPair(_pairs[i]);\n        }\n    }\n\n    function updatePair(\n        uint _pairIndex,\n        Pair calldata _pair\n    ) external onlyGov feedOk(_pair.feed) feeListed(_pair.feeIndex) {\n        Pair storage p = pairs[_pairIndex];\n        require(isPairListed[p.from][p.to], \"PAIR_NOT_LISTED\");\n\n        p.feed = _pair.feed;\n        p.spreadP = _pair.spreadP;\n        p.feeIndex = _pair.feeIndex;\n\n        emit PairUpdated(_pairIndex);\n    }\n\n    // Manage groups\n    function addGroup(Group calldata _group) external onlyGov groupOk(_group) {\n        groups[groupsCount] = _group;\n        emit GroupAdded(groupsCount++, _group.name);\n    }\n\n    function updateGroup(\n        uint _id,\n        Group calldata _group\n    ) external onlyGov groupListed(_id) groupOk(_group) {\n        groups[_id] = _group;\n        emit GroupUpdated(_id);\n    }\n\n    // Manage fees\n    function addFee(Fee calldata _fee) external onlyGov feeOk(_fee) {\n        fees[feesCount] = _fee;\n        emit FeeAdded(feesCount++, _fee.name);\n    }\n\n    function updateFee(\n        uint _id,\n        Fee calldata _fee\n    ) external onlyGov feeListed(_id) feeOk(_fee) {\n        fees[_id] = _fee;\n        emit FeeUpdated(_id);\n    }\n\n    // Update collateral open exposure for a group (callbacks)\n    function updateGroupCollateral(\n        uint _pairIndex,\n        uint _amount,\n        bool _long,\n        bool _increase\n    ) external {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n\n        uint[2] storage collateralOpen = groupsCollaterals[\n            pairs[_pairIndex].groupIndex\n        ];\n        uint index = _long ? 0 : 1;\n\n        if (_increase) {\n            collateralOpen[index] += _amount;\n        } else {\n            collateralOpen[index] = collateralOpen[index] > _amount\n                ? collateralOpen[index] - _amount\n                : 0;\n        }\n    }\n\n    // Fetch relevant info for order (aggregator)\n    function pairJob(\n        uint _pairIndex\n    ) external returns (string memory, string memory, bytes32, uint) {\n        require(\n            msg.sender == address(storageT.priceAggregator()),\n            \"AGGREGATOR_ONLY\"\n        );\n\n        Pair memory p = pairs[_pairIndex];\n        require(isPairListed[p.from][p.to], \"PAIR_NOT_LISTED\");\n\n        return (p.from, p.to, groups[p.groupIndex].job, currentOrderId++);\n    }\n\n    // Getters (pairs & groups)\n    function pairFeed(uint _pairIndex) external view returns (Feed memory) {\n        return pairs[_pairIndex].feed;\n    }\n\n    function pairSpreadP(uint _pairIndex) external view returns (uint) {\n        return pairs[_pairIndex].spreadP;\n    }\n\n    function pairMinLeverage(uint _pairIndex) external view returns (uint) {\n        return groups[pairs[_pairIndex].groupIndex].minLeverage;\n    }\n\n    function pairMaxLeverage(uint _pairIndex) external view returns (uint) {\n        return groups[pairs[_pairIndex].groupIndex].maxLeverage;\n    }\n\n    function groupMaxCollateral(uint _pairIndex) external view returns (uint) {\n        return\n            (groups[pairs[_pairIndex].groupIndex].maxCollateralP *\n                VaultInterface(address(storageT.vault())).currentBalanceWETH()) / 100;\n    }\n\n    function groupCollateral(\n        uint _pairIndex,\n        bool _long\n    ) external view returns (uint) {\n        return groupsCollaterals[pairs[_pairIndex].groupIndex][_long ? 0 : 1];\n    }\n\n    function guaranteedSlEnabled(uint _pairIndex) external view returns (bool) {\n        return pairs[_pairIndex].groupIndex == 0; // crypto only\n    }\n\n    // Getters (fees)\n    function pairOpenFeeP(uint _pairIndex) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].openFeeP;\n    }\n\n    function pairCloseFeeP(uint _pairIndex) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].closeFeeP;\n    }\n\n    function pairOracleFeeP(uint _pairIndex) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].oracleFeeP;\n    }\n\n    function pairNftLimitOrderFeeP(\n        uint _pairIndex\n    ) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].nftLimitOrderFeeP;\n    }\n\n    function pairReferralFeeP(uint _pairIndex) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].referralFeeP;\n    }\n\n    function pairMinLevPosWETH(uint _pairIndex) external view returns (uint) {\n        return fees[pairs[_pairIndex].feeIndex].minLevPosWETH;\n    }\n\n    // Getters (backend)\n    function pairsBackend(\n        uint _index\n    ) external view returns (Pair memory, Group memory, Fee memory) {\n        Pair memory p = pairs[_index];\n        return (p, groups[p.groupIndex], fees[p.feeIndex]);\n    }\n}\n"
    },
    "contracts/PriceAggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\nimport \"./TWAPPriceGetter.sol\";\nimport \"./interfaces/CallbacksInterface.sol\";\nimport \"./interfaces/ChainlinkFeedInterface.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./libraries/PackingUtils.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\n\ncontract PriceAggregator is ChainlinkClient, TWAPPriceGetter {\n    using Chainlink for Chainlink.Request;\n    using PackingUtils for uint;\n\n    // Contracts (constant)\n    StorageInterface public immutable storageT;\n\n    // Contracts (adjustable)\n    PairsStorageInterfaceV6 public pairsStorage;\n    ChainlinkFeedInterface public linkPriceFeed;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_ORACLE_NODES = 20;\n    uint constant MIN_ANSWERS = 3;\n\n    uint256 orderIds;\n\n    // Params (adjustable)\n    uint public minAnswers;\n\n    // Custom data types\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    struct Order {\n        uint16 pairIndex;\n        uint112 linkFeePerNode;\n        OrderType orderType;\n        bool active;\n        bool isLookback;\n    }\n\n    struct LookbackOrderAnswer {\n        uint64 open;\n        uint64 high;\n        uint64 low;\n        uint64 ts;\n    }\n\n    // State\n    address[] public nodes;\n    bytes32[2] public jobIds;\n\n    mapping(uint => Order) public orders;\n    mapping(bytes32 => uint) public orderIdByRequest;\n    mapping(uint => uint[]) public ordersAnswers;\n    mapping(uint => LookbackOrderAnswer[]) public lookbackOrderAnswers;\n\n    // Events\n    event PairsStorageUpdated(address value);\n    event LinkPriceFeedUpdated(address value);\n    event MinAnswersUpdated(uint value);\n\n    event NodeAdded(uint index, address value);\n    event NodeReplaced(uint index, address oldNode, address newNode);\n    event NodeRemoved(uint index, address oldNode);\n\n    event JobIdUpdated(uint index, bytes32 jobId);\n\n    event PriceRequested(\n        uint indexed orderId,\n        bytes32 indexed job,\n        uint indexed pairIndex,\n        OrderType orderType,\n        uint nodesCount,\n        uint linkFeePerNode,\n        uint fromBlock,\n        bool isLookback\n    );\n\n    event PriceReceived(\n        bytes32 request,\n        uint indexed orderId,\n        address indexed node,\n        uint16 indexed pairIndex,\n        uint price,\n        uint referencePrice,\n        uint112 linkFee,\n        bool isLookback,\n        bool usedInMedian\n    );\n\n    event CallbackExecuted(\n        CallbacksInterface.AggregatorAnswer a,\n        OrderType orderType\n    );\n\n    constructor(\n        address _linkToken,\n        IUniswapV3Pool _tokenWETHLp,\n        uint32 _twapInterval,\n        StorageInterface _storageT,\n        PairsStorageInterfaceV6 _pairsStorage,\n        ChainlinkFeedInterface _linkPriceFeed,\n        uint _minAnswers,\n        address[] memory _nodes,\n        bytes32[2] memory _jobIds\n    )\n        TWAPPriceGetter(\n            _tokenWETHLp,\n            address(_storageT.token()),\n            _twapInterval,\n            PRECISION\n        )\n    {\n        require(\n            address(_storageT) != address(0) &&\n                address(_pairsStorage) != address(0) &&\n                address(_linkPriceFeed) != address(0) &&\n                _minAnswers >= MIN_ANSWERS &&\n                _minAnswers % 2 == 1 &&\n                _nodes.length > 0 &&\n                _linkToken != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n\n        pairsStorage = _pairsStorage;\n        linkPriceFeed = _linkPriceFeed;\n\n        minAnswers = _minAnswers;\n        nodes = _nodes;\n        jobIds = _jobIds;\n\n        setChainlinkToken(_linkToken);\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == address(storageT.trading()), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage contracts\n    function updatePairsStorage(\n        PairsStorageInterfaceV6 value\n    ) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        pairsStorage = value;\n\n        emit PairsStorageUpdated(address(value));\n    }\n\n    function updateLinkPriceFeed(\n        ChainlinkFeedInterface value\n    ) external onlyGov {\n        require(address(value) != address(0), \"VALUE_0\");\n\n        linkPriceFeed = value;\n\n        emit LinkPriceFeedUpdated(address(value));\n    }\n\n    // Manage TWAP variables\n    function updateUniV3Pool(IUniswapV3Pool _uniV3Pool) external onlyGov {\n        _updateUniV3Pool(_uniV3Pool);\n    }\n\n    function updateTwapInterval(uint32 _twapInterval) external onlyGov {\n        _updateTwapInterval(_twapInterval);\n    }\n\n    // Manage params\n    function updateMinAnswers(uint value) external onlyGov {\n        require(value >= MIN_ANSWERS, \"MIN_ANSWERS\");\n        require(value % 2 == 1, \"EVEN\");\n\n        minAnswers = value;\n\n        emit MinAnswersUpdated(value);\n    }\n\n    // Manage nodes\n    function addNode(address a) external onlyGov {\n        require(a != address(0), \"VALUE_0\");\n        require(nodes.length < MAX_ORACLE_NODES, \"MAX_ORACLE_NODES\");\n\n        for (uint i; i < nodes.length; i++) {\n            require(nodes[i] != a, \"ALREADY_LISTED\");\n        }\n\n        nodes.push(a);\n\n        emit NodeAdded(nodes.length - 1, a);\n    }\n\n    function replaceNode(uint index, address a) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n        require(a != address(0), \"VALUE_0\");\n\n        emit NodeReplaced(index, nodes[index], a);\n\n        nodes[index] = a;\n    }\n\n    function removeNode(uint index) external onlyGov {\n        require(index < nodes.length, \"WRONG_INDEX\");\n\n        emit NodeRemoved(index, nodes[index]);\n\n        nodes[index] = nodes[nodes.length - 1];\n        nodes.pop();\n    }\n\n    function setMarketJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[0] = jobId;\n\n        emit JobIdUpdated(0, jobId);\n    }\n\n    function setLimitJobId(bytes32 jobId) external onlyGov {\n        require(jobId != bytes32(0), \"VALUE_0\");\n\n        jobIds[1] = jobId;\n\n        emit JobIdUpdated(1, jobId);\n    }\n\n    // On-demand price request to oracles network\n    function getPrice(\n        uint pairIndex,\n        OrderType orderType,\n        uint leveragedPosWETH,\n        uint fromBlock\n    ) external onlyTrading returns (uint) {\n        // require(pairIndex <= type(uint16).max, \"PAIR_OVERFLOW\");\n\n        // bool isLookback = orderType == OrderType.LIMIT_OPEN || orderType == OrderType.LIMIT_CLOSE;\n        // bytes32 job = isLookback ? jobIds[1] : jobIds[0];\n\n        // Chainlink.Request memory linkRequest = buildChainlinkRequest(job, address(this), this.fulfill.selector);\n\n        // uint orderId;\n        // {\n        //     (string memory from, string memory to, , uint _orderId) = pairsStorage.pairJob(pairIndex);\n        //     orderId = _orderId;\n\n        //     linkRequest.add(\"from\", from);\n        //     linkRequest.add(\"to\", to);\n\n        //     if (isLookback) {\n        //         linkRequest.addUint(\"fromBlock\", fromBlock);\n        //     }\n        // }\n\n        // uint length;\n        // uint linkFeePerNode;\n        // {\n        //     address[] memory _nodes = nodes;\n        //     length = _nodes.length;\n        //     linkFeePerNode = linkFee(pairIndex, leveragedPosWETH) / length;\n\n        //     require(linkFeePerNode <= type(uint112).max, \"LINK_OVERFLOW\");\n\n        //     orders[orderId] = Order(uint16(pairIndex), uint112(linkFeePerNode), orderType, true, isLookback);\n        //     for (uint i; i < length; ) {\n        //         orderIdByRequest[sendChainlinkRequestTo(_nodes[i], linkRequest, linkFeePerNode)] = orderId;\n        //         unchecked {\n        //             ++i;\n        //         }\n        //     }\n        // }\n\n        // emit PriceRequested(orderId, job, pairIndex, orderType, length, linkFeePerNode, fromBlock, isLookback);\n        orderIds++;\n        orders[orderIds] = Order(\n            uint16(pairIndex),\n            uint112(0),\n            orderType,\n            true,\n            false\n        );\n\n        return orderIds;\n    }\n\n    // Fulfill on-demand price requests mock\n    function marketOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingMarketOrder memory o\n    ) external {\n        Order memory r = orders[orderId];\n        bool usedInMedian = false;\n        (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\n            r.pairIndex\n        );\n        usedInMedian = true;\n\n        CallbacksInterface.AggregatorAnswer memory a;\n\n        a.orderId = orderId;\n        a.price = price;\n        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n        CallbacksInterface c = CallbacksInterface(\n            address(storageT.callbacks())\n        );\n\n        if (r.orderType == OrderType.MARKET_OPEN) {\n            c.openTradeMarketCallback(a, o);\n        } else {\n            c.closeTradeMarketCallback(a, o);\n        }\n        emit CallbackExecuted(a, r.orderType);\n\n        emit PriceReceived(\n            \"0x\",\n            orderId,\n            msg.sender,\n            r.pairIndex,\n            0,\n            0,\n            r.linkFeePerNode,\n            r.isLookback,\n            usedInMedian\n        );\n    }\n\n    function nftOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingNftOrder memory o\n    ) external {\n        Order memory r = orders[orderId];\n        bool usedInMedian = false;\n        (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\n            r.pairIndex\n        );\n        usedInMedian = true;\n\n        CallbacksInterface.AggregatorAnswer memory a;\n\n        a.orderId = orderId;\n        a.price = price;\n        a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n        CallbacksInterface c = CallbacksInterface(\n            address(storageT.callbacks())\n        );\n\n        if (r.orderType == OrderType.LIMIT_CLOSE) {\n            c.executeNftCloseOrderCallback(a, o);\n        } else {\n            revert(\"Open Limit orders not supported yet\");\n        }\n        emit CallbackExecuted(a, r.orderType);\n\n        emit PriceReceived(\n            \"0x\",\n            orderId,\n            msg.sender,\n            r.pairIndex,\n            0,\n            0,\n            r.linkFeePerNode,\n            r.isLookback,\n            usedInMedian\n        );\n    }\n\n    // function fulfill(\n    //     bytes32 requestId,\n    //     uint priceData\n    // ) external recordChainlinkFulfillment(requestId) {\n    //     uint orderId = orderIdByRequest[requestId];\n    //     delete orderIdByRequest[requestId];\n\n    //     Order memory r = orders[orderId];\n    //     bool usedInMedian = false;\n\n    //     PairsStorageInterfaceV6.Feed memory f = pairsStorage.pairFeed(\n    //         r.pairIndex\n    //     );\n    //     uint feedPrice = fetchFeedPrice(f);\n\n    //     if (r.active) {\n    //         if (r.isLookback) {\n    //             LookbackOrderAnswer memory newAnswer;\n    //             (\n    //                 newAnswer.open,\n    //                 newAnswer.high,\n    //                 newAnswer.low,\n    //                 newAnswer.ts\n    //             ) = priceData.unpack256To64();\n\n    //             require(\n    //                 (newAnswer.high == 0 && newAnswer.low == 0) ||\n    //                     (newAnswer.high >= newAnswer.open &&\n    //                         newAnswer.low <= newAnswer.open &&\n    //                         newAnswer.low > 0),\n    //                 \"INVALID_CANDLE\"\n    //             );\n\n    //             if (\n    //                 isPriceWithinDeviation(\n    //                     newAnswer.high,\n    //                     feedPrice,\n    //                     f.maxDeviationP\n    //                 ) &&\n    //                 isPriceWithinDeviation(\n    //                     newAnswer.low,\n    //                     feedPrice,\n    //                     f.maxDeviationP\n    //                 )\n    //             ) {\n    //                 usedInMedian = true;\n\n    //                 LookbackOrderAnswer[]\n    //                     storage answers = lookbackOrderAnswers[orderId];\n    //                 answers.push(newAnswer);\n\n    //                 if (answers.length == minAnswers) {\n    //                     CallbacksInterface.AggregatorAnswer memory a;\n    //                     a.orderId = orderId;\n    //                     (a.open, a.high, a.low) = medianLookbacks(answers);\n    //                     a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n    //                     CallbacksInterface c = CallbacksInterface(\n    //                         storageT.callbacks()\n    //                     );\n\n    //                     if (r.orderType == OrderType.LIMIT_OPEN) {\n    //                         c.executeNftOpenOrderCallback(a);\n    //                     } else {\n    //                         c.executeNftCloseOrderCallback(a);\n    //                     }\n\n    //                     emit CallbackExecuted(a, r.orderType);\n\n    //                     orders[orderId].active = false;\n    //                     delete lookbackOrderAnswers[orderId];\n    //                 }\n    //             }\n    //         } else {\n    //             (uint64 price, , , ) = priceData.unpack256To64();\n\n    //             if (isPriceWithinDeviation(price, feedPrice, f.maxDeviationP)) {\n    //                 usedInMedian = true;\n\n    //                 uint[] storage answers = ordersAnswers[orderId];\n    //                 answers.push(price);\n\n    //                 if (answers.length == minAnswers) {\n    //                     CallbacksInterface.AggregatorAnswer memory a;\n\n    //                     a.orderId = orderId;\n    //                     a.price = median(answers);\n    //                     a.spreadP = pairsStorage.pairSpreadP(r.pairIndex);\n\n    //                     CallbacksInterface c = CallbacksInterface(\n    //                         storageT.callbacks()\n    //                     );\n\n    //                     if (r.orderType == OrderType.MARKET_OPEN) {\n    //                         c.openTradeMarketCallback(a);\n    //                     } else {\n    //                         c.closeTradeMarketCallback(a);\n    //                     }\n\n    //                     emit CallbackExecuted(a, r.orderType);\n\n    //                     orders[orderId].active = false;\n    //                     delete ordersAnswers[orderId];\n    //                 }\n    //             }\n    //         }\n    //     }\n\n    //     emit PriceReceived(\n    //         requestId,\n    //         orderId,\n    //         msg.sender,\n    //         r.pairIndex,\n    //         priceData,\n    //         feedPrice,\n    //         r.linkFeePerNode,\n    //         r.isLookback,\n    //         usedInMedian\n    //     );\n    // }\n\n    // Calculate LINK fee for each request\n    function linkFee(\n        uint pairIndex,\n        uint leveragedPosWETH\n    ) public view returns (uint) {\n        (, int linkPriceUsd, , , ) = linkPriceFeed.latestRoundData();\n\n        return\n            (pairsStorage.pairOracleFeeP(pairIndex) * leveragedPosWETH * 1e8) /\n            uint(linkPriceUsd) /\n            PRECISION /\n            100;\n    }\n\n    // Claim back LINK tokens (if contract will be replaced for example)\n    function claimBackLink() external onlyGov {\n        TokenInterface link = storageT.linkErc677();\n\n        link.transfer(storageT.gov(), link.balanceOf(address(this)));\n    }\n\n    // Utils\n    function fetchFeedPrice(\n        PairsStorageInterfaceV6.Feed memory f\n    ) private view returns (uint) {\n        if (f.feed1 == address(0)) {\n            return 0;\n        }\n\n        uint feedPrice;\n        (, int feedPrice1, , , ) = ChainlinkFeedInterface(f.feed1)\n            .latestRoundData();\n\n        if (\n            f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.DEFAULT\n        ) {\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / 1e8);\n        } else if (\n            f.feedCalculation == PairsStorageInterfaceV6.FeedCalculation.INVERT\n        ) {\n            feedPrice = uint((int(PRECISION) * 1e8) / feedPrice1);\n        } else {\n            (, int feedPrice2, , , ) = ChainlinkFeedInterface(f.feed2)\n                .latestRoundData();\n            feedPrice = uint((feedPrice1 * int(PRECISION)) / feedPrice2);\n        }\n\n        return feedPrice;\n    }\n\n    function isPriceWithinDeviation(\n        uint price,\n        uint feedPrice,\n        uint maxDeviationP\n    ) private pure returns (bool) {\n        return\n            price == 0 ||\n            feedPrice == 0 ||\n            ((price >= feedPrice ? price - feedPrice : feedPrice - price) *\n                PRECISION *\n                100) /\n                feedPrice <=\n            maxDeviationP;\n    }\n\n    // Median function\n    function swap(uint[] memory array, uint i, uint j) private pure {\n        (array[i], array[j]) = (array[j], array[i]);\n    }\n\n    function sort(uint[] memory array, uint begin, uint end) private pure {\n        if (begin >= end) {\n            return;\n        }\n\n        uint j = begin;\n        uint pivot = array[j];\n\n        for (uint i = begin + 1; i < end; ++i) {\n            if (array[i] < pivot) {\n                swap(array, i, ++j);\n            }\n        }\n\n        swap(array, begin, j);\n        sort(array, begin, j);\n        sort(array, j + 1, end);\n    }\n\n    function median(uint[] memory array) private pure returns (uint) {\n        sort(array, 0, array.length);\n\n        return\n            array.length % 2 == 0\n                ? (array[array.length / 2 - 1] + array[array.length / 2]) / 2\n                : array[array.length / 2];\n    }\n\n    function medianLookbacks(\n        LookbackOrderAnswer[] memory array\n    ) private pure returns (uint open, uint high, uint low) {\n        uint length = array.length;\n\n        uint[] memory opens = new uint[](length);\n        uint[] memory highs = new uint[](length);\n        uint[] memory lows = new uint[](length);\n\n        for (uint i; i < length; ) {\n            opens[i] = array[i].open;\n            highs[i] = array[i].high;\n            lows[i] = array[i].low;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        sort(opens, 0, length);\n        sort(highs, 0, length);\n        sort(lows, 0, length);\n\n        bool isLengthEven = length % 2 == 0;\n        uint halfLength = length / 2;\n\n        open = isLengthEven\n            ? (opens[halfLength - 1] + opens[halfLength]) / 2\n            : opens[halfLength];\n        high = isLengthEven\n            ? (highs[halfLength - 1] + highs[halfLength]) / 2\n            : highs[halfLength];\n        low = isLengthEven\n            ? (lows[halfLength - 1] + lows[halfLength]) / 2\n            : lows[halfLength];\n    }\n\n    // Storage v5 compatibility\n    function openFeeP(uint pairIndex) external view returns (uint) {\n        return pairsStorage.pairOpenFeeP(pairIndex);\n    }\n}\n"
    },
    "contracts/Referrals.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/UniswapRouterInterface.sol\";\nimport \"./interfaces/TokenInterface.sol\";\nimport \"./interfaces/NftInterfaceV5.sol\";\nimport \"./interfaces/VaultInterface.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_2.sol\";\nimport \"./interfaces/NftRewardsInterfaceV6.sol\";\n\ncontract Referrals {\n    // CONSTANTS\n    uint constant PRECISION = 1e10;\n    StorageInterface public immutable storageT;\n\n    // ADJUSTABLE PARAMETERS\n    uint public allyFeeP; // % (of referrer fees going to allies, eg. 10)\n    uint public startReferrerFeeP; // % (of referrer fee when 0 volume referred, eg. 75)\n    uint public openFeeP; // % (of opening fee used for referral system, eg. 33)\n    uint public targetVolumeWETH; // WETH (to reach maximum referral system fee, eg. 1e8)\n\n    // CUSTOM TYPES\n    struct AllyDetails {\n        address[] referrersReferred;\n        uint volumeReferredWETH; // 1e18\n        uint pendingRewardsToken; // 1e18\n        uint totalRewardsToken; // 1e18\n        uint totalRewardsValueWETH; // 1e18\n        bool active;\n    }\n\n    struct ReferrerDetails {\n        address ally;\n        address[] tradersReferred;\n        uint volumeReferredWETH; // 1e18\n        uint pendingRewardsToken; // 1e18\n        uint totalRewardsToken; // 1e18\n        uint totalRewardsValueWETH; // 1e18\n        bool active;\n    }\n\n    // STATE (MAPPINGS)\n    mapping(address => AllyDetails) public allyDetails;\n    mapping(address => ReferrerDetails) public referrerDetails;\n\n    mapping(address => address) public referrerByTrader;\n\n    // EVENTS\n    event UpdatedAllyFeeP(uint value);\n    event UpdatedStartReferrerFeeP(uint value);\n    event UpdatedOpenFeeP(uint value);\n    event UpdatedTargetVolumeWETH(uint value);\n\n    event AllyWhitelisted(address indexed ally);\n    event AllyUnwhitelisted(address indexed ally);\n\n    event ReferrerWhitelisted(address indexed referrer, address indexed ally);\n    event ReferrerUnwhitelisted(address indexed referrer);\n    event ReferrerRegistered(address indexed trader, address indexed referrer);\n\n    event AllyRewardDistributed(\n        address indexed ally,\n        address indexed trader,\n        uint volumeWETH,\n        uint amountToken,\n        uint amountValueWETH\n    );\n    event ReferrerRewardDistributed(\n        address indexed referrer,\n        address indexed trader,\n        uint volumeWETH,\n        uint amountToken,\n        uint amountValueWETH\n    );\n\n    event AllyRewardsClaimed(address indexed ally, uint amountToken);\n    event ReferrerRewardsClaimed(address indexed referrer, uint amountToken);\n\n    constructor(\n        StorageInterface _storageT,\n        uint _allyFeeP,\n        uint _startReferrerFeeP,\n        uint _openFeeP,\n        uint _targetVolumeWETH\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                _allyFeeP <= 50 &&\n                _startReferrerFeeP <= 100 &&\n                _openFeeP <= 50 &&\n                _targetVolumeWETH > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n\n        allyFeeP = _allyFeeP;\n        startReferrerFeeP = _startReferrerFeeP;\n        openFeeP = _openFeeP;\n        targetVolumeWETH = _targetVolumeWETH;\n    }\n\n    // MODIFIERS\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == address(storageT.trading()), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // MANAGE PARAMETERS\n    function updateAllyFeeP(uint value) external onlyGov {\n        require(value <= 50, \"VALUE_ABOVE_50\");\n\n        allyFeeP = value;\n\n        emit UpdatedAllyFeeP(value);\n    }\n\n    function updateStartReferrerFeeP(uint value) external onlyGov {\n        require(value <= 100, \"VALUE_ABOVE_100\");\n\n        startReferrerFeeP = value;\n\n        emit UpdatedStartReferrerFeeP(value);\n    }\n\n    function updateOpenFeeP(uint value) external onlyGov {\n        require(value <= 50, \"VALUE_ABOVE_50\");\n\n        openFeeP = value;\n\n        emit UpdatedOpenFeeP(value);\n    }\n\n    function updateTargetVolumeWETH(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n\n        targetVolumeWETH = value;\n\n        emit UpdatedTargetVolumeWETH(value);\n    }\n\n    // MANAGE ALLIES\n    function whitelistAlly(address ally) external onlyGov {\n        require(ally != address(0), \"ADDRESS_0\");\n\n        AllyDetails storage a = allyDetails[ally];\n        require(!a.active, \"ALLY_ALREADY_ACTIVE\");\n\n        a.active = true;\n\n        emit AllyWhitelisted(ally);\n    }\n\n    function unwhitelistAlly(address ally) external onlyGov {\n        AllyDetails storage a = allyDetails[ally];\n        require(a.active, \"ALREADY_UNACTIVE\");\n\n        a.active = false;\n\n        emit AllyUnwhitelisted(ally);\n    }\n\n    // MANAGE REFERRERS\n    function whitelistReferrer(\n        address referrer,\n        address ally\n    ) external onlyGov {\n        require(referrer != address(0), \"ADDRESS_0\");\n\n        ReferrerDetails storage r = referrerDetails[referrer];\n        require(!r.active, \"REFERRER_ALREADY_ACTIVE\");\n\n        r.active = true;\n\n        if (ally != address(0)) {\n            AllyDetails storage a = allyDetails[ally];\n            require(a.active, \"ALLY_NOT_ACTIVE\");\n\n            r.ally = ally;\n            a.referrersReferred.push(referrer);\n        }\n\n        emit ReferrerWhitelisted(referrer, ally);\n    }\n\n    function unwhitelistReferrer(address referrer) external onlyGov {\n        ReferrerDetails storage r = referrerDetails[referrer];\n        require(r.active, \"ALREADY_UNACTIVE\");\n\n        r.active = false;\n\n        emit ReferrerUnwhitelisted(referrer);\n    }\n\n    function registerPotentialReferrer(\n        address trader,\n        address referrer\n    ) external onlyTrading {\n        ReferrerDetails storage r = referrerDetails[referrer];\n\n        if (\n            referrerByTrader[trader] != address(0) ||\n            referrer == address(0) ||\n            !r.active\n        ) {\n            return;\n        }\n\n        referrerByTrader[trader] = referrer;\n        r.tradersReferred.push(trader);\n\n        emit ReferrerRegistered(trader, referrer);\n    }\n\n    // REWARDS DISTRIBUTION\n    function distributePotentialReward(\n        address trader,\n        uint volumeWETH,\n        uint pairOpenFeeP,\n        uint tokenPriceWETH\n    ) external onlyCallbacks returns (uint) {\n        address referrer = referrerByTrader[trader];\n        ReferrerDetails storage r = referrerDetails[referrer];\n\n        if (!r.active) {\n            return 0;\n        }\n\n        uint referrerRewardValueWETH = (volumeWETH *\n            getReferrerFeeP(pairOpenFeeP, r.volumeReferredWETH)) /\n            PRECISION /\n            100;\n\n        uint referrerRewardToken = (referrerRewardValueWETH * PRECISION) /\n            tokenPriceWETH;\n\n        storageT.handleTokens(address(this), referrerRewardToken, true);\n\n        AllyDetails storage a = allyDetails[r.ally];\n\n        uint allyRewardValueWETH;\n        uint allyRewardToken;\n\n        if (a.active) {\n            allyRewardValueWETH = (referrerRewardValueWETH * allyFeeP) / 100;\n            allyRewardToken = (referrerRewardToken * allyFeeP) / 100;\n\n            a.volumeReferredWETH += volumeWETH;\n            a.pendingRewardsToken += allyRewardToken;\n            a.totalRewardsToken += allyRewardToken;\n            a.totalRewardsValueWETH += allyRewardValueWETH;\n\n            referrerRewardValueWETH -= allyRewardValueWETH;\n            referrerRewardToken -= allyRewardToken;\n\n            emit AllyRewardDistributed(\n                r.ally,\n                trader,\n                volumeWETH,\n                allyRewardToken,\n                allyRewardValueWETH\n            );\n        }\n\n        r.volumeReferredWETH += volumeWETH;\n        r.pendingRewardsToken += referrerRewardToken;\n        r.totalRewardsToken += referrerRewardToken;\n        r.totalRewardsValueWETH += referrerRewardValueWETH;\n\n        emit ReferrerRewardDistributed(\n            referrer,\n            trader,\n            volumeWETH,\n            referrerRewardToken,\n            referrerRewardValueWETH\n        );\n\n        return referrerRewardValueWETH + allyRewardValueWETH;\n    }\n\n    // REWARDS CLAIMING\n    function claimAllyRewards() external {\n        AllyDetails storage a = allyDetails[msg.sender];\n        uint rewardsToken = a.pendingRewardsToken;\n\n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\n\n        a.pendingRewardsToken = 0;\n        storageT.token().transfer(msg.sender, rewardsToken);\n\n        emit AllyRewardsClaimed(msg.sender, rewardsToken);\n    }\n\n    function claimReferrerRewards() external {\n        ReferrerDetails storage r = referrerDetails[msg.sender];\n        uint rewardsToken = r.pendingRewardsToken;\n\n        require(rewardsToken > 0, \"NO_PENDING_REWARDS\");\n\n        r.pendingRewardsToken = 0;\n        storageT.token().transfer(msg.sender, rewardsToken);\n\n        emit ReferrerRewardsClaimed(msg.sender, rewardsToken);\n    }\n\n    // VIEW FUNCTIONS\n    function getReferrerFeeP(\n        uint pairOpenFeeP,\n        uint volumeReferredWETH\n    ) public view returns (uint) {\n        uint maxReferrerFeeP = (pairOpenFeeP * 2 * openFeeP) / 100;\n        uint minFeeP = (maxReferrerFeeP * startReferrerFeeP) / 100;\n\n        uint feeP = minFeeP +\n            ((maxReferrerFeeP - minFeeP) * volumeReferredWETH) /\n            1e18 /\n            targetVolumeWETH;\n\n        return feeP > maxReferrerFeeP ? maxReferrerFeeP : feeP;\n    }\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint) {\n        return\n            getPercentOfOpenFeeP_calc(\n                referrerDetails[referrerByTrader[trader]].volumeReferredWETH\n            );\n    }\n\n    function getPercentOfOpenFeeP_calc(\n        uint volumeReferredWETH\n    ) public view returns (uint resultP) {\n        resultP =\n            (openFeeP *\n                (startReferrerFeeP *\n                    PRECISION +\n                    (volumeReferredWETH *\n                        PRECISION *\n                        (100 - startReferrerFeeP)) /\n                    1e18 /\n                    targetVolumeWETH)) /\n            100;\n\n        resultP = resultP > openFeeP * PRECISION\n            ? openFeeP * PRECISION\n            : resultP;\n    }\n\n    function getTraderReferrer(address trader) external view returns (address) {\n        address referrer = referrerByTrader[trader];\n\n        return referrerDetails[referrer].active ? referrer : address(0);\n    }\n\n    function getReferrersReferred(\n        address ally\n    ) external view returns (address[] memory) {\n        return allyDetails[ally].referrersReferred;\n    }\n\n    function getTradersReferred(\n        address referred\n    ) external view returns (address[] memory) {\n        return referrerDetails[referred].tradersReferred;\n    }\n}\n"
    },
    "contracts/Rewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_3.sol\";\nimport \"./interfaces/IStateCopyUtils.sol\";\n\ncontract Rewards is Initializable {\n    // Contracts (constant)\n    StorageInterface public storageT;\n\n    // Params (constant)\n    uint constant ROUND_LENGTH = 50;\n    uint constant MIN_TRIGGER_TIMEOUT = 1;\n    uint constant MIN_SAME_BLOCK_LIMIT = 5;\n    uint constant MAX_SAME_BLOCK_LIMIT = 50;\n    uint constant PRECISION = 1e10; // 10 decimals\n\n    // Params (adjustable)\n    uint public triggerTimeout; // blocks\n    uint public sameBlockLimit; // bots\n\n    // Custom data types\n    struct TriggeredLimit {\n        address first;\n        address[] sameBlock;\n        uint block;\n        uint240 linkFee;\n        uint16 sameBlockLimit;\n    }\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterface.LimitOrder order;\n    }\n    struct RoundDetails {\n        uint240 tokens;\n        uint16 totalEntries;\n    }\n\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    // State\n    uint public currentOrder; // current order in round\n    uint public currentRound; // current round (1 round = 50 orders)\n\n    mapping(uint => RoundDetails) public roundTokens; // total token rewards and entries for a round\n    mapping(address => mapping(uint => uint)) public roundOrdersToClaim; // orders to claim from a round (out of 50)\n\n    mapping(address => uint) public tokensToClaim; // rewards other than pool (first & same block)\n\n    mapping(address => mapping(uint => mapping(uint => mapping(StorageInterface.LimitOrder => TriggeredLimit))))\n        public triggeredLimits; // limits being triggered\n\n    mapping(address => mapping(uint => mapping(uint => OpenLimitOrderType)))\n        public openLimitOrderTypes;\n    bool public stateCopied;\n\n    // Tracker to prevent multiple triggers from same address or same nft\n    mapping(bytes32 => bool) public botInUse;\n\n    // Statistics\n    mapping(address => uint) public tokensClaimed; // 1e18\n    uint public tokensClaimedTotal; // 1e18\n\n    // Events\n    event NumberUpdated(string name, uint value);\n\n    event TriggeredFirst(TriggeredLimitId id, address bot, uint linkFee);\n    event TriggeredSameBlock(\n        TriggeredLimitId id,\n        address bot,\n        uint linkContribution\n    );\n    event TriggerUnregistered(TriggeredLimitId id);\n    event TriggerRewarded(\n        TriggeredLimitId id,\n        address first,\n        uint sameBlockCount,\n        uint sameBlockLimit,\n        uint reward\n    );\n\n    event PoolTokensClaimed(\n        address bot,\n        uint fromRound,\n        uint toRound,\n        uint tokens\n    );\n    event TokensClaimed(address bot, uint tokens);\n\n    function initialize(\n        StorageInterface _storageT,\n        uint _triggerTimeout,\n        uint _sameBlockLimit\n    ) external initializer {\n        require(\n            address(_storageT) != address(0) &&\n                _triggerTimeout >= MIN_TRIGGER_TIMEOUT &&\n                _sameBlockLimit >= MIN_SAME_BLOCK_LIMIT &&\n                _sameBlockLimit <= MAX_SAME_BLOCK_LIMIT,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n\n        triggerTimeout = _triggerTimeout;\n        sameBlockLimit = _sameBlockLimit;\n\n        currentOrder = 1;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n        _;\n    }\n    modifier onlyTrading() {\n        require(msg.sender == address(storageT.trading()), \"TRADING_ONLY\");\n        _;\n    }\n    modifier onlyCallbacks() {\n        require(msg.sender == address(storageT.callbacks()), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    function copyOldLimitTypes(uint start, uint end) external onlyGov {\n        require(!stateCopied, \"COPY_DONE\");\n        require(start <= end, \"START_AFTER_END\");\n\n        NftRewardsInterfaceV6_3_1 old;\n\n        if (block.chainid == 137) {\n            // Polygon Mainnet\n            old = NftRewardsInterfaceV6_3_1(\n                0x3470756E5B490a974Bc25FeEeEb24c11102f5268\n            );\n        } else if (block.chainid == 80001) {\n            // Mumbai\n            old = NftRewardsInterfaceV6_3_1(\n                0x3982E3de77DAd60373C0c2c539fCb93Bd288D2f5\n            );\n        } else if (block.chainid == 42161) {\n            // Arbitrum\n            old = NftRewardsInterfaceV6_3_1(\n                0xc2d107e870927E3fb1127E6c1a33De5C863505b8\n            );\n        } else {\n            revert(\"UNKNOWN_CHAIN\");\n        }\n\n        StorageInterface.OpenLimitOrder[]\n            memory openLimitOrders = IStateCopyUtils(address(storageT))\n                .getOpenLimitOrders();\n        require(start < openLimitOrders.length, \"START_TOO_BIG\");\n\n        if (end >= openLimitOrders.length) {\n            end = openLimitOrders.length - 1;\n        }\n\n        for (uint i = start; i <= end; ) {\n            StorageInterface.OpenLimitOrder memory o = openLimitOrders[i];\n            openLimitOrderTypes[o.trader][o.pairIndex][\n                o.index\n            ] = OpenLimitOrderType(\n                uint(old.openLimitOrderTypes(o.trader, o.pairIndex, o.index))\n            );\n            ++i;\n        }\n    }\n\n    function setStateCopyAsDone() external onlyGov {\n        stateCopied = true;\n    }\n\n    // Manage params\n    function updateTriggerTimeout(uint _triggerTimeout) external onlyGov {\n        require(_triggerTimeout >= MIN_TRIGGER_TIMEOUT, \"BELOW_MIN\");\n        triggerTimeout = _triggerTimeout;\n        emit NumberUpdated(\"triggerTimeout\", _triggerTimeout);\n    }\n\n    function updateSameBlockLimit(uint _sameBlockLimit) external onlyGov {\n        require(_sameBlockLimit >= MIN_SAME_BLOCK_LIMIT, \"BELOW_MIN\");\n        require(_sameBlockLimit <= MAX_SAME_BLOCK_LIMIT, \"ABOVE_MAX\");\n\n        sameBlockLimit = _sameBlockLimit;\n\n        emit NumberUpdated(\"sameBlockLimit\", _sameBlockLimit);\n    }\n\n    // Triggers\n    function storeFirstToTrigger(\n        TriggeredLimitId calldata _id,\n        address _bot,\n        uint _linkFee\n    ) external onlyTrading {\n        TriggeredLimit storage t = triggeredLimits[_id.trader][_id.pairIndex][\n            _id.index\n        ][_id.order];\n\n        t.first = _bot;\n        t.linkFee = uint240(_linkFee);\n        t.sameBlockLimit = uint16(sameBlockLimit);\n\n        delete t.sameBlock;\n        t.block = block.number;\n        t.sameBlock.push(_bot);\n\n        emit TriggeredFirst(_id, _bot, _linkFee);\n    }\n\n    function storeTriggerSameBlock(\n        TriggeredLimitId calldata _id,\n        address _bot\n    ) external onlyTrading {\n        TriggeredLimit storage t = triggeredLimits[_id.trader][_id.pairIndex][\n            _id.index\n        ][_id.order];\n\n        require(t.block == block.number, \"TOO_LATE\");\n        require(t.sameBlock.length < t.sameBlockLimit, \"SAME_BLOCK_LIMIT\");\n\n        uint linkContribution = t.linkFee / t.sameBlockLimit;\n\n        // transfer 1/N th of the trigger link cost in exchange for an equal share of reward\n        storageT.linkErc677().transferFrom(_bot, t.first, linkContribution);\n\n        t.sameBlock.push(_bot);\n\n        emit TriggeredSameBlock(_id, _bot, linkContribution);\n    }\n\n    function unregisterTrigger(\n        TriggeredLimitId calldata _id\n    ) external onlyCallbacks {\n        delete triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order];\n        emit TriggerUnregistered(_id);\n    }\n\n    // Distribute rewards\n    function distributeNftReward(\n        TriggeredLimitId calldata _id,\n        uint _reward,\n        uint _tokenPriceWETH\n    ) external onlyCallbacks {\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][\n            _id.index\n        ][_id.order];\n\n        require(t.block > 0, \"NOT_TRIGGERED\");\n\n        uint nextRound = currentRound + 1;\n        uint linkEquivalentRewards = linkToTokenRewards(\n            t.linkFee,\n            _tokenPriceWETH\n        ); // amount of link spent in gns\n\n        // if we've somehow ended up with an odd rate revert to using full rewards\n        if (linkEquivalentRewards > _reward) linkEquivalentRewards = _reward;\n\n        // rewards per trigger\n        uint sameBlockReward = linkEquivalentRewards / t.sameBlockLimit;\n\n        for (uint i = 0; i < t.sameBlock.length; i++) {\n            address bot = t.sameBlock[i];\n\n            tokensToClaim[bot] += sameBlockReward; // link refund\n            roundOrdersToClaim[bot][nextRound]++; // next round pool entry\n        }\n\n        uint missingSameBlocks = t.sameBlockLimit - t.sameBlock.length;\n        if (missingSameBlocks > 0) {\n            // reward first trigger equivalent amount of missed link refunds in gns, but no extra entries into the pool\n            tokensToClaim[t.first] += sameBlockReward * missingSameBlocks;\n        }\n\n        // REWARD POOLS ARE BLIND\n        // when you trigger orders you earn entries for next round\n        // next round tokens can't be predicted\n        // rewards are added to current round and claimable by previous round (currentRound - 1) entrants\n\n        roundTokens[currentRound].tokens += uint240(\n            _reward - linkEquivalentRewards\n        );\n        roundTokens[nextRound].totalEntries += uint16(t.sameBlock.length);\n\n        storageT.handleTokens(\n            address(this),\n            currentRound > 0 ? _reward : linkEquivalentRewards,\n            true\n        );\n\n        if (currentOrder == ROUND_LENGTH) {\n            currentOrder = 1;\n            currentRound++;\n        } else {\n            currentOrder++;\n        }\n\n        emit TriggerRewarded(\n            _id,\n            t.first,\n            t.sameBlock.length,\n            t.sameBlockLimit,\n            _reward\n        );\n    }\n\n    // Claim rewards\n    function claimPoolTokens(uint _fromRound, uint _toRound) external {\n        require(_toRound >= _fromRound, \"TO_BEFORE_FROM\");\n        require(_toRound < currentRound, \"TOO_EARLY\");\n\n        uint tokens;\n\n        // due to blind rewards round 0 will have 0 entries; r[0] rewards are effectively burned/never minted\n        for (uint i = _fromRound; i <= _toRound; i++) {\n            uint roundEntries = roundOrdersToClaim[msg.sender][i];\n\n            if (roundEntries > 0) {\n                RoundDetails memory roundDetails = roundTokens[i];\n                tokens +=\n                    (roundEntries * roundDetails.tokens) /\n                    roundDetails.totalEntries;\n                roundOrdersToClaim[msg.sender][i] = 0;\n            }\n        }\n\n        require(tokens > 0, \"NOTHING_TO_CLAIM\");\n        storageT.token().transfer(msg.sender, tokens);\n\n        tokensClaimed[msg.sender] += tokens;\n        tokensClaimedTotal += tokens;\n\n        emit PoolTokensClaimed(msg.sender, _fromRound, _toRound, tokens);\n    }\n\n    function claimTokens() external {\n        uint tokens = tokensToClaim[msg.sender];\n        require(tokens > 0, \"NOTHING_TO_CLAIM\");\n\n        tokensToClaim[msg.sender] = 0;\n        storageT.token().transfer(msg.sender, tokens);\n\n        tokensClaimed[msg.sender] += tokens;\n        tokensClaimedTotal += tokens;\n\n        emit TokensClaimed(msg.sender, tokens);\n    }\n\n    // Manage open limit order types\n    function setOpenLimitOrderType(\n        address _trader,\n        uint _pairIndex,\n        uint _index,\n        OpenLimitOrderType _type\n    ) external onlyTrading {\n        openLimitOrderTypes[_trader][_pairIndex][_index] = _type;\n    }\n\n    // Set bot address and NFT in use so it cannot be used in the same order twice\n    function setNftBotInUse(\n        bytes32 nftHash,\n        bytes32 botHash\n    ) external onlyTrading {\n        botInUse[nftHash] = true;\n        botInUse[botHash] = true;\n    }\n\n    // Getters\n    function triggered(\n        TriggeredLimitId calldata _id\n    ) external view returns (bool) {\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][\n            _id.index\n        ][_id.order];\n        return t.block > 0;\n    }\n\n    function timedOut(\n        TriggeredLimitId calldata _id\n    ) external view returns (bool) {\n        TriggeredLimit memory t = triggeredLimits[_id.trader][_id.pairIndex][\n            _id.index\n        ][_id.order];\n        return t.block > 0 && block.number - t.block >= triggerTimeout;\n    }\n\n    function sameBlockTriggers(\n        TriggeredLimitId calldata _id\n    ) external view returns (address[] memory) {\n        return\n            triggeredLimits[_id.trader][_id.pairIndex][_id.index][_id.order]\n                .sameBlock;\n    }\n\n    function getNftBotHashes(\n        uint triggerBlock,\n        address bot,\n        uint nftId,\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external pure returns (bytes32, bytes32) {\n        return (\n            keccak256(\n                abi.encodePacked(\n                    \"N\",\n                    triggerBlock,\n                    nftId,\n                    trader,\n                    pairIndex,\n                    index\n                )\n            ),\n            keccak256(\n                abi.encodePacked(\n                    \"B\",\n                    triggerBlock,\n                    bot,\n                    trader,\n                    pairIndex,\n                    index\n                )\n            )\n        );\n    }\n\n    function nftBotInUse(\n        bytes32 nftHash,\n        bytes32 botHash\n    ) external view returns (bool) {\n        return botInUse[nftHash] || botInUse[botHash];\n    }\n\n    function linkToTokenRewards(\n        uint linkFee,\n        uint tokenPrice\n    ) public view returns (uint) {\n        (, int linkPriceUsd, , , ) = AggregatorInterfaceV1_3(\n            address(storageT.priceAggregator())\n        ).linkPriceFeed().latestRoundData();\n        return (linkFee * uint(linkPriceUsd) * PRECISION) / tokenPrice / 1e8;\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/TokenInterface.sol\";\nimport \"./interfaces/NftInterfaceV5.sol\";\n\ncontract Staking {\n    // Contracts & Addresses\n    address public govFund;\n\n    TokenInterface public immutable token; // GNS\n    TokenInterface public immutable WETH;\n\n    NftInterfaceV5[5] public nfts;\n\n    // Pool state\n    uint public accWETHPerToken;\n    uint public tokenBalance;\n\n    // Pool parameters\n    uint[5] public boostsP;\n    uint public maxNftsStaked;\n\n    // Pool stats\n    uint public totalRewardsDistributedWETH; // 1e18\n\n    // Mappings\n    mapping(address => User) public users;\n    mapping(address => mapping(uint => StakedNft)) public userNfts;\n\n    // Structs\n    struct StakedNft {\n        uint nftId;\n        uint nftType;\n    }\n    struct User {\n        uint stakedTokens; // 1e18\n        uint debtWETH; // 1e18\n        uint stakedNftsCount;\n        uint totalBoostTokens; // 1e18\n        uint harvestedRewardsWETH; // 1e18\n    }\n\n    // Events\n    event GovFundUpdated(address value);\n    event BoostsUpdated(uint[5] boosts);\n    event MaxNftsStakedUpdated(uint value);\n\n    event WETHDistributed(uint amount);\n\n    event WETHHarvested(address indexed user, uint amount);\n\n    event TokensStaked(address indexed user, uint amount);\n    event TokensUnstaked(address indexed user, uint amount);\n\n    event NftStaked(address indexed user, uint indexed nftType, uint nftId);\n    event NftUnstaked(address indexed user, uint indexed nftType, uint nftId);\n\n    constructor(\n        address _govFund,\n        TokenInterface _token,\n        TokenInterface _WETH,\n        NftInterfaceV5[5] memory _nfts,\n        uint[5] memory _boostsP,\n        uint _maxNftsStaked\n    ) {\n        require(\n            _govFund != address(0) &&\n                address(_token) != address(0) &&\n                address(_WETH) != address(0) &&\n                address(_nfts[4]) != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        checkBoostsP(_boostsP);\n\n        govFund = _govFund;\n        token = _token;\n        WETH = _WETH;\n        nfts = _nfts;\n\n        boostsP = _boostsP;\n        maxNftsStaked = _maxNftsStaked;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == govFund, \"GOV_ONLY\");\n        _;\n    }\n    modifier notContract() {\n        require(tx.origin == msg.sender, \"CONTRACT\");\n        _;\n    }\n\n    // Manage addresses\n    function setGovFund(address value) external onlyGov {\n        require(value != address(0), \"ADDRESS_0\");\n\n        govFund = value;\n\n        emit GovFundUpdated(value);\n    }\n\n    // Manage parameters\n    function checkBoostsP(uint[5] memory value) public pure {\n        require(\n            value[0] < value[1] &&\n                value[1] < value[2] &&\n                value[2] < value[3] &&\n                value[3] < value[4],\n            \"WRONG_VALUES\"\n        );\n    }\n\n    function setBoostsP(uint[5] memory value) external onlyGov {\n        checkBoostsP(value);\n\n        boostsP = value;\n\n        emit BoostsUpdated(value);\n    }\n\n    function setMaxNftsStaked(uint value) external onlyGov {\n        maxNftsStaked = value;\n\n        emit MaxNftsStakedUpdated(value);\n    }\n\n    // Distribute rewards\n    function distributeRewardWETH(uint amount) external {\n        WETH.transferFrom(msg.sender, address(this), amount);\n\n        if (tokenBalance > 0) {\n            accWETHPerToken += (amount * 1e18) / tokenBalance;\n            totalRewardsDistributedWETH += amount;\n        }\n\n        emit WETHDistributed(amount);\n    }\n\n    // Compute user boosts\n    function setBoosts() private {\n        User storage u = users[msg.sender];\n\n        u.totalBoostTokens = 0;\n\n        for (uint i = 0; i < u.stakedNftsCount; i++) {\n            u.totalBoostTokens +=\n                (u.stakedTokens *\n                    boostsP[userNfts[msg.sender][i].nftType - 1]) /\n                100;\n        }\n\n        u.debtWETH =\n            ((u.stakedTokens + u.totalBoostTokens) * accWETHPerToken) /\n            1e18;\n    }\n\n    // Rewards to be harvested\n    function pendingRewardWETH() public view returns (uint) {\n        User storage u = users[msg.sender];\n\n        return\n            ((u.stakedTokens + u.totalBoostTokens) * accWETHPerToken) /\n            1e18 -\n            u.debtWETH;\n    }\n\n    // Harvest rewards\n    function harvest() public {\n        uint pendingWETH = pendingRewardWETH();\n\n        User storage u = users[msg.sender];\n        u.debtWETH =\n            ((u.stakedTokens + u.totalBoostTokens) * accWETHPerToken) /\n            1e18;\n        u.harvestedRewardsWETH += pendingWETH;\n\n        WETH.transfer(msg.sender, pendingWETH);\n\n        emit WETHHarvested(msg.sender, pendingWETH);\n    }\n\n    // Stake tokens\n    function stakeTokens(uint amount) external {\n        User storage u = users[msg.sender];\n\n        token.transferFrom(msg.sender, address(this), amount);\n\n        harvest();\n\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\n\n        u.stakedTokens += amount;\n        setBoosts();\n\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\n\n        emit TokensStaked(msg.sender, amount);\n    }\n\n    // Unstake tokens\n    function unstakeTokens(uint amount) external {\n        User storage u = users[msg.sender];\n\n        harvest();\n\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\n\n        u.stakedTokens -= amount;\n        setBoosts();\n\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\n\n        token.transfer(msg.sender, amount);\n\n        emit TokensUnstaked(msg.sender, amount);\n    }\n\n    // Stake NFT\n    // NFT types: 1, 2, 3, 4, 5\n    function stakeNft(uint nftType, uint nftId) external notContract {\n        User storage u = users[msg.sender];\n\n        require(u.stakedNftsCount < maxNftsStaked, \"MAX_NFTS_ALREADY_STAKED\");\n\n        nfts[nftType - 1].transferFrom(msg.sender, address(this), nftId);\n\n        harvest();\n\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\n\n        StakedNft storage stakedNft = userNfts[msg.sender][u.stakedNftsCount++];\n        stakedNft.nftType = nftType;\n        stakedNft.nftId = nftId;\n\n        setBoosts();\n\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\n\n        emit NftStaked(msg.sender, nftType, nftId);\n    }\n\n    // Unstake NFT\n    function unstakeNft(uint nftIndex) external {\n        User storage u = users[msg.sender];\n        StakedNft memory stakedNft = userNfts[msg.sender][nftIndex];\n\n        harvest();\n\n        tokenBalance -= (u.stakedTokens + u.totalBoostTokens);\n\n        userNfts[msg.sender][nftIndex] = userNfts[msg.sender][\n            u.stakedNftsCount - 1\n        ];\n        delete userNfts[msg.sender][(u.stakedNftsCount--) - 1];\n\n        setBoosts();\n\n        tokenBalance += (u.stakedTokens + u.totalBoostTokens);\n\n        nfts[stakedNft.nftType - 1].transferFrom(\n            address(this),\n            msg.sender,\n            stakedNft.nftId\n        );\n\n        emit NftUnstaked(msg.sender, stakedNft.nftType, stakedNft.nftId);\n    }\n}\n"
    },
    "contracts/Storage.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/AggregatorInterfaceV1.sol\";\nimport \"./interfaces/PoolInterfaceV5.sol\";\nimport \"./interfaces/NftInterfaceV5.sol\";\nimport \"./interfaces/PausableInterfaceV5.sol\";\n\ncontract Storage is StorageInterface {\n    // Constants\n    uint public constant PRECISION = 1e10;\n    bytes32 public constant MINTER_ROLE =\n        0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\n    TokenInterface public WETH;\n    IOracle public oracle;\n    TokenInterface public constant linkErc677 =\n        TokenInterface(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\n\n    // Contracts (updatable)\n    AggregatorInterfaceV1 public priceAggregator;\n    PoolInterfaceV5 public pool;\n    PausableInterfaceV5 public trading;\n    PausableInterfaceV5 public callbacks;\n    TokenInterface public token =\n        TokenInterface(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\n    NftInterfaceV5[5] public nfts = [\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\n    ];\n    address public vault;\n    address public tokenWETHRouter;\n\n    // Trading variables\n    uint public maxTradesPerPair = 3;\n    uint public maxTradesPerBlock = 5;\n    uint public maxPendingMarketOrders = 5;\n    uint public maxGainP = 900; // %\n    uint public maxSlP = 80; // %\n    uint public defaultLeverageUnlocked = 50; // x\n    uint public nftSuccessTimelock = 50; // 50 blocks\n    uint[5] public spreadReductionsP = [15, 20, 25, 30, 35]; // %\n\n    // Gov & dev addresses (updatable)\n    address public gov; //TODO need to change to our\n    address public dev; //TODO need to change to our\n\n    // Gov & dev fees\n    uint public devFeesToken; // 1e18\n    uint public devFeesWETH; // 1e18\n    uint public govFeesToken; // 1e18\n    uint public govFeesWETH; // 1e18\n\n    // Stats\n    uint public tokensBurned; // 1e18\n    uint public tokensMinted; // 1e18\n    uint public nftRewards; // 1e18\n\n    // Enums\n    // enum LimitOrder {\n    //     TP,\n    //     SL,\n    //     LIQ,\n    //     OPEN\n    // }\n\n    // Structs\n    struct Trader {\n        uint leverageUnlocked;\n        address referral;\n        uint referralRewardsTotal; // 1e18\n    }\n    // struct Trade {\n    //     address trader;\n    //     uint pairIndex;\n    //     uint index;\n    //     uint initialPosToken; // 1e18\n    //     uint positionSizeWETH; // 1e18\n    //     uint openPrice; // PRECISION\n    //     bool buy;\n    //     uint leverage;\n    //     uint tp; // PRECISION\n    //     uint sl; // PRECISION\n    // }\n    // struct TradeInfo {\n    //     uint tokenId;\n    //     uint tokenPriceWETH; // PRECISION\n    //     uint openInterestWETH; // 1e18\n    //     uint tpLastUpdated;\n    //     uint slLastUpdated;\n    //     bool beingMarketClosed;\n    // }\n    // struct OpenLimitOrder {\n    //     address trader;\n    //     uint pairIndex;\n    //     uint index;\n    //     uint positionSize; // 1e18 (WETH or GFARM2)\n    //     uint spreadReductionP;\n    //     bool buy;\n    //     uint leverage;\n    //     uint tp; // PRECISION (%)\n    //     uint sl; // PRECISION (%)\n    //     uint minPrice; // PRECISION\n    //     uint maxPrice; // PRECISION\n    //     uint block;\n    //     uint tokenId; // index in supportedTokens\n    // }\n    // struct PendingMarketOrder {\n    //     Trade trade;\n    //     uint block;\n    //     uint wantedPrice; // PRECISION\n    //     uint slippageP; // PRECISION (%)\n    //     uint spreadReductionP;\n    //     uint tokenId; // index in supportedTokens\n    // }\n    // struct PendingNftOrder {\n    //     address nftHolder;\n    //     uint nftId;\n    //     address trader;\n    //     uint pairIndex;\n    //     uint index;\n    //     LimitOrder orderType;\n    // }\n\n    // Supported tokens to open trades with\n    address[] public supportedTokens;\n\n    // User info mapping\n    mapping(address => Trader) public traders;\n\n    // Trades mappings\n    mapping(address => mapping(uint => mapping(uint => Trade)))\n        public openTrades;\n    mapping(address => mapping(uint => mapping(uint => TradeInfo)))\n        public openTradesInfo;\n    mapping(address => mapping(uint => uint)) public openTradesCount;\n\n    // Limit orders mappings\n    mapping(address => mapping(uint => mapping(uint => uint)))\n        public openLimitOrderIds;\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\n    OpenLimitOrder[] public openLimitOrders;\n\n    // Pending orders mappings\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\n    mapping(address => uint[]) public pendingOrderIds;\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\n\n    // List of open trades & limit orders\n    mapping(uint => address[]) public pairTraders;\n    mapping(address => mapping(uint => uint)) public pairTradersId;\n\n    // Current and max open interests for each pair\n    mapping(uint => uint[3]) public openInterestWETH; // 1e18 [long,short,max]\n\n    // Restrictions & Timelocks\n    mapping(uint => uint) public tradesPerBlock;\n    mapping(uint => uint) public nftLastSuccess;\n\n    // List of allowed contracts => can update storage + mint/burn tokens\n    mapping(address => bool) public isTradingContract;\n\n    // Events\n    event SupportedTokenAdded(address a);\n    event TradingContractAdded(address a);\n    event TradingContractRemoved(address a);\n    event AddressUpdated(string name, address a);\n    event NftsUpdated(NftInterfaceV5[5] nfts);\n    event NumberUpdated(string name, uint value);\n    event NumberUpdatedPair(string name, uint pairIndex, uint value);\n    event SpreadReductionsUpdated(uint[5]);\n\n    constructor(address _WETH, address _gov, address _dev) {\n        WETH = TokenInterface(_WETH);\n        gov = _gov;\n        dev = _dev;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        require(msg.sender == gov);\n        _;\n    }\n    modifier onlyTrading() {\n        require(\n            isTradingContract[msg.sender],\n            // &&\n            //     token.hasRole(MINTER_ROLE, msg.sender)\n            \"here here\"\n        );\n        _;\n    }\n\n    // Manage addresses\n    function setGov(address _gov) external onlyGov {\n        require(_gov != address(0));\n        gov = _gov;\n        emit AddressUpdated(\"gov\", _gov);\n    }\n\n    function setDev(address _dev) external onlyGov {\n        require(_dev != address(0));\n        dev = _dev;\n        emit AddressUpdated(\"dev\", _dev);\n    }\n\n    function updateToken(TokenInterface _newToken) external onlyGov {\n        require(trading.isPaused() && callbacks.isPaused(), \"NOT_PAUSED\");\n        require(address(_newToken) != address(0));\n        token = _newToken;\n        emit AddressUpdated(\"token\", address(_newToken));\n    }\n\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov {\n        require(address(_nfts[0]) != address(0));\n        nfts = _nfts;\n        emit NftsUpdated(_nfts);\n    }\n\n    // Trading + callbacks contracts\n    function addTradingContract(address _trading) external onlyGov {\n        // require(token.hasRole(MINTER_ROLE, _trading), \"NOT_MINTER\"); /// TODO : need to have a gtoken type token of our own\n        require(_trading != address(0));\n        isTradingContract[_trading] = true;\n        emit TradingContractAdded(_trading);\n    }\n\n    function removeTradingContract(address _trading) external onlyGov {\n        require(_trading != address(0));\n        isTradingContract[_trading] = false;\n        emit TradingContractRemoved(_trading);\n    }\n\n    function addSupportedToken(address _token) external onlyGov {\n        require(_token != address(0));\n        supportedTokens.push(_token);\n        emit SupportedTokenAdded(_token);\n    }\n\n    function setPriceAggregator(address _aggregator) external onlyGov {\n        require(_aggregator != address(0));\n        priceAggregator = AggregatorInterfaceV1(_aggregator);\n        emit AddressUpdated(\"priceAggregator\", _aggregator);\n    }\n\n    function setPool(address _pool) external onlyGov {\n        require(_pool != address(0));\n        pool = PoolInterfaceV5(_pool);\n        emit AddressUpdated(\"pool\", _pool);\n    }\n\n    function setVault(address _vault) external onlyGov {\n        require(_vault != address(0));\n        vault = _vault;\n        emit AddressUpdated(\"vault\", _vault);\n    }\n\n    function setTrading(address _trading) external onlyGov {\n        require(_trading != address(0));\n        trading = PausableInterfaceV5(_trading);\n        emit AddressUpdated(\"trading\", _trading);\n    }\n\n    function setCallbacks(address _callbacks) external onlyGov {\n        require(_callbacks != address(0));\n        callbacks = PausableInterfaceV5(_callbacks);\n        emit AddressUpdated(\"callbacks\", _callbacks);\n    }\n\n    function setTokenWETHRouter(address _tokenWETHRouter) external onlyGov {\n        require(_tokenWETHRouter != address(0));\n        tokenWETHRouter = _tokenWETHRouter;\n        emit AddressUpdated(\"tokenWETHRouter\", _tokenWETHRouter);\n    }\n\n    // Manage trading variables\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov {\n        require(_maxTradesPerBlock > 0);\n        maxTradesPerBlock = _maxTradesPerBlock;\n        emit NumberUpdated(\"maxTradesPerBlock\", _maxTradesPerBlock);\n    }\n\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov {\n        require(_maxTradesPerPair > 0);\n        maxTradesPerPair = _maxTradesPerPair;\n        emit NumberUpdated(\"maxTradesPerPair\", _maxTradesPerPair);\n    }\n\n    function setMaxPendingMarketOrders(\n        uint _maxPendingMarketOrders\n    ) external onlyGov {\n        require(_maxPendingMarketOrders > 0);\n        maxPendingMarketOrders = _maxPendingMarketOrders;\n        emit NumberUpdated(\"maxPendingMarketOrders\", _maxPendingMarketOrders);\n    }\n\n    function setMaxGainP(uint _max) external onlyGov {\n        require(_max >= 300);\n        maxGainP = _max;\n        emit NumberUpdated(\"maxGainP\", _max);\n    }\n\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov {\n        require(_lev > 0);\n        defaultLeverageUnlocked = _lev;\n        emit NumberUpdated(\"defaultLeverageUnlocked\", _lev);\n    }\n\n    function setMaxSlP(uint _max) external onlyGov {\n        require(_max >= 50);\n        maxSlP = _max;\n        emit NumberUpdated(\"maxSlP\", _max);\n    }\n\n    function setNftSuccessTimelock(uint _blocks) external onlyGov {\n        nftSuccessTimelock = _blocks;\n        emit NumberUpdated(\"nftSuccessTimelock\", _blocks);\n    }\n\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov {\n        require(\n            _r[0] > 0 &&\n                _r[1] > _r[0] &&\n                _r[2] > _r[1] &&\n                _r[3] > _r[2] &&\n                _r[4] > _r[3]\n        );\n        spreadReductionsP = _r;\n        emit SpreadReductionsUpdated(_r);\n    }\n\n    function setMaxOpenInterestWETH(\n        uint _pairIndex,\n        uint _newMaxOpenInterest\n    ) external onlyGov {\n        // Can set max open interest to 0 to pause trading on this pair only\n        openInterestWETH[_pairIndex][2] = _newMaxOpenInterest;\n        emit NumberUpdatedPair(\n            \"maxOpenInterestWETH\",\n            _pairIndex,\n            _newMaxOpenInterest\n        );\n    }\n\n    // Manage stored trades\n    function storeTrade(\n        Trade memory _trade,\n        TradeInfo memory _tradeInfo\n    ) external onlyTrading {\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\n\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\n        tradesPerBlock[block.number]++;\n\n        if (openTradesCount[_trade.trader][_trade.pairIndex] == 1) {\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[\n                _trade.pairIndex\n            ].length;\n            pairTraders[_trade.pairIndex].push(_trade.trader);\n        }\n\n        _tradeInfo.beingMarketClosed = false;\n        openTradesInfo[_trade.trader][_trade.pairIndex][\n            _trade.index\n        ] = _tradeInfo;\n\n        updateOpenInterestWETH(\n            _trade.pairIndex,\n            _tradeInfo.openInterestWETH,\n            true,\n            _trade.buy\n        );\n    }\n\n    function unregisterTrade(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external onlyTrading {\n        Trade storage t = openTrades[trader][pairIndex][index];\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\n        if (t.leverage == 0) {\n            return;\n        }\n\n        updateOpenInterestWETH(pairIndex, i.openInterestWETH, false, t.buy);\n\n        if (openTradesCount[trader][pairIndex] == 1) {\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\n            address[] storage p = pairTraders[pairIndex];\n\n            p[_pairTradersId] = p[p.length - 1];\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\n\n            delete pairTradersId[trader][pairIndex];\n            p.pop();\n        }\n\n        delete openTrades[trader][pairIndex][index];\n        delete openTradesInfo[trader][pairIndex][index];\n\n        openTradesCount[trader][pairIndex]--;\n        tradesPerBlock[block.number]++;\n    }\n\n    // Manage pending market orders\n    function storePendingMarketOrder(\n        PendingMarketOrder memory _order,\n        uint _id,\n        bool _open\n    ) external onlyTrading {\n        pendingOrderIds[_order.trade.trader].push(_id);\n\n        reqID_pendingMarketOrder[_id] = _order;\n        reqID_pendingMarketOrder[_id].block = block.number;\n\n        if (_open) {\n            pendingMarketOpenCount[_order.trade.trader][\n                _order.trade.pairIndex\n            ]++;\n        } else {\n            pendingMarketCloseCount[_order.trade.trader][\n                _order.trade.pairIndex\n            ]++;\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\n                _order.trade.index\n            ].beingMarketClosed = true;\n        }\n    }\n\n    function unregisterPendingMarketOrder(\n        uint _id,\n        bool _open\n    ) external onlyTrading {\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\n\n        for (uint i = 0; i < orderIds.length; i++) {\n            if (orderIds[i] == _id) {\n                if (_open) {\n                    pendingMarketOpenCount[_order.trade.trader][\n                        _order.trade.pairIndex\n                    ]--;\n                } else {\n                    pendingMarketCloseCount[_order.trade.trader][\n                        _order.trade.pairIndex\n                    ]--;\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\n                        _order.trade.index\n                    ].beingMarketClosed = false;\n                }\n\n                orderIds[i] = orderIds[orderIds.length - 1];\n                orderIds.pop();\n\n                delete reqID_pendingMarketOrder[_id];\n                return;\n            }\n        }\n    }\n\n    // Manage open interest\n    function updateOpenInterestWETH(\n        uint _pairIndex,\n        uint _leveragedPosWETH,\n        bool _open,\n        bool _long\n    ) private {\n        uint index = _long ? 0 : 1;\n        uint[3] storage o = openInterestWETH[_pairIndex];\n        o[index] = _open\n            ? o[index] + _leveragedPosWETH\n            : o[index] - _leveragedPosWETH;\n    }\n\n    // Manage open limit orders\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading {\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\n        o.block = block.number;\n        openLimitOrders.push(o);\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] =\n            openLimitOrders.length -\n            1;\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\n    }\n\n    function updateOpenLimitOrder(\n        OpenLimitOrder calldata _o\n    ) external onlyTrading {\n        if (!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)) {\n            return;\n        }\n        OpenLimitOrder storage o = openLimitOrders[\n            openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]\n        ];\n        o.positionSize = _o.positionSize;\n        o.buy = _o.buy;\n        o.leverage = _o.leverage;\n        o.tp = _o.tp;\n        o.sl = _o.sl;\n        o.minPrice = _o.minPrice;\n        o.maxPrice = _o.maxPrice;\n        o.block = block.number;\n    }\n\n    function unregisterOpenLimitOrder(\n        address _trader,\n        uint _pairIndex,\n        uint _index\n    ) external onlyTrading {\n        if (!hasOpenLimitOrder(_trader, _pairIndex, _index)) {\n            return;\n        }\n\n        // Copy last order to deleted order => update id of this limit order\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length - 1];\n        openLimitOrderIds[openLimitOrders[id].trader][\n            openLimitOrders[id].pairIndex\n        ][openLimitOrders[id].index] = id;\n\n        // Remove\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\n        openLimitOrders.pop();\n\n        openLimitOrdersCount[_trader][_pairIndex]--;\n    }\n\n    // Manage NFT orders\n    function storePendingNftOrder(\n        PendingNftOrder memory _nftOrder,\n        uint _orderId\n    ) external onlyTrading {\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\n    }\n\n    function unregisterPendingNftOrder(uint _order) external onlyTrading {\n        delete reqID_pendingNftOrder[_order];\n    }\n\n    // Manage open trade\n    function updateSl(\n        address _trader,\n        uint _pairIndex,\n        uint _index,\n        uint _newSl\n    ) external onlyTrading {\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if (t.leverage == 0) {\n            return;\n        }\n        t.sl = _newSl;\n        i.slLastUpdated = block.number;\n    }\n\n    function updateTp(\n        address _trader,\n        uint _pairIndex,\n        uint _index,\n        uint _newTp\n    ) external onlyTrading {\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\n        if (t.leverage == 0) {\n            return;\n        }\n        t.tp = _newTp;\n        i.tpLastUpdated = block.number;\n    }\n\n    function updateTrade(Trade memory _t) external onlyTrading {\n        // useful when partial adding/closing\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\n        if (t.leverage == 0) {\n            return;\n        }\n        t.initialPosToken = _t.initialPosToken;\n        t.positionSizeWETH = _t.positionSizeWETH;\n        t.openPrice = _t.openPrice;\n        t.leverage = _t.leverage;\n    }\n\n    // Manage referrals\n    function storeReferral(\n        address _trader,\n        address _referral\n    ) external onlyTrading {\n        Trader storage trader = traders[_trader];\n        trader.referral = _referral != address(0) &&\n            trader.referral == address(0) &&\n            _referral != _trader\n            ? _referral\n            : trader.referral;\n    }\n\n    function increaseReferralRewards(\n        address _referral,\n        uint _amount\n    ) external onlyTrading {\n        traders[_referral].referralRewardsTotal += _amount;\n    }\n\n    // Manage rewards\n    function distributeLpRewards(uint _amount) external onlyTrading {\n        pool.increaseAccTokensPerLp(_amount);\n    }\n\n    function increaseNftRewards(\n        uint _nftId,\n        uint _amount\n    ) external onlyTrading {\n        nftLastSuccess[_nftId] = block.number;\n        nftRewards += _amount;\n    }\n\n    // Unlock next leverage\n    function setLeverageUnlocked(\n        address _trader,\n        uint _newLeverage\n    ) external onlyTrading {\n        traders[_trader].leverageUnlocked = _newLeverage;\n    }\n\n    // Manage dev & gov fees\n    function handleDevGovFees(\n        uint _pairIndex,\n        uint _leveragedPositionSize,\n        bool _WETH,\n        bool _fullFee\n    ) external onlyTrading returns (uint fee) {\n        fee =\n            (_leveragedPositionSize * priceAggregator.openFeeP(_pairIndex)) /\n            PRECISION /\n            100;\n        if (!_fullFee) {\n            fee /= 2;\n        }\n\n        if (_WETH) {\n            govFeesWETH += fee;\n            devFeesWETH += fee;\n        } else {\n            govFeesToken += fee;\n            devFeesToken += fee;\n        }\n\n        fee *= 2;\n    }\n\n    function claimFees() external onlyGov {\n        token.mint(dev, devFeesToken);\n        token.mint(gov, govFeesToken);\n\n        tokensMinted += devFeesToken + govFeesToken;\n\n        WETH.transfer(gov, govFeesWETH);\n        WETH.transfer(dev, devFeesWETH);\n\n        devFeesToken = 0;\n        govFeesToken = 0;\n        devFeesWETH = 0;\n        govFeesWETH = 0;\n    }\n\n    // Manage tokens\n    function handleTokens(\n        address _a,\n        uint _amount,\n        bool _mint\n    ) external onlyTrading {\n        if (_mint) {\n            token.mint(_a, _amount);\n            tokensMinted += _amount;\n        } else {\n            token.burn(_a, _amount);\n            tokensBurned += _amount;\n        }\n    }\n\n    function transferWETH(\n        address _from,\n        address _to,\n        uint _amount\n    ) external onlyTrading {\n        if (_from == address(this)) {\n            WETH.transfer(_to, _amount);\n        } else {\n            WETH.transferFrom(_from, _to, _amount);\n        }\n    }\n\n    function mintWETH(address _to, uint _amount) external onlyTrading {\n        WETH.mint(_to, _amount);\n    }\n\n    function transferLinkToAggregator(\n        address _from,\n        uint _pairIndex,\n        uint _leveragedPosWETH\n    ) external onlyTrading {\n        linkErc677.transferFrom(\n            _from,\n            address(priceAggregator),\n            priceAggregator.linkFee(_pairIndex, _leveragedPosWETH)\n        );\n    }\n\n    // View utils functions\n    function firstEmptyTradeIndex(\n        address trader,\n        uint pairIndex\n    ) public view returns (uint index) {\n        for (uint i = 0; i < maxTradesPerPair; i++) {\n            if (openTrades[trader][pairIndex][i].leverage == 0) {\n                index = i;\n                break;\n            }\n        }\n    }\n\n    function firstEmptyOpenLimitIndex(\n        address trader,\n        uint pairIndex\n    ) public view returns (uint index) {\n        for (uint i = 0; i < maxTradesPerPair; i++) {\n            if (!hasOpenLimitOrder(trader, pairIndex, i)) {\n                index = i;\n                break;\n            }\n        }\n    }\n\n    function hasOpenLimitOrder(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) public view returns (bool) {\n        if (openLimitOrders.length == 0) {\n            return false;\n        }\n        OpenLimitOrder storage o = openLimitOrders[\n            openLimitOrderIds[trader][pairIndex][index]\n        ];\n        return\n            o.trader == trader && o.pairIndex == pairIndex && o.index == index;\n    }\n\n    // Additional getters\n    function getReferral(address _trader) external view returns (address) {\n        return traders[_trader].referral;\n    }\n\n    function getLeverageUnlocked(address _trader) external view returns (uint) {\n        return traders[_trader].leverageUnlocked;\n    }\n\n    function pairTradersArray(\n        uint _pairIndex\n    ) external view returns (address[] memory) {\n        return pairTraders[_pairIndex];\n    }\n\n    function getPendingOrderIds(\n        address _trader\n    ) external view returns (uint[] memory) {\n        return pendingOrderIds[_trader];\n    }\n\n    function pendingOrderIdsCount(\n        address _trader\n    ) external view returns (uint) {\n        return pendingOrderIds[_trader].length;\n    }\n\n    function getOpenLimitOrder(\n        address _trader,\n        uint _pairIndex,\n        uint _index\n    ) external view returns (OpenLimitOrder memory) {\n        require(hasOpenLimitOrder(_trader, _pairIndex, _index));\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]];\n    }\n\n    function getOpenLimitOrders()\n        external\n        view\n        returns (OpenLimitOrder[] memory)\n    {\n        return openLimitOrders;\n    }\n\n    function getSupportedTokens() external view returns (address[] memory) {\n        return supportedTokens;\n    }\n\n    function getSpreadReductionsArray() external view returns (uint[5] memory) {\n        return spreadReductionsP;\n    }\n\n    function getGov() external view returns (address _gov) {\n        return gov;\n    }\n\n    function setOracle(address _oracle) external {\n        oracle = IOracle(_oracle);\n    }\n\n    function getOpenTrades(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (Trade memory) {\n        return openTrades[trader][pairIndex][index];\n    }\n\n    function getOpenTradesInfo(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (TradeInfo memory) {\n        return openTradesInfo[trader][pairIndex][index];\n    }\n\n    function getPendingMarketOrder(\n        uint orderId\n    ) external view returns (PendingMarketOrder memory) {\n        return reqID_pendingMarketOrder[orderId];\n    }\n\n    function getPendingNftOrder(\n        uint orderId\n    ) external view returns (PendingNftOrder memory) {\n        return reqID_pendingNftOrder[orderId];\n    }\n}\n"
    },
    "contracts/Trading.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./interfaces/ReferralsInterface.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\nimport \"./Delegatable.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./libraries/TradeUtils.sol\";\nimport \"./libraries/PackingUtils.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\nimport \"./interfaces/CallbacksInterface.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_4.sol\";\n\ncontract Trading is Delegatable {\n    using TradeUtils for address;\n    using PackingUtils for uint256;\n\n    // Contracts (constant)\n    StorageInterface public immutable storageT;\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\n    PairInfosInterface public immutable pairInfos;\n    ReferralsInterface public immutable referrals;\n    BorrowingFeesInterface public immutable borrowingFees;\n    CallbacksInterface public immutable callbacks;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_SL_P = 75; // -75% PNL\n\n    // Params (adjustable)\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\n    uint public marketOrdersTimeout; // block (eg. 30)\n    int public maxLeveragedPosWETH = 10e18; //100 weth\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n\n    // Events\n    event Done(bool done);\n    event Paused(bool paused);\n\n    event NumberUpdated(string name, uint value);\n\n    event MarketOrderInitiated(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        bool open\n    );\n\n    event OpenLimitPlaced(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n    event OpenLimitUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newPrice,\n        uint newTp,\n        uint newSl,\n        uint maxSlippageP\n    );\n    event OpenLimitCanceled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n\n    event TpUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newTp\n    );\n    event SlUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newSl\n    );\n\n    event NftOrderInitiated(\n        uint orderId,\n        address indexed nftHolder,\n        address indexed trader,\n        uint indexed pairIndex\n    );\n    event NftOrderSameBlock(\n        address indexed nftHolder,\n        address indexed trader,\n        uint indexed pairIndex\n    );\n\n    event ChainlinkCallbackTimeout(\n        uint indexed orderId,\n        StorageInterface.PendingMarketOrder order\n    );\n    event CouldNotCloseTrade(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n\n    constructor(\n        StorageInterface _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        PairInfosInterface _pairInfos,\n        ReferralsInterface _referrals,\n        BorrowingFeesInterface _borrowingFees,\n        CallbacksInterface _callbacks,\n        uint _maxPosWETH,\n        uint _marketOrdersTimeout\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_nftRewards) != address(0) &&\n                address(_pairInfos) != address(0) &&\n                address(_referrals) != address(0) &&\n                address(_borrowingFees) != address(0) &&\n                address(_callbacks) != address(0) &&\n                _maxPosWETH > 0 &&\n                _marketOrdersTimeout > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        borrowingFees = _borrowingFees;\n\n        maxPosWETH = _maxPosWETH;\n        marketOrdersTimeout = _marketOrdersTimeout;\n        callbacks = _callbacks;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier notContract() {\n        isNotContract();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n    }\n\n    function isNotContract() private view {\n        require(tx.origin == msg.sender);\n    }\n\n    function isNotDone() private view {\n        require(!isDone, \"DONE\");\n    }\n\n    // Manage params\n    function setMaxPosWETH(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        maxPosWETH = value;\n        emit NumberUpdated(\"maxPosWETH\", value);\n    }\n\n    function setMarketOrdersTimeout(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        marketOrdersTimeout = value;\n        emit NumberUpdated(\"marketOrdersTimeout\", value);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n        emit Paused(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n        emit Done(isDone);\n    }\n\n    // Open new trade (MARKET/LIMIT)\n    function openTrade(\n        StorageInterface.Trade memory t,\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\n        uint spreadReductionId,\n        uint slippageP // 1e10 (%)\n    )\n        external\n        // address referrer\n        notContract\n        notDone\n    {\n        require(!isPaused, \"PAUSED\");\n        require(t.openPrice * slippageP < type(uint256).max, \"OVERFLOW\");\n        require(t.openPrice > 0, \"PRICE_ZERO\");\n\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        );\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        address sender = _msgSender();\n\n        require(\n            storageT.openTradesCount(sender, t.pairIndex) +\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\n                storageT.maxTradesPerPair(),\n            \"MAX_TRADES_PER_PAIR\"\n        );\n\n        require(\n            storageT.pendingOrderIdsCount(sender) <\n                storageT.maxPendingMarketOrders(),\n            \"MAX_PENDING_ORDERS\"\n        );\n        require(t.positionSizeWETH <= maxPosWETH, \"ABOVE_MAX_POS\");\n        require(\n            t.positionSizeWETH * t.leverage >=\n                pairsStored.pairMinLevPosWETH(t.pairIndex),\n            \"BELOW_MIN_POS\"\n        );\n\n        require(\n            t.leverage > 0 &&\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\n            \"LEVERAGE_INCORRECT\"\n        );\n\n        // require(\n        //     spreadReductionId == 0 ||\n        //         storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\n        //     \"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\"\n        // );\n\n        require(\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\n            \"WRONG_TP\"\n        );\n        require(\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\n            \"WRONG_SL\"\n        );\n\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\n            0,\n            t.pairIndex,\n            t.buy,\n            t.positionSizeWETH * t.leverage\n        );\n        require(\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\n            \"PRICE_IMPACT_TOO_HIGH\"\n        );\n\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\n\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\n            // storageT.storeOpenLimitOrder(\n            //     StorageInterface.OpenLimitOrder(\n            //         sender,\n            //         t.pairIndex,\n            //         index,\n            //         t.positionSizeWETH,\n            //         spreadReductionId > 0\n            //             ? storageT.spreadReductionsP(spreadReductionId - 1)\n            //             : 0,\n            //         t.buy,\n            //         t.leverage,\n            //         t.tp,\n            //         t.sl,\n            //         t.openPrice,\n            //         t.openPrice,\n            //         block.number,\n            //         0\n            //     )\n            // );\n            // nftRewards.setOpenLimitOrderType(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     orderType\n            // );\n            // address c = storageT.callbacks();\n            // c.setTradeLastUpdated(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     TradingCallbacksInterface.TradeType.LIMIT,\n            //     ChainUtils.getBlockNumber()\n            // );\n            // c.setTradeData(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     TradingCallbacksInterface.TradeType.LIMIT,\n            //     slippageP\n            // );\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\n        } else {\n            uint orderId = aggregator.getPrice(\n                t.pairIndex,\n                AggregatorInterfaceV1_4.OrderType.MARKET_OPEN,\n                t.positionSizeWETH * t.leverage,\n                ChainUtils.getBlockNumber()\n            );\n\n            // storageT.storePendingMarketOrder(\n            //     StorageInterface.PendingMarketOrder(\n            //         StorageInterface.Trade(\n            //             sender,\n            //             t.pairIndex,\n            //             0,\n            //             0,\n            //             t.positionSizeWETH,\n            //             0,\n            //             t.buy,\n            //             t.leverage,\n            //             t.tp,\n            //             t.sl\n            //         ),\n            //         0,\n            //         t.openPrice,\n            //         slippageP,\n            //         0,\n            //         0\n            //     ),\n            //     orderId,\n            //     true\n            // );\n\n            (storageT.priceAggregator()).marketOrderfulfill(\n                orderId,\n                StorageInterface.PendingMarketOrder(\n                    StorageInterface.Trade(\n                        sender,\n                        t.pairIndex,\n                        0,\n                        0,\n                        t.positionSizeWETH,\n                        0,\n                        t.buy,\n                        t.leverage,\n                        t.tp,\n                        t.sl\n                    ),\n                    0,\n                    t.openPrice,\n                    slippageP,\n                    0,\n                    0\n                )\n            );\n\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\n        }\n\n        // referrals.registerPotentialReferrer(sender, referrer);\n    }\n\n    // Close trade (MARKET)\n    function closeTradeMarket(\n        uint pairIndex,\n        uint index\n    ) external notContract notDone {\n        address sender = _msgSender();\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\n            sender,\n            pairIndex,\n            index\n        );\n\n        StorageInterface.TradeInfo memory i = storageT.getOpenTradesInfo(\n            sender,\n            pairIndex,\n            index\n        );\n\n        require(\n            storageT.pendingOrderIdsCount(sender) <\n                storageT.maxPendingMarketOrders(),\n            \"MAX_PENDING_ORDERS\"\n        );\n        require(!i.beingMarketClosed, \"ALREADY_BEING_CLOSED\");\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint orderId = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        ).getPrice(\n                pairIndex,\n                AggregatorInterfaceV1_4.OrderType.MARKET_CLOSE,\n                (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\n                ChainUtils.getBlockNumber()\n            );\n\n        // storageT.storePendingMarketOrder(\n        //     StorageInterface.PendingMarketOrder(\n        //         StorageInterface.Trade(\n        //             sender,\n        //             pairIndex,\n        //             index,\n        //             0,\n        //             0,\n        //             0,\n        //             false,\n        //             0,\n        //             0,\n        //             0\n        //         ),\n        //         0,\n        //         0,\n        //         0,\n        //         0,\n        //         0\n        //     ),\n        //     orderId,\n        //     false\n        // );\n\n        (storageT.priceAggregator()).marketOrderfulfill(\n            orderId,\n            StorageInterface.PendingMarketOrder(\n                StorageInterface.Trade(\n                    sender,\n                    pairIndex,\n                    index,\n                    0,\n                    0,\n                    0,\n                    false,\n                    0,\n                    0,\n                    0\n                ),\n                0,\n                0,\n                0,\n                0,\n                0\n            )\n        );\n\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\n    }\n\n    // Manage limit order (OPEN)\n    // function updateOpenLimitOrder(\n    //     uint pairIndex,\n    //     uint index,\n    //     uint price, // PRECISION\n    //     uint tp,\n    //     uint sl,\n    //     uint maxSlippageP\n    // ) external notContract notDone {\n    //     require(price > 0, \"PRICE_ZERO\");\n\n    //     address sender = _msgSender();\n    //     require(\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\n    //         \"NO_LIMIT\"\n    //     );\n\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\n    //         sender,\n    //         pairIndex,\n    //         index\n    //     );\n\n    //     require(tp == 0 || (o.buy ? tp > price : tp < price), \"WRONG_TP\");\n    //     require(sl == 0 || (o.buy ? sl < price : sl > price), \"WRONG_SL\");\n\n    //     require(price * maxSlippageP < type(uint256).max, \"OVERFLOW\");\n\n    //     checkNoPendingTrigger(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         StorageInterface.LimitOrder.OPEN\n    //     );\n\n    //     o.minPrice = price;\n    //     o.maxPrice = price;\n    //     o.tp = tp;\n    //     o.sl = sl;\n\n    //     storageT.updateOpenLimitOrder(o);\n\n    //     address c = storageT.callbacks();\n    //     c.setTradeLastUpdated(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         TradingCallbacksInterface.TradeType.LIMIT,\n    //         ChainUtils.getBlockNumber()\n    //     );\n    //     c.setTradeData(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         TradingCallbacksInterface.TradeType.LIMIT,\n    //         maxSlippageP\n    //     );\n\n    //     emit OpenLimitUpdated(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         price,\n    //         tp,\n    //         sl,\n    //         maxSlippageP\n    //     );\n    // }\n\n    // function cancelOpenLimitOrder(\n    //     uint pairIndex,\n    //     uint index\n    // ) external notContract notDone {\n    //     address sender = _msgSender();\n    //     require(\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\n    //         \"NO_LIMIT\"\n    //     );\n\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\n    //         sender,\n    //         pairIndex,\n    //         index\n    //     );\n\n    //     checkNoPendingTrigger(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         StorageInterface.LimitOrder.OPEN\n    //     );\n\n    //     storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\n    //     storageT.transferWETH(address(storageT), sender, o.positionSize);\n\n    //     emit OpenLimitCanceled(sender, pairIndex, index);\n    // }\n\n    // Manage limit order (TP/SL)\n    function updateTp(\n        uint pairIndex,\n        uint index,\n        uint newTp\n    ) external notContract notDone {\n        address sender = _msgSender();\n\n        // checkNoPendingTrigger(\n        //     sender,\n        //     pairIndex,\n        //     index,\n        //     StorageInterface.LimitOrder.TP\n        // );\n        StorageInterface.Trade memory t = storageT.getOpenTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        storageT.updateTp(sender, pairIndex, index, newTp);\n        address(storageT.callbacks()).setTpLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksInterface.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit TpUpdated(sender, pairIndex, index, newTp);\n    }\n\n    function updateSl(\n        uint pairIndex,\n        uint index,\n        uint newSl\n    ) external notContract notDone {\n        address sender = _msgSender();\n\n        // checkNoPendingTrigger(\n        //     sender,\n        //     pairIndex,\n        //     index,\n        //     StorageInterface.LimitOrder.SL\n        // );\n\n        StorageInterface.Trade memory t = storageT.getOpenTrades(sender, pairIndex, index);\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\n\n        require(\n            newSl == 0 ||\n                (\n                    t.buy\n                        ? newSl >= t.openPrice - maxSlDist\n                        : newSl <= t.openPrice + maxSlDist\n                ),\n            \"SL_TOO_BIG\"\n        );\n\n        storageT.updateSl(sender, pairIndex, index, newSl);\n        address(storageT.callbacks()).setSlLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksInterface.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit SlUpdated(sender, pairIndex, index, newSl);\n    }\n\n    // Execute limit order\n    function executeNftOrder(\n        uint _orderType,\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint nftId,\n        uint nftType\n    ) external notContract notDone {\n        // (\n        //     uint _orderType,\n        //     address trader,\n        //     uint pairIndex,\n        //     uint index,\n        //     uint nftId,\n        //     uint nftType\n        // ) = packed.unpackExecuteNftOrder();\n        StorageInterface.LimitOrder orderType = StorageInterface.LimitOrder(\n            _orderType\n        );\n        address sender = _msgSender();\n\n        // require(nftType >= 1 && nftType <= 5, \"WRONG_NFT_TYPE\");\n        // require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \"NO_NFT\");\n\n        // require(\n        //     block.number >=\n        //         storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(),\n        //     \"SUCCESS_TIMELOCK\"\n        // );\n\n        bool isOpenLimit = orderType == StorageInterface.LimitOrder.OPEN;\n        TradingCallbacksInterface.TradeType tradeType = isOpenLimit\n            ? TradingCallbacksInterface.TradeType.LIMIT\n            : TradingCallbacksInterface.TradeType.MARKET;\n\n        // require(\n        //     canExecute(\n        //         orderType,\n        //         TradingCallbacksInterface.SimplifiedTradeId(\n        //             trader,\n        //             pairIndex,\n        //             index,\n        //             tradeType\n        //         )\n        //     ),\n        //     \"IN_TIMEOUT\"\n        // );\n\n        // handleBotInUse(sender, nftId, trader, pairIndex, index);\n\n        StorageInterface.Trade memory t;\n\n        if (isOpenLimit) {\n            revert(\"Open Limit orders not supported yet\");\n            // require(\n            //     storageT.hasOpenLimitOrder(trader, pairIndex, index),\n            //     \"NO_LIMIT\"\n            // );\n        } else {\n            t = storageT.getOpenTrades(trader, pairIndex, index);\n\n            require(t.leverage > 0, \"NO_TRADE\");\n\n            if (orderType == StorageInterface.LimitOrder.LIQ) {\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        t.positionSizeWETH,\n                        t.leverage\n                    )\n                );\n\n                require(\n                    t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl),\n                    \"HAS_SL\"\n                );\n            } else if (orderType == StorageInterface.LimitOrder.PAR_LIQ) {\n                uint parLiqPrice = borrowingFees\n                    .getTradePartialLiquidationPrice(\n                        BorrowingFeesInterface.LiqPriceInput(\n                            t.trader,\n                            t.pairIndex,\n                            t.index,\n                            t.openPrice,\n                            t.buy,\n                            t.positionSizeWETH,\n                            t.leverage\n                        )\n                    );\n\n                require(\n                    t.sl == 0 ||\n                        (t.buy ? parLiqPrice > t.sl : parLiqPrice < t.sl),\n                    \"HAS_SL\"\n                );\n                int256 pnl = callbacks.getTradePnl(\n                    t.trader,\n                    t.pairIndex,\n                    t.index\n                );\n                int256 position = int(t.positionSizeWETH) + pnl;\n                require(\n                    position >= maxLeveragedPosWETH,\n                    \"position to small for partial liquidation\"\n                );\n            } else {\n                require(\n                    orderType != StorageInterface.LimitOrder.SL || t.sl > 0,\n                    \"NO_SL\"\n                );\n                require(\n                    orderType != StorageInterface.LimitOrder.TP || t.tp > 0,\n                    \"NO_TP\"\n                );\n            }\n        }\n\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n        //         .TriggeredLimitId(trader, pairIndex, index, orderType);\n\n        if (\n            true\n            // !nftRewards.triggered(triggeredLimitId) ||\n            // nftRewards.timedOut(triggeredLimitId)\n        ) {\n            uint leveragedPosWETH;\n\n            if (isOpenLimit) {\n                // StorageInterface.OpenLimitOrder memory l = storageT\n                //     .getOpenLimitOrder(trader, pairIndex, index);\n                // leveragedPosWETH = l.positionSize * l.leverage;\n                // (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\n                //     0,\n                //     l.pairIndex,\n                //     l.buy,\n                //     leveragedPosWETH\n                // );\n                // require(\n                //     priceImpactP * l.leverage <=\n                //         pairInfos.maxNegativePnlOnOpenP(),\n                //     \"PRICE_IMPACT_TOO_HIGH\"\n                // );\n            } else {\n                leveragedPosWETH = t.positionSizeWETH * t.leverage;\n            }\n\n            // storageT.transferLinkToAggregator(\n            //     sender,\n            //     pairIndex,\n            //     leveragedPosWETH\n            // );\n\n            (uint orderId /*uint linkFee*/, ) = getPriceNftOrder(\n                isOpenLimit,\n                trader,\n                pairIndex,\n                index,\n                tradeType,\n                orderType,\n                leveragedPosWETH\n            );\n\n            StorageInterface.PendingNftOrder memory pendingNftOrder;\n            pendingNftOrder.nftHolder = sender;\n            pendingNftOrder.nftId = nftId;\n            pendingNftOrder.trader = trader;\n            pendingNftOrder.pairIndex = pairIndex;\n            pendingNftOrder.index = index;\n            pendingNftOrder.orderType = orderType;\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\n\n            (storageT.priceAggregator()).nftOrderfulfill(\n                orderId,\n                pendingNftOrder\n            );\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\n        } else {\n            // nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\n\n            emit NftOrderSameBlock(sender, trader, pairIndex);\n        }\n    }\n\n    // Market timeout\n    // function openTradeMarketTimeout(uint _order) external notContract notDone {\n    //     address sender = _msgSender();\n\n    //     StorageInterface.PendingMarketOrder memory o = storageT\n    //         .reqID_pendingMarketOrder(_order);\n    //     StorageInterface.Trade memory t = o.trade;\n\n    //     require(\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\n    //         \"WAIT_TIMEOUT\"\n    //     );\n    //     require(t.trader == sender, \"NOT_YOUR_ORDER\");\n    //     require(t.leverage > 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n    //     storageT.unregisterPendingMarketOrder(_order, true);\n    //     storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\n\n    //     emit ChainlinkCallbackTimeout(_order, o);\n    // }\n\n    // function closeTradeMarketTimeout(uint _order) external notContract notDone {\n    //     address sender = _msgSender();\n\n    //     StorageInterface.PendingMarketOrder memory o = storageT\n    //         .reqID_pendingMarketOrder(_order);\n    //     StorageInterface.Trade memory t = o.trade;\n\n    //     require(\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\n    //         \"WAIT_TIMEOUT\"\n    //     );\n    //     require(t.trader == sender, \"NOT_YOUR_ORDER\");\n    //     require(t.leverage == 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n    //     storageT.unregisterPendingMarketOrder(_order, false);\n\n    //     (bool success, ) = address(this).delegatecall(\n    //         abi.encodeWithSignature(\n    //             \"closeTradeMarket(uint256,uint256)\",\n    //             t.pairIndex,\n    //             t.index\n    //         )\n    //     );\n\n    //     if (!success) {\n    //         emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\n    //     }\n\n    //     emit ChainlinkCallbackTimeout(_order, o);\n    // }\n\n    // //Helpers\n    // function checkNoPendingTrigger(\n    //     address trader,\n    //     uint pairIndex,\n    //     uint index,\n    //     StorageInterface.LimitOrder orderType\n    // ) private view {\n    //     NftRewardsInterfaceV6_3_1.TriggeredLimitId\n    //         memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n    //             .TriggeredLimitId(trader, pairIndex, index, orderType);\n    //     require(\n    //         !nftRewards.triggered(triggeredLimitId) ||\n    //             nftRewards.timedOut(triggeredLimitId),\n    //         \"PENDING_TRIGGER\"\n    //     );\n    // }\n\n    // function canExecute(\n    //     StorageInterface.LimitOrder orderType,\n    //     TradingCallbacksInterface.SimplifiedTradeId memory id\n    // ) private view returns (bool) {\n    //     if (orderType == StorageInterface.LimitOrder.LIQ) return true;\n\n    //     uint b = ChainUtils.getBlockNumber();\n    //     address cb = storageT.callbacks();\n\n    //     if (orderType == StorageInterface.LimitOrder.TP)\n    //         return !cb.isTpInTimeout(id, b);\n    //     if (orderType == StorageInterface.LimitOrder.SL)\n    //         return !cb.isSlInTimeout(id, b);\n\n    //     return !cb.isLimitInTimeout(id, b);\n    // }\n\n    function pairMaxLeverage(\n        PairsStorageInterfaceV6 pairsStored,\n        uint pairIndex\n    ) private view returns (uint) {\n        uint max = TradingCallbacksInterface(address(storageT.callbacks()))\n            .pairMaxLeverage(pairIndex);\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\n    }\n\n    // function handleBotInUse(\n    //     address sender,\n    //     uint nftId,\n    //     address trader,\n    //     uint pairIndex,\n    //     uint index\n    // ) private {\n    //     (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\n    //         block.number,\n    //         sender,\n    //         nftId,\n    //         trader,\n    //         pairIndex,\n    //         index\n    //     );\n    //     require(!nftRewards.nftBotInUse(nftHash, botHash), \"BOT_IN_USE\");\n\n    //     nftRewards.setNftBotInUse(nftHash, botHash);\n    // }\n\n    function getPriceNftOrder(\n        bool isOpenLimit,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType tradeType,\n        StorageInterface.LimitOrder orderType,\n        uint leveragedPosWETH\n    ) private returns (uint orderId, uint linkFee) {\n        TradingCallbacksInterface.LastUpdated\n            memory lastUpdated = TradingCallbacksInterface(\n                address(storageT.callbacks())\n            ).tradeLastUpdated(trader, pairIndex, index, tradeType);\n\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        );\n\n        orderId = aggregator.getPrice(\n            pairIndex,\n            isOpenLimit\n                ? AggregatorInterfaceV1_4.OrderType.LIMIT_OPEN\n                : AggregatorInterfaceV1_4.OrderType.LIMIT_CLOSE,\n            leveragedPosWETH,\n            isOpenLimit\n                ? lastUpdated.limit\n                : orderType == StorageInterface.LimitOrder.SL\n                ? lastUpdated.sl\n                : orderType == StorageInterface.LimitOrder.TP\n                ? lastUpdated.tp\n                : lastUpdated.created\n        );\n\n        // linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\n    }\n}\n"
    },
    "contracts/TradingCallbacks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./interfaces/ReferralsInterface.sol\";\nimport \"./interfaces/StakingInterface.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\nimport \"./interfaces/PairsStorageInterfaceV6.sol\";\nimport \"./interfaces/AggregatorInterfaceV1_4.sol\";\nimport \"./Storage.sol\";\n\ncontract TradingCallbacks is Initializable {\n    // Contracts (constant)\n    StorageInterface public storageT;\n    NftRewardsInterfaceV6_3_1 public nftRewards;\n    PairInfosInterface public pairInfos;\n    ReferralsInterface public referrals;\n    StakingInterface public staking;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10; // 10 decimals\n\n    uint constant MAX_SL_P = 75; // -75% PNL\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\n\n    // Params (adjustable)\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\n    uint public vaultFeeP = 50;\n    uint public liquidatorFeeP = 50;\n    uint public liquidationFeeP = 5;\n    uint public parLiquidationFeeP = 3;\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\n\n    // Last Updated State\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\n        public tradeLastUpdated; // Block numbers for last updated\n\n    // v6.3.2 Storage/State\n    BorrowingFeesInterface public borrowingFees;\n\n    mapping(uint => uint) public pairMaxLeverage;\n\n    // v6.4 Storage\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\n        public tradeData; // More storage for trades / limit orders\n\n    // Custom data types\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n\n    // Useful to avoid stack too deep errors\n    struct Values {\n        uint posWETH;\n        uint levPosWETH;\n        uint tokenPriceWETH;\n        int profitP;\n        uint price;\n        uint liqPrice;\n        uint WETHSentToTrader;\n        uint reward1;\n        uint reward2;\n        uint reward3;\n        bool exactExecution;\n    }\n\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    struct OpenTradePrepInput {\n        uint executionPrice;\n        uint wantedPrice;\n        uint marketPrice;\n        uint spreadP;\n        uint spreadReductionP;\n        bool buy;\n        uint pairIndex;\n        uint positionSize;\n        uint leverage;\n        uint maxSlippageP;\n        uint tp;\n        uint sl;\n    }\n\n    struct feeConfig {\n        uint _vaultFeeP;\n        uint _liquidatorFeeP;\n        uint _liquidationFeeP;\n        uint _parLiquidationFeeP;\n    }\n\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n\n    enum CancelReason {\n        NONE,\n        PAUSED,\n        MARKET_CLOSED,\n        SLIPPAGE,\n        TP_REACHED,\n        SL_REACHED,\n        EXPOSURE_LIMITS,\n        PRICE_IMPACT,\n        MAX_LEVERAGE,\n        NO_TRADE,\n        WRONG_TRADE,\n        NOT_HIT\n    }\n\n    // Events\n    event MarketExecuted(\n        uint indexed orderId,\n        StorageInterface.Trade t,\n        bool open,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit, // before fees\n        uint WETHSentToTrader\n    );\n\n    event LimitExecuted(\n        uint indexed orderId,\n        uint limitIndex,\n        StorageInterface.Trade t,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit,\n        uint WETHSentToTrader,\n        bool exactExecution\n    );\n\n    event MarketOpenCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        CancelReason cancelReason\n    );\n    event MarketCloseCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        CancelReason cancelReason\n    );\n    event NftOrderCanceled(\n        uint indexed orderId,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        CancelReason cancelReason\n    );\n\n    event ClosingFeeSharesPUpdated(\n        uint WETHVaultFeeP,\n        uint lpFeeP,\n        uint sssFeeP\n    );\n    event CanExecuteTimeoutUpdated(uint newValue);\n\n    event Pause(bool paused);\n    event Done(bool done);\n\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\n    event SssFeeCharged(address indexed trader, uint valueWETH);\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\n    event BorrowingFeeCharged(\n        address indexed trader,\n        uint tradeValueWETH,\n        uint feeValueWETH\n    );\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\n\n    // Custom errors (save gas)\n    error WrongParams();\n    error Forbidden();\n\n    function initialize(\n        StorageInterface _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        PairInfosInterface _pairInfos,\n        ReferralsInterface _referrals,\n        StakingInterface _staking,\n        BorrowingFeesInterface _borrowingFees,\n        address vaultToApprove,\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP,\n        uint _canExecuteTimeout,\n        feeConfig memory data\n    ) external initializer {\n        if (\n            address(_storageT) == address(0) ||\n            address(_nftRewards) == address(0) ||\n            address(_pairInfos) == address(0) ||\n            address(_referrals) == address(0) ||\n            address(_staking) == address(0) ||\n            vaultToApprove == address(0) ||\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\n        ) {\n            revert WrongParams();\n        }\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        staking = _staking;\n        borrowingFees = _borrowingFees;\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n        vaultFeeP = data._vaultFeeP;\n        liquidatorFeeP = data._liquidatorFeeP;\n        liquidationFeeP = data._liquidationFeeP;\n        parLiquidationFeeP = data._parLiquidationFeeP;\n\n        canExecuteTimeout = _canExecuteTimeout;\n        TokenInterface t = storageT.WETH();\n        t.approve(address(staking), type(uint256).max);\n        t.approve(vaultToApprove, type(uint256).max);\n    }\n\n    // function initializeV2(\n    //     BorrowingFeesInterface _borrowingFees\n    // ) external reinitializer(2) {\n    //     if (address(_borrowingFees) == address(0)) {\n    //         revert WrongParams();\n    //     }\n    //     borrowingFees = _borrowingFees;\n    // }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier onlyPriceAggregator() {\n        isPriceAggregator();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n    modifier onlyTrading() {\n        isTrading();\n        _;\n    }\n    modifier onlyManager() {\n        isManager();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        if (msg.sender != storageT.gov()) {\n            revert Forbidden();\n        }\n    }\n\n    function isPriceAggregator() private view {\n        if (msg.sender != address(storageT.priceAggregator())) {\n            revert Forbidden();\n        }\n    }\n\n    function isNotDone() private view {\n        if (isDone) {\n            revert Forbidden();\n        }\n    }\n\n    function isTrading() private view {\n        if (msg.sender != address(storageT.trading())) {\n            revert Forbidden();\n        }\n    }\n\n    function isManager() private view {\n        if (msg.sender != pairInfos.manager()) {\n            revert Forbidden();\n        }\n    }\n\n    // Manage params\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\n        _setPairMaxLeverage(pairIndex, maxLeverage);\n    }\n\n    function setPairMaxLeverageArray(\n        uint[] calldata indices,\n        uint[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n\n        if (len != values.length) {\n            revert WrongParams();\n        }\n\n        for (uint i; i < len; ) {\n            _setPairMaxLeverage(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\n        pairMaxLeverage[pairIndex] = maxLeverage;\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\n    }\n\n    function setClosingFeeSharesP(\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP\n    ) external onlyGov {\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\n            revert WrongParams();\n        }\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\n    }\n\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\n            revert WrongParams();\n        }\n        canExecuteTimeout = _canExecuteTimeout;\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n\n        emit Pause(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n\n        emit Done(isDone);\n    }\n\n    // Callbacks\n    function openTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = o.trade;\n\n        (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        ) = _openTradePrep(\n                OpenTradePrepInput(\n                    a.price,\n                    o.wantedPrice,\n                    a.price,\n                    a.spreadP,\n                    o.spreadReductionP,\n                    t.buy,\n                    t.pairIndex,\n                    t.positionSizeWETH,\n                    t.leverage,\n                    o.slippageP,\n                    t.tp,\n                    t.sl\n                )\n            );\n        t.openPrice = priceAfterImpact;\n        if (cancelReason == CancelReason.NONE) {\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\n                t,\n                1500,\n                0\n            );\n\n            emit MarketExecuted(\n                a.orderId,\n                finalTrade,\n                true,\n                finalTrade.openPrice,\n                priceImpactP,\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\n                0,\n                0\n            );\n        } else {\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\n            //     t.pairIndex,\n            //     t.positionSizeWETH * t.leverage,\n            //     true,\n            //     true\n            // );\n            // transferFromStorageToAddress(\n            //     t.trader,\n            //     t.positionSizeWETH - devGovFeesWETH\n            // );\n\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\n            emit MarketOpenCanceled(\n                a.orderId,\n                t.trader,\n                t.pairIndex,\n                cancelReason\n            );\n        }\n\n        // storageT.unregisterPendingMarketOrder(a.orderId, true);\n    }\n\n    function closeTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trade.trader,\n            o.trade.pairIndex,\n            o.trade.index\n        );\n\n        CancelReason cancelReason = t.leverage == 0\n            ? CancelReason.NO_TRADE\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\n\n        if (cancelReason != CancelReason.NO_TRADE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n            AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n                address(storageT.priceAggregator())\n            );\n\n            Values memory v;\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    a.price,\n                    t.buy,\n                    t.leverage\n                );\n                v.posWETH = v.levPosWETH / t.leverage;\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    true,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    // (v.levPosWETH *\n                    //     aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\n                    //     100 /\n                    //     PRECISION,\n                    // (v.levPosWETH *\n                    //     aggregator.pairsStorage().pairNftLimitOrderFeeP(\n                    //         t.pairIndex\n                    //     )) /\n                    //     100 /\n                    //     PRECISION\n                    0,\n                    0\n                );\n\n                emit MarketExecuted(\n                    a.orderId,\n                    t,\n                    false,\n                    a.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader\n                );\n            } else {\n                // Dev / gov rewards to pay for oracle cost\n                // Charge in WETH if collateral in storage or token if collateral in vault\n                // v.reward1 = t.positionSizeWETH > 0\n                //     ? storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         v.levPosWETH,\n                //         true,\n                //         true\n                //     )\n                //     : (storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\n                //         false,\n                //         true\n                //     ) * v.tokenPriceWETH) / PRECISION;\n\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\n                // storageT.updateTrade(t);\n\n                emit DevGovFeeCharged(t.trader, v.reward1);\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit MarketCloseCanceled(\n                a.orderId,\n                o.trade.trader,\n                o.trade.pairIndex,\n                o.trade.index,\n                cancelReason\n            );\n        }\n\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\n    }\n\n    // function executeNftOpenOrderCallback(\n    //     AggregatorAnswer memory a\n    // ) external onlyPriceAggregator notDone {\n    //     StorageInterface.PendingNftOrder memory n = storageT\n    //         .reqID_pendingNftOrder(a.orderId);\n\n    //     CancelReason cancelReason = !storageT.hasOpenLimitOrder(\n    //         n.trader,\n    //         n.pairIndex,\n    //         n.index\n    //     )\n    //         ? CancelReason.NO_TRADE\n    //         : CancelReason.NONE;\n\n    //     if (cancelReason == CancelReason.NONE) {\n    //         StorageInterface.OpenLimitOrder memory o = storageT\n    //             .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\n\n    //         NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\n    //             .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\n\n    //         cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\n    //             ? CancelReason.NONE\n    //             : CancelReason.NOT_HIT;\n\n    //         // Note: o.minPrice always equals o.maxPrice so can use either\n    //         (\n    //             uint priceImpactP,\n    //             uint priceAfterImpact,\n    //             CancelReason _cancelReason\n    //         ) = _openTradePrep(\n    //                 OpenTradePrepInput(\n    //                     cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\n    //                     o.maxPrice,\n    //                     a.open,\n    //                     a.spreadP,\n    //                     o.spreadReductionP,\n    //                     o.buy,\n    //                     o.pairIndex,\n    //                     o.positionSize,\n    //                     o.leverage,\n    //                     tradeData[o.trader][o.pairIndex][o.index][\n    //                         TradeType.LIMIT\n    //                     ].maxSlippageP,\n    //                     o.tp,\n    //                     o.sl\n    //                 )\n    //             );\n\n    //         bool exactExecution = cancelReason == CancelReason.NONE;\n\n    //         cancelReason = !exactExecution &&\n    //             (\n    //                 o.maxPrice == 0 ||\n    //                     t ==\n    //                     NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\n    //                     ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\n    //                     : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\n    //             )\n    //             ? CancelReason.NOT_HIT\n    //             : _cancelReason;\n\n    //         if (cancelReason == CancelReason.NONE) {\n    //             (\n    //                 StorageInterface.Trade memory finalTrade,\n    //                 uint tokenPriceWETH\n    //             ) = registerTrade(\n    //                     StorageInterface.Trade(\n    //                         o.trader,\n    //                         o.pairIndex,\n    //                         0,\n    //                         0,\n    //                         o.positionSize,\n    //                         priceAfterImpact,\n    //                         o.buy,\n    //                         o.leverage,\n    //                         o.tp,\n    //                         o.sl\n    //                     ),\n    //                     n.nftId,\n    //                     n.index\n    //                 );\n\n    //             storageT.unregisterOpenLimitOrder(\n    //                 o.trader,\n    //                 o.pairIndex,\n    //                 o.index\n    //             );\n\n    //             emit LimitExecuted(\n    //                 a.orderId,\n    //                 n.index,\n    //                 finalTrade,\n    //                 n.nftHolder,\n    //                 StorageInterface.LimitOrder.OPEN,\n    //                 finalTrade.openPrice,\n    //                 priceImpactP,\n    //                 (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\n    //                 0,\n    //                 0,\n    //                 exactExecution\n    //             );\n    //         }\n    //     }\n\n    //     if (cancelReason != CancelReason.NONE) {\n    //         emit NftOrderCanceled(\n    //             a.orderId,\n    //             n.nftHolder,\n    //             StorageInterface.LimitOrder.OPEN,\n    //             cancelReason\n    //         );\n    //     }\n\n    //     nftRewards.unregisterTrigger(\n    //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n    //             n.trader,\n    //             n.pairIndex,\n    //             n.index,\n    //             n.orderType\n    //         )\n    //     );\n\n    //     storageT.unregisterPendingNftOrder(a.orderId);\n    // }\n\n    function executeNftCloseOrderCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingNftOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingNftOrder memory o = storageT\n        //     .reqID_pendingNftOrder(a.orderId);\n\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n        //         .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trader,\n            o.pairIndex,\n            o.index\n        );\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        );\n\n        CancelReason cancelReason = a.price == 0\n            ? CancelReason.MARKET_CLOSED\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n            Values memory v;\n            v.levPosWETH = t.positionSizeWETH * t.leverage;\n            v.posWETH = v.levPosWETH / t.leverage;\n\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        v.posWETH,\n                        t.leverage\n                    )\n                );\n            }\n\n            if (o.orderType == StorageInterface.LimitOrder.PAR_LIQ) {\n                v.liqPrice = borrowingFees.getTradePartialLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        v.posWETH,\n                        t.leverage\n                    )\n                );\n            }\n\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\n                ? t.tp\n                : (\n                    o.orderType == StorageInterface.LimitOrder.SL\n                        ? t.sl\n                        : v.liqPrice\n                );\n\n            v.exactExecution =\n                // v.price > 0 &&\n                // a.low <= v.price &&\n                // a.high >= v.price;\n                v.price == a.price;\n            if (v.exactExecution) {\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (v.posWETH * liquidationFeeP) / uint256(100)\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\n                    ? (v.posWETH * parLiquidationFeeP) / uint256(100)\n                    : (v.levPosWETH *\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\n                        100 /\n                        PRECISION;\n            } else {\n                // revert(\"only exact execution allowed\");\n                v.price = a.price;\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\n                            ? (v.posWETH * liquidationFeeP) / uint256(100)\n                            : 0\n                    )\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\n                    ? (\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\n                            ? (v.posWETH * parLiquidationFeeP) / uint256(100)\n                            : 0\n                    )\n                    : (\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\n                            t.tp > 0 &&\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\n                                t.sl > 0 &&\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\n                            ? (v.levPosWETH *\n                                pairsStored.pairNftLimitOrderFeeP(\n                                    t.pairIndex\n                                )) /\n                                100 /\n                                PRECISION\n                            : 0\n                    );\n            }\n\n            cancelReason = v.reward1 == 0\n                ? CancelReason.NOT_HIT\n                : CancelReason.NONE;\n\n            // If can be triggered\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    v.price,\n                    t.buy,\n                    t.leverage\n                );\n                // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n                v.WETHSentToTrader = o.orderType !=\n                    StorageInterface.LimitOrder.PAR_LIQ\n                    ? unregisterTrade(\n                        t,\n                        false,\n                        v.profitP,\n                        v.posWETH,\n                        i.openInterestWETH,\n                        o.orderType == StorageInterface.LimitOrder.LIQ\n                            ? v.reward1\n                            : (v.levPosWETH *\n                                pairsStored.pairCloseFeeP(t.pairIndex)) /\n                                100 /\n                                PRECISION,\n                        v.reward1\n                    )\n                    : updateTrade(\n                        t,\n                        v.profitP,\n                        v.posWETH,\n                        i.openInterestWETH,\n                        v.reward1,\n                        v.reward1,\n                        a.price\n                    );\n\n                // Convert NFT bot fee from WETH to token value\n                // v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\n\n                // nftRewards.distributeNftReward(\n                //     triggeredLimitId,\n                //     v.reward2,\n                //     v.tokenPriceWETH\n                // );\n\n                // storageT.increaseNftRewards(o.nftId, v.reward2);\n\n                emit NftBotFeeCharged(t.trader, v.reward1);\n\n                emit LimitExecuted(\n                    a.orderId,\n                    o.index,\n                    t,\n                    o.nftHolder,\n                    o.orderType,\n                    v.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader,\n                    v.exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(\n                a.orderId,\n                o.nftHolder,\n                o.orderType,\n                cancelReason\n            );\n        }\n\n        // nftRewards.unregisterTrigger(triggeredLimitId);\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    // Shared code between market & limit callbacks\n    function registerTrade(\n        StorageInterface.Trade memory trade,\n        uint nftId,\n        uint limitIndex\n    ) private returns (StorageInterface.Trade memory, uint) {\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        );\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        Values memory v;\n\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\n        //     // and before volumeReferredWETH increases\n        //     v.posWETH =\n        //         (v.levPosWETH *\n        //             (100 *\n        //                 PRECISION -\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\n        //         100 /\n        //         PRECISION;\n\n        //     v.reward1 = referrals.distributePotentialReward(\n        //         trade.trader,\n        //         v.levPosWETH,\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\n        //         v.tokenPriceWETH\n        //     );\n\n        //     sendToVault(v.reward1, trade.trader);\n        //     trade.positionSizeWETH -= v.reward1;\n\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\n        // }\n\n        // // 2. Charge opening fee - referral fee (if applicable)\n        // v.reward2 = storageT.handleDevGovFees(\n        //     trade.pairIndex,\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\n        //     true,\n        //     true\n        // );\n\n        // trade.positionSizeWETH -= v.reward2;\n\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\n\n        // // 3. Charge NFT / SSS fee\n        // v.reward2 =\n        //     (v.levPosWETH *\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\n        //     100 /\n        //     PRECISION;\n        // trade.positionSizeWETH -= v.reward2;\n\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\n        // if (nftId < 1500) {\n        //     sendToVault(v.reward2, trade.trader);\n\n        //     // Convert NFT bot fee from WETH to token value\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\n\n        //     nftRewards.distributeNftReward(\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n        //             trade.trader,\n        //             trade.pairIndex,\n        //             limitIndex,\n        //             StorageInterface.LimitOrder.OPEN\n        //         ),\n        //         v.reward3,\n        //         v.tokenPriceWETH\n        //     );\n        //     storageT.increaseNftRewards(nftId, v.reward3);\n\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\n\n        //     // 3.2 Distribute SSS fee (if applicable)\n        // } else {\n        //     distributeStakingReward(trade.trader, v.reward2);\n        // }\n\n        // 4. Set trade final details\n        trade.index = storageT.firstEmptyTradeIndex(\n            trade.trader,\n            trade.pairIndex\n        );\n\n        // trade.initialPosToken =\n        //     (trade.positionSizeWETH * PRECISION) /\n        //     v.tokenPriceWETH;\n\n        trade.tp = correctTp(\n            trade.openPrice,\n            trade.leverage,\n            trade.tp,\n            trade.buy\n        );\n        trade.sl = correctSl(\n            trade.openPrice,\n            trade.leverage,\n            trade.sl,\n            trade.buy\n        );\n\n        // 5. Call other contracts\n        pairInfos.storeTradeInitialAccFees(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy\n        );\n        pairsStored.updateGroupCollateral(\n            trade.pairIndex,\n            trade.positionSizeWETH,\n            trade.buy,\n            true\n        );\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.positionSizeWETH * trade.leverage,\n            true,\n            trade.buy\n        );\n\n        // 6. Store final trade in storage contract\n        storageT.storeTrade(\n            trade,\n            StorageInterface.TradeInfo(\n                0,\n                v.tokenPriceWETH,\n                trade.positionSizeWETH * trade.leverage,\n                0,\n                0,\n                false\n            )\n        );\n\n        // 7. Store tradeLastUpdated\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\n            trade.pairIndex\n        ][trade.index][TradeType.MARKET];\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\n        lastUpdated.tp = currBlock;\n        lastUpdated.sl = currBlock;\n        lastUpdated.created = currBlock;\n\n        return (trade, v.tokenPriceWETH);\n    }\n\n    function unregisterTrade(\n        StorageInterface.Trade memory trade,\n        bool marketOrder,\n        int percentProfit, // PRECISION\n        uint currentWETHPos, // 1e18\n        uint openInterestWETH, // 1e18\n        uint closingFeeWETH, // 1e18\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\n    ) private returns (uint WETHSentToTrader) {\n        IToken vault = IToken(storageT.vault());\n        // 1. Calculate net PnL (after all closing and holding fees)\n        (WETHSentToTrader, ) = _getTradeValue(\n            trade,\n            currentWETHPos,\n            percentProfit,\n            closingFeeWETH + nftFeeWETH\n        );\n\n        // 2. Calls to other contracts\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            openInterestWETH,\n            false,\n            trade.buy\n        );\n        getPairsStorage().updateGroupCollateral(\n            trade.pairIndex,\n            openInterestWETH / trade.leverage,\n            trade.buy,\n            false\n        );\n\n        // 3. Unregister trade from storage\n\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\n        // 4.1 If collateral in storage (opened after update)\n        if (trade.positionSizeWETH > 0) {\n            Values memory v;\n\n            // 4.1.1 WETH vault reward\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\n            // transferFromStorageToAddress(address(this), v.reward2);\n            // vault.distributeReward(v.reward2);\n\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\n\n            // 4.1.2 SSS reward\n            // v.reward3 = marketOrder\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\n            //     : (closingFeeWETH * sssFeeP) / 100;\n\n            // distributeStakingReward(trade.trader, v.reward3);\n\n            // 4.1.3 Take WETH from vault if winning trade\n            // or send WETH to vault if losing trade\n\n            if (!marketOrder) {\n                v.reward2 = (nftFeeWETH * vaultFeeP) / 100;\n                sendToVault(v.reward2, trade.trader);\n\n                v.reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\n                transferFromStorageToAddress(msg.sender, v.reward3);\n            }\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\n            if (WETHSentToTrader > WETHLeftInStorage) {\n                vault.sendAssets(\n                    WETHSentToTrader - WETHLeftInStorage,\n                    trade.trader\n                );\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\n            } else {\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\n            }\n\n            // 4.2 If collateral in vault (opened before update)\n        } else {\n            vault.sendAssets(WETHSentToTrader, trade.trader);\n        }\n    }\n\n    function updateTrade(\n        StorageInterface.Trade memory trade,\n        int percentProfit, // PRECISION\n        uint currentWETHPos, // 1e18\n        uint openInterestWETH, // 1e18\n        uint closingFeeWETH, // 1e18\n        uint nftFeeWETH, // 1e18 (= SSS reward if market order)\n        uint currentPice\n    ) private returns (uint WETHSentToTrader) {\n        // 1. Calculate net PnL (after all closing and holding fees)\n        (WETHSentToTrader, ) = _getTradeValue(\n            trade,\n            currentWETHPos,\n            percentProfit,\n            0\n        );\n\n        // 2. Calls to other contracts\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            openInterestWETH,\n            true,\n            trade.buy\n        );\n        getPairsStorage().updateGroupCollateral(\n            trade.pairIndex,\n            (openInterestWETH / trade.leverage) - WETHSentToTrader,\n            trade.buy,\n            false\n        );\n\n        // send fee\n        uint256 reward2 = (nftFeeWETH * vaultFeeP) / 100;\n        sendToVault(reward2, trade.trader);\n\n        uint256 reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\n        transferFromStorageToAddress(msg.sender, reward3);\n\n        // 3. Unregister trade from storage\n\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\n\n        // create new trade\n        StorageInterface.Trade memory newTrade;\n\n        newTrade.trader = trade.trader;\n        newTrade.leverage = trade.leverage;\n        newTrade.pairIndex = trade.pairIndex;\n        newTrade.buy = trade.buy;\n        newTrade.positionSizeWETH = WETHSentToTrader;\n        newTrade.openPrice = currentPice;\n\n        newTrade.index = storageT.firstEmptyTradeIndex(\n            trade.trader,\n            trade.pairIndex\n        );\n\n        newTrade.tp = trade.tp > 0\n            ? _getUpdateTP(\n                trade.openPrice,\n                trade.tp,\n                currentPice,\n                trade.buy,\n                trade.leverage\n            )\n            : 0;\n\n        newTrade.sl = trade.sl > 0\n            ? _getUpdateSl(\n                trade.openPrice,\n                trade.sl,\n                currentPice,\n                trade.buy,\n                trade.leverage\n            )\n            : 0;\n\n        // 5. Call other contracts\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\n            address(storageT.priceAggregator())\n        );\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n        pairInfos.storeTradeInitialAccFees(\n            newTrade.trader,\n            newTrade.pairIndex,\n            newTrade.index,\n            newTrade.buy\n        );\n        pairsStored.updateGroupCollateral(\n            newTrade.pairIndex,\n            newTrade.positionSizeWETH,\n            newTrade.buy,\n            true\n        );\n        borrowingFees.handleTradeAction(\n            newTrade.trader,\n            newTrade.pairIndex,\n            newTrade.index,\n            newTrade.positionSizeWETH * newTrade.leverage,\n            true,\n            newTrade.buy\n        );\n\n        // 6. Store final trade in storage contract\n        storageT.storeTrade(\n            newTrade,\n            StorageInterface.TradeInfo(\n                0,\n                0,\n                newTrade.positionSizeWETH * newTrade.leverage,\n                0,\n                0,\n                false\n            )\n        );\n\n        // 7. Store tradeLastUpdated\n        LastUpdated storage lastUpdated = tradeLastUpdated[newTrade.trader][\n            newTrade.pairIndex\n        ][newTrade.index][TradeType.MARKET]; // no limit order support.\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\n        lastUpdated.tp = currBlock;\n        lastUpdated.sl = currBlock;\n        lastUpdated.created = currBlock;\n    }\n\n    // Utils (external)\n    function setTradeLastUpdated(\n        SimplifiedTradeId calldata _id,\n        LastUpdated memory _lastUpdated\n    ) external onlyTrading {\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _lastUpdated;\n    }\n\n    function setTradeData(\n        SimplifiedTradeId calldata _id,\n        TradeData memory _tradeData\n    ) external onlyTrading {\n        tradeData[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _tradeData;\n    }\n\n    // Utils (getters)\n    function _getTradeValue(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit, // PRECISION\n        uint closingFees // 1e18\n    ) private returns (uint value, uint borrowingFee) {\n        int netProfitP;\n\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\n            trade,\n            currentWETHPos,\n            percentProfit\n        );\n\n        value = pairInfos.getTradeValue(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy,\n            currentWETHPos,\n            trade.leverage,\n            netProfitP,\n            closingFees\n        );\n\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\n    }\n\n    function _getBorrowingFeeAdjustedPercentProfit(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit // PRECISION\n    ) private view returns (int netProfitP, uint borrowingFee) {\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\n            BorrowingFeesInterface.BorrowingFeeInput(\n                trade.trader,\n                trade.pairIndex,\n                trade.index,\n                trade.buy,\n                currentWETHPos,\n                trade.leverage\n            )\n        );\n        netProfitP =\n            percentProfit -\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\n    }\n\n    function withinMaxLeverage(\n        uint pairIndex,\n        uint leverage\n    ) private view returns (bool) {\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\n        return\n            pairMaxLev == 0\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\n                : leverage <= pairMaxLev;\n    }\n\n    function withinExposureLimits(\n        uint pairIndex,\n        bool buy,\n        uint positionSizeWETH,\n        uint leverage\n    ) private view returns (bool) {\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\n        return\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\n                levPositionSizeWETH <=\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\n    }\n\n    function currentPercentProfit(\n        uint openPrice,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) private view returns (int p) {\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\n\n        p = openPrice > 0\n            ? ((\n                buy\n                    ? int(currentPrice) - int(openPrice)\n                    : int(openPrice) - int(currentPrice)\n            ) *\n                100 *\n                int(PRECISION) *\n                int(leverage)) / int(openPrice)\n            : int(0);\n        p = p > maxPnlP ? maxPnlP : p;\n    }\n\n    function correctTp(\n        uint openPrice,\n        uint leverage,\n        uint tp,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            tp == 0 ||\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\n            int(MAX_GAIN_P) * int(PRECISION)\n        ) {\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\n\n            return\n                buy\n                    ? openPrice + tpDiff\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\n        }\n        return tp;\n    }\n\n    function correctSl(\n        uint openPrice,\n        uint leverage,\n        uint sl,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            sl > 0 &&\n            currentPercentProfit(openPrice, sl, buy, leverage) <\n            int(MAX_SL_P) * int(PRECISION) * -1\n        ) {\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\n            return buy ? openPrice - slDiff : openPrice + slDiff;\n        }\n\n        return sl;\n    }\n\n    function marketExecutionPrice(\n        uint price,\n        uint spreadP,\n        uint spreadReductionP,\n        bool long\n    ) private pure returns (uint) {\n        uint priceDiff = (price *\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\n            100 /\n            PRECISION;\n\n        return long ? price + priceDiff : price - priceDiff;\n    }\n\n    function _openTradePrep(\n        OpenTradePrepInput memory c\n    )\n        private\n        view\n        returns (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        )\n    {\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\n            marketExecutionPrice(\n                c.executionPrice,\n                c.spreadP,\n                c.spreadReductionP,\n                c.buy\n            ),\n            c.pairIndex,\n            c.buy,\n            c.positionSize * c.leverage\n        );\n\n        uint maxSlippage = c.maxSlippageP > 0\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\n            : c.wantedPrice / 100; // 1% by default\n        cancelReason = isPaused\n            ? CancelReason.PAUSED\n            : (\n                c.marketPrice == 0\n                    ? CancelReason.MARKET_CLOSED\n                    : (\n                        c.buy\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\n                    )\n                    ? CancelReason.SLIPPAGE\n                    : (c.tp > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact >= c.tp\n                                : priceAfterImpact <= c.tp\n                        ))\n                    ? CancelReason.TP_REACHED\n                    : (c.sl > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact <= c.sl\n                                : priceAfterImpact >= c.sl\n                        ))\n                    ? CancelReason.SL_REACHED\n                    : !withinExposureLimits(\n                        c.pairIndex,\n                        c.buy,\n                        c.positionSize,\n                        c.leverage\n                    )\n                    ? CancelReason.EXPOSURE_LIMITS\n                    : priceImpactP * c.leverage >\n                        pairInfos.maxNegativePnlOnOpenP()\n                    ? CancelReason.PRICE_IMPACT\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\n                    ? CancelReason.MAX_LEVERAGE\n                    : CancelReason.NONE\n            );\n    }\n\n    function getPendingMarketOrder(\n        uint orderId\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\n        return storageT.getPendingMarketOrder(orderId);\n    }\n\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\n        return\n            (AggregatorInterfaceV1_4(address(storageT.priceAggregator())))\n                .pairsStorage();\n    }\n\n    function getOpenTrade(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterface.Trade memory t) {\n        return storageT.getOpenTrades(trader, pairIndex, index);\n    }\n\n    function getOpenTradeInfo(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (Storage.TradeInfo memory o) {\n        return storageT.getOpenTradesInfo(trader, pairIndex, index);\n    }\n\n    // Utils (private)\n    function distributeStakingReward(address trader, uint amountWETH) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        staking.distributeRewardWETH(amountWETH);\n        emit SssFeeCharged(trader, amountWETH);\n    }\n\n    function sendToVault(uint amountWETH, address trader) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        IToken(storageT.vault()).receiveAssets(amountWETH, trader);\n    }\n\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\n        storageT.transferWETH(address(storageT), to, amountWETH);\n    }\n\n    // Public views\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\n        uint len = getPairsStorage().pairsCount();\n        uint[] memory lev = new uint[](len);\n\n        for (uint i; i < len; ) {\n            lev[i] = pairMaxLeverage[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return lev;\n    }\n\n    function giveApproval() external {\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\n    }\n\n    function _getUpdateSl(\n        uint openPrice,\n        uint oldSl,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) internal pure returns (uint256 newSL) {\n        int slP = ((\n            buy ? int(oldSl) - int(openPrice) : int(openPrice) - int(oldSl)\n        ) *\n            100 *\n            int(PRECISION) *\n            int(leverage)) / int(openPrice);\n\n        int slDelta = (((slP * int(currentPrice)) / 100) / int(PRECISION)) /\n            int(leverage);\n\n        newSL = buy\n            ? currentPrice - uint(slDelta)\n            : currentPrice + uint(slDelta);\n    }\n\n    function _getUpdateTP(\n        uint openPrice,\n        uint oldTp,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) internal pure returns (uint256 newTp) {\n        int tPP = ((\n            buy ? int(oldTp) - int(openPrice) : int(openPrice) - int(oldTp)\n        ) *\n            100 *\n            int(PRECISION) *\n            int(leverage)) / int(openPrice);\n        int tPDelta = (((tPP * int(currentPrice)) / 100) / int(PRECISION)) /\n            int(leverage);\n\n        newTp = buy\n            ? currentPrice + uint(tPDelta)\n            : currentPrice - uint(tPDelta);\n    }\n\n    function getTradePnl(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (int256 pnl) {\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\n            trader,\n            pairIndex,\n            index\n        );\n        (uint256 currentPrice, ) = (storageT.oracle()).getPrice(pairIndex);\n        int256 profitP = currentPercentProfit(\n            t.openPrice,\n            currentPrice,\n            t.buy,\n            t.leverage\n        );\n        (int netProfitP, ) = _getBorrowingFeeAdjustedPercentProfit(\n            t,\n            t.positionSizeWETH,\n            profitP\n        );\n        int fundingFee = pairInfos.getTradeFundingFee(\n            t.trader,\n            t.pairIndex,\n            t.index,\n            t.buy,\n            t.positionSizeWETH,\n            t.leverage\n        );\n        uint256 tradeValue = pairInfos.getTradeValuePure(\n            t.positionSizeWETH,\n            netProfitP,\n            0,\n            fundingFee,\n            0\n        );\n\n        pnl = int(tradeValue) - int(t.positionSizeWETH);\n    }\n\n    function setLiquidatorFeeP(uint256 _feeP) external {\n        liquidatorFeeP = _feeP;\n    }\n\n    function setVaultFeeP(uint256 _feeP) external {\n        vaultFeeP = _feeP;\n    }\n\n    function setLiquidationFeeP(uint _feeP) external {\n        liquidationFeeP = _feeP;\n    }\n\n    function setParLiquidationFeeP(uint _feeP) external {\n        parLiquidationFeeP = _feeP;\n    }\n}\n"
    },
    "contracts/TWAPPriceGetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/TickMath.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\nimport \"@uniswap/v3-core/contracts/libraries/FullMath.sol\";\n\nabstract contract TWAPPriceGetter {\n    // Constants\n    uint32 constant MIN_TWAP_PERIOD = 1 hours / 2;\n    uint32 constant MAX_TWAP_PERIOD = 4 hours;\n\n    uint immutable precision;\n    address public immutable token;\n\n    // Adjustable parameters\n    IUniswapV3Pool public uniV3Pool;\n    uint32 public twapInterval;\n\n    // State\n    bool public isGnsToken0InLp;\n\n    // Events\n    event UniV3PoolUpdated(IUniswapV3Pool newValue);\n    event TwapIntervalUpdated(uint32 newValue);\n\n    constructor(\n        IUniswapV3Pool _uniV3Pool,\n        address _token,\n        uint32 _twapInterval,\n        uint _precision\n    ) {\n        require(\n            address(_uniV3Pool) != address(0) &&\n                _twapInterval >= MIN_TWAP_PERIOD &&\n                _twapInterval <= MAX_TWAP_PERIOD &&\n                _precision > 0,\n            \"WRONG_TWAP_CONSTRUCTOR\"\n        );\n\n        uniV3Pool = _uniV3Pool;\n        token = _token;\n        twapInterval = _twapInterval;\n        precision = _precision;\n\n        isGnsToken0InLp = uniV3Pool.token0() == _token;\n    }\n\n    // Manage variables\n    function _updateUniV3Pool(IUniswapV3Pool _uniV3Pool) internal {\n        require(address(_uniV3Pool) != address(0), \"WRONG_VALUE\");\n        uniV3Pool = _uniV3Pool;\n        isGnsToken0InLp = uniV3Pool.token0() == token;\n        emit UniV3PoolUpdated(_uniV3Pool);\n    }\n\n    function _updateTwapInterval(uint32 _twapInterval) internal {\n        require(\n            _twapInterval >= MIN_TWAP_PERIOD &&\n                _twapInterval <= MAX_TWAP_PERIOD,\n            \"WRONG_VALUE\"\n        );\n        twapInterval = _twapInterval;\n        emit TwapIntervalUpdated(_twapInterval);\n    }\n\n    // Returns price with \"precision\" decimals\n    // https://github.com/Uniswap/v3-periphery/blob/main/contracts/libraries/OracleLibrary.sol\n    function tokenPriceWETH() public view returns (uint price) {\n        uint32[] memory secondsAgos = new uint32[](2);\n        secondsAgos[0] = twapInterval;\n        secondsAgos[1] = 0;\n\n        (int56[] memory tickCumulatives, ) = uniV3Pool.observe(secondsAgos);\n\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\n        int56 twapIntervalInt = int56(int32(twapInterval));\n\n        int24 arithmeticMeanTick = int24(\n            tickCumulativesDelta / twapIntervalInt\n        );\n        // Always round to negative infinity\n        if (\n            tickCumulativesDelta < 0 &&\n            (tickCumulativesDelta % twapIntervalInt != 0)\n        ) arithmeticMeanTick--;\n\n        uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(arithmeticMeanTick);\n        price =\n            (FullMath.mulDiv(sqrtPriceX96, sqrtPriceX96, FixedPoint96.Q96) *\n                precision) /\n            2 ** 96;\n\n        if (!isGnsToken0InLp) {\n            price = precision ** 2 / price;\n        }\n    }\n}\n"
    },
    "contracts/Vault.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.15;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/IToken.sol\";\nimport \"./interfaces/INft.sol\";\nimport \"./interfaces/IOpenTradesPnlFeed.sol\";\nimport \"./libraries/ChainUtils.sol\";\n\ncontract Vault is\n    ERC20Upgradeable,\n    ERC4626Upgradeable,\n    OwnableUpgradeable,\n    IToken\n{\n    using MathUpgradeable for uint;\n\n    // Contracts & Addresses (constant)\n    // address public Token;\n    INft public lockedDepositNft;\n\n    // Contracts & Addresses (adjustable)\n    address public manager; // 3-day timelock contract\n    address public admin; // bypasses timelock, access to emergency functions\n\n    address public pnlHandler;\n    IOpenTradesPnlFeed public openTradesPnlFeed;\n    // PriceProvider public PriceProvider;\n\n    // struct PriceProvider {\n    //     address addr;\n    //     bytes signature;\n    // }\n\n    // Parameters (constant)\n    uint constant PRECISION = 1e18; // 18 decimals (acc values & price)\n    uint constant PRECISION_2 = 1e40; // 40 decimals (acc block weighted market cap)\n    uint constant _PRECISION = 1e10; // 10 decimals (/asset oracle)\n    uint constant MIN_WETHLY_ACC_PNL_DELTA = PRECISION / 10; // 0.1 (price delta)\n    uint constant MAX_SUPPLY_INCREASE_DAILY_P = 50 * PRECISION; // 50% / day (when under collat)\n    uint constant MAX_LOSSES_BURN_P = 25 * PRECISION; // 25% of all losses\n    uint constant MAX__SUPPLY_MINT_DAILY_P = PRECISION / 20; // 0.05% / day (18.25% / yr max)\n    uint constant MAX_DISCOUNT_P = 10 * PRECISION; // 10%\n    uint public MIN_LOCK_DURATION; // min locked asset deposit duration\n    uint constant MAX_LOCK_DURATION = 365 days; // max locked asset deposit duration\n    uint[] WITHDRAW_EPOCHS_LOCKS; // epochs withdraw locks at over collat thresholds\n\n    // Parameters (adjustable)\n    uint public maxAccOpenPnlDelta; // PRECISION (max price delta on new epochs from open pnl)\n    uint public maxdailyAccPnlDelta; // PRECISION (max WETHly price delta from closed pnl)\n    uint[2] public withdrawLockThresholdsP; // PRECISION (% of over collat, used with WITHDRAW_EPOCHS_LOCKS)\n    uint public maxSupplyIncreaseDailyP; // PRECISION (% per day, when under collat)\n    uint public lossesBurnP; // PRECISION (% of all losses)\n    uint public maxSupplyMintDailyP; // PRECISION (% of  supply)\n    uint public maxDiscountP; // PRECISION (%, maximum discount for locked deposits)\n    uint public maxDiscountThresholdP; // PRECISION (maximum collat %, for locked deposits)\n\n    // Price state\n    uint public shareToAssetsPrice; // PRECISION\n    int public accPnlPerTokenUsed; // PRECISION (snapshot of accPnlPerToken)\n    int public accPnlPerToken; // PRECISION (updated in real-time)\n    uint public accRewardsPerToken; // PRECISION\n\n    // Closed Pnl state\n    int public dailyAccPnlDelta; // PRECISION\n    uint public lastDailyAccPnlDeltaReset; // timestamp\n\n    // Epochs state (withdrawals)\n    uint public currentEpoch; // global id\n    uint public currentEpochStart; // timestamp\n    uint public currentEpochPositiveOpenPnl; // 1e18\n\n    // Deposit / Withdraw state\n    uint public currentMaxSupply; // 1e18\n    uint public lastMaxSupplyUpdate; // timestamp\n    mapping(address => mapping(uint => uint)) public withdrawRequests; // owner => unlock epoch => shares\n\n    // Locked deposits state\n    uint public lockedDepositsCount; // global id\n    mapping(uint => LockedDeposit) public lockedDeposits;\n\n    // Deplete / Refill state\n    uint public assetsToDeplete; // 1e18\n    uint public dailyMinted; // 1e18\n    uint public lastdailyMintedReset; // timestamp\n\n    // Statistics (not used for contract logic)\n    uint public totalDeposited; // 1e18 (assets)\n    int public totalClosedPnl; // 1e18 (assets)\n    uint public totalRewards; // 1e18 (assets)\n    int public totalLiability; // 1e18 (assets)\n    uint public totalLockedDiscounts; // 1e18 (assets)\n    uint public totalDiscounts; // 1e18 (assets)\n    // uint public totalDepleted; // 1e18 (assets)\n    // uint public totalDepleted; // 1e18 ()\n    // uint public totalRefilled; // 1e18 (assets)\n    // uint public totalRefilled; // 1e18 ()\n\n    // Useful acc values\n    uint public accBlockWeightedMarketCap; // 1e40, acc sum of (blocks elapsed / market cap)\n    uint public accBlockWeightedMarketCapLastStored; // block\n\n    // Events\n    event AddressParamUpdated(string name, address newValue);\n    // event PriceProviderUpdated(PriceProvider newValue);\n    event NumberParamUpdated(string name, uint newValue);\n    event WithdrawLockThresholdsPUpdated(uint[2] newValue);\n\n    event CurrentMaxSupplyUpdated(uint newValue);\n    event dailyAccPnlDeltaReset();\n    event ShareToAssetsPriceUpdated(uint newValue);\n    event OpenTradesPnlFeedCallFailed();\n\n    event WithdrawRequested(\n        address indexed sender,\n        address indexed owner,\n        uint shares,\n        uint currEpoch,\n        uint indexed unlockEpoch\n    );\n    event WithdrawCanceled(\n        address indexed sender,\n        address indexed owner,\n        uint shares,\n        uint currEpoch,\n        uint indexed unlockEpoch\n    );\n\n    event DepositLocked(\n        address indexed sender,\n        address indexed owner,\n        uint depositId,\n        LockedDeposit d\n    );\n    event DepositUnlocked(\n        address indexed sender,\n        address indexed receiver,\n        address indexed owner,\n        uint depositId,\n        LockedDeposit d\n    );\n\n    event RewardDistributed(address indexed sender, uint assets);\n\n    event AssetsSent(\n        address indexed sender,\n        address indexed receiver,\n        uint assets\n    );\n    event AssetsReceived(\n        address indexed sender,\n        address indexed user,\n        uint assets,\n        uint assetsLessDeplete\n    );\n\n    event Depleted(address indexed sender, uint assets, uint amount);\n    event Refilled(address indexed sender, uint assets, uint amount);\n\n    event AccPnlPerTokenUsedUpdated(\n        address indexed sender,\n        uint indexed newEpoch,\n        uint prevPositiveOpenPnl,\n        uint newPositiveOpenPnl,\n        uint newEpochPositiveOpenPnl,\n        int newAccPnlPerTokenUsed\n    );\n\n    event AccBlockWeightedMarketCapStored(uint newAccValue);\n\n    // Prevent stack too deep error\n    struct ContractAddresses {\n        address asset;\n        address owner; // 2-week timelock contract\n        address manager; // 3-day timelock contract\n        address admin; // bypasses timelock, access to emergency functions\n        // address Token;\n        address lockedDepositNft;\n        address pnlHandler;\n        address openTradesPnlFeed;\n        // PriceProvider PriceProvider;\n    }\n\n    // Initializer function called when this contract is deployed\n    function initialize(\n        string memory _name,\n        string memory _symbol,\n        ContractAddresses memory _contractAddresses,\n        uint _MIN_LOCK_DURATION,\n        uint _maxAccOpenPnlDelta,\n        uint _maxdailyAccPnlDelta,\n        uint[2] memory _withdrawLockThresholdsP,\n        uint _maxSupplyIncreaseDailyP,\n        uint _lossesBurnP,\n        uint _maxSupplyMintDailyP,\n        uint _maxDiscountP,\n        uint _maxDiscountThresholdP\n    ) external initializer {\n        require(\n            _contractAddresses.asset != address(0) &&\n                _contractAddresses.owner != address(0) &&\n                _contractAddresses.manager != address(0) &&\n                _contractAddresses.admin != address(0) &&\n                _contractAddresses.owner != _contractAddresses.manager &&\n                _contractAddresses.manager != _contractAddresses.admin &&\n                /*_contractAddresses.Token != address(0) &&*/\n                _contractAddresses.lockedDepositNft != address(0) &&\n                _contractAddresses.pnlHandler != address(0) &&\n                _contractAddresses.openTradesPnlFeed != address(0) &&\n                /*_contractAddresses.PriceProvider.addr != address(0) &&*/\n                /*_contractAddresses.PriceProvider.signature.length > 0 &&*/\n                _maxdailyAccPnlDelta >= MIN_WETHLY_ACC_PNL_DELTA &&\n                _withdrawLockThresholdsP[1] > _withdrawLockThresholdsP[0] &&\n                _maxSupplyIncreaseDailyP <= MAX_SUPPLY_INCREASE_DAILY_P &&\n                _lossesBurnP <= MAX_LOSSES_BURN_P &&\n                _maxSupplyMintDailyP <= MAX__SUPPLY_MINT_DAILY_P &&\n                _maxDiscountP <= MAX_DISCOUNT_P &&\n                _maxDiscountThresholdP >= 100 * PRECISION,\n            \"WRONG_PARAMS\"\n        );\n\n        __ERC20_init(_name, _symbol);\n        __ERC4626_init(IERC20MetadataUpgradeable(_contractAddresses.asset));\n        _transferOwnership(_contractAddresses.owner);\n\n        // Token = _contractAddresses.Token;\n        lockedDepositNft = INft(_contractAddresses.lockedDepositNft);\n        manager = _contractAddresses.manager;\n        admin = _contractAddresses.admin;\n        pnlHandler = _contractAddresses.pnlHandler;\n        openTradesPnlFeed = IOpenTradesPnlFeed(\n            _contractAddresses.openTradesPnlFeed\n        );\n        // PriceProvider = _contractAddresses.PriceProvider;\n\n        MIN_LOCK_DURATION = _MIN_LOCK_DURATION;\n\n        maxAccOpenPnlDelta = _maxAccOpenPnlDelta;\n        maxdailyAccPnlDelta = _maxdailyAccPnlDelta;\n        withdrawLockThresholdsP = _withdrawLockThresholdsP;\n        maxSupplyIncreaseDailyP = _maxSupplyIncreaseDailyP;\n        lossesBurnP = _lossesBurnP;\n        maxSupplyMintDailyP = _maxSupplyMintDailyP;\n        maxDiscountP = _maxDiscountP;\n        maxDiscountThresholdP = _maxDiscountThresholdP;\n\n        shareToAssetsPrice = PRECISION;\n        currentEpoch = 1;\n        currentEpochStart = block.timestamp;\n        WITHDRAW_EPOCHS_LOCKS = [3, 2, 1];\n    }\n\n    function initializeV2() external reinitializer(2) {\n        storeAccBlockWeightedMarketCap();\n        totalDeposited += totalRewards; // include all already distributed rewards in totalDeposited\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(_msgSender() == manager, \"ONLY_MANAGER\");\n        _;\n    }\n\n    modifier checks(uint assetsOrShares) {\n        require(shareToAssetsPrice > 0, \"PRICE_0\");\n        require(assetsOrShares > 0, \"VALUE_0\");\n        _;\n    }\n\n    modifier validDiscount(uint lockDuration) {\n        require(maxDiscountP > 0, \"NO_ACTIVE_DISCOUNT\");\n        require(lockDuration >= MIN_LOCK_DURATION, \"BELOW_MIN_LOCK_DURATION\");\n        require(lockDuration <= MAX_LOCK_DURATION, \"ABOVE_MAX_LOCK_DURATION\");\n        _;\n    }\n\n    // Manage addresses\n    function transferOwnership(address newOwner) public override onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        require(newOwner != manager && newOwner != admin, \"WRONG_VALUE\");\n        _transferOwnership(newOwner);\n    }\n\n    function updateManager(address newValue) external onlyOwner {\n        require(newValue != address(0), \"ADDRESS_0\");\n        require(newValue != owner() && newValue != admin, \"WRONG_VALUE\");\n        manager = newValue;\n        emit AddressParamUpdated(\"manager\", newValue);\n    }\n\n    function updateAdmin(address newValue) external onlyManager {\n        require(newValue != address(0), \"ADDRESS_0\");\n        require(newValue != owner() && newValue != manager, \"WRONG_VALUE\");\n        admin = newValue;\n        emit AddressParamUpdated(\"admin\", newValue);\n    }\n\n    function updatePnlHandler(address newValue) external onlyOwner {\n        require(newValue != address(0), \"ADDRESS_0\");\n        pnlHandler = newValue;\n        emit AddressParamUpdated(\"pnlHandler\", newValue);\n    }\n\n    // function updatePriceProvider(PriceProvider memory newValue) external onlyManager {\n    //     require(newValue.addr != address(0), \"ADDRESS_0\");\n    //     require(newValue.signature.length > 0, \"BYTES_0\");\n    //     PriceProvider = newValue;\n    //     emit PriceProviderUpdated(newValue);\n    // }\n\n    function updateOpenTradesPnlFeed(address newValue) external onlyOwner {\n        require(newValue != address(0), \"ADDRESS_0\");\n        openTradesPnlFeed = IOpenTradesPnlFeed(newValue);\n        emit AddressParamUpdated(\"openTradesPnlFeed\", newValue);\n    }\n\n    // Manage parameters\n    function updateMaxAccOpenPnlDelta(uint newValue) external onlyOwner {\n        maxAccOpenPnlDelta = newValue;\n        emit NumberParamUpdated(\"maxAccOpenPnlDelta\", newValue);\n    }\n\n    function updateMaxdailyAccPnlDelta(uint newValue) external onlyManager {\n        require(newValue >= MIN_WETHLY_ACC_PNL_DELTA, \"BELOW_MIN\");\n        maxdailyAccPnlDelta = newValue;\n        emit NumberParamUpdated(\"maxdailyAccPnlDelta\", newValue);\n    }\n\n    function updateWithdrawLockThresholdsP(\n        uint[2] memory newValue\n    ) external onlyOwner {\n        require(newValue[1] > newValue[0], \"WRONG_VALUES\");\n        withdrawLockThresholdsP = newValue;\n        emit WithdrawLockThresholdsPUpdated(newValue);\n    }\n\n    function updatemaxSupplyIncreaseDailyP(uint newValue) external onlyManager {\n        require(newValue <= MAX_SUPPLY_INCREASE_DAILY_P, \"ABOVE_MAX\");\n        maxSupplyIncreaseDailyP = newValue;\n        emit NumberParamUpdated(\"maxSupplyIncreaseDailyP\", newValue);\n    }\n\n    function updateLossesBurnP(uint newValue) external onlyManager {\n        require(newValue <= MAX_LOSSES_BURN_P, \"ABOVE_MAX\");\n        lossesBurnP = newValue;\n        emit NumberParamUpdated(\"lossesBurnP\", newValue);\n    }\n\n    function updatemaxSupplyMintDailyP(uint newValue) external onlyManager {\n        require(newValue <= MAX__SUPPLY_MINT_DAILY_P, \"ABOVE_MAX\");\n        maxSupplyMintDailyP = newValue;\n        emit NumberParamUpdated(\"maxSupplyMintDailyP\", newValue);\n    }\n\n    function updateMaxDiscountP(uint newValue) external onlyManager {\n        require(newValue <= MAX_DISCOUNT_P, \"ABOVE_MAX_DISCOUNT\");\n        maxDiscountP = newValue;\n        emit NumberParamUpdated(\"maxDiscountP\", newValue);\n    }\n\n    function updateMaxDiscountThresholdP(uint newValue) external onlyManager {\n        require(newValue >= 100 * PRECISION, \"BELOW_MIN\");\n        maxDiscountThresholdP = newValue;\n        emit NumberParamUpdated(\"maxDiscountThresholdP\", newValue);\n    }\n\n    // View helper functions\n    function maxAccPnlPerToken() public view returns (uint) {\n        // PRECISION\n        return PRECISION + accRewardsPerToken;\n    }\n\n    function collateralizationP() public view returns (uint) {\n        // PRECISION (%)\n        uint _maxAccPnlPerToken = maxAccPnlPerToken();\n\n        return\n            ((\n                accPnlPerTokenUsed > 0\n                    ? (_maxAccPnlPerToken - uint(accPnlPerTokenUsed))\n                    : (_maxAccPnlPerToken + uint(accPnlPerTokenUsed * (-1)))\n            ) *\n                100 *\n                PRECISION) / _maxAccPnlPerToken;\n    }\n\n    // function TokenToAssetsPrice() public view returns (uint price) {\n    //     // _PRECISION\n    //     (bool success, bytes memory result) = PriceProvider.addr.staticcall(PriceProvider.signature);\n\n    //     require(success == true, \"_PRICE_CALL_FAILED\");\n    //     (price) = abi.decode(result, (uint));\n\n    //     require(price > 0, \"_TOKEN_PRICE_0\");\n    // }\n\n    function withdrawEpochsTimelock() public view returns (uint) {\n        uint collatP = collateralizationP();\n        uint overCollatP = (collatP -\n            MathUpgradeable.min(collatP, 100 * PRECISION));\n\n        return\n            overCollatP > withdrawLockThresholdsP[1]\n                ? WITHDRAW_EPOCHS_LOCKS[2]\n                : (\n                    overCollatP > withdrawLockThresholdsP[0]\n                        ? WITHDRAW_EPOCHS_LOCKS[1]\n                        : WITHDRAW_EPOCHS_LOCKS[0]\n                );\n    }\n\n    function lockDiscountP(\n        uint collatP,\n        uint lockDuration\n    ) public view returns (uint) {\n        return\n            ((\n                collatP <= 100 * PRECISION\n                    ? maxDiscountP\n                    : (\n                        collatP <= maxDiscountThresholdP\n                            ? (maxDiscountP *\n                                (maxDiscountThresholdP - collatP)) /\n                                (maxDiscountThresholdP - 100 * PRECISION)\n                            : 0\n                    )\n            ) * lockDuration) / MAX_LOCK_DURATION;\n    }\n\n    function totalSharesBeingWithdrawn(\n        address owner\n    ) public view returns (uint shares) {\n        for (\n            uint i = currentEpoch;\n            i <= currentEpoch + WITHDRAW_EPOCHS_LOCKS[0];\n            i++\n        ) {\n            shares += withdrawRequests[owner][i];\n        }\n    }\n\n    function getPendingAccBlockWeightedMarketCap(\n        uint currentBlock\n    ) public view returns (uint) {\n        return\n            accBlockWeightedMarketCap +\n            ((currentBlock - accBlockWeightedMarketCapLastStored) *\n                PRECISION_2) /\n            MathUpgradeable.max(marketCap(), 1);\n    }\n\n    // Public helper functions\n    function tryUpdateCurrentMaxSupply() public {\n        if (block.timestamp - lastMaxSupplyUpdate >= 24 hours) {\n            currentMaxSupply =\n                (totalSupply() * (PRECISION * 100 + maxSupplyIncreaseDailyP)) /\n                (PRECISION * 100);\n            lastMaxSupplyUpdate = block.timestamp;\n\n            emit CurrentMaxSupplyUpdated(currentMaxSupply);\n        }\n    }\n\n    function tryResetdailyAccPnlDelta() public {\n        if (block.timestamp - lastDailyAccPnlDeltaReset >= 24 hours) {\n            dailyAccPnlDelta = 0;\n            lastDailyAccPnlDeltaReset = block.timestamp;\n\n            emit dailyAccPnlDeltaReset();\n        }\n    }\n\n    function tryNewOpenPnlRequestOrEpoch() public {\n        // Fault tolerance so that activity can continue anyway\n        (bool success, ) = address(openTradesPnlFeed).call(\n            abi.encodeWithSignature(\"newOpenPnlRequestOrEpoch()\")\n        );\n        if (!success) {\n            emit OpenTradesPnlFeedCallFailed();\n        }\n    }\n\n    function storeAccBlockWeightedMarketCap() public {\n        uint currentBlock = ChainUtils.getBlockNumber();\n        accBlockWeightedMarketCap = getPendingAccBlockWeightedMarketCap(\n            currentBlock\n        );\n        accBlockWeightedMarketCapLastStored = currentBlock;\n\n        emit AccBlockWeightedMarketCapStored(accBlockWeightedMarketCap);\n    }\n\n    // Private helper functions\n    function updateShareToAssetsPrice() private {\n        storeAccBlockWeightedMarketCap();\n\n        shareToAssetsPrice =\n            maxAccPnlPerToken() -\n            (accPnlPerTokenUsed > 0 ? uint(accPnlPerTokenUsed) : uint(0)); // PRECISION\n        emit ShareToAssetsPriceUpdated(shareToAssetsPrice);\n    }\n\n    function _assetIERC20() private view returns (IERC20Upgradeable) {\n        return IERC20Upgradeable(asset());\n    }\n\n    // Override ERC-20 functions (prevent sending to address that is withdrawing)\n    function transfer(\n        address to,\n        uint amount\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns (bool) {\n        address sender = _msgSender();\n        require(\n            totalSharesBeingWithdrawn(sender) <= balanceOf(sender) - amount,\n            \"PENDING_WITHDRAWAL\"\n        );\n        _transfer(sender, to, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint amount\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns (bool) {\n        require(\n            totalSharesBeingWithdrawn(from) <= balanceOf(from) - amount,\n            \"PENDING_WITHDRAWAL\"\n        );\n        _spendAllowance(from, _msgSender(), amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    // Override ERC-4626 view functions\n    function decimals()\n        public\n        view\n        override(ERC20Upgradeable, ERC4626Upgradeable)\n        returns (uint8)\n    {\n        return ERC4626Upgradeable.decimals();\n    }\n\n    function _convertToShares(\n        uint assets,\n        MathUpgradeable.Rounding rounding\n    ) internal view override returns (uint shares) {\n        return assets.mulDiv(PRECISION, shareToAssetsPrice, rounding);\n    }\n\n    function _convertToAssets(\n        uint shares,\n        MathUpgradeable.Rounding rounding\n    ) internal view override returns (uint assets) {\n        // Prevent overflow when called from maxDeposit with maxMint = uint.max\n        if (shares == type(uint).max && shareToAssetsPrice >= PRECISION) {\n            return shares;\n        }\n        return shares.mulDiv(shareToAssetsPrice, PRECISION, rounding);\n    }\n\n    function maxMint(address) public view override returns (uint) {\n        return\n            accPnlPerTokenUsed > 0\n                ? currentMaxSupply -\n                    MathUpgradeable.min(currentMaxSupply, totalSupply())\n                : type(uint).max;\n    }\n\n    function maxDeposit(address owner) public view override returns (uint) {\n        return _convertToAssets(maxMint(owner), MathUpgradeable.Rounding.Down);\n    }\n\n    function maxRedeem(address owner) public view override returns (uint) {\n        return\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0\n                ? MathUpgradeable.min(\n                    withdrawRequests[owner][currentEpoch],\n                    totalSupply() - 1\n                )\n                : 0;\n    }\n\n    function maxWithdraw(address owner) public view override returns (uint) {\n        return\n            _convertToAssets(maxRedeem(owner), MathUpgradeable.Rounding.Down);\n    }\n\n    // Override ERC-4626 interactions (call scaleVariables on every deposit / withdrawal)\n    function deposit(\n        uint assets,\n        address receiver\n    ) public override checks(assets) returns (uint) {\n        require(\n            assets <= maxDeposit(receiver),\n            \"ERC4626: deposit more than max\"\n        );\n\n        uint shares = previewDeposit(assets);\n        scaleVariables(shares, assets, true);\n\n        _deposit(_msgSender(), receiver, assets, shares);\n        return shares;\n    }\n\n    function mint(\n        uint shares,\n        address receiver\n    ) public override checks(shares) returns (uint) {\n        require(shares <= maxMint(receiver), \"ERC4626: mint more than max\");\n\n        uint assets = previewMint(shares);\n        scaleVariables(shares, assets, true);\n\n        _deposit(_msgSender(), receiver, assets, shares);\n\n        return assets;\n    }\n\n    function withdraw(\n        uint assets,\n        address receiver,\n        address owner\n    ) public override checks(assets) returns (uint) {\n        require(\n            assets <= maxWithdraw(owner),\n            \"ERC4626: withdraw more than max\"\n        );\n\n        uint shares = previewWithdraw(assets);\n        withdrawRequests[owner][currentEpoch] -= shares;\n\n        scaleVariables(shares, assets, false);\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n        return shares;\n    }\n\n    function redeem(\n        uint shares,\n        address receiver,\n        address owner\n    ) public override checks(shares) returns (uint) {\n        require(shares <= maxRedeem(owner), \"ERC4626: redeem more than max\");\n\n        withdrawRequests[owner][currentEpoch] -= shares;\n\n        uint assets = previewRedeem(shares);\n        scaleVariables(shares, assets, false);\n\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\n        return assets;\n    }\n\n    function scaleVariables(uint shares, uint assets, bool isDeposit) private {\n        uint supply = totalSupply();\n\n        if (accPnlPerToken < 0) {\n            accPnlPerToken =\n                (accPnlPerToken * int(supply)) /\n                (isDeposit ? int(supply + shares) : int(supply - shares));\n        } else if (accPnlPerToken > 0) {\n            totalLiability +=\n                ((int(shares) * totalLiability) / int(supply)) *\n                (isDeposit ? int(1) : int(-1));\n        }\n\n        totalDeposited = isDeposit\n            ? totalDeposited + assets\n            : totalDeposited - assets;\n\n        storeAccBlockWeightedMarketCap();\n    }\n\n    // Withdraw requests (need to be done before calling 'withdraw' / 'redeem')\n    function makeWithdrawRequest(uint shares, address owner) external {\n        require(\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0,\n            \"END_OF_EPOCH\"\n        );\n\n        address sender = _msgSender();\n        uint allowance = allowance(owner, sender);\n        require(\n            sender == owner || (allowance > 0 && allowance >= shares),\n            \"NOT_ALLOWED\"\n        );\n\n        require(\n            totalSharesBeingWithdrawn(owner) + shares <= balanceOf(owner),\n            \"MORE_THAN_BALANCE\"\n        );\n\n        uint unlockEpoch = currentEpoch + withdrawEpochsTimelock();\n        withdrawRequests[owner][unlockEpoch] += shares;\n\n        emit WithdrawRequested(\n            sender,\n            owner,\n            shares,\n            currentEpoch,\n            unlockEpoch\n        );\n    }\n\n    function cancelWithdrawRequest(\n        uint shares,\n        address owner,\n        uint unlockEpoch\n    ) external {\n        require(\n            shares <= withdrawRequests[owner][unlockEpoch],\n            \"MORE_THAN_WITHDRAW_AMOUNT\"\n        );\n\n        address sender = _msgSender();\n        uint allowance = allowance(owner, sender);\n        require(\n            sender == owner || (allowance > 0 && allowance >= shares),\n            \"NOT_ALLOWED\"\n        );\n\n        withdrawRequests[owner][unlockEpoch] -= shares;\n\n        emit WithdrawCanceled(sender, owner, shares, currentEpoch, unlockEpoch);\n    }\n\n    // Locked and discounted deposits\n    function depositWithDiscountAndLock(\n        uint assets,\n        uint lockDuration,\n        address receiver\n    ) external checks(assets) validDiscount(lockDuration) returns (uint) {\n        uint simulatedAssets = (assets *\n            (PRECISION *\n                100 +\n                lockDiscountP(collateralizationP(), lockDuration))) /\n            (PRECISION * 100);\n\n        require(\n            simulatedAssets <= maxDeposit(receiver),\n            \"DEPOSIT_MORE_THAN_MAX\"\n        );\n\n        return\n            _executeDiscountAndLock(\n                simulatedAssets,\n                assets,\n                previewDeposit(simulatedAssets),\n                lockDuration,\n                receiver\n            );\n    }\n\n    function mintWithDiscountAndLock(\n        uint shares,\n        uint lockDuration,\n        address receiver\n    ) external checks(shares) validDiscount(lockDuration) returns (uint) {\n        require(shares <= maxMint(receiver), \"MINT_MORE_THAN_MAX\");\n        uint assets = previewMint(shares);\n\n        return\n            _executeDiscountAndLock(\n                assets,\n                (assets * (PRECISION * 100)) /\n                    (PRECISION *\n                        100 +\n                        lockDiscountP(collateralizationP(), lockDuration)),\n                shares,\n                lockDuration,\n                receiver\n            );\n    }\n\n    function _executeDiscountAndLock(\n        uint assets,\n        uint assetsDeposited,\n        uint shares,\n        uint lockDuration,\n        address receiver\n    ) private returns (uint) {\n        require(assets > assetsDeposited, \"NO_DISCOUNT\");\n\n        uint depositId = ++lockedDepositsCount;\n        uint assetsDiscount = assets - assetsDeposited;\n\n        LockedDeposit storage d = lockedDeposits[depositId];\n        d.owner = receiver;\n        d.shares = shares;\n        d.assetsDeposited = assetsDeposited;\n        d.assetsDiscount = assetsDiscount;\n        d.atTimestamp = block.timestamp;\n        d.lockDuration = lockDuration;\n\n        scaleVariables(shares, assetsDeposited, true);\n        address sender = _msgSender();\n        _deposit(sender, address(this), assetsDeposited, shares);\n\n        totalDiscounts += assetsDiscount;\n        totalLockedDiscounts += assetsDiscount;\n\n        lockedDepositNft.mint(receiver, depositId);\n\n        emit DepositLocked(sender, d.owner, depositId, d);\n        return depositId;\n    }\n\n    function unlockDeposit(uint depositId, address receiver) external {\n        LockedDeposit storage d = lockedDeposits[depositId];\n\n        address sender = _msgSender();\n        address owner = lockedDepositNft.ownerOf(depositId);\n\n        require(\n            owner == sender ||\n                lockedDepositNft.getApproved(depositId) == sender ||\n                lockedDepositNft.isApprovedForAll(owner, sender),\n            \"NOT_ALLOWED\"\n        );\n        require(\n            block.timestamp >= d.atTimestamp + d.lockDuration,\n            \"NOT_UNLOCKED\"\n        );\n\n        int accPnlDelta = int(\n            d.assetsDiscount.mulDiv(\n                PRECISION,\n                totalSupply(),\n                MathUpgradeable.Rounding.Up\n            )\n        );\n\n        accPnlPerToken += accPnlDelta;\n        require(\n            accPnlPerToken <= int(maxAccPnlPerToken()),\n            \"NOT_ENOUGH_ASSETS\"\n        );\n\n        lockedDepositNft.burn(depositId);\n\n        accPnlPerTokenUsed += accPnlDelta;\n        updateShareToAssetsPrice();\n\n        totalLiability += int(d.assetsDiscount);\n        totalLockedDiscounts -= d.assetsDiscount;\n\n        _transfer(address(this), receiver, d.shares);\n\n        emit DepositUnlocked(sender, receiver, owner, depositId, d);\n    }\n\n    // Distributes a reward evenly to all stakers of the vault\n    function distributeReward(uint assets) external {\n        address sender = _msgSender();\n        SafeERC20Upgradeable.safeTransferFrom(\n            _assetIERC20(),\n            sender,\n            address(this),\n            assets\n        );\n\n        accRewardsPerToken += (assets * PRECISION) / totalSupply();\n        updateShareToAssetsPrice();\n\n        totalRewards += assets;\n        totalDeposited += assets;\n\n        emit RewardDistributed(sender, assets);\n    }\n\n    // PnL interactions (happens often, so also used to trigger other actions)\n    function sendAssets(uint assets, address receiver) external {\n        address sender = _msgSender();\n        require(sender == pnlHandler, \"ONLY_TRADING_PNL_HANDLER\");\n\n        int accPnlDelta = int(\n            assets.mulDiv(PRECISION, totalSupply(), MathUpgradeable.Rounding.Up)\n        );\n\n        accPnlPerToken += accPnlDelta;\n        require(\n            accPnlPerToken <= int(maxAccPnlPerToken()),\n            \"NOT_ENOUGH_ASSETS\"\n        );\n\n        tryResetdailyAccPnlDelta();\n        dailyAccPnlDelta += accPnlDelta;\n        require(dailyAccPnlDelta <= int(maxdailyAccPnlDelta), \"MAX_WETHLY_PNL\");\n\n        totalLiability += int(assets);\n        totalClosedPnl += int(assets);\n\n        tryNewOpenPnlRequestOrEpoch();\n        tryUpdateCurrentMaxSupply();\n\n        SafeERC20Upgradeable.safeTransfer(_assetIERC20(), receiver, assets);\n\n        emit AssetsSent(sender, receiver, assets);\n    }\n\n    function receiveAssets(uint assets, address user) external {\n        address sender = _msgSender();\n        SafeERC20Upgradeable.safeTransferFrom(\n            _assetIERC20(),\n            sender,\n            address(this),\n            assets\n        );\n\n        uint assetsLessDeplete = assets;\n\n        if (accPnlPerTokenUsed < 0 && accPnlPerToken < 0) {\n            uint depleteAmount = (assets * lossesBurnP) / PRECISION / 100;\n            assetsToDeplete += depleteAmount;\n            assetsLessDeplete -= depleteAmount;\n        }\n\n        int accPnlDelta = int((assetsLessDeplete * PRECISION) / totalSupply());\n        accPnlPerToken -= accPnlDelta;\n\n        tryResetdailyAccPnlDelta();\n        dailyAccPnlDelta -= accPnlDelta;\n\n        totalLiability -= int(assetsLessDeplete);\n        totalClosedPnl -= int(assetsLessDeplete);\n\n        tryNewOpenPnlRequestOrEpoch();\n        tryUpdateCurrentMaxSupply();\n\n        emit AssetsReceived(sender, user, assets, assetsLessDeplete);\n    }\n\n    // //  mint / burn mechanism\n    // function deplete(uint assets) external {\n    //     require(assets <= assetsToDeplete, \"AMOUNT_TOO_BIG\");\n    //     assetsToDeplete -= assets;\n\n    //     uint amount = assets.mulDiv(_PRECISION, TokenToAssetsPrice(), MathUpgradeable.Rounding.Up);\n\n    //     address sender = _msgSender();\n    //     IToken(Token).burn(sender, amount);\n\n    //     totalDepleted += assets;\n    //     totalDepleted += amount;\n\n    //     SafeERC20Upgradeable.safeTransfer(_assetIERC20(), sender, assets);\n\n    //     emit Depleted(sender, assets, amount);\n    // }\n\n    // function refill(uint assets) external {\n    //     require(accPnlPerTokenUsed > 0, \"NOT_UNDER_COLLATERALIZED\");\n\n    //     uint supply = totalSupply();\n    //     require(assets <= (uint(accPnlPerTokenUsed) * supply) / PRECISION, \"AMOUNT_TOO_BIG\");\n\n    //     if (block.timestamp - lastdailyMintedReset >= 24 hours) {\n    //         dailyMinted = 0;\n    //         lastdailyMintedReset = block.timestamp;\n    //     }\n\n    //     uint amount = (assets * _PRECISION) / TokenToAssetsPrice();\n    //     dailyMinted += amount;\n\n    //     require(\n    //         dailyMinted <= (maxSupplyMintDailyP * IERC20Upgradeable(Token).totalSupply()) / PRECISION / 100,\n    //         \"ABOVE_INFLATION_LIMIT\"\n    //     );\n\n    //     address sender = _msgSender();\n    //     SafeERC20Upgradeable.safeTransferFrom(_assetIERC20(), sender, address(this), assets);\n\n    //     int accPnlDelta = int((assets * PRECISION) / supply);\n    //     accPnlPerToken -= accPnlDelta;\n    //     accPnlPerTokenUsed -= accPnlDelta;\n    //     updateShareToAssetsPrice();\n\n    //     totalRefilled += assets;\n    //     totalRefilled += amount;\n\n    //     IToken(Token).mint(sender, amount);\n\n    //     emit Refilled(sender, assets, amount);\n    // }\n\n    // Updates shareToAssetsPrice based on the new PnL and starts a new epoch\n    function updateAccPnlPerTokenUsed(\n        uint prevPositiveOpenPnl, // 1e18\n        uint newPositiveOpenPnl // 1e18\n    ) external returns (uint) {\n        address sender = _msgSender();\n        require(sender == address(openTradesPnlFeed), \"ONLY_PNL_FEED\");\n\n        int delta = int(newPositiveOpenPnl) - int(prevPositiveOpenPnl); // 1e18\n        uint supply = totalSupply();\n\n        int maxDelta = int(\n            MathUpgradeable.min(\n                (uint(int(maxAccPnlPerToken()) - accPnlPerToken) * supply) /\n                    PRECISION,\n                (maxAccOpenPnlDelta * supply) / PRECISION\n            )\n        ); // 1e18\n\n        delta = delta > maxDelta ? maxDelta : delta;\n\n        accPnlPerToken += (delta * int(PRECISION)) / int(supply);\n        totalLiability += delta;\n\n        accPnlPerTokenUsed = accPnlPerToken;\n        updateShareToAssetsPrice();\n\n        currentEpoch++;\n        currentEpochStart = block.timestamp;\n        currentEpochPositiveOpenPnl = uint(int(prevPositiveOpenPnl) + delta);\n\n        tryUpdateCurrentMaxSupply();\n\n        emit AccPnlPerTokenUsedUpdated(\n            sender,\n            currentEpoch,\n            prevPositiveOpenPnl,\n            newPositiveOpenPnl,\n            currentEpochPositiveOpenPnl,\n            accPnlPerTokenUsed\n        );\n\n        return currentEpochPositiveOpenPnl;\n    }\n\n    // Getters\n    function getLockedDeposit(\n        uint depositId\n    ) external view returns (LockedDeposit memory) {\n        return lockedDeposits[depositId];\n    }\n\n    function tvl() public view returns (uint) {\n        return (maxAccPnlPerToken() * totalSupply()) / PRECISION; // 1e18\n    }\n\n    function availableAssets() public view returns (uint) {\n        return\n            (uint(int(maxAccPnlPerToken()) - accPnlPerTokenUsed) *\n                totalSupply()) / PRECISION; // 1e18\n    }\n\n    // To be compatible with old pairs storage contract v6 (to be used only with gWETH vault)\n    function currentBalanceWETH() external view returns (uint) {\n        return availableAssets(); // 1e18\n    }\n\n    function marketCap() public view returns (uint) {\n        return (totalSupply() * shareToAssetsPrice) / PRECISION; // 1e18\n    }\n\n    function updateEpoch(uint256 i) external {\n        currentEpoch = i;\n    }\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\nlibrary console {\n    address constant CONSOLE_ADDRESS =\n        0x000000000000000000636F6e736F6c652e6c6f67;\n\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\n        address consoleAddress = CONSOLE_ADDRESS;\n        /// @solidity memory-safe-assembly\n        assembly {\n            pop(\n                staticcall(\n                    gas(),\n                    consoleAddress,\n                    add(payload, 32),\n                    mload(payload),\n                    0,\n                    0\n                )\n            )\n        }\n    }\n\n    function _castToPure(\n      function(bytes memory) internal view fnIn\n    ) internal pure returns (function(bytes memory) pure fnOut) {\n        assembly {\n            fnOut := fnIn\n        }\n    }\n\n    function _sendLogPayload(bytes memory payload) internal pure {\n        _castToPure(_sendLogPayloadImplementation)(payload);\n    }\n\n    function log() internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\n    }\n    function logInt(int256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n    }\n\n    function logUint(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function logString(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function logBool(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function logAddress(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function logBytes(bytes memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n    }\n\n    function logBytes1(bytes1 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n    }\n\n    function logBytes2(bytes2 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n    }\n\n    function logBytes3(bytes3 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n    }\n\n    function logBytes4(bytes4 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n    }\n\n    function logBytes5(bytes5 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n    }\n\n    function logBytes6(bytes6 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n    }\n\n    function logBytes7(bytes7 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n    }\n\n    function logBytes8(bytes8 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n    }\n\n    function logBytes9(bytes9 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n    }\n\n    function logBytes10(bytes10 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n    }\n\n    function logBytes11(bytes11 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n    }\n\n    function logBytes12(bytes12 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n    }\n\n    function logBytes13(bytes13 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n    }\n\n    function logBytes14(bytes14 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n    }\n\n    function logBytes15(bytes15 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n    }\n\n    function logBytes16(bytes16 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n    }\n\n    function logBytes17(bytes17 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n    }\n\n    function logBytes18(bytes18 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n    }\n\n    function logBytes19(bytes19 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n    }\n\n    function logBytes20(bytes20 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n    }\n\n    function logBytes21(bytes21 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n    }\n\n    function logBytes22(bytes22 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n    }\n\n    function logBytes23(bytes23 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n    }\n\n    function logBytes24(bytes24 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n    }\n\n    function logBytes25(bytes25 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n    }\n\n    function logBytes26(bytes26 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n    }\n\n    function logBytes27(bytes27 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n    }\n\n    function logBytes28(bytes28 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n    }\n\n    function logBytes29(bytes29 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n    }\n\n    function logBytes30(bytes30 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n    }\n\n    function logBytes31(bytes31 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n    }\n\n    function logBytes32(bytes32 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n    }\n\n    function log(uint256 p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n    }\n\n    function log(string memory p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n    }\n\n    function log(bool p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n    }\n\n    function log(address p0) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n    }\n\n    function log(uint256 p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n    }\n\n    function log(uint256 p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n    }\n\n    function log(uint256 p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n    }\n\n    function log(uint256 p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n    }\n\n    function log(string memory p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n    }\n\n    function log(string memory p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n    }\n\n    function log(string memory p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n    }\n\n    function log(string memory p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n    }\n\n    function log(bool p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n    }\n\n    function log(bool p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n    }\n\n    function log(bool p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n    }\n\n    function log(bool p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n    }\n\n    function log(address p0, uint256 p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n    }\n\n    function log(address p0, string memory p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n    }\n\n    function log(address p0, bool p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n    }\n\n    function log(address p0, address p1) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n    }\n\n    function log(string memory p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n    }\n\n    function log(bool p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, uint256 p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, string memory p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, bool p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, uint256 p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, string memory p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, bool p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n    }\n\n    function log(address p0, address p1, address p2) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(bool p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, bool p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, bool p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, bool p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n    }\n\n    function log(address p0, address p1, address p2, address p3) internal pure {\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n    }\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 125
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}