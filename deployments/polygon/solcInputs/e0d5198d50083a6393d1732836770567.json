{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/BorrowingFees.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\n/// DEPLOY need storage and pair info\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./libraries/ChainUtils.sol\";\n\ncontract BorrowingFees is Initializable, BorrowingFeesInterface {\n    // Constants\n    uint constant P_1 = 1e10;\n    uint constant P_2 = 1e40;\n\n    // Addresses\n    StorageInterface public storageT;\n    PairInfosInterface public pairInfos;\n\n    // State\n    mapping(uint16 => Group) public groups;\n    mapping(uint => Pair) public pairs;\n    mapping(address => mapping(uint => mapping(uint => InitialAccFees)))\n        public initialAccFees;\n    mapping(uint => PairOi) public pairOis;\n    mapping(uint => uint48) public groupFeeExponents;\n\n    // Note: Events and structs are in interface\n\n    function initialize(\n        StorageInterface _storageT,\n        PairInfosInterface _pairInfos\n    ) external initializer {\n        require(\n            address(_storageT) != address(0) &&\n                address(_pairInfos) != address(0),\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        pairInfos = _pairInfos;\n    }\n\n    // Modifiers\n    modifier onlyManager() {\n        require(msg.sender == pairInfos.manager(), \"MANAGER_ONLY\");\n        _;\n    }\n\n    modifier onlyCallbacks() {\n        require(msg.sender == storageT.callbacks(), \"CALLBACKS_ONLY\");\n        _;\n    }\n\n    // Manage pair params\n    function setPairParams(\n        uint pairIndex,\n        PairParams calldata value\n    ) external onlyManager {\n        _setPairParams(pairIndex, value);\n    }\n\n    function setPairParamsArray(\n        uint[] calldata indices,\n        PairParams[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setPairParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairParams(uint pairIndex, PairParams calldata value) private {\n        require(\n            value.feeExponent >= 1 && value.feeExponent <= 3,\n            \"WRONG_EXPONENT\"\n        );\n\n        Pair storage p = pairs[pairIndex];\n\n        uint16 prevGroupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        _setPairPendingAccFees(pairIndex, currentBlock);\n\n        if (value.groupIndex != prevGroupIndex) {\n            _setGroupPendingAccFees(prevGroupIndex, currentBlock);\n            _setGroupPendingAccFees(value.groupIndex, currentBlock);\n\n            (uint oiLong, uint oiShort) = getPairOpenInterestWETH(pairIndex);\n\n            // Only remove OI from old group if old group is not 0\n            _setGroupOi(prevGroupIndex, true, false, oiLong);\n            _setGroupOi(prevGroupIndex, false, false, oiShort);\n\n            // Add OI to new group if it's not group 0 (even if old group is 0)\n            // So when we assign a pair to a group, it takes into account its OI\n            // And group 0 OI will always be 0 but it doesn't matter since it's not used\n            _setGroupOi(value.groupIndex, true, true, oiLong);\n            _setGroupOi(value.groupIndex, false, true, oiShort);\n\n            Group memory newGroup = groups[value.groupIndex];\n            Group memory prevGroup = groups[prevGroupIndex];\n\n            p.groups.push(\n                PairGroup(\n                    value.groupIndex,\n                    ChainUtils.getUint48BlockNumber(currentBlock),\n                    newGroup.accFeeLong,\n                    newGroup.accFeeShort,\n                    prevGroup.accFeeLong,\n                    prevGroup.accFeeShort,\n                    p.accFeeLong,\n                    p.accFeeShort,\n                    0 // placeholder\n                )\n            );\n\n            emit PairGroupUpdated(pairIndex, prevGroupIndex, value.groupIndex);\n        }\n\n        p.feePerBlock = value.feePerBlock;\n        p.feeExponent = value.feeExponent;\n        pairOis[pairIndex].max = value.maxOi;\n\n        emit PairParamsUpdated(\n            pairIndex,\n            value.groupIndex,\n            value.feePerBlock,\n            value.feeExponent,\n            value.maxOi\n        );\n    }\n\n    // Manage group params\n    function setGroupParams(\n        uint16 groupIndex,\n        GroupParams calldata value\n    ) external onlyManager {\n        _setGroupParams(groupIndex, value);\n    }\n\n    function setGroupParamsArray(\n        uint16[] calldata indices,\n        GroupParams[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n        require(len == values.length, \"WRONG_LENGTH\");\n\n        for (uint i; i < len; ) {\n            _setGroupParams(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setGroupParams(\n        uint16 groupIndex,\n        GroupParams calldata value\n    ) private {\n        require(groupIndex > 0, \"GROUP_0\");\n        require(\n            value.feeExponent >= 1 && value.feeExponent <= 3,\n            \"WRONG_EXPONENT\"\n        );\n\n        _setGroupPendingAccFees(groupIndex, ChainUtils.getBlockNumber());\n\n        Group storage g = groups[groupIndex];\n        g.feePerBlock = value.feePerBlock;\n        g.maxOi = uint80(value.maxOi);\n        groupFeeExponents[groupIndex] = value.feeExponent;\n\n        emit GroupUpdated(\n            groupIndex,\n            value.feePerBlock,\n            value.maxOi,\n            value.feeExponent\n        );\n    }\n\n    // Group OI setter\n    function _setGroupOi(\n        uint16 groupIndex,\n        bool long,\n        bool increase,\n        uint amount // 1e18\n    ) private {\n        Group storage group = groups[groupIndex];\n        uint112 amountFinal;\n\n        if (groupIndex > 0) {\n            amount = (amount * P_1) / 1e18; // 1e10\n            require(amount <= type(uint112).max, \"OVERFLOW\");\n\n            amountFinal = uint112(amount);\n\n            if (long) {\n                group.oiLong = increase\n                    ? group.oiLong + amountFinal\n                    : group.oiLong -\n                        (\n                            group.oiLong > amountFinal\n                                ? amountFinal\n                                : group.oiLong\n                        );\n            } else {\n                group.oiShort = increase\n                    ? group.oiShort + amountFinal\n                    : group.oiShort -\n                        (\n                            group.oiShort > amountFinal\n                                ? amountFinal\n                                : group.oiShort\n                        );\n            }\n        }\n\n        emit GroupOiUpdated(\n            groupIndex,\n            long,\n            increase,\n            amountFinal,\n            group.oiLong,\n            group.oiShort\n        );\n    }\n\n    // Acc fees getters for pairs and groups\n    function getPendingAccFees(\n        PendingAccFeesInput memory input\n    )\n        public\n        view\n        returns (uint64 newAccFeeLong, uint64 newAccFeeShort, uint64 delta)\n    {\n        require(input.currentBlock >= input.accLastUpdatedBlock, \"BLOCK_ORDER\");\n\n        bool moreShorts = input.oiLong < input.oiShort;\n        uint netOi = moreShorts\n            ? input.oiShort - input.oiLong\n            : input.oiLong - input.oiShort;\n\n        uint _delta = input.maxOi > 0 && input.feeExponent > 0\n            ? ((input.currentBlock - input.accLastUpdatedBlock) *\n                input.feePerBlock *\n                ((netOi * 1e10) / input.maxOi) ** input.feeExponent) /\n                (1e18 ** input.feeExponent)\n            : 0; // 1e10 (%)\n\n        require(_delta <= type(uint64).max, \"OVERFLOW\");\n        delta = uint64(_delta);\n\n        newAccFeeLong = moreShorts\n            ? input.accFeeLong\n            : input.accFeeLong + delta;\n        newAccFeeShort = moreShorts\n            ? input.accFeeShort + delta\n            : input.accFeeShort;\n    }\n\n    function getPairGroupAccFeesDeltas(\n        uint i,\n        PairGroup[] memory pairGroups,\n        InitialAccFees memory initialFees,\n        uint pairIndex,\n        bool long,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 deltaGroup, uint64 deltaPair, bool beforeTradeOpen)\n    {\n        PairGroup memory group = pairGroups[i];\n\n        beforeTradeOpen = group.block < initialFees.block;\n\n        if (i == pairGroups.length - 1) {\n            // Last active group\n            deltaGroup = getGroupPendingAccFee(\n                group.groupIndex,\n                currentBlock,\n                long\n            );\n            deltaPair = getPairPendingAccFee(pairIndex, currentBlock, long);\n        } else {\n            // Previous groups\n            PairGroup memory nextGroup = pairGroups[i + 1];\n\n            // If it's not the first group to be before the trade was opened then fee is 0\n            if (beforeTradeOpen && nextGroup.block <= initialFees.block) {\n                return (0, 0, beforeTradeOpen);\n            }\n\n            deltaGroup = long\n                ? nextGroup.prevGroupAccFeeLong\n                : nextGroup.prevGroupAccFeeShort;\n            deltaPair = long\n                ? nextGroup.pairAccFeeLong\n                : nextGroup.pairAccFeeShort;\n        }\n\n        if (beforeTradeOpen) {\n            deltaGroup -= initialFees.accGroupFee;\n            deltaPair -= initialFees.accPairFee;\n        } else {\n            deltaGroup -= (\n                long ? group.initialAccFeeLong : group.initialAccFeeShort\n            );\n            deltaPair -= (long ? group.pairAccFeeLong : group.pairAccFeeShort);\n        }\n    }\n\n    // Pair acc fees helpers\n    function getPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 pairAccFeeDelta)\n    {\n        Pair memory pair = pairs[pairIndex];\n\n        (uint pairOiLong, uint pairOiShort) = getPairOpenInterestWETH(\n            pairIndex\n        );\n\n        (accFeeLong, accFeeShort, pairAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                pair.accFeeLong,\n                pair.accFeeShort,\n                pairOiLong,\n                pairOiShort,\n                pair.feePerBlock,\n                currentBlock,\n                pair.accLastUpdatedBlock,\n                pairOis[pairIndex].max,\n                pair.feeExponent\n            )\n        );\n    }\n\n    function getPairPendingAccFee(\n        uint pairIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getPairPendingAccFees(\n            pairIndex,\n            currentBlock\n        );\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setPairPendingAccFees(\n        uint pairIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getPairPendingAccFees(\n            pairIndex,\n            currentBlock\n        );\n\n        Pair storage pair = pairs[pairIndex];\n\n        (pair.accFeeLong, pair.accFeeShort) = (accFeeLong, accFeeShort);\n        pair.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\n            currentBlock\n        );\n\n        emit PairAccFeesUpdated(\n            pairIndex,\n            currentBlock,\n            pair.accFeeLong,\n            pair.accFeeShort\n        );\n    }\n\n    // Group acc fees helpers\n    function getGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    )\n        public\n        view\n        returns (uint64 accFeeLong, uint64 accFeeShort, uint64 groupAccFeeDelta)\n    {\n        Group memory group = groups[groupIndex];\n\n        (accFeeLong, accFeeShort, groupAccFeeDelta) = getPendingAccFees(\n            PendingAccFeesInput(\n                group.accFeeLong,\n                group.accFeeShort,\n                (uint(group.oiLong) * 1e18) / P_1,\n                (uint(group.oiShort) * 1e18) / P_1,\n                group.feePerBlock,\n                currentBlock,\n                group.accLastUpdatedBlock,\n                uint72(group.maxOi),\n                groupFeeExponents[groupIndex]\n            )\n        );\n    }\n\n    function getGroupPendingAccFee(\n        uint16 groupIndex,\n        uint currentBlock,\n        bool long\n    ) public view returns (uint64 accFee) {\n        (uint64 accFeeLong, uint64 accFeeShort, ) = getGroupPendingAccFees(\n            groupIndex,\n            currentBlock\n        );\n        return long ? accFeeLong : accFeeShort;\n    }\n\n    function _setGroupPendingAccFees(\n        uint16 groupIndex,\n        uint currentBlock\n    ) private returns (uint64 accFeeLong, uint64 accFeeShort) {\n        (accFeeLong, accFeeShort, ) = getGroupPendingAccFees(\n            groupIndex,\n            currentBlock\n        );\n\n        Group storage group = groups[groupIndex];\n\n        (group.accFeeLong, group.accFeeShort) = (accFeeLong, accFeeShort);\n        group.accLastUpdatedBlock = ChainUtils.getUint48BlockNumber(\n            currentBlock\n        );\n\n        emit GroupAccFeesUpdated(\n            groupIndex,\n            currentBlock,\n            group.accFeeLong,\n            group.accFeeShort\n        );\n    }\n\n    // Interaction with callbacks\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeWETH, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external override onlyCallbacks {\n        uint16 groupIndex = getPairGroupIndex(pairIndex);\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        (\n            uint64 pairAccFeeLong,\n            uint64 pairAccFeeShort\n        ) = _setPairPendingAccFees(pairIndex, currentBlock);\n        (\n            uint64 groupAccFeeLong,\n            uint64 groupAccFeeShort\n        ) = _setGroupPendingAccFees(groupIndex, currentBlock);\n\n        _setGroupOi(groupIndex, long, open, positionSizeWETH);\n\n        if (open) {\n            InitialAccFees memory initialFees = InitialAccFees(\n                long ? pairAccFeeLong : pairAccFeeShort,\n                long ? groupAccFeeLong : groupAccFeeShort,\n                ChainUtils.getUint48BlockNumber(currentBlock),\n                0 // placeholder\n            );\n\n            initialAccFees[trader][pairIndex][index] = initialFees;\n\n            emit TradeInitialAccFeesStored(\n                trader,\n                pairIndex,\n                index,\n                initialFees.accPairFee,\n                initialFees.accGroupFee\n            );\n        }\n\n        emit TradeActionHandled(\n            trader,\n            pairIndex,\n            index,\n            open,\n            long,\n            positionSizeWETH\n        );\n    }\n\n    // Important trade getters\n    function getTradeBorrowingFee(\n        BorrowingFeeInput memory input\n    ) public view returns (uint fee) {\n        InitialAccFees memory initialFees = initialAccFees[input.trader][\n            input.pairIndex\n        ][input.index];\n        PairGroup[] memory pairGroups = pairs[input.pairIndex].groups;\n\n        uint currentBlock = ChainUtils.getBlockNumber();\n\n        PairGroup memory firstPairGroup;\n        if (pairGroups.length > 0) {\n            firstPairGroup = pairGroups[0];\n        }\n        // If pair has had no group after trade was opened, initialize with pair borrowing fee\n        if (\n            pairGroups.length == 0 || firstPairGroup.block > initialFees.block\n        ) {\n            fee = ((\n                pairGroups.length == 0\n                    ? getPairPendingAccFee(\n                        input.pairIndex,\n                        currentBlock,\n                        input.long\n                    )\n                    : (\n                        input.long\n                            ? firstPairGroup.pairAccFeeLong\n                            : firstPairGroup.pairAccFeeShort\n                    )\n            ) - initialFees.accPairFee);\n        }\n\n        // Sum of max(pair fee, group fee) for all groups the pair was in while trade was open\n        for (uint i = pairGroups.length; i > 0; ) {\n            (\n                uint64 deltaGroup,\n                uint64 deltaPair,\n                bool beforeTradeOpen\n            ) = getPairGroupAccFeesDeltas(\n                    i - 1,\n                    pairGroups,\n                    initialFees,\n                    input.pairIndex,\n                    input.long,\n                    currentBlock\n                );\n\n            fee += (deltaGroup > deltaPair ? deltaGroup : deltaPair);\n\n            // Exit loop at first group before trade was open\n            if (beforeTradeOpen) break;\n            unchecked {\n                --i;\n            }\n        }\n\n        fee = (input.collateral * input.leverage * fee) / P_1 / 100; // 1e18 (WETH)\n    }\n\n    function getTradeLiquidationPrice(\n        LiqPriceInput calldata input\n    ) external view returns (uint) {\n        return\n            pairInfos.getTradeLiquidationPricePure(\n                input.openPrice,\n                input.long,\n                input.collateral,\n                input.leverage,\n                pairInfos.getTradeRolloverFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.collateral\n                ) +\n                    getTradeBorrowingFee(\n                        BorrowingFeeInput(\n                            input.trader,\n                            input.pairIndex,\n                            input.index,\n                            input.long,\n                            input.collateral,\n                            input.leverage\n                        )\n                    ),\n                pairInfos.getTradeFundingFee(\n                    input.trader,\n                    input.pairIndex,\n                    input.index,\n                    input.long,\n                    input.collateral,\n                    input.leverage\n                )\n            );\n    }\n\n    // Public getters\n    function getPairOpenInterestWETH(\n        uint pairIndex\n    ) public view returns (uint, uint) {\n        return (\n            storageT.openInterestWETH(pairIndex, 0),\n            storageT.openInterestWETH(pairIndex, 1)\n        );\n    }\n\n    function getPairGroupIndex(\n        uint pairIndex\n    ) public view returns (uint16 groupIndex) {\n        PairGroup[] memory pairGroups = pairs[pairIndex].groups;\n        return\n            pairGroups.length == 0\n                ? 0\n                : pairGroups[pairGroups.length - 1].groupIndex;\n    }\n\n    // External getters\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeWETH // 1e18\n    ) external view returns (bool) {\n        Group memory g = groups[getPairGroupIndex(pairIndex)];\n        return\n            (g.maxOi == 0) ||\n            ((long ? g.oiLong : g.oiShort) + (positionSizeWETH * P_1) / 1e18 <=\n                g.maxOi);\n    }\n\n    function getGroup(\n        uint16 groupIndex\n    ) external view returns (Group memory, uint48) {\n        return (groups[groupIndex], groupFeeExponents[groupIndex]);\n    }\n\n    function getPair(\n        uint pairIndex\n    ) external view returns (Pair memory, PairOi memory) {\n        return (pairs[pairIndex], pairOis[pairIndex]);\n    }\n\n    function getAllPairs()\n        external\n        view\n        returns (Pair[] memory, PairOi[] memory)\n    {\n        uint len = storageT.priceAggregator().pairsStorage().pairsCount();\n        Pair[] memory p = new Pair[](len);\n        PairOi[] memory pairOi = new PairOi[](len);\n\n        for (uint i; i < len; ) {\n            p[i] = pairs[i];\n            pairOi[i] = pairOis[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (p, pairOi);\n    }\n\n    function getGroups(\n        uint16[] calldata indices\n    ) external view returns (Group[] memory, uint48[] memory) {\n        Group[] memory g = new Group[](indices.length);\n        uint48[] memory e = new uint48[](indices.length);\n        uint len = indices.length;\n\n        for (uint i; i < len; ) {\n            g[i] = groups[indices[i]];\n            e[i] = groupFeeExponents[indices[i]];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return (g, e);\n    }\n\n    function getTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index\n    )\n        external\n        view\n        returns (\n            InitialAccFees memory borrowingFees,\n            PairInfosInterface.TradeInitialAccFees memory otherFees\n        )\n    {\n        borrowingFees = initialAccFees[trader][pairIndex][index];\n        otherFees = pairInfos.tradeInitialAccFees(trader, pairIndex, index);\n    }\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint) {\n        return pairOis[pairIndex].max;\n    }\n}\n"
    },
    "contracts/Delegatable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nabstract contract Delegatable {\n    mapping(address => address) public delegations;\n    address private senderOverride;\n\n    function setDelegate(address delegate) external {\n        require(tx.origin == msg.sender, \"NO_CONTRACT\");\n\n        delegations[msg.sender] = delegate;\n    }\n\n    function removeDelegate() external {\n        delegations[msg.sender] = address(0);\n    }\n\n    function delegatedAction(\n        address trader,\n        bytes calldata call_data\n    ) external returns (bytes memory) {\n        require(delegations[trader] == msg.sender, \"DELEGATE_NOT_APPROVED\");\n\n        senderOverride = trader;\n        (bool success, bytes memory result) = address(this).delegatecall(\n            call_data\n        );\n        if (!success) {\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\n            if (result.length < 68) revert();\n            assembly {\n                result := add(result, 0x04)\n            }\n            revert(abi.decode(result, (string)));\n        }\n\n        senderOverride = address(0);\n\n        return result;\n    }\n\n    function _msgSender() public view returns (address) {\n        if (senderOverride == address(0)) {\n            return msg.sender;\n        } else {\n            return senderOverride;\n        }\n    }\n}\n"
    },
    "contracts/interfaces/AggregatorInterfaceV1_4.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./PairsStorageInterfaceV6.sol\";\nimport \"./ChainlinkFeedInterface.sol\";\nimport \"./StorageInterface.sol\";\n\ninterface AggregatorInterfaceV1_4 {\n    enum OrderType {\n        MARKET_OPEN,\n        MARKET_CLOSE,\n        LIMIT_OPEN,\n        LIMIT_CLOSE\n    }\n\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\n\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\n\n    function tokenPriceWETH() external returns (uint);\n\n    function linkFee(uint, uint) external view returns (uint);\n\n    function openFeeP(uint) external view returns (uint);\n\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\n\n    function marketOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingMarketOrder memory o\n    ) external;\n\n    function nftOrderfulfill(\n        uint256 orderId,\n        StorageInterface.PendingNftOrder memory o\n    ) external;\n}\n"
    },
    "contracts/interfaces/BorrowingFeesInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface BorrowingFeesInterface {\n    // Structs\n    struct PairGroup {\n        uint16 groupIndex;\n        uint48 block;\n        uint64 initialAccFeeLong; // 1e10 (%)\n        uint64 initialAccFeeShort; // 1e10 (%)\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\n        uint64 pairAccFeeLong; // 1e10 (%)\n        uint64 pairAccFeeShort; // 1e10 (%)\n        uint64 _placeholder; // might be useful later\n    }\n    struct Pair {\n        PairGroup[] groups;\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint48 feeExponent;\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct PairOi {\n        uint72 long; // 1e10 (DAI)\n        uint72 short; // 1e10 (DAI)\n        uint72 max; // 1e10 (DAI)\n        uint40 _placeholder; // might be useful later\n    }\n    struct Group {\n        uint112 oiLong; // 1e10\n        uint112 oiShort; // 1e10\n        uint32 feePerBlock; // 1e10 (%)\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint48 accLastUpdatedBlock;\n        uint80 maxOi; // 1e10\n        uint lastAccBlockWeightedMarketCap; // 1e40\n    }\n    struct InitialAccFees {\n        uint64 accPairFee; // 1e10 (%)\n        uint64 accGroupFee; // 1e10 (%)\n        uint48 block;\n        uint80 _placeholder; // might be useful later\n    }\n    struct PairParams {\n        uint16 groupIndex;\n        uint32 feePerBlock; // 1e10 (%)\n        uint48 feeExponent;\n        uint72 maxOi;\n    }\n    struct GroupParams {\n        uint32 feePerBlock; // 1e10 (%)\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n    struct BorrowingFeeInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct LiqPriceInput {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint openPrice; // 1e10\n        bool long;\n        uint collateral; // 1e18 (DAI)\n        uint leverage;\n    }\n    struct PendingAccFeesInput {\n        uint64 accFeeLong; // 1e10 (%)\n        uint64 accFeeShort; // 1e10 (%)\n        uint oiLong; // 1e18\n        uint oiShort; // 1e18\n        uint32 feePerBlock; // 1e10\n        uint currentBlock;\n        uint accLastUpdatedBlock;\n        uint72 maxOi; // 1e10\n        uint48 feeExponent;\n    }\n\n    // Events\n    event PairParamsUpdated(\n        uint indexed pairIndex,\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint48 feeExponent,\n        uint72 maxOi\n    );\n    event PairGroupUpdated(\n        uint indexed pairIndex,\n        uint16 indexed prevGroupIndex,\n        uint16 indexed newGroupIndex\n    );\n    event GroupUpdated(\n        uint16 indexed groupIndex,\n        uint32 feePerBlock,\n        uint72 maxOi,\n        uint48 feeExponent\n    );\n    event TradeInitialAccFeesStored(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint64 initialPairAccFee,\n        uint64 initialGroupAccFee\n    );\n    event TradeActionHandled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        bool open,\n        bool long,\n        uint positionSizeDai // 1e18\n    );\n    event PairAccFeesUpdated(\n        uint indexed pairIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupAccFeesUpdated(\n        uint16 indexed groupIndex,\n        uint currentBlock,\n        uint64 accFeeLong,\n        uint64 accFeeShort\n    );\n    event GroupOiUpdated(\n        uint16 indexed groupIndex,\n        bool indexed long,\n        bool indexed increase,\n        uint112 amount,\n        uint112 oiLong,\n        uint112 oiShort\n    );\n\n    // Functions\n    function getTradeLiquidationPrice(\n        LiqPriceInput calldata\n    ) external view returns (uint); // PRECISION\n\n    function getTradeBorrowingFee(\n        BorrowingFeeInput memory\n    ) external view returns (uint); // 1e18 (DAI)\n\n    function handleTradeAction(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint positionSizeDai, // 1e18 (collateral * leverage)\n        bool open,\n        bool long\n    ) external;\n\n    function withinMaxGroupOi(\n        uint pairIndex,\n        bool long,\n        uint positionSizeDai\n    ) external view returns (bool);\n\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ChainlinkFeedInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ChainlinkFeedInterface {\n    function latestRoundData()\n        external\n        view\n        returns (uint80, int, uint, uint, uint80);\n}\n"
    },
    "contracts/interfaces/IArbSys.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.4.21 <0.9.0;\n\n/**\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\n */\ninterface IArbSys {\n    /**\n     * @notice Get internal version number identifying an ArbOS build\n     * @return version number as int\n     */\n    function arbOSVersion() external pure returns (uint);\n\n    function arbChainID() external view returns (uint);\n\n    /**\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\n     * @return block number as int\n     */\n    function arbBlockNumber() external view returns (uint);\n\n    /**\n     * @notice Send given amount of Eth to dest from sender.\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\n     * @param destination recipient address on L1\n     * @return unique identifier for this L2-to-L1 transaction.\n     */\n    function withdrawEth(address destination) external payable returns (uint);\n\n    /**\n     * @notice Send a transaction to L1\n     * @param destination recipient address on L1\n     * @param calldataForL1 (optional) calldata for L1 contract call\n     * @return a unique identifier for this L2-to-L1 transaction.\n     */\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\n\n    /**\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\n     * @param account target account\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\n     */\n    function getTransactionCount(address account) external view returns (uint256);\n\n    /**\n     * @notice get the value of target L2 storage slot\n     * This function is only callable from address 0 to prevent contracts from being able to call it\n     * @param account target account\n     * @param index target index of storage slot\n     * @return stotage value for the given account at the given index\n     */\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\n\n    /**\n     * @notice check if current call is coming from l1\n     * @return true if the caller of this was called directly from L1\n     */\n    function isTopLevelCall() external view returns (bool);\n\n    /**\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\n     * @return true iff the caller's address is an alias for an L1 contract address\n     */\n    function wasMyCallersAddressAliased() external view returns (bool);\n\n    /**\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\n     * @return address of the caller's caller, without applying L1 contract address aliasing\n     */\n    function myCallersAddressWithoutAliasing() external view returns (address);\n\n    /**\n     * @notice map L1 sender contract address to its L2 alias\n     * @param sender sender address\n     * @param dest destination address\n     * @return aliased sender address\n     */\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\n\n    /**\n     * @notice get the caller's amount of available storage gas\n     * @return amount of storage gas available to the caller\n     */\n    function getStorageGasAvailable() external view returns (uint);\n\n    event L2ToL1Transaction(\n        address caller,\n        address indexed destination,\n        uint indexed uniqueId,\n        uint indexed batchNumber,\n        uint indexInBatch,\n        uint arbBlockNum,\n        uint ethBlockNum,\n        uint timestamp,\n        uint callvalue,\n        bytes data\n    );\n}"
    },
    "contracts/interfaces/IOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IOracle {\n    function getPrice(\n        uint256 tokenIndex\n    ) external view returns (uint256 price, uint256 lastupdateTime);\n}\n"
    },
    "contracts/interfaces/IToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface IToken {\n    function manager() external view returns (address);\n\n    function admin() external view returns (address);\n\n    function currentEpoch() external view returns (uint);\n\n    function currentEpochStart() external view returns (uint);\n\n    function currentEpochPositiveOpenPnl() external view returns (uint);\n\n    function updateAccPnlPerTokenUsed(\n        uint prevPositiveOpenPnl,\n        uint newPositiveOpenPnl\n    ) external returns (uint);\n\n    struct LockedDeposit {\n        address owner;\n        uint shares; // 1e18\n        uint assetsDeposited; // 1e18\n        uint assetsDiscount; // 1e18\n        uint atTimestamp; // timestamp\n        uint lockDuration; // timestamp\n    }\n\n    function getLockedDeposit(\n        uint depositId\n    ) external view returns (LockedDeposit memory);\n\n    function sendAssets(uint assets, address receiver) external;\n\n    function receiveAssets(uint assets, address user) external;\n\n    function distributeReward(uint assets) external;\n\n    function currentBalanceWETH() external view returns (uint);\n\n    function tvl() external view returns (uint);\n\n    function marketCap() external view returns (uint);\n\n    function getPendingAccBlockWeightedMarketCap(\n        uint currentBlock\n    ) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NftInterfaceV5.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface NftInterfaceV5 {\n    function balanceOf(address) external view returns (uint);\n\n    function ownerOf(uint) external view returns (address);\n\n    function transferFrom(address, address, uint) external;\n\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/NFTRewardInterfaceV6_3.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./StorageInterface.sol\";\n\ninterface NftRewardsInterfaceV6_3_1 {\n    struct TriggeredLimitId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        StorageInterface.LimitOrder order;\n    }\n    enum OpenLimitOrderType {\n        LEGACY,\n        REVERSAL,\n        MOMENTUM\n    }\n\n    function storeFirstToTrigger(\n        TriggeredLimitId calldata,\n        address,\n        uint\n    ) external;\n\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\n\n    function unregisterTrigger(TriggeredLimitId calldata) external;\n\n    function distributeNftReward(\n        TriggeredLimitId calldata,\n        uint,\n        uint\n    ) external;\n\n    function openLimitOrderTypes(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrderType);\n\n    function setOpenLimitOrderType(\n        address,\n        uint,\n        uint,\n        OpenLimitOrderType\n    ) external;\n\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\n\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\n\n    function botInUse(bytes32) external view returns (bool);\n\n    function getNftBotHashes(\n        uint,\n        address,\n        uint,\n        address,\n        uint,\n        uint\n    ) external pure returns (bytes32, bytes32);\n\n    function setNftBotInUse(bytes32, bytes32) external;\n\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\n\n    function linkToTokenRewards(uint, uint) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/PairInfosInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PairInfosInterface {\n    // Trade initial acc fees\n    struct TradeInitialAccFees {\n        uint rollover; // 1e18 (DAI)\n        int funding; // 1e18 (DAI)\n        bool openedAfterUpdate;\n    }\n\n    function tradeInitialAccFees(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInitialAccFees memory);\n\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\n\n    function storeTradeInitialAccFees(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long\n    ) external;\n\n    function getTradePriceImpact(\n        uint openPrice, // PRECISION\n        uint pairIndex,\n        bool long,\n        uint openInterest // 1e18 (DAI)\n    )\n        external\n        view\n        returns (\n            uint priceImpactP, // PRECISION (%)\n            uint priceAfterImpact // PRECISION\n        );\n\n    function getTradeRolloverFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint collateral // 1e18 (DAI)\n    ) external view returns (uint);\n\n    function getTradeFundingFee(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    )\n        external\n        view\n        returns (\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\n        );\n\n    function getTradeLiquidationPricePure(\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        uint rolloverFee, // 1e18 (DAI)\n        int fundingFee // 1e18 (DAI)\n    ) external pure returns (uint);\n\n    function getTradeLiquidationPrice(\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint openPrice, // PRECISION\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage\n    ) external view returns (uint); // PRECISION\n\n    function getTradeValue(\n        address trader,\n        uint pairIndex,\n        uint index,\n        bool long,\n        uint collateral, // 1e18 (DAI)\n        uint leverage,\n        int percentProfit, // PRECISION (%)\n        uint closingFee // 1e18 (DAI)\n    ) external returns (uint); // 1e18 (DAI)\n\n    function manager() external view returns (address);\n\n    function getTradeValuePure(\n        uint collateral, // 1e18 (WETH)\n        int percentProfit, // PRECISION (%)\n        uint rolloverFee, // 1e18 (WETH)\n        int fundingFee, // 1e18 (WETH)\n        uint closingFee // 1e18 (WETH)\n    ) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/PairsStorageInterfaceV6.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface PairsStorageInterfaceV6 {\n    enum FeedCalculation {\n        DEFAULT,\n        INVERT,\n        COMBINE\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\n    struct Feed {\n        address feed1;\n        address feed2;\n        FeedCalculation feedCalculation;\n        uint maxDeviationP;\n    } // PRECISION (%)\n\n    function incrementCurrentOrderId() external returns (uint);\n\n    function updateGroupCollateral(uint, uint, bool, bool) external;\n\n    function pairJob(\n        uint\n    ) external returns (string memory, string memory, bytes32, uint);\n\n    function pairFeed(uint) external view returns (Feed memory);\n\n    function pairSpreadP(uint) external view returns (uint);\n\n    function pairMinLeverage(uint) external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n\n    function groupMaxCollateral(uint) external view returns (uint);\n\n    function groupCollateral(uint, bool) external view returns (uint);\n\n    function guaranteedSlEnabled(uint) external view returns (bool);\n\n    function pairOpenFeeP(uint) external view returns (uint);\n\n    function pairCloseFeeP(uint) external view returns (uint);\n\n    function pairOracleFeeP(uint) external view returns (uint);\n\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\n\n    function pairReferralFeeP(uint) external view returns (uint);\n\n    function pairMinLevPosWETH(uint) external view returns (uint);\n\n    function pairsCount() external view returns (uint);\n}\n"
    },
    "contracts/interfaces/ReferralsInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface ReferralsInterface {\n    function registerPotentialReferrer(\n        address trader,\n        address referral\n    ) external;\n\n    function distributePotentialReward(\n        address trader,\n        uint volumeWETH,\n        uint pairOpenFeeP,\n        uint tokenPriceWETH\n    ) external returns (uint);\n\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\n\n    function getTraderReferrer(\n        address trader\n    ) external view returns (address referrer);\n}\n"
    },
    "contracts/interfaces/StakingInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface StakingInterface {\n    function distributeRewardWETH(uint amount) external;\n}\n"
    },
    "contracts/interfaces/StorageInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./TokenInterface.sol\";\nimport \"./NftInterfaceV5.sol\";\nimport \"./IToken.sol\";\nimport \"./AggregatorInterfaceV1_4.sol\";\nimport \"./IOracle.sol\";\n\ninterface StorageInterface {\n    enum LimitOrder {\n        TP,\n        SL,\n        LIQ,\n        OPEN\n    }\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n    struct TradeInfo {\n        uint tokenId;\n        uint tokenPriceWETH; // PRECISION\n        uint openInterestWETH; // 1e18\n        uint tpLastUpdated;\n        uint slLastUpdated;\n        bool beingMarketClosed;\n    }\n    struct OpenLimitOrder {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint positionSize; // 1e18 (WETH or GFARM2)\n        uint spreadReductionP;\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION (%)\n        uint sl; // PRECISION (%)\n        uint minPrice; // PRECISION\n        uint maxPrice; // PRECISION\n        uint block;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n    struct PendingNftOrder {\n        address nftHolder;\n        uint nftId;\n        address trader;\n        uint pairIndex;\n        uint index;\n        LimitOrder orderType;\n    }\n\n    function PRECISION() external pure returns (uint);\n\n    function gov() external view returns (address);\n\n    function dev() external view returns (address);\n\n    function WETH() external view returns (TokenInterface);\n\n    function token() external view returns (TokenInterface);\n\n    function linkErc677() external view returns (TokenInterface);\n\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\n\n    function vault() external view returns (IToken);\n\n    function trading() external view returns (address);\n\n    function callbacks() external view returns (address);\n\n    function handleTokens(address, uint, bool) external;\n\n    function transferWETH(address, address, uint) external;\n\n    function transferLinkToAggregator(address, uint, uint) external;\n\n    function unregisterTrade(address, uint, uint) external;\n\n    function unregisterPendingMarketOrder(uint, bool) external;\n\n    function unregisterOpenLimitOrder(address, uint, uint) external;\n\n    function hasOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (bool);\n\n    function storePendingMarketOrder(\n        PendingMarketOrder memory,\n        uint,\n        bool\n    ) external;\n\n    function openTrades(\n        address,\n        uint,\n        uint\n    ) external view returns (Trade memory);\n\n    function openTradesInfo(\n        address,\n        uint,\n        uint\n    ) external view returns (TradeInfo memory);\n\n    function updateSl(address, uint, uint, uint) external;\n\n    function updateTp(address, uint, uint, uint) external;\n\n    function getOpenLimitOrder(\n        address,\n        uint,\n        uint\n    ) external view returns (OpenLimitOrder memory);\n\n    function spreadReductionsP(uint) external view returns (uint);\n\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\n\n    function reqID_pendingMarketOrder(\n        uint\n    ) external view returns (PendingMarketOrder memory);\n\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\n\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\n\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\n\n    function firstEmptyOpenLimitIndex(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function increaseNftRewards(uint, uint) external;\n\n    function nftSuccessTimelock() external view returns (uint);\n\n    function reqID_pendingNftOrder(\n        uint\n    ) external view returns (PendingNftOrder memory);\n\n    function updateTrade(Trade memory) external;\n\n    function nftLastSuccess(uint) external view returns (uint);\n\n    function unregisterPendingNftOrder(uint) external;\n\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\n\n    function distributeLpRewards(uint) external;\n\n    function storeTrade(Trade memory, TradeInfo memory) external;\n\n    function openLimitOrdersCount(address, uint) external view returns (uint);\n\n    function openTradesCount(address, uint) external view returns (uint);\n\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\n\n    function pendingMarketCloseCount(\n        address,\n        uint\n    ) external view returns (uint);\n\n    function maxTradesPerPair() external view returns (uint);\n\n    function pendingOrderIdsCount(address) external view returns (uint);\n\n    function maxPendingMarketOrders() external view returns (uint);\n\n    function openInterestWETH(uint, uint) external view returns (uint);\n\n    function getPendingOrderIds(address) external view returns (uint[] memory);\n\n    function nfts(uint) external view returns (NftInterfaceV5);\n\n    function fakeBlockNumber() external view returns (uint); // Testing\n\n    function getGov() external view returns (address); // checking\n\n    function mintWETH(address _to, uint _amount) external;\n\n    function oracle() external view returns (IOracle);\n}\n"
    },
    "contracts/interfaces/TokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface TokenInterface {\n    function burn(address, uint256) external;\n\n    function mint(address, uint256) external;\n\n    function transfer(address, uint256) external returns (bool);\n\n    function transferFrom(address, address, uint256) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function hasRole(bytes32, address) external view returns (bool);\n\n    function approve(address, uint256) external returns (bool);\n\n    function allowance(address, address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/TradingCallbacksInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\ninterface TradingCallbacksInterface {\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    function tradeLastUpdated(\n        address,\n        uint,\n        uint,\n        TradeType\n    ) external view returns (LastUpdated memory);\n\n    function setTradeLastUpdated(\n        SimplifiedTradeId calldata,\n        LastUpdated memory\n    ) external;\n\n    function setTradeData(\n        SimplifiedTradeId calldata,\n        TradeData memory\n    ) external;\n\n    function canExecuteTimeout() external view returns (uint);\n\n    function pairMaxLeverage(uint) external view returns (uint);\n}\n"
    },
    "contracts/libraries/ChainUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/IArbSys.sol\";\n\nlibrary ChainUtils {\n    uint256 public constant ARBITRUM_MAINNET = 42161;\n    uint256 public constant ARBITRUM_GOERLI = 421613;\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\n\n    function getBlockNumber() internal view returns (uint) {\n        if (\n            block.chainid == ARBITRUM_MAINNET ||\n            block.chainid == ARBITRUM_GOERLI\n        ) {\n            return ARB_SYS.arbBlockNumber();\n        }\n\n        return block.number;\n    }\n\n    function getUint48BlockNumber(\n        uint blockNumber\n    ) internal pure returns (uint48) {\n        require(blockNumber <= type(uint48).max, \"OVERFLOW\");\n        return uint48(blockNumber);\n    }\n}\n"
    },
    "contracts/libraries/PackingUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nlibrary PackingUtils {\n    function pack(\n        uint256[] memory values,\n        uint256[] memory bitLengths\n    ) external pure returns (uint256 packed) {\n        require(\n            values.length == bitLengths.length,\n            \"Mismatch in the lengths of values and bitLengths arrays\"\n        );\n\n        uint256 currentShift;\n\n        for (uint256 i; i < values.length; i++) {\n            require(\n                currentShift + bitLengths[i] <= 256,\n                \"Packed value exceeds 256 bits\"\n            );\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            require(\n                values[i] <= maxValue,\n                \"Value too large for specified bit length\"\n            );\n\n            uint256 maskedValue = values[i] & maxValue;\n            packed |= maskedValue << currentShift;\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack(\n        uint256 packed,\n        uint256[] memory bitLengths\n    ) external pure returns (uint256[] memory values) {\n        values = new uint256[](bitLengths.length);\n\n        uint256 currentShift;\n        for (uint256 i; i < bitLengths.length; i++) {\n            require(\n                currentShift + bitLengths[i] <= 256,\n                \"Unpacked value exceeds 256 bits\"\n            );\n\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\n            uint256 mask = maxValue << currentShift;\n            values[i] = (packed & mask) >> currentShift;\n\n            currentShift += bitLengths[i];\n        }\n    }\n\n    function unpack256To64(\n        uint256 packed\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\n        a = uint64(packed);\n        b = uint64(packed >> 64);\n        c = uint64(packed >> 128);\n        d = uint64(packed >> 192);\n    }\n\n    // Function-specific unpacking utils\n    function unpackExecuteNftOrder(\n        uint256 packed\n    )\n        external\n        pure\n        returns (\n            uint256 a,\n            address b,\n            uint256 c,\n            uint256 d,\n            uint256 e,\n            uint256 f\n        )\n    {\n        a = packed & 0xFF; // 8 bits\n        b = address(uint160(packed >> 8)); // 160 bits\n        c = (packed >> 168) & 0xFFFF; // 16 bits\n        d = (packed >> 184) & 0xFFFF; // 16 bits\n        e = (packed >> 200) & 0xFFFF; // 16 bits\n        f = (packed >> 216) & 0xFFFF; // 16 bits\n    }\n}\n"
    },
    "contracts/libraries/TradeUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"../interfaces/StorageInterface.sol\";\nimport \"../interfaces/TradingCallbacksInterface.sol\";\n\nlibrary TradeUtils {\n    function _getTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type\n    )\n        internal\n        view\n        returns (\n            TradingCallbacksInterface,\n            TradingCallbacksInterface.LastUpdated memory,\n            TradingCallbacksInterface.SimplifiedTradeId memory\n        )\n    {\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\n            .tradeLastUpdated(trader, pairIndex, index, _type);\n\n        return (\n            callbacks,\n            l,\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            )\n        );\n    }\n\n    function setTradeLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        uint32 b = uint32(blockNumber);\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        callbacks.setTradeLastUpdated(\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            ),\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\n        );\n    }\n\n    function setSlLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n            TradingCallbacksInterface.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.sl = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function setTpLastUpdated(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint blockNumber\n    ) external {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n            TradingCallbacksInterface.SimplifiedTradeId memory id\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\n\n        l.tp = uint32(blockNumber);\n        callbacks.setTradeLastUpdated(id, l);\n    }\n\n    function isTpInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\n    }\n\n    function isSlInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\n    }\n\n    function isLimitInTimeout(\n        address _callbacks,\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\n        uint currentBlock\n    ) external view returns (bool) {\n        (\n            TradingCallbacksInterface callbacks,\n            TradingCallbacksInterface.LastUpdated memory l,\n\n        ) = _getTradeLastUpdated(\n                _callbacks,\n                id.trader,\n                id.pairIndex,\n                id.index,\n                id.tradeType\n            );\n\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\n    }\n\n    function setTradeData(\n        address _callbacks,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType _type,\n        uint maxSlippageP\n    ) external {\n        require(maxSlippageP <= type(uint40).max, \"OVERFLOW\");\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\n            _callbacks\n        );\n        callbacks.setTradeData(\n            TradingCallbacksInterface.SimplifiedTradeId(\n                trader,\n                pairIndex,\n                index,\n                _type\n            ),\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\n        );\n    }\n}\n"
    },
    "contracts/Trading.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./interfaces/ReferralsInterface.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\nimport \"./Delegatable.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./libraries/TradeUtils.sol\";\nimport \"./libraries/PackingUtils.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\n\ncontract Trading is Delegatable {\n    using TradeUtils for address;\n    using PackingUtils for uint256;\n\n    // Contracts (constant)\n    StorageInterface public immutable storageT;\n    NftRewardsInterfaceV6_3_1 public immutable nftRewards;\n    PairInfosInterface public immutable pairInfos;\n    ReferralsInterface public immutable referrals;\n    BorrowingFeesInterface public immutable borrowingFees;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10;\n    uint constant MAX_SL_P = 75; // -75% PNL\n\n    // Params (adjustable)\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\n    uint public marketOrdersTimeout; // block (eg. 30)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n\n    // Events\n    event Done(bool done);\n    event Paused(bool paused);\n\n    event NumberUpdated(string name, uint value);\n\n    event MarketOrderInitiated(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        bool open\n    );\n\n    event OpenLimitPlaced(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n    event OpenLimitUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newPrice,\n        uint newTp,\n        uint newSl,\n        uint maxSlippageP\n    );\n    event OpenLimitCanceled(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n\n    event TpUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newTp\n    );\n    event SlUpdated(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        uint newSl\n    );\n\n    event NftOrderInitiated(\n        uint orderId,\n        address indexed nftHolder,\n        address indexed trader,\n        uint indexed pairIndex\n    );\n    event NftOrderSameBlock(\n        address indexed nftHolder,\n        address indexed trader,\n        uint indexed pairIndex\n    );\n\n    event ChainlinkCallbackTimeout(\n        uint indexed orderId,\n        StorageInterface.PendingMarketOrder order\n    );\n    event CouldNotCloseTrade(\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index\n    );\n\n    constructor(\n        StorageInterface _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        PairInfosInterface _pairInfos,\n        ReferralsInterface _referrals,\n        BorrowingFeesInterface _borrowingFees,\n        uint _maxPosWETH,\n        uint _marketOrdersTimeout\n    ) {\n        require(\n            address(_storageT) != address(0) &&\n                address(_nftRewards) != address(0) &&\n                address(_pairInfos) != address(0) &&\n                address(_referrals) != address(0) &&\n                address(_borrowingFees) != address(0) &&\n                _maxPosWETH > 0 &&\n                _marketOrdersTimeout > 0,\n            \"WRONG_PARAMS\"\n        );\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        borrowingFees = _borrowingFees;\n\n        maxPosWETH = _maxPosWETH;\n        marketOrdersTimeout = _marketOrdersTimeout;\n    }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier notContract() {\n        isNotContract();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        require(msg.sender == storageT.gov(), \"GOV_ONLY\");\n    }\n\n    function isNotContract() private view {\n        require(tx.origin == msg.sender);\n    }\n\n    function isNotDone() private view {\n        require(!isDone, \"DONE\");\n    }\n\n    // Manage params\n    function setMaxPosWETH(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        maxPosWETH = value;\n        emit NumberUpdated(\"maxPosWETH\", value);\n    }\n\n    function setMarketOrdersTimeout(uint value) external onlyGov {\n        require(value > 0, \"VALUE_0\");\n        marketOrdersTimeout = value;\n        emit NumberUpdated(\"marketOrdersTimeout\", value);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n        emit Paused(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n        emit Done(isDone);\n    }\n\n    // Open new trade (MARKET/LIMIT)\n    function openTrade(\n        StorageInterface.Trade memory t,\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\n        uint spreadReductionId,\n        uint slippageP // 1e10 (%)\n    )\n        external\n        // address referrer\n        notContract\n        notDone\n    {\n        require(!isPaused, \"PAUSED\");\n        require(t.openPrice * slippageP < type(uint256).max, \"OVERFLOW\");\n        require(t.openPrice > 0, \"PRICE_ZERO\");\n\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        address sender = _msgSender();\n\n        require(\n            storageT.openTradesCount(sender, t.pairIndex) +\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\n                storageT.maxTradesPerPair(),\n            \"MAX_TRADES_PER_PAIR\"\n        );\n\n        require(\n            storageT.pendingOrderIdsCount(sender) <\n                storageT.maxPendingMarketOrders(),\n            \"MAX_PENDING_ORDERS\"\n        );\n        require(t.positionSizeWETH <= maxPosWETH, \"ABOVE_MAX_POS\");\n        require(\n            t.positionSizeWETH * t.leverage >=\n                pairsStored.pairMinLevPosWETH(t.pairIndex),\n            \"BELOW_MIN_POS\"\n        );\n\n        require(\n            t.leverage > 0 &&\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\n            \"LEVERAGE_INCORRECT\"\n        );\n\n        // require(\n        //     spreadReductionId == 0 ||\n        //         storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\n        //     \"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\"\n        // );\n\n        require(\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\n            \"WRONG_TP\"\n        );\n        require(\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\n            \"WRONG_SL\"\n        );\n\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\n            0,\n            t.pairIndex,\n            t.buy,\n            t.positionSizeWETH * t.leverage\n        );\n        require(\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\n            \"PRICE_IMPACT_TOO_HIGH\"\n        );\n\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\n\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\n            // storageT.storeOpenLimitOrder(\n            //     StorageInterface.OpenLimitOrder(\n            //         sender,\n            //         t.pairIndex,\n            //         index,\n            //         t.positionSizeWETH,\n            //         spreadReductionId > 0\n            //             ? storageT.spreadReductionsP(spreadReductionId - 1)\n            //             : 0,\n            //         t.buy,\n            //         t.leverage,\n            //         t.tp,\n            //         t.sl,\n            //         t.openPrice,\n            //         t.openPrice,\n            //         block.number,\n            //         0\n            //     )\n            // );\n            // nftRewards.setOpenLimitOrderType(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     orderType\n            // );\n            // address c = storageT.callbacks();\n            // c.setTradeLastUpdated(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     TradingCallbacksInterface.TradeType.LIMIT,\n            //     ChainUtils.getBlockNumber()\n            // );\n            // c.setTradeData(\n            //     sender,\n            //     t.pairIndex,\n            //     index,\n            //     TradingCallbacksInterface.TradeType.LIMIT,\n            //     slippageP\n            // );\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\n        } else {\n            uint orderId = aggregator.getPrice(\n                t.pairIndex,\n                AggregatorInterfaceV1_4.OrderType.MARKET_OPEN,\n                t.positionSizeWETH * t.leverage,\n                ChainUtils.getBlockNumber()\n            );\n\n            // storageT.storePendingMarketOrder(\n            //     StorageInterface.PendingMarketOrder(\n            //         StorageInterface.Trade(\n            //             sender,\n            //             t.pairIndex,\n            //             0,\n            //             0,\n            //             t.positionSizeWETH,\n            //             0,\n            //             t.buy,\n            //             t.leverage,\n            //             t.tp,\n            //             t.sl\n            //         ),\n            //         0,\n            //         t.openPrice,\n            //         slippageP,\n            //         0,\n            //         0\n            //     ),\n            //     orderId,\n            //     true\n            // );\n\n            (storageT.priceAggregator()).marketOrderfulfill(\n                orderId,\n                StorageInterface.PendingMarketOrder(\n                    StorageInterface.Trade(\n                        sender,\n                        t.pairIndex,\n                        0,\n                        0,\n                        t.positionSizeWETH,\n                        0,\n                        t.buy,\n                        t.leverage,\n                        t.tp,\n                        t.sl\n                    ),\n                    0,\n                    t.openPrice,\n                    slippageP,\n                    0,\n                    0\n                )\n            );\n\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\n        }\n\n        // referrals.registerPotentialReferrer(sender, referrer);\n    }\n\n    // Close trade (MARKET)\n    function closeTradeMarket(\n        uint pairIndex,\n        uint index\n    ) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterface.Trade memory t = storageT.openTrades(\n            sender,\n            pairIndex,\n            index\n        );\n        StorageInterface.TradeInfo memory i = storageT.openTradesInfo(\n            sender,\n            pairIndex,\n            index\n        );\n\n        require(\n            storageT.pendingOrderIdsCount(sender) <\n                storageT.maxPendingMarketOrders(),\n            \"MAX_PENDING_ORDERS\"\n        );\n        require(!i.beingMarketClosed, \"ALREADY_BEING_CLOSED\");\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint orderId = storageT.priceAggregator().getPrice(\n            pairIndex,\n            AggregatorInterfaceV1_4.OrderType.MARKET_CLOSE,\n            (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\n            ChainUtils.getBlockNumber()\n        );\n\n        // storageT.storePendingMarketOrder(\n        //     StorageInterface.PendingMarketOrder(\n        //         StorageInterface.Trade(\n        //             sender,\n        //             pairIndex,\n        //             index,\n        //             0,\n        //             0,\n        //             0,\n        //             false,\n        //             0,\n        //             0,\n        //             0\n        //         ),\n        //         0,\n        //         0,\n        //         0,\n        //         0,\n        //         0\n        //     ),\n        //     orderId,\n        //     false\n        // );\n\n        (storageT.priceAggregator()).marketOrderfulfill(\n            orderId,\n            StorageInterface.PendingMarketOrder(\n                StorageInterface.Trade(\n                    sender,\n                    pairIndex,\n                    index,\n                    0,\n                    0,\n                    0,\n                    false,\n                    0,\n                    0,\n                    0\n                ),\n                0,\n                0,\n                0,\n                0,\n                0\n            )\n        );\n\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\n    }\n\n    // Manage limit order (OPEN)\n    // function updateOpenLimitOrder(\n    //     uint pairIndex,\n    //     uint index,\n    //     uint price, // PRECISION\n    //     uint tp,\n    //     uint sl,\n    //     uint maxSlippageP\n    // ) external notContract notDone {\n    //     require(price > 0, \"PRICE_ZERO\");\n\n    //     address sender = _msgSender();\n    //     require(\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\n    //         \"NO_LIMIT\"\n    //     );\n\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\n    //         sender,\n    //         pairIndex,\n    //         index\n    //     );\n\n    //     require(tp == 0 || (o.buy ? tp > price : tp < price), \"WRONG_TP\");\n    //     require(sl == 0 || (o.buy ? sl < price : sl > price), \"WRONG_SL\");\n\n    //     require(price * maxSlippageP < type(uint256).max, \"OVERFLOW\");\n\n    //     checkNoPendingTrigger(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         StorageInterface.LimitOrder.OPEN\n    //     );\n\n    //     o.minPrice = price;\n    //     o.maxPrice = price;\n    //     o.tp = tp;\n    //     o.sl = sl;\n\n    //     storageT.updateOpenLimitOrder(o);\n\n    //     address c = storageT.callbacks();\n    //     c.setTradeLastUpdated(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         TradingCallbacksInterface.TradeType.LIMIT,\n    //         ChainUtils.getBlockNumber()\n    //     );\n    //     c.setTradeData(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         TradingCallbacksInterface.TradeType.LIMIT,\n    //         maxSlippageP\n    //     );\n\n    //     emit OpenLimitUpdated(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         price,\n    //         tp,\n    //         sl,\n    //         maxSlippageP\n    //     );\n    // }\n\n    // function cancelOpenLimitOrder(\n    //     uint pairIndex,\n    //     uint index\n    // ) external notContract notDone {\n    //     address sender = _msgSender();\n    //     require(\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\n    //         \"NO_LIMIT\"\n    //     );\n\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\n    //         sender,\n    //         pairIndex,\n    //         index\n    //     );\n\n    //     checkNoPendingTrigger(\n    //         sender,\n    //         pairIndex,\n    //         index,\n    //         StorageInterface.LimitOrder.OPEN\n    //     );\n\n    //     storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\n    //     storageT.transferWETH(address(storageT), sender, o.positionSize);\n\n    //     emit OpenLimitCanceled(sender, pairIndex, index);\n    // }\n\n    // Manage limit order (TP/SL)\n    function updateTp(\n        uint pairIndex,\n        uint index,\n        uint newTp\n    ) external notContract notDone {\n        address sender = _msgSender();\n\n        // checkNoPendingTrigger(\n        //     sender,\n        //     pairIndex,\n        //     index,\n        //     StorageInterface.LimitOrder.TP\n        // );\n\n        StorageInterface.Trade memory t = storageT.openTrades(\n            sender,\n            pairIndex,\n            index\n        );\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        storageT.updateTp(sender, pairIndex, index, newTp);\n        storageT.callbacks().setTpLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksInterface.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit TpUpdated(sender, pairIndex, index, newTp);\n    }\n\n    function updateSl(\n        uint pairIndex,\n        uint index,\n        uint newSl\n    ) external notContract notDone {\n        address sender = _msgSender();\n\n        // checkNoPendingTrigger(\n        //     sender,\n        //     pairIndex,\n        //     index,\n        //     StorageInterface.LimitOrder.SL\n        // );\n\n        StorageInterface.Trade memory t = storageT.openTrades(\n            sender,\n            pairIndex,\n            index\n        );\n        require(t.leverage > 0, \"NO_TRADE\");\n\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\n\n        require(\n            newSl == 0 ||\n                (\n                    t.buy\n                        ? newSl >= t.openPrice - maxSlDist\n                        : newSl <= t.openPrice + maxSlDist\n                ),\n            \"SL_TOO_BIG\"\n        );\n\n        storageT.updateSl(sender, pairIndex, index, newSl);\n        storageT.callbacks().setSlLastUpdated(\n            sender,\n            pairIndex,\n            index,\n            TradingCallbacksInterface.TradeType.MARKET,\n            ChainUtils.getBlockNumber()\n        );\n\n        emit SlUpdated(sender, pairIndex, index, newSl);\n    }\n\n    // Execute limit order\n    function executeNftOrder(\n        uint _orderType,\n        address trader,\n        uint pairIndex,\n        uint index,\n        uint nftId,\n        uint nftType\n    ) external notContract notDone {\n        // (\n        //     uint _orderType,\n        //     address trader,\n        //     uint pairIndex,\n        //     uint index,\n        //     uint nftId,\n        //     uint nftType\n        // ) = packed.unpackExecuteNftOrder();\n        StorageInterface.LimitOrder orderType = StorageInterface.LimitOrder(\n            _orderType\n        );\n        address sender = _msgSender();\n\n        // require(nftType >= 1 && nftType <= 5, \"WRONG_NFT_TYPE\");\n        // require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \"NO_NFT\");\n\n        // require(\n        //     block.number >=\n        //         storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(),\n        //     \"SUCCESS_TIMELOCK\"\n        // );\n\n        bool isOpenLimit = orderType == StorageInterface.LimitOrder.OPEN;\n        TradingCallbacksInterface.TradeType tradeType = isOpenLimit\n            ? TradingCallbacksInterface.TradeType.LIMIT\n            : TradingCallbacksInterface.TradeType.MARKET;\n\n        // require(\n        //     canExecute(\n        //         orderType,\n        //         TradingCallbacksInterface.SimplifiedTradeId(\n        //             trader,\n        //             pairIndex,\n        //             index,\n        //             tradeType\n        //         )\n        //     ),\n        //     \"IN_TIMEOUT\"\n        // );\n\n        // handleBotInUse(sender, nftId, trader, pairIndex, index);\n\n        StorageInterface.Trade memory t;\n\n        if (isOpenLimit) {\n            revert(\"Open Limit orders not supported yet\");\n            // require(\n            //     storageT.hasOpenLimitOrder(trader, pairIndex, index),\n            //     \"NO_LIMIT\"\n            // );\n        } else {\n            t = storageT.openTrades(trader, pairIndex, index);\n\n            require(t.leverage > 0, \"NO_TRADE\");\n\n            if (orderType == StorageInterface.LimitOrder.LIQ) {\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        t.positionSizeWETH,\n                        t.leverage\n                    )\n                );\n\n\n                require(\n                    t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl),\n                    \"HAS_SL\"\n                );\n            } else {\n                require(\n                    orderType != StorageInterface.LimitOrder.SL || t.sl > 0,\n                    \"NO_SL\"\n                );\n                require(\n                    orderType != StorageInterface.LimitOrder.TP || t.tp > 0,\n                    \"NO_TP\"\n                );\n            }\n        }\n\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n        //         .TriggeredLimitId(trader, pairIndex, index, orderType);\n\n        if (\n            true\n            // !nftRewards.triggered(triggeredLimitId) ||\n            // nftRewards.timedOut(triggeredLimitId)\n        ) {\n            uint leveragedPosWETH;\n\n            if (isOpenLimit) {\n                // StorageInterface.OpenLimitOrder memory l = storageT\n                //     .getOpenLimitOrder(trader, pairIndex, index);\n                // leveragedPosWETH = l.positionSize * l.leverage;\n                // (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\n                //     0,\n                //     l.pairIndex,\n                //     l.buy,\n                //     leveragedPosWETH\n                // );\n                // require(\n                //     priceImpactP * l.leverage <=\n                //         pairInfos.maxNegativePnlOnOpenP(),\n                //     \"PRICE_IMPACT_TOO_HIGH\"\n                // );\n            } else {\n                leveragedPosWETH =\n                    (t.initialPosToken *\n                        storageT\n                            .openTradesInfo(trader, pairIndex, index)\n                            .tokenPriceWETH *\n                        t.leverage) /\n                    PRECISION;\n            }\n\n            // storageT.transferLinkToAggregator(\n            //     sender,\n            //     pairIndex,\n            //     leveragedPosWETH\n            // );\n\n            (uint orderId, uint linkFee) = getPriceNftOrder(\n                isOpenLimit,\n                trader,\n                pairIndex,\n                index,\n                tradeType,\n                orderType,\n                leveragedPosWETH\n            );\n\n            StorageInterface.PendingNftOrder memory pendingNftOrder;\n            pendingNftOrder.nftHolder = sender;\n            pendingNftOrder.nftId = nftId;\n            pendingNftOrder.trader = trader;\n            pendingNftOrder.pairIndex = pairIndex;\n            pendingNftOrder.index = index;\n            pendingNftOrder.orderType = orderType;\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\n            (storageT.priceAggregator()).nftOrderfulfill(\n                orderId,\n                pendingNftOrder\n            );\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\n        } else {\n            // nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\n\n            emit NftOrderSameBlock(sender, trader, pairIndex);\n        }\n    }\n\n    // Market timeout\n    function openTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterface.PendingMarketOrder memory o = storageT\n            .reqID_pendingMarketOrder(_order);\n        StorageInterface.Trade memory t = o.trade;\n\n        require(\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\n            \"WAIT_TIMEOUT\"\n        );\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage > 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, true);\n        storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    function closeTradeMarketTimeout(uint _order) external notContract notDone {\n        address sender = _msgSender();\n\n        StorageInterface.PendingMarketOrder memory o = storageT\n            .reqID_pendingMarketOrder(_order);\n        StorageInterface.Trade memory t = o.trade;\n\n        require(\n            o.block > 0 && block.number >= o.block + marketOrdersTimeout,\n            \"WAIT_TIMEOUT\"\n        );\n        require(t.trader == sender, \"NOT_YOUR_ORDER\");\n        require(t.leverage == 0, \"WRONG_MARKET_ORDER_TYPE\");\n\n        storageT.unregisterPendingMarketOrder(_order, false);\n\n        (bool success, ) = address(this).delegatecall(\n            abi.encodeWithSignature(\n                \"closeTradeMarket(uint256,uint256)\",\n                t.pairIndex,\n                t.index\n            )\n        );\n\n        if (!success) {\n            emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\n        }\n\n        emit ChainlinkCallbackTimeout(_order, o);\n    }\n\n    // //Helpers\n    // function checkNoPendingTrigger(\n    //     address trader,\n    //     uint pairIndex,\n    //     uint index,\n    //     StorageInterface.LimitOrder orderType\n    // ) private view {\n    //     NftRewardsInterfaceV6_3_1.TriggeredLimitId\n    //         memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n    //             .TriggeredLimitId(trader, pairIndex, index, orderType);\n    //     require(\n    //         !nftRewards.triggered(triggeredLimitId) ||\n    //             nftRewards.timedOut(triggeredLimitId),\n    //         \"PENDING_TRIGGER\"\n    //     );\n    // }\n\n    // function canExecute(\n    //     StorageInterface.LimitOrder orderType,\n    //     TradingCallbacksInterface.SimplifiedTradeId memory id\n    // ) private view returns (bool) {\n    //     if (orderType == StorageInterface.LimitOrder.LIQ) return true;\n\n    //     uint b = ChainUtils.getBlockNumber();\n    //     address cb = storageT.callbacks();\n\n    //     if (orderType == StorageInterface.LimitOrder.TP)\n    //         return !cb.isTpInTimeout(id, b);\n    //     if (orderType == StorageInterface.LimitOrder.SL)\n    //         return !cb.isSlInTimeout(id, b);\n\n    //     return !cb.isLimitInTimeout(id, b);\n    // }\n\n    function pairMaxLeverage(\n        PairsStorageInterfaceV6 pairsStored,\n        uint pairIndex\n    ) private view returns (uint) {\n        uint max = TradingCallbacksInterface(storageT.callbacks())\n            .pairMaxLeverage(pairIndex);\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\n    }\n\n    // function handleBotInUse(\n    //     address sender,\n    //     uint nftId,\n    //     address trader,\n    //     uint pairIndex,\n    //     uint index\n    // ) private {\n    //     (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\n    //         block.number,\n    //         sender,\n    //         nftId,\n    //         trader,\n    //         pairIndex,\n    //         index\n    //     );\n    //     require(!nftRewards.nftBotInUse(nftHash, botHash), \"BOT_IN_USE\");\n\n    //     nftRewards.setNftBotInUse(nftHash, botHash);\n    // }\n\n    function getPriceNftOrder(\n        bool isOpenLimit,\n        address trader,\n        uint pairIndex,\n        uint index,\n        TradingCallbacksInterface.TradeType tradeType,\n        StorageInterface.LimitOrder orderType,\n        uint leveragedPosWETH\n    ) private returns (uint orderId, uint linkFee) {\n        TradingCallbacksInterface.LastUpdated\n            memory lastUpdated = TradingCallbacksInterface(storageT.callbacks())\n                .tradeLastUpdated(trader, pairIndex, index, tradeType);\n\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n\n        orderId = aggregator.getPrice(\n            pairIndex,\n            isOpenLimit\n                ? AggregatorInterfaceV1_4.OrderType.LIMIT_OPEN\n                : AggregatorInterfaceV1_4.OrderType.LIMIT_CLOSE,\n            leveragedPosWETH,\n            isOpenLimit\n                ? lastUpdated.limit\n                : orderType == StorageInterface.LimitOrder.SL\n                ? lastUpdated.sl\n                : orderType == StorageInterface.LimitOrder.TP\n                ? lastUpdated.tp\n                : lastUpdated.created\n        );\n\n        // linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\n    }\n}\n"
    },
    "contracts/TradingCallbacks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/StorageInterface.sol\";\nimport \"./interfaces/NFTRewardInterfaceV6_3.sol\";\nimport \"./interfaces/PairInfosInterface.sol\";\nimport \"./interfaces/ReferralsInterface.sol\";\nimport \"./interfaces/StakingInterface.sol\";\nimport \"./libraries/ChainUtils.sol\";\nimport \"./interfaces/BorrowingFeesInterface.sol\";\n\ncontract TradingCallbacks is Initializable {\n    // Contracts (constant)\n    StorageInterface public storageT;\n    NftRewardsInterfaceV6_3_1 public nftRewards;\n    PairInfosInterface public pairInfos;\n    ReferralsInterface public referrals;\n    StakingInterface public staking;\n\n    // Params (constant)\n    uint constant PRECISION = 1e10; // 10 decimals\n\n    uint constant MAX_SL_P = 75; // -75% PNL\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\n\n    // Params (adjustable)\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\n\n    // State\n    bool public isPaused; // Prevent opening new trades\n    bool public isDone; // Prevent any interaction with the contract\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\n\n    // Last Updated State\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\n        public tradeLastUpdated; // Block numbers for last updated\n\n    // v6.3.2 Storage/State\n    BorrowingFeesInterface public borrowingFees;\n\n    mapping(uint => uint) public pairMaxLeverage;\n\n    // v6.4 Storage\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\n        public tradeData; // More storage for trades / limit orders\n\n    // Custom data types\n    struct AggregatorAnswer {\n        uint orderId;\n        uint price;\n        uint spreadP;\n        uint open;\n        uint high;\n        uint low;\n    }\n\n    struct PendingMarketOrder {\n        Trade trade;\n        uint block;\n        uint wantedPrice; // PRECISION\n        uint slippageP; // PRECISION (%)\n        uint spreadReductionP;\n        uint tokenId; // index in supportedTokens\n    }\n\n    struct Trade {\n        address trader;\n        uint pairIndex;\n        uint index;\n        uint initialPosToken; // 1e18\n        uint positionSizeWETH; // 1e18\n        uint openPrice; // PRECISION\n        bool buy;\n        uint leverage;\n        uint tp; // PRECISION\n        uint sl; // PRECISION\n    }\n\n    // Useful to avoid stack too deep errors\n    struct Values {\n        uint posWETH;\n        uint levPosWETH;\n        uint tokenPriceWETH;\n        int profitP;\n        uint price;\n        uint liqPrice;\n        uint WETHSentToTrader;\n        uint reward1;\n        uint reward2;\n        uint reward3;\n        bool exactExecution;\n    }\n\n    struct SimplifiedTradeId {\n        address trader;\n        uint pairIndex;\n        uint index;\n        TradeType tradeType;\n    }\n\n    struct LastUpdated {\n        uint32 tp;\n        uint32 sl;\n        uint32 limit;\n        uint32 created;\n    }\n\n    struct TradeData {\n        uint40 maxSlippageP; // 1e10 (%)\n        uint216 _placeholder; // for potential future data\n    }\n\n    struct OpenTradePrepInput {\n        uint executionPrice;\n        uint wantedPrice;\n        uint marketPrice;\n        uint spreadP;\n        uint spreadReductionP;\n        bool buy;\n        uint pairIndex;\n        uint positionSize;\n        uint leverage;\n        uint maxSlippageP;\n        uint tp;\n        uint sl;\n    }\n\n    enum TradeType {\n        MARKET,\n        LIMIT\n    }\n\n    enum CancelReason {\n        NONE,\n        PAUSED,\n        MARKET_CLOSED,\n        SLIPPAGE,\n        TP_REACHED,\n        SL_REACHED,\n        EXPOSURE_LIMITS,\n        PRICE_IMPACT,\n        MAX_LEVERAGE,\n        NO_TRADE,\n        WRONG_TRADE,\n        NOT_HIT\n    }\n\n    // Events\n    event MarketExecuted(\n        uint indexed orderId,\n        StorageInterface.Trade t,\n        bool open,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit, // before fees\n        uint WETHSentToTrader\n    );\n\n    event LimitExecuted(\n        uint indexed orderId,\n        uint limitIndex,\n        StorageInterface.Trade t,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        uint price,\n        uint priceImpactP,\n        uint positionSizeWETH,\n        int percentProfit,\n        uint WETHSentToTrader,\n        bool exactExecution\n    );\n\n    event MarketOpenCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        CancelReason cancelReason\n    );\n    event MarketCloseCanceled(\n        uint indexed orderId,\n        address indexed trader,\n        uint indexed pairIndex,\n        uint index,\n        CancelReason cancelReason\n    );\n    event NftOrderCanceled(\n        uint indexed orderId,\n        address indexed nftHolder,\n        StorageInterface.LimitOrder orderType,\n        CancelReason cancelReason\n    );\n\n    event ClosingFeeSharesPUpdated(\n        uint WETHVaultFeeP,\n        uint lpFeeP,\n        uint sssFeeP\n    );\n    event CanExecuteTimeoutUpdated(uint newValue);\n\n    event Pause(bool paused);\n    event Done(bool done);\n\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\n    event SssFeeCharged(address indexed trader, uint valueWETH);\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\n    event BorrowingFeeCharged(\n        address indexed trader,\n        uint tradeValueWETH,\n        uint feeValueWETH\n    );\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\n\n    // Custom errors (save gas)\n    error WrongParams();\n    error Forbidden();\n\n    function initialize(\n        StorageInterface _storageT,\n        NftRewardsInterfaceV6_3_1 _nftRewards,\n        PairInfosInterface _pairInfos,\n        ReferralsInterface _referrals,\n        StakingInterface _staking,\n        BorrowingFeesInterface _borrowingFees,\n        address vaultToApprove,\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP,\n        uint _canExecuteTimeout\n    ) external initializer {\n        if (\n            address(_storageT) == address(0) ||\n            address(_nftRewards) == address(0) ||\n            address(_pairInfos) == address(0) ||\n            address(_referrals) == address(0) ||\n            address(_staking) == address(0) ||\n            vaultToApprove == address(0) ||\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\n        ) {\n            revert WrongParams();\n        }\n\n        storageT = _storageT;\n        nftRewards = _nftRewards;\n        pairInfos = _pairInfos;\n        referrals = _referrals;\n        staking = _staking;\n        borrowingFees = _borrowingFees;\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        canExecuteTimeout = _canExecuteTimeout;\n        TokenInterface t = storageT.WETH();\n        t.approve(address(staking), type(uint256).max);\n        t.approve(vaultToApprove, type(uint256).max);\n    }\n\n    // function initializeV2(\n    //     BorrowingFeesInterface _borrowingFees\n    // ) external reinitializer(2) {\n    //     if (address(_borrowingFees) == address(0)) {\n    //         revert WrongParams();\n    //     }\n    //     borrowingFees = _borrowingFees;\n    // }\n\n    // Modifiers\n    modifier onlyGov() {\n        isGov();\n        _;\n    }\n    modifier onlyPriceAggregator() {\n        isPriceAggregator();\n        _;\n    }\n    modifier notDone() {\n        isNotDone();\n        _;\n    }\n    modifier onlyTrading() {\n        isTrading();\n        _;\n    }\n    modifier onlyManager() {\n        isManager();\n        _;\n    }\n\n    // Saving code size by calling these functions inside modifiers\n    function isGov() private view {\n        if (msg.sender != storageT.gov()) {\n            revert Forbidden();\n        }\n    }\n\n    function isPriceAggregator() private view {\n        if (msg.sender != address(storageT.priceAggregator())) {\n            revert Forbidden();\n        }\n    }\n\n    function isNotDone() private view {\n        if (isDone) {\n            revert Forbidden();\n        }\n    }\n\n    function isTrading() private view {\n        if (msg.sender != storageT.trading()) {\n            revert Forbidden();\n        }\n    }\n\n    function isManager() private view {\n        if (msg.sender != pairInfos.manager()) {\n            revert Forbidden();\n        }\n    }\n\n    // Manage params\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\n        _setPairMaxLeverage(pairIndex, maxLeverage);\n    }\n\n    function setPairMaxLeverageArray(\n        uint[] calldata indices,\n        uint[] calldata values\n    ) external onlyManager {\n        uint len = indices.length;\n\n        if (len != values.length) {\n            revert WrongParams();\n        }\n\n        for (uint i; i < len; ) {\n            _setPairMaxLeverage(indices[i], values[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\n        pairMaxLeverage[pairIndex] = maxLeverage;\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\n    }\n\n    function setClosingFeeSharesP(\n        uint _WETHVaultFeeP,\n        uint _lpFeeP,\n        uint _sssFeeP\n    ) external onlyGov {\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\n            revert WrongParams();\n        }\n\n        WETHVaultFeeP = _WETHVaultFeeP;\n        lpFeeP = _lpFeeP;\n        sssFeeP = _sssFeeP;\n\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\n    }\n\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\n            revert WrongParams();\n        }\n        canExecuteTimeout = _canExecuteTimeout;\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\n    }\n\n    // Manage state\n    function pause() external onlyGov {\n        isPaused = !isPaused;\n\n        emit Pause(isPaused);\n    }\n\n    function done() external onlyGov {\n        isDone = !isDone;\n\n        emit Done(isDone);\n    }\n\n    // Callbacks\n    function openTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = o.trade;\n\n        (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        ) = _openTradePrep(\n                OpenTradePrepInput(\n                    a.price,\n                    o.wantedPrice,\n                    a.price,\n                    a.spreadP,\n                    o.spreadReductionP,\n                    t.buy,\n                    t.pairIndex,\n                    t.positionSizeWETH,\n                    t.leverage,\n                    o.slippageP,\n                    t.tp,\n                    t.sl\n                )\n            );\n\n        t.openPrice = priceAfterImpact;\n        if (cancelReason == CancelReason.NONE) {\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\n                t,\n                1500,\n                0\n            );\n\n            emit MarketExecuted(\n                a.orderId,\n                finalTrade,\n                true,\n                finalTrade.openPrice,\n                priceImpactP,\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\n                0,\n                0\n            );\n        } else {\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\n            //     t.pairIndex,\n            //     t.positionSizeWETH * t.leverage,\n            //     true,\n            //     true\n            // );\n            // transferFromStorageToAddress(\n            //     t.trader,\n            //     t.positionSizeWETH - devGovFeesWETH\n            // );\n\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\n            emit MarketOpenCanceled(\n                a.orderId,\n                t.trader,\n                t.pairIndex,\n                cancelReason\n            );\n        }\n\n        // storageT.unregisterPendingMarketOrder(a.orderId, true);\n    }\n\n    function closeTradeMarketCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingMarketOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\n        //     a.orderId\n        // );\n\n        // if (o.block == 0) {\n        //     return;\n        // }\n\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trade.trader,\n            o.trade.pairIndex,\n            o.trade.index\n        );\n\n        CancelReason cancelReason = t.leverage == 0\n            ? CancelReason.NO_TRADE\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\n\n        if (cancelReason != CancelReason.NO_TRADE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n            AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n\n            Values memory v;\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    a.price,\n                    t.buy,\n                    t.leverage\n                );\n                v.posWETH = v.levPosWETH / t.leverage;\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    true,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    (v.levPosWETH *\n                        aggregator.pairsStorage().pairCloseFeeP(t.pairIndex)) /\n                        100 /\n                        PRECISION,\n                    (v.levPosWETH *\n                        aggregator.pairsStorage().pairNftLimitOrderFeeP(\n                            t.pairIndex\n                        )) /\n                        100 /\n                        PRECISION\n                );\n\n                emit MarketExecuted(\n                    a.orderId,\n                    t,\n                    false,\n                    a.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader\n                );\n            } else {\n                // Dev / gov rewards to pay for oracle cost\n                // Charge in WETH if collateral in storage or token if collateral in vault\n                // v.reward1 = t.positionSizeWETH > 0\n                //     ? storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         v.levPosWETH,\n                //         true,\n                //         true\n                //     )\n                //     : (storageT.handleDevGovFees(\n                //         t.pairIndex,\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\n                //         false,\n                //         true\n                //     ) * v.tokenPriceWETH) / PRECISION;\n\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\n                // storageT.updateTrade(t);\n\n                emit DevGovFeeCharged(t.trader, v.reward1);\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit MarketCloseCanceled(\n                a.orderId,\n                o.trade.trader,\n                o.trade.pairIndex,\n                o.trade.index,\n                cancelReason\n            );\n        }\n\n        storageT.unregisterPendingMarketOrder(a.orderId, false);\n    }\n\n    function executeNftOpenOrderCallback(\n        AggregatorAnswer memory a\n    ) external onlyPriceAggregator notDone {\n        StorageInterface.PendingNftOrder memory n = storageT\n            .reqID_pendingNftOrder(a.orderId);\n\n        CancelReason cancelReason = !storageT.hasOpenLimitOrder(\n            n.trader,\n            n.pairIndex,\n            n.index\n        )\n            ? CancelReason.NO_TRADE\n            : CancelReason.NONE;\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterface.OpenLimitOrder memory o = storageT\n                .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\n\n            NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\n                .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\n\n            cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\n                ? CancelReason.NONE\n                : CancelReason.NOT_HIT;\n\n            // Note: o.minPrice always equals o.maxPrice so can use either\n            (\n                uint priceImpactP,\n                uint priceAfterImpact,\n                CancelReason _cancelReason\n            ) = _openTradePrep(\n                    OpenTradePrepInput(\n                        cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\n                        o.maxPrice,\n                        a.open,\n                        a.spreadP,\n                        o.spreadReductionP,\n                        o.buy,\n                        o.pairIndex,\n                        o.positionSize,\n                        o.leverage,\n                        tradeData[o.trader][o.pairIndex][o.index][\n                            TradeType.LIMIT\n                        ].maxSlippageP,\n                        o.tp,\n                        o.sl\n                    )\n                );\n\n            bool exactExecution = cancelReason == CancelReason.NONE;\n\n            cancelReason = !exactExecution &&\n                (\n                    o.maxPrice == 0 ||\n                        t ==\n                        NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\n                        ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\n                        : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\n                )\n                ? CancelReason.NOT_HIT\n                : _cancelReason;\n\n            if (cancelReason == CancelReason.NONE) {\n                (\n                    StorageInterface.Trade memory finalTrade,\n                    uint tokenPriceWETH\n                ) = registerTrade(\n                        StorageInterface.Trade(\n                            o.trader,\n                            o.pairIndex,\n                            0,\n                            0,\n                            o.positionSize,\n                            priceAfterImpact,\n                            o.buy,\n                            o.leverage,\n                            o.tp,\n                            o.sl\n                        ),\n                        n.nftId,\n                        n.index\n                    );\n\n                storageT.unregisterOpenLimitOrder(\n                    o.trader,\n                    o.pairIndex,\n                    o.index\n                );\n\n                emit LimitExecuted(\n                    a.orderId,\n                    n.index,\n                    finalTrade,\n                    n.nftHolder,\n                    StorageInterface.LimitOrder.OPEN,\n                    finalTrade.openPrice,\n                    priceImpactP,\n                    (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\n                    0,\n                    0,\n                    exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(\n                a.orderId,\n                n.nftHolder,\n                StorageInterface.LimitOrder.OPEN,\n                cancelReason\n            );\n        }\n\n        nftRewards.unregisterTrigger(\n            NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n                n.trader,\n                n.pairIndex,\n                n.index,\n                n.orderType\n            )\n        );\n\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    function executeNftCloseOrderCallback(\n        AggregatorAnswer memory a,\n        StorageInterface.PendingNftOrder memory o\n    ) external onlyPriceAggregator notDone {\n        // StorageInterface.PendingNftOrder memory o = storageT\n        //     .reqID_pendingNftOrder(a.orderId);\n\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\n        //         .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\n        StorageInterface.Trade memory t = getOpenTrade(\n            o.trader,\n            o.pairIndex,\n            o.index\n        );\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n\n        CancelReason cancelReason = a.price == 0\n            ? CancelReason.MARKET_CLOSED\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\n\n        if (cancelReason == CancelReason.NONE) {\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\n                t.trader,\n                t.pairIndex,\n                t.index\n            );\n\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n            Values memory v;\n            v.levPosWETH = t.positionSizeWETH * t.leverage;\n            v.posWETH = v.levPosWETH / t.leverage;\n\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\n                    BorrowingFeesInterface.LiqPriceInput(\n                        t.trader,\n                        t.pairIndex,\n                        t.index,\n                        t.openPrice,\n                        t.buy,\n                        v.posWETH,\n                        t.leverage\n                    )\n                );\n            }\n\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\n                ? t.tp\n                : (\n                    o.orderType == StorageInterface.LimitOrder.SL\n                        ? t.sl\n                        : v.liqPrice\n                );\n\n            v.exactExecution =\n                // v.price > 0 &&\n                // a.low <= v.price &&\n                // a.high >= v.price;\n                v.price == a.price;\n            if (v.exactExecution) {\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (v.posWETH * 5) / 100\n                    : (v.levPosWETH *\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\n                        100 /\n                        PRECISION;\n            } else {\n                // revert(\"only exact execution allowed\");\n                v.price = a.open;\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\n                    ? (\n                        (t.buy ? a.open <= v.liqPrice : a.open >= v.liqPrice)\n                            ? (v.posWETH * 5) / 100\n                            : 0\n                    )\n                    : (\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\n                            t.tp > 0 &&\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\n                                t.sl > 0 &&\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\n                            ? (v.levPosWETH *\n                                pairsStored.pairNftLimitOrderFeeP(\n                                    t.pairIndex\n                                )) /\n                                100 /\n                                PRECISION\n                            : 0\n                    );\n            }\n\n            cancelReason = v.reward1 == 0\n                ? CancelReason.NOT_HIT\n                : CancelReason.NONE;\n\n            // If can be triggered\n            if (cancelReason == CancelReason.NONE) {\n                v.profitP = currentPercentProfit(\n                    t.openPrice,\n                    v.price,\n                    t.buy,\n                    t.leverage\n                );\n                // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n                v.WETHSentToTrader = unregisterTrade(\n                    t,\n                    false,\n                    v.profitP,\n                    v.posWETH,\n                    i.openInterestWETH,\n                    o.orderType == StorageInterface.LimitOrder.LIQ\n                        ? v.reward1\n                        : (v.levPosWETH *\n                            pairsStored.pairCloseFeeP(t.pairIndex)) /\n                            100 /\n                            PRECISION,\n                    v.reward1\n                );\n\n                // Convert NFT bot fee from WETH to token value\n                // v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\n\n                // nftRewards.distributeNftReward(\n                //     triggeredLimitId,\n                //     v.reward2,\n                //     v.tokenPriceWETH\n                // );\n\n                // storageT.increaseNftRewards(o.nftId, v.reward2);\n\n                emit NftBotFeeCharged(t.trader, v.reward1);\n\n                emit LimitExecuted(\n                    a.orderId,\n                    o.index,\n                    t,\n                    o.nftHolder,\n                    o.orderType,\n                    v.price,\n                    0,\n                    v.posWETH,\n                    v.profitP,\n                    v.WETHSentToTrader,\n                    v.exactExecution\n                );\n            }\n        }\n\n        if (cancelReason != CancelReason.NONE) {\n            emit NftOrderCanceled(\n                a.orderId,\n                o.nftHolder,\n                o.orderType,\n                cancelReason\n            );\n        }\n\n        // nftRewards.unregisterTrigger(triggeredLimitId);\n        storageT.unregisterPendingNftOrder(a.orderId);\n    }\n\n    // Shared code between market & limit callbacks\n    function registerTrade(\n        StorageInterface.Trade memory trade,\n        uint nftId,\n        uint limitIndex\n    ) private returns (StorageInterface.Trade memory, uint) {\n        AggregatorInterfaceV1_4 aggregator = storageT.priceAggregator();\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\n\n        Values memory v;\n\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\n\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\n        //     // and before volumeReferredWETH increases\n        //     v.posWETH =\n        //         (v.levPosWETH *\n        //             (100 *\n        //                 PRECISION -\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\n        //         100 /\n        //         PRECISION;\n\n        //     v.reward1 = referrals.distributePotentialReward(\n        //         trade.trader,\n        //         v.levPosWETH,\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\n        //         v.tokenPriceWETH\n        //     );\n\n        //     sendToVault(v.reward1, trade.trader);\n        //     trade.positionSizeWETH -= v.reward1;\n\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\n        // }\n\n        // // 2. Charge opening fee - referral fee (if applicable)\n        // v.reward2 = storageT.handleDevGovFees(\n        //     trade.pairIndex,\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\n        //     true,\n        //     true\n        // );\n\n        // trade.positionSizeWETH -= v.reward2;\n\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\n\n        // // 3. Charge NFT / SSS fee\n        // v.reward2 =\n        //     (v.levPosWETH *\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\n        //     100 /\n        //     PRECISION;\n        // trade.positionSizeWETH -= v.reward2;\n\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\n        // if (nftId < 1500) {\n        //     sendToVault(v.reward2, trade.trader);\n\n        //     // Convert NFT bot fee from WETH to token value\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\n\n        //     nftRewards.distributeNftReward(\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\n        //             trade.trader,\n        //             trade.pairIndex,\n        //             limitIndex,\n        //             StorageInterface.LimitOrder.OPEN\n        //         ),\n        //         v.reward3,\n        //         v.tokenPriceWETH\n        //     );\n        //     storageT.increaseNftRewards(nftId, v.reward3);\n\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\n\n        //     // 3.2 Distribute SSS fee (if applicable)\n        // } else {\n        //     distributeStakingReward(trade.trader, v.reward2);\n        // }\n\n        // 4. Set trade final details\n        trade.index = storageT.firstEmptyTradeIndex(\n            trade.trader,\n            trade.pairIndex\n        );\n\n        // trade.initialPosToken =\n        //     (trade.positionSizeWETH * PRECISION) /\n        //     v.tokenPriceWETH;\n\n        trade.tp = correctTp(\n            trade.openPrice,\n            trade.leverage,\n            trade.tp,\n            trade.buy\n        );\n        trade.sl = correctSl(\n            trade.openPrice,\n            trade.leverage,\n            trade.sl,\n            trade.buy\n        );\n\n        // 5. Call other contracts\n        pairInfos.storeTradeInitialAccFees(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy\n        );\n        pairsStored.updateGroupCollateral(\n            trade.pairIndex,\n            trade.positionSizeWETH,\n            trade.buy,\n            true\n        );\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.positionSizeWETH * trade.leverage,\n            true,\n            trade.buy\n        );\n\n        // 6. Store final trade in storage contract\n        storageT.storeTrade(\n            trade,\n            StorageInterface.TradeInfo(\n                0,\n                v.tokenPriceWETH,\n                trade.positionSizeWETH * trade.leverage,\n                0,\n                0,\n                false\n            )\n        );\n\n        // 7. Store tradeLastUpdated\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\n            trade.pairIndex\n        ][trade.index][TradeType.MARKET];\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\n        lastUpdated.tp = currBlock;\n        lastUpdated.sl = currBlock;\n        lastUpdated.created = currBlock;\n\n        return (trade, v.tokenPriceWETH);\n    }\n\n    function unregisterTrade(\n        StorageInterface.Trade memory trade,\n        bool marketOrder,\n        int percentProfit, // PRECISION\n        uint currentWETHPos, // 1e18\n        uint openInterestWETH, // 1e18\n        uint closingFeeWETH, // 1e18\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\n    ) private returns (uint WETHSentToTrader) {\n        IToken vault = storageT.vault();\n\n        // 1. Calculate net PnL (after all closing and holding fees)\n        (WETHSentToTrader, ) = _getTradeValue(\n            trade,\n            currentWETHPos,\n            percentProfit,\n            closingFeeWETH + nftFeeWETH\n        );\n\n        // 2. Calls to other contracts\n        borrowingFees.handleTradeAction(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            openInterestWETH,\n            false,\n            trade.buy\n        );\n        getPairsStorage().updateGroupCollateral(\n            trade.pairIndex,\n            openInterestWETH / trade.leverage,\n            trade.buy,\n            false\n        );\n\n        // 3. Unregister trade from storage\n\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\n        // 4.1 If collateral in storage (opened after update)\n        if (trade.positionSizeWETH > 0) {\n            Values memory v;\n\n            // 4.1.1 WETH vault reward\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\n            // transferFromStorageToAddress(address(this), v.reward2);\n            // vault.distributeReward(v.reward2);\n\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\n\n            // 4.1.2 SSS reward\n            // v.reward3 = marketOrder\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\n            //     : (closingFeeWETH * sssFeeP) / 100;\n\n            // distributeStakingReward(trade.trader, v.reward3);\n\n            // 4.1.3 Take WETH from vault if winning trade\n            // or send WETH to vault if losing trade\n            uint WETHLeftInStorage = currentWETHPos - v.reward3 - v.reward2;\n            if (WETHSentToTrader > WETHLeftInStorage) {\n                vault.sendAssets(\n                    WETHSentToTrader - WETHLeftInStorage,\n                    trade.trader\n                );\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\n            } else {\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\n            }\n\n            // 4.2 If collateral in vault (opened before update)\n        } else {\n            vault.sendAssets(WETHSentToTrader, trade.trader);\n        }\n    }\n\n    // Utils (external)\n    function setTradeLastUpdated(\n        SimplifiedTradeId calldata _id,\n        LastUpdated memory _lastUpdated\n    ) external onlyTrading {\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _lastUpdated;\n    }\n\n    function setTradeData(\n        SimplifiedTradeId calldata _id,\n        TradeData memory _tradeData\n    ) external onlyTrading {\n        tradeData[_id.trader][_id.pairIndex][_id.index][\n            _id.tradeType\n        ] = _tradeData;\n    }\n\n    // Utils (getters)\n    function _getTradeValue(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit, // PRECISION\n        uint closingFees // 1e18\n    ) private returns (uint value, uint borrowingFee) {\n        int netProfitP;\n\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\n            trade,\n            currentWETHPos,\n            percentProfit\n        );\n        value = pairInfos.getTradeValue(\n            trade.trader,\n            trade.pairIndex,\n            trade.index,\n            trade.buy,\n            currentWETHPos,\n            trade.leverage,\n            netProfitP,\n            closingFees\n        );\n\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\n    }\n\n    function _getBorrowingFeeAdjustedPercentProfit(\n        StorageInterface.Trade memory trade,\n        uint currentWETHPos, // 1e18\n        int percentProfit // PRECISION\n    ) private view returns (int netProfitP, uint borrowingFee) {\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\n            BorrowingFeesInterface.BorrowingFeeInput(\n                trade.trader,\n                trade.pairIndex,\n                trade.index,\n                trade.buy,\n                currentWETHPos,\n                trade.leverage\n            )\n        );\n        netProfitP =\n            percentProfit -\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\n    }\n\n    function withinMaxLeverage(\n        uint pairIndex,\n        uint leverage\n    ) private view returns (bool) {\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\n        return\n            pairMaxLev == 0\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\n                : leverage <= pairMaxLev;\n    }\n\n    function withinExposureLimits(\n        uint pairIndex,\n        bool buy,\n        uint positionSizeWETH,\n        uint leverage\n    ) private view returns (bool) {\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\n\n        return\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\n                levPositionSizeWETH <=\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\n    }\n\n    function currentPercentProfit(\n        uint openPrice,\n        uint currentPrice,\n        bool buy,\n        uint leverage\n    ) private view returns (int p) {\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\n\n        p = openPrice > 0\n            ? ((\n                buy\n                    ? int(currentPrice) - int(openPrice)\n                    : int(openPrice) - int(currentPrice)\n            ) *\n                100 *\n                int(PRECISION) *\n                int(leverage)) / int(openPrice)\n            : int(0);\n\n        p = p > maxPnlP ? maxPnlP : p;\n    }\n\n    function correctTp(\n        uint openPrice,\n        uint leverage,\n        uint tp,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            tp == 0 ||\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\n            int(MAX_GAIN_P) * int(PRECISION)\n        ) {\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\n\n            return\n                buy\n                    ? openPrice + tpDiff\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\n        }\n        return tp;\n    }\n\n    function correctSl(\n        uint openPrice,\n        uint leverage,\n        uint sl,\n        bool buy\n    ) private view returns (uint) {\n        if (\n            sl > 0 &&\n            currentPercentProfit(openPrice, sl, buy, leverage) <\n            int(MAX_SL_P) * int(PRECISION) * -1\n        ) {\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\n            return buy ? openPrice - slDiff : openPrice + slDiff;\n        }\n\n        return sl;\n    }\n\n    function marketExecutionPrice(\n        uint price,\n        uint spreadP,\n        uint spreadReductionP,\n        bool long\n    ) private pure returns (uint) {\n        uint priceDiff = (price *\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\n            100 /\n            PRECISION;\n\n        return long ? price + priceDiff : price - priceDiff;\n    }\n\n    function _openTradePrep(\n        OpenTradePrepInput memory c\n    )\n        private\n        view\n        returns (\n            uint priceImpactP,\n            uint priceAfterImpact,\n            CancelReason cancelReason\n        )\n    {\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\n            marketExecutionPrice(\n                c.executionPrice,\n                c.spreadP,\n                c.spreadReductionP,\n                c.buy\n            ),\n            c.pairIndex,\n            c.buy,\n            c.positionSize * c.leverage\n        );\n\n        uint maxSlippage = c.maxSlippageP > 0\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\n            : c.wantedPrice / 100; // 1% by default\n\n        cancelReason = isPaused\n            ? CancelReason.PAUSED\n            : (\n                c.marketPrice == 0\n                    ? CancelReason.MARKET_CLOSED\n                    : (\n                        c.buy\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\n                    )\n                    ? CancelReason.SLIPPAGE\n                    : (c.tp > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact >= c.tp\n                                : priceAfterImpact <= c.tp\n                        ))\n                    ? CancelReason.TP_REACHED\n                    : (c.sl > 0 &&\n                        (\n                            c.buy\n                                ? priceAfterImpact <= c.sl\n                                : priceAfterImpact >= c.sl\n                        ))\n                    ? CancelReason.SL_REACHED\n                    : !withinExposureLimits(\n                        c.pairIndex,\n                        c.buy,\n                        c.positionSize,\n                        c.leverage\n                    )\n                    ? CancelReason.EXPOSURE_LIMITS\n                    : priceImpactP * c.leverage >\n                        pairInfos.maxNegativePnlOnOpenP()\n                    ? CancelReason.PRICE_IMPACT\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\n                    ? CancelReason.MAX_LEVERAGE\n                    : CancelReason.NONE\n            );\n    }\n\n    function getPendingMarketOrder(\n        uint orderId\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\n        return storageT.reqID_pendingMarketOrder(orderId);\n    }\n\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\n        return storageT.priceAggregator().pairsStorage();\n    }\n\n    function getOpenTrade(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterface.Trade memory) {\n        return storageT.openTrades(trader, pairIndex, index);\n    }\n\n    function getOpenTradeInfo(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) private view returns (StorageInterface.TradeInfo memory) {\n        return storageT.openTradesInfo(trader, pairIndex, index);\n    }\n\n    // Utils (private)\n    function distributeStakingReward(address trader, uint amountWETH) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        staking.distributeRewardWETH(amountWETH);\n        emit SssFeeCharged(trader, amountWETH);\n    }\n\n    function sendToVault(uint amountWETH, address trader) private {\n        transferFromStorageToAddress(address(this), amountWETH);\n        storageT.vault().receiveAssets(amountWETH, trader);\n    }\n\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\n        storageT.transferWETH(address(storageT), to, amountWETH);\n    }\n\n    // Public views\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\n        uint len = getPairsStorage().pairsCount();\n        uint[] memory lev = new uint[](len);\n\n        for (uint i; i < len; ) {\n            lev[i] = pairMaxLeverage[i];\n            unchecked {\n                ++i;\n            }\n        }\n\n        return lev;\n    }\n\n    function giveApproval() external {\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\n    }\n\n    function getTradePnl(\n        address trader,\n        uint pairIndex,\n        uint index\n    ) external view returns (int256 pnl) {\n        StorageInterface.Trade memory t = storageT.openTrades(\n            trader,\n            pairIndex,\n            index\n        );\n        (uint256 currentPrice, ) = (storageT.oracle()).getPrice(pairIndex);\n        int256 profitP = currentPercentProfit(\n            t.openPrice,\n            currentPrice,\n            t.buy,\n            t.leverage\n        );\n\n        uint256 tradeValue = pairInfos.getTradeValuePure(\n            t.positionSizeWETH,\n            profitP,\n            0,\n            0,\n            0\n        );\n\n        pnl = int(tradeValue) - int(t.positionSizeWETH);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 125
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}