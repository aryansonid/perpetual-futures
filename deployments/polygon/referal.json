{
  "address": "0xF98Ca63E102791175DA4e3dA6669c737b6249407",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allyFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startReferrerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetVolumeWETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountValueWETH",
          "type": "uint256"
        }
      ],
      "name": "AllyRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        }
      ],
      "name": "AllyRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "AllyUnwhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "AllyWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferrerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountValueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferrerRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        }
      ],
      "name": "ReferrerRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferrerUnwhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "ReferrerWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAllyFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOpenFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedStartReferrerFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTargetVolumeWETH",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allyDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsValueWETH",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allyFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllyRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferrerRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairOpenFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPriceWETH",
          "type": "uint256"
        }
      ],
      "name": "distributePotentialReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getPercentOfOpenFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        }
      ],
      "name": "getPercentOfOpenFeeP_calc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "resultP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairOpenFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        }
      ],
      "name": "getReferrerFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "getReferrersReferred",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTraderReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referred",
          "type": "address"
        }
      ],
      "name": "getTradersReferred",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerByTrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsValueWETH",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "registerPotentialReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startReferrerFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetVolumeWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "unwhitelistAlly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "unwhitelistReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateAllyFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateOpenFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateStartReferrerFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTargetVolumeWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "whitelistAlly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "whitelistReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc61a8b2563b618e56425758c4757385093f7133c60c40ec317a3a67e427a8049",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xF98Ca63E102791175DA4e3dA6669c737b6249407",
    "transactionIndex": 20,
    "gasUsed": "1750615",
    "logsBloom": "0x
    "blockHash": "0xece22d0c028ec96a7543afa014406c1a9db2060b4987e1410480106d996ab5d4",
    "transactionHash": "0xc61a8b2563b618e56425758c4757385093f7133c60c40ec317a3a67e427a8049",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 40382696,
        "transactionHash": "0xc61a8b2563b618e56425758c4757385093f7133c60c40ec317a3a67e427a8049",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000116f58266807eb000000000000000000000000000000000000000000000000423e5c6d1435619800000000000000000000000000000000000000000000115814a83ef8714f8c20000000000000000000000000000000000000000000000000422ced14edcd59ad00000000000000000000000000000000000000000000115814b9ae5097b7940b",
        "logIndex": 59,
        "blockHash": "0xece22d0c028ec96a7543afa014406c1a9db2060b4987e1410480106d996ab5d4"
      }
    ],
    "blockNumber": 40382696,
    "cumulativeGasUsed": "3636434",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8b80672AD8A146BbaAd3dd1f7f17Ee730a994e71",
    25,
    25,
    25,
    25
  ],
  "numDeployments": 1,
  "solcInputHash": "012b7d34751865cebe2589c70545c828",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allyFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startReferrerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetVolumeWETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueWETH\",\"type\":\"uint256\"}],\"name\":\"AllyRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AllyRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"ReferrerWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllyFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedOpenFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedStartReferrerFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedTargetVolumeWETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allyDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueWETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allyFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferrerRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceWETH\",\"type\":\"uint256\"}],\"name\":\"distributePotentialReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getPercentOfOpenFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"}],\"name\":\"getPercentOfOpenFeeP_calc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"}],\"name\":\"getReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"getReferrersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTraderReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referred\",\"type\":\"address\"}],\"name\":\"getTradersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerByTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueWETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerPotentialReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetVolumeWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"unwhitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"unwhitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateAllyFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateOpenFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateStartReferrerFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTargetVolumeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Referrals.sol\":\"Referrals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/Referrals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./interfaces/UniswapRouterInterface.sol\\\";\\nimport \\\"./interfaces/TokenInterface.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/VaultInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_2.sol\\\";\\nimport \\\"./interfaces/NftRewardsInterfaceV6.sol\\\";\\n\\ncontract Referrals {\\n    // CONSTANTS\\n    uint constant PRECISION = 1e10;\\n    StorageInterface public immutable storageT;\\n\\n    // ADJUSTABLE PARAMETERS\\n    uint public allyFeeP; // % (of referrer fees going to allies, eg. 10)\\n    uint public startReferrerFeeP; // % (of referrer fee when 0 volume referred, eg. 75)\\n    uint public openFeeP; // % (of opening fee used for referral system, eg. 33)\\n    uint public targetVolumeWETH; // WETH (to reach maximum referral system fee, eg. 1e8)\\n\\n    // CUSTOM TYPES\\n    struct AllyDetails {\\n        address[] referrersReferred;\\n        uint volumeReferredWETH; // 1e18\\n        uint pendingRewardsToken; // 1e18\\n        uint totalRewardsToken; // 1e18\\n        uint totalRewardsValueWETH; // 1e18\\n        bool active;\\n    }\\n\\n    struct ReferrerDetails {\\n        address ally;\\n        address[] tradersReferred;\\n        uint volumeReferredWETH; // 1e18\\n        uint pendingRewardsToken; // 1e18\\n        uint totalRewardsToken; // 1e18\\n        uint totalRewardsValueWETH; // 1e18\\n        bool active;\\n    }\\n\\n    // STATE (MAPPINGS)\\n    mapping(address => AllyDetails) public allyDetails;\\n    mapping(address => ReferrerDetails) public referrerDetails;\\n\\n    mapping(address => address) public referrerByTrader;\\n\\n    // EVENTS\\n    event UpdatedAllyFeeP(uint value);\\n    event UpdatedStartReferrerFeeP(uint value);\\n    event UpdatedOpenFeeP(uint value);\\n    event UpdatedTargetVolumeWETH(uint value);\\n\\n    event AllyWhitelisted(address indexed ally);\\n    event AllyUnwhitelisted(address indexed ally);\\n\\n    event ReferrerWhitelisted(address indexed referrer, address indexed ally);\\n    event ReferrerUnwhitelisted(address indexed referrer);\\n    event ReferrerRegistered(address indexed trader, address indexed referrer);\\n\\n    event AllyRewardDistributed(\\n        address indexed ally,\\n        address indexed trader,\\n        uint volumeWETH,\\n        uint amountToken,\\n        uint amountValueWETH\\n    );\\n    event ReferrerRewardDistributed(\\n        address indexed referrer,\\n        address indexed trader,\\n        uint volumeWETH,\\n        uint amountToken,\\n        uint amountValueWETH\\n    );\\n\\n    event AllyRewardsClaimed(address indexed ally, uint amountToken);\\n    event ReferrerRewardsClaimed(address indexed referrer, uint amountToken);\\n\\n    constructor(\\n        StorageInterface _storageT,\\n        uint _allyFeeP,\\n        uint _startReferrerFeeP,\\n        uint _openFeeP,\\n        uint _targetVolumeWETH\\n    ) {\\n        require(\\n            address(_storageT) != address(0) &&\\n                _allyFeeP <= 50 &&\\n                _startReferrerFeeP <= 100 &&\\n                _openFeeP <= 50 &&\\n                _targetVolumeWETH > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n\\n        allyFeeP = _allyFeeP;\\n        startReferrerFeeP = _startReferrerFeeP;\\n        openFeeP = _openFeeP;\\n        targetVolumeWETH = _targetVolumeWETH;\\n    }\\n\\n    // MODIFIERS\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(msg.sender == storageT.trading(), \\\"TRADING_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyCallbacks() {\\n        require(msg.sender == storageT.callbacks(), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // MANAGE PARAMETERS\\n    function updateAllyFeeP(uint value) external onlyGov {\\n        require(value <= 50, \\\"VALUE_ABOVE_50\\\");\\n\\n        allyFeeP = value;\\n\\n        emit UpdatedAllyFeeP(value);\\n    }\\n\\n    function updateStartReferrerFeeP(uint value) external onlyGov {\\n        require(value <= 100, \\\"VALUE_ABOVE_100\\\");\\n\\n        startReferrerFeeP = value;\\n\\n        emit UpdatedStartReferrerFeeP(value);\\n    }\\n\\n    function updateOpenFeeP(uint value) external onlyGov {\\n        require(value <= 50, \\\"VALUE_ABOVE_50\\\");\\n\\n        openFeeP = value;\\n\\n        emit UpdatedOpenFeeP(value);\\n    }\\n\\n    function updateTargetVolumeWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n\\n        targetVolumeWETH = value;\\n\\n        emit UpdatedTargetVolumeWETH(value);\\n    }\\n\\n    // MANAGE ALLIES\\n    function whitelistAlly(address ally) external onlyGov {\\n        require(ally != address(0), \\\"ADDRESS_0\\\");\\n\\n        AllyDetails storage a = allyDetails[ally];\\n        require(!a.active, \\\"ALLY_ALREADY_ACTIVE\\\");\\n\\n        a.active = true;\\n\\n        emit AllyWhitelisted(ally);\\n    }\\n\\n    function unwhitelistAlly(address ally) external onlyGov {\\n        AllyDetails storage a = allyDetails[ally];\\n        require(a.active, \\\"ALREADY_UNACTIVE\\\");\\n\\n        a.active = false;\\n\\n        emit AllyUnwhitelisted(ally);\\n    }\\n\\n    // MANAGE REFERRERS\\n    function whitelistReferrer(\\n        address referrer,\\n        address ally\\n    ) external onlyGov {\\n        require(referrer != address(0), \\\"ADDRESS_0\\\");\\n\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n        require(!r.active, \\\"REFERRER_ALREADY_ACTIVE\\\");\\n\\n        r.active = true;\\n\\n        if (ally != address(0)) {\\n            AllyDetails storage a = allyDetails[ally];\\n            require(a.active, \\\"ALLY_NOT_ACTIVE\\\");\\n\\n            r.ally = ally;\\n            a.referrersReferred.push(referrer);\\n        }\\n\\n        emit ReferrerWhitelisted(referrer, ally);\\n    }\\n\\n    function unwhitelistReferrer(address referrer) external onlyGov {\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n        require(r.active, \\\"ALREADY_UNACTIVE\\\");\\n\\n        r.active = false;\\n\\n        emit ReferrerUnwhitelisted(referrer);\\n    }\\n\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referrer\\n    ) external onlyTrading {\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n\\n        if (\\n            referrerByTrader[trader] != address(0) ||\\n            referrer == address(0) ||\\n            !r.active\\n        ) {\\n            return;\\n        }\\n\\n        referrerByTrader[trader] = referrer;\\n        r.tradersReferred.push(trader);\\n\\n        emit ReferrerRegistered(trader, referrer);\\n    }\\n\\n    // REWARDS DISTRIBUTION\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external onlyCallbacks returns (uint) {\\n        address referrer = referrerByTrader[trader];\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n\\n        if (!r.active) {\\n            return 0;\\n        }\\n\\n        uint referrerRewardValueWETH = (volumeWETH *\\n            getReferrerFeeP(pairOpenFeeP, r.volumeReferredWETH)) /\\n            PRECISION /\\n            100;\\n\\n        uint referrerRewardToken = (referrerRewardValueWETH * PRECISION) /\\n            tokenPriceWETH;\\n\\n        storageT.handleTokens(address(this), referrerRewardToken, true);\\n\\n        AllyDetails storage a = allyDetails[r.ally];\\n\\n        uint allyRewardValueWETH;\\n        uint allyRewardToken;\\n\\n        if (a.active) {\\n            allyRewardValueWETH = (referrerRewardValueWETH * allyFeeP) / 100;\\n            allyRewardToken = (referrerRewardToken * allyFeeP) / 100;\\n\\n            a.volumeReferredWETH += volumeWETH;\\n            a.pendingRewardsToken += allyRewardToken;\\n            a.totalRewardsToken += allyRewardToken;\\n            a.totalRewardsValueWETH += allyRewardValueWETH;\\n\\n            referrerRewardValueWETH -= allyRewardValueWETH;\\n            referrerRewardToken -= allyRewardToken;\\n\\n            emit AllyRewardDistributed(\\n                r.ally,\\n                trader,\\n                volumeWETH,\\n                allyRewardToken,\\n                allyRewardValueWETH\\n            );\\n        }\\n\\n        r.volumeReferredWETH += volumeWETH;\\n        r.pendingRewardsToken += referrerRewardToken;\\n        r.totalRewardsToken += referrerRewardToken;\\n        r.totalRewardsValueWETH += referrerRewardValueWETH;\\n\\n        emit ReferrerRewardDistributed(\\n            referrer,\\n            trader,\\n            volumeWETH,\\n            referrerRewardToken,\\n            referrerRewardValueWETH\\n        );\\n\\n        return referrerRewardValueWETH + allyRewardValueWETH;\\n    }\\n\\n    // REWARDS CLAIMING\\n    function claimAllyRewards() external {\\n        AllyDetails storage a = allyDetails[msg.sender];\\n        uint rewardsToken = a.pendingRewardsToken;\\n\\n        require(rewardsToken > 0, \\\"NO_PENDING_REWARDS\\\");\\n\\n        a.pendingRewardsToken = 0;\\n        storageT.token().transfer(msg.sender, rewardsToken);\\n\\n        emit AllyRewardsClaimed(msg.sender, rewardsToken);\\n    }\\n\\n    function claimReferrerRewards() external {\\n        ReferrerDetails storage r = referrerDetails[msg.sender];\\n        uint rewardsToken = r.pendingRewardsToken;\\n\\n        require(rewardsToken > 0, \\\"NO_PENDING_REWARDS\\\");\\n\\n        r.pendingRewardsToken = 0;\\n        storageT.token().transfer(msg.sender, rewardsToken);\\n\\n        emit ReferrerRewardsClaimed(msg.sender, rewardsToken);\\n    }\\n\\n    // VIEW FUNCTIONS\\n    function getReferrerFeeP(\\n        uint pairOpenFeeP,\\n        uint volumeReferredWETH\\n    ) public view returns (uint) {\\n        uint maxReferrerFeeP = (pairOpenFeeP * 2 * openFeeP) / 100;\\n        uint minFeeP = (maxReferrerFeeP * startReferrerFeeP) / 100;\\n\\n        uint feeP = minFeeP +\\n            ((maxReferrerFeeP - minFeeP) * volumeReferredWETH) /\\n            1e18 /\\n            targetVolumeWETH;\\n\\n        return feeP > maxReferrerFeeP ? maxReferrerFeeP : feeP;\\n    }\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint) {\\n        return\\n            getPercentOfOpenFeeP_calc(\\n                referrerDetails[referrerByTrader[trader]].volumeReferredWETH\\n            );\\n    }\\n\\n    function getPercentOfOpenFeeP_calc(\\n        uint volumeReferredWETH\\n    ) public view returns (uint resultP) {\\n        resultP =\\n            (openFeeP *\\n                (startReferrerFeeP *\\n                    PRECISION +\\n                    (volumeReferredWETH *\\n                        PRECISION *\\n                        (100 - startReferrerFeeP)) /\\n                    1e18 /\\n                    targetVolumeWETH)) /\\n            100;\\n\\n        resultP = resultP > openFeeP * PRECISION\\n            ? openFeeP * PRECISION\\n            : resultP;\\n    }\\n\\n    function getTraderReferrer(address trader) external view returns (address) {\\n        address referrer = referrerByTrader[trader];\\n\\n        return referrerDetails[referrer].active ? referrer : address(0);\\n    }\\n\\n    function getReferrersReferred(\\n        address ally\\n    ) external view returns (address[] memory) {\\n        return allyDetails[ally].referrersReferred;\\n    }\\n\\n    function getTradersReferred(\\n        address referred\\n    ) external view returns (address[] memory) {\\n        return referrerDetails[referred].tradersReferred;\\n    }\\n}\\n\",\"keccak256\":\"0x7e5f7b40ed71ec83c6c66aabdeba833b4e65cb5f9e422666aa26390629bc4fc6\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\n\\ninterface AggregatorInterfaceV1_2 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE,\\n        UPDATE_SL\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\\n\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n\\n    function unregisterPendingSlOrder(uint orderId) external;\\n\\n    struct PendingSl {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice;\\n        bool buy;\\n        uint newSl;\\n    }\\n}\\n\",\"keccak256\":\"0xb659d51357699606707d225d3384227aa8d2745339050d95f6065fc7429f41de\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n}\\n\",\"keccak256\":\"0x069b28b40ac432208c040c75ecdc880edccda8b3964d187ce2284a07b1d599f7\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x7e5147b0611f9d8ae4e6447c75c65f9c7274f2eba120a69abd5bcad9e0d99189\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa203a16609a3f4479f4c276334d6731350d81ccd2e07e8e4d1e38028d702d76f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb2fa75a1891441870ad9e7ebaec3b828113cb231cba760d31e175233850efceb\",\"license\":\"MIT\"},\"contracts/interfaces/NftRewardsInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa23e916c2ceea5dd14fee1b8e27baa64fbd9ff0f2896ccb4922e1692252f9e4\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x58654c006d22c41b610ba226e895483efb9caf61604472b2e9b80c4e45259bf1\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1_4.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\\n\\n    function vault() external view returns (IToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0xf518bb252dc8a4ff8cab205d22660d998ce1a3b3f9af2ce7c9ec6faac7e0cbf3\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe17da6c44e61e84ecbc9653dffeb3c4bf6ed43743256f1eaf1743b7903843dae\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface UniswapRouterInterface {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xc795231379ce72c615c6c76b8ea9d52d7e7a18843decc4e7fb9ba0fd52289897\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface VaultInterface {\\n    function sendWETHToTrader(address, uint) external;\\n\\n    function receiveWETHFromTrader(address, uint, uint) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function distributeRewardWETH(uint) external;\\n}\\n\",\"keccak256\":\"0x516faa43e31a43ec322671add06591bbed17cae277e05ddef73a68c265859fc7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001eb638038062001eb68339810160408190526200003491620000da565b6001600160a01b038516158015906200004e575060328411155b80156200005c575060648311155b80156200006a575060328211155b8015620000775750600081115b620000b75760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640160405180910390fd5b6001600160a01b0390941660805260009290925560015560025560035562000131565b600080600080600060a08688031215620000f357600080fd5b85516001600160a01b03811681146200010b57600080fd5b602087015160408801516060890151608090990151929a91995097965090945092505050565b608051611d0e620001a86000396000818161018d0152818161045a015281816106f00152818161085d01528181610a4101528181610b6201528181610c9401528181610d9c01528181610fb7015281816111820152818161130e0152818161158601528181611802015261192a0152611d0e6000f3fe608060405234801561001057600080fd5b506004361061016e5760003560e01c806394df2c7c116100ce578063c3160c6811610087578063c3160c68146103d2578063c36acccd146103e5578063df374a9b1461040e578063e78c6fd214610417578063ea61c6021461042a578063ee6cf8841461043d578063f79ad43e1461044557600080fd5b806394df2c7c1461036a57806397365b741461037d5780639b8ab68414610390578063a6a7d393146103a3578063a73a3e35146103ac578063bc786541146103bf57600080fd5b806355c780281161012b57806355c780281461022957806365ae45271461023c57806365cbd307146102aa57806369c82c28146102b25780636a83de79146102bb5780637792a23114610344578063917abb961461035757600080fd5b806303e374641461017357806316fff074146101885780631727e82d146101cc578063201ad16d146101e357806332a7b732146101f65780634e583b3114610216575b600080fd5b610186610181366004611a30565b610458565b005b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d560015481565b6040519081526020016101c3565b6101d56101f1366004611a61565b610592565b610209610204366004611a61565b6105ce565b6040516101c39190611a7e565b6101d5610224366004611acb565b610647565b610186610237366004611a61565b6106ee565b61028061024a366004611a61565b60046020819052600091825260409091206001810154600282015460038301549383015460059093015491939092909160ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016101c3565b610186610820565b6101d560035481565b61030b6102c9366004611a61565b60056020819052600091825260409091208054600282015460038301546004840154948401546006909401546001600160a01b03909316949193909260ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c0016101c3565b6101d5610352366004611a30565b61098b565b610186610365366004611a30565b610a3f565b610186610378366004611a61565b610b60565b61018661038b366004611a30565b610c92565b61018661039e366004611aed565b610d9a565b6101d560005481565b6102096103ba366004611a61565b610f41565b6101866103cd366004611a61565b610fb5565b6101af6103e0366004611a61565b611137565b6101af6103f3366004611a61565b6006602052600090815260409020546001600160a01b031681565b6101d560025481565b6101d5610425366004611b26565b61117e565b610186610438366004611aed565b611584565b6101866117c5565b610186610453366004611a30565b611928565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190611b61565b6001600160a01b0316336001600160a01b0316146105135760405162461bcd60e51b815260040161050a90611b7e565b60405180910390fd5b60648111156105565760405162461bcd60e51b815260206004820152600f60248201526e056414c55455f41424f56455f31303608c1b604482015260640161050a565b60018190556040518181527fb85b70acaeb40f1a2351367c48842ee0ea24ec05d411d99d80bf7a020c0dbb0f906020015b60405180910390a150565b6001600160a01b03808216600090815260066020908152604080832054909316825260059052908120600201546105c89061098b565b92915050565b6001600160a01b03811660009081526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561063b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161061d575b50505050509050919050565b600080606460025485600261065c9190611bb6565b6106669190611bb6565b6106709190611bcd565b905060006064600154836106849190611bb6565b61068e9190611bcd565b90506000600354670de0b6b3a76400008684866106ab9190611bef565b6106b59190611bb6565b6106bf9190611bcd565b6106c99190611bcd565b6106d39083611c02565b90508281116106e257806106e4565b825b9695505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190611b61565b6001600160a01b0316336001600160a01b0316146107a05760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b0381166000908152600560205260409020600681015460ff166107dc5760405162461bcd60e51b815260040161050a90611c15565b60068101805460ff191690556040516001600160a01b038316907f6dd169357c2e2b04fd13a8807a11892b88875b7c70eeb73c3b6642c58516f0db90600090a25050565b3360009081526005602052604090206003810154806108515760405162461bcd60e51b815260040161050a90611c3f565b600082600301819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190611b61565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190611c6b565b5060405181815233907f25deb48f8299e9863bda34f0d343d51341ac7ac30bf63dbeb2e8212bc4a20bf1906020015b60405180910390a25050565b60006064600354670de0b6b3a764000060015460646109aa9190611bef565b6109b96402540be40087611bb6565b6109c39190611bb6565b6109cd9190611bcd565b6109d79190611bcd565b6402540be4006001546109ea9190611bb6565b6109f49190611c02565b600254610a019190611bb6565b610a0b9190611bcd565b90506402540be400600254610a209190611bb6565b8111610a2c57806105c8565b6402540be4006002546105c89190611bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611b61565b6001600160a01b0316336001600160a01b031614610af15760405162461bcd60e51b815260040161050a90611b7e565b60008111610b2b5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161050a565b60038190556040518181527f383f05765c0b91a6aeaa9d95c63a0ac5b7cb19371e33e2aa1e3cac3f443dce5390602001610587565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190611b61565b6001600160a01b0316336001600160a01b031614610c125760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b0381166000908152600460205260409020600581015460ff16610c4e5760405162461bcd60e51b815260040161050a90611c15565b60058101805460ff191690556040516001600160a01b038316907f6900afc1a924abca16a7f560e2dac3d71008c1cd1d88de8a85b6e4267116d18690600090a25050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190611b61565b6001600160a01b0316336001600160a01b031614610d445760405162461bcd60e51b815260040161050a90611b7e565b6032811115610d655760405162461bcd60e51b815260040161050a90611c8d565b60008190556040518181527f2f33e68d48a82acaa58e3dcb12a4c7738cdfe7041d35f0e29ec8c39b780b370c90602001610587565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1c9190611b61565b6001600160a01b0316336001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152600c60248201526b54524144494e475f4f4e4c5960a01b604482015260640161050a565b6001600160a01b0380821660009081526005602090815260408083208685168452600690925290912054909116151580610eac57506001600160a01b038216155b80610ebc5750600681015460ff16155b15610ec657505050565b6001600160a01b03808416600081815260066020908152604080832080549588166001600160a01b0319968716811790915560018781018054918201815585529284209092018054909516841790945592517f0e67f4bbcd5c51b7365ca2dd861dc8094e393ca60de2ceae9d831761a839e92a9190a3505050565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561063b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161061d5750505050509050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611b61565b6001600160a01b0316336001600160a01b0316146110675760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b03811661108d5760405162461bcd60e51b815260040161050a90611cb5565b6001600160a01b0381166000908152600460205260409020600581015460ff16156110f05760405162461bcd60e51b8152602060048201526013602482015272414c4c595f414c52454144595f41435449564560681b604482015260640161050a565b60058101805460ff191660011790556040516001600160a01b038316907f80495287b7fdd5e00b7c8c1eb065c5b63474d11ffb062cc82c13da77dda8424d90600090a25050565b6001600160a01b038082166000908152600660208181526040808420549094168084526005909152928220015490919060ff16611175576000611177565b805b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112019190611b61565b6001600160a01b0316336001600160a01b0316146112525760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b604482015260640161050a565b6001600160a01b038086166000908152600660208181526040808420549094168084526005909152929091209081015460ff166112945760009250505061157c565b600060646402540be4006112ac888560020154610647565b6112b6908a611bb6565b6112c09190611bcd565b6112ca9190611bcd565b90506000856112de6402540be40084611bb6565b6112e89190611bcd565b6040516329bc0a1f60e11b815230600482015260248101829052600160448201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635378143e90606401600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b505084546001600160a01b031660009081526004602052604081206005810154909350909150819060ff16156114ad576064600054866113ae9190611bb6565b6113b89190611bcd565b91506064600054856113ca9190611bb6565b6113d49190611bcd565b90508a8360010160008282546113ea9190611c02565b92505081905550808360020160008282546114059190611c02565b92505081905550808360030160008282546114209190611c02565b925050819055508183600401600082825461143b9190611c02565b9091555061144b90508286611bef565b94506114578185611bef565b8654604080518e8152602081018590529081018590529195506001600160a01b038e8116929116907f0d54fedb563328d37f00fe5ba0bf7689519f8cf02318562adfe7b4bfab8cf4b49060600160405180910390a35b8a8660020160008282546114c19190611c02565b92505081905550838660030160008282546114dc9190611c02565b92505081905550838660040160008282546114f79190611c02565b92505081905550848660050160008282546115129190611c02565b9091555050604080518c8152602081018690529081018690526001600160a01b03808e1691908916907f74e9754b45c636e199e3d7bb764fae1a9acce47a984d10dcfd74849ec4babc4f9060600160405180910390a36115728286611c02565b9750505050505050505b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190611b61565b6001600160a01b0316336001600160a01b0316146116365760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b03821661165c5760405162461bcd60e51b815260040161050a90611cb5565b6001600160a01b0382166000908152600560205260409020600681015460ff16156116c35760405162461bcd60e51b815260206004820152601760248201527652454645525245525f414c52454144595f41435449564560481b604482015260640161050a565b60068101805460ff191660011790556001600160a01b03821615611780576001600160a01b0382166000908152600460205260409020600581015460ff1661173f5760405162461bcd60e51b815260206004820152600f60248201526e414c4c595f4e4f545f41435449564560881b604482015260640161050a565b81546001600160a01b038085166001600160a01b03199283161784558254600181018455600093845260209093209092018054928616929091169190911790555b816001600160a01b0316836001600160a01b03167f15ad1d28b052a6cc2dd1d34d9e06a1847055d520e2163017e6e8aad6431b7f6a60405160405180910390a3505050565b3360009081526004602052604090206002810154806117f65760405162461bcd60e51b815260040161050a90611c3f565b600082600201819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561185e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118829190611b61565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190611c6b565b5060405181815233907f3dfe9be199655709d01d635bf441264a809a090c98ed7aae9abdc85f7dcbc09d9060200161097f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa9190611b61565b6001600160a01b0316336001600160a01b0316146119da5760405162461bcd60e51b815260040161050a90611b7e565b60328111156119fb5760405162461bcd60e51b815260040161050a90611c8d565b60028190556040518181527f4dec17ad9a229f707b7c2fb9531cd3b9c548f9eca80c03457ca38a0bb1df35fe90602001610587565b600060208284031215611a4257600080fd5b5035919050565b6001600160a01b0381168114611a5e57600080fd5b50565b600060208284031215611a7357600080fd5b813561117781611a49565b6020808252825182820181905260009190848201906040850190845b81811015611abf5783516001600160a01b031683529284019291840191600101611a9a565b50909695505050505050565b60008060408385031215611ade57600080fd5b50508035926020909101359150565b60008060408385031215611b0057600080fd5b8235611b0b81611a49565b91506020830135611b1b81611a49565b809150509250929050565b60008060008060808587031215611b3c57600080fd5b8435611b4781611a49565b966020860135965060408601359560600135945092505050565b600060208284031215611b7357600080fd5b815161117781611a49565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105c8576105c8611ba0565b600082611bea57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105c8576105c8611ba0565b808201808211156105c8576105c8611ba0565b60208082526010908201526f414c52454144595f554e41435449564560801b604082015260600190565b6020808252601290820152714e4f5f50454e44494e475f5245574152445360701b604082015260600190565b600060208284031215611c7d57600080fd5b8151801515811461117757600080fd5b6020808252600e908201526d056414c55455f41424f56455f35360941b604082015260600190565b6020808252600990820152680414444524553535f360bc1b60408201526060019056fea264697066735822122094b2ccf6c38dd926e3b186921d3512bafadcb752125023377353a39b3e5eba8d64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016e5760003560e01c806394df2c7c116100ce578063c3160c6811610087578063c3160c68146103d2578063c36acccd146103e5578063df374a9b1461040e578063e78c6fd214610417578063ea61c6021461042a578063ee6cf8841461043d578063f79ad43e1461044557600080fd5b806394df2c7c1461036a57806397365b741461037d5780639b8ab68414610390578063a6a7d393146103a3578063a73a3e35146103ac578063bc786541146103bf57600080fd5b806355c780281161012b57806355c780281461022957806365ae45271461023c57806365cbd307146102aa57806369c82c28146102b25780636a83de79146102bb5780637792a23114610344578063917abb961461035757600080fd5b806303e374641461017357806316fff074146101885780631727e82d146101cc578063201ad16d146101e357806332a7b732146101f65780634e583b3114610216575b600080fd5b610186610181366004611a30565b610458565b005b6101af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d560015481565b6040519081526020016101c3565b6101d56101f1366004611a61565b610592565b610209610204366004611a61565b6105ce565b6040516101c39190611a7e565b6101d5610224366004611acb565b610647565b610186610237366004611a61565b6106ee565b61028061024a366004611a61565b60046020819052600091825260409091206001810154600282015460038301549383015460059093015491939092909160ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016101c3565b610186610820565b6101d560035481565b61030b6102c9366004611a61565b60056020819052600091825260409091208054600282015460038301546004840154948401546006909401546001600160a01b03909316949193909260ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c0016101c3565b6101d5610352366004611a30565b61098b565b610186610365366004611a30565b610a3f565b610186610378366004611a61565b610b60565b61018661038b366004611a30565b610c92565b61018661039e366004611aed565b610d9a565b6101d560005481565b6102096103ba366004611a61565b610f41565b6101866103cd366004611a61565b610fb5565b6101af6103e0366004611a61565b611137565b6101af6103f3366004611a61565b6006602052600090815260409020546001600160a01b031681565b6101d560025481565b6101d5610425366004611b26565b61117e565b610186610438366004611aed565b611584565b6101866117c5565b610186610453366004611a30565b611928565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104da9190611b61565b6001600160a01b0316336001600160a01b0316146105135760405162461bcd60e51b815260040161050a90611b7e565b60405180910390fd5b60648111156105565760405162461bcd60e51b815260206004820152600f60248201526e056414c55455f41424f56455f31303608c1b604482015260640161050a565b60018190556040518181527fb85b70acaeb40f1a2351367c48842ee0ea24ec05d411d99d80bf7a020c0dbb0f906020015b60405180910390a150565b6001600160a01b03808216600090815260066020908152604080832054909316825260059052908120600201546105c89061098b565b92915050565b6001600160a01b03811660009081526005602090815260409182902060010180548351818402810184019094528084526060939283018282801561063b57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161061d575b50505050509050919050565b600080606460025485600261065c9190611bb6565b6106669190611bb6565b6106709190611bcd565b905060006064600154836106849190611bb6565b61068e9190611bcd565b90506000600354670de0b6b3a76400008684866106ab9190611bef565b6106b59190611bb6565b6106bf9190611bcd565b6106c99190611bcd565b6106d39083611c02565b90508281116106e257806106e4565b825b9695505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa15801561074c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107709190611b61565b6001600160a01b0316336001600160a01b0316146107a05760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b0381166000908152600560205260409020600681015460ff166107dc5760405162461bcd60e51b815260040161050a90611c15565b60068101805460ff191690556040516001600160a01b038316907f6dd169357c2e2b04fd13a8807a11892b88875b7c70eeb73c3b6642c58516f0db90600090a25050565b3360009081526005602052604090206003810154806108515760405162461bcd60e51b815260040161050a90611c3f565b600082600301819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108dd9190611b61565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190611c6b565b5060405181815233907f25deb48f8299e9863bda34f0d343d51341ac7ac30bf63dbeb2e8212bc4a20bf1906020015b60405180910390a25050565b60006064600354670de0b6b3a764000060015460646109aa9190611bef565b6109b96402540be40087611bb6565b6109c39190611bb6565b6109cd9190611bcd565b6109d79190611bcd565b6402540be4006001546109ea9190611bb6565b6109f49190611c02565b600254610a019190611bb6565b610a0b9190611bcd565b90506402540be400600254610a209190611bb6565b8111610a2c57806105c8565b6402540be4006002546105c89190611bb6565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac19190611b61565b6001600160a01b0316336001600160a01b031614610af15760405162461bcd60e51b815260040161050a90611b7e565b60008111610b2b5760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161050a565b60038190556040518181527f383f05765c0b91a6aeaa9d95c63a0ac5b7cb19371e33e2aa1e3cac3f443dce5390602001610587565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be29190611b61565b6001600160a01b0316336001600160a01b031614610c125760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b0381166000908152600460205260409020600581015460ff16610c4e5760405162461bcd60e51b815260040161050a90611c15565b60058101805460ff191690556040516001600160a01b038316907f6900afc1a924abca16a7f560e2dac3d71008c1cd1d88de8a85b6e4267116d18690600090a25050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190611b61565b6001600160a01b0316336001600160a01b031614610d445760405162461bcd60e51b815260040161050a90611b7e565b6032811115610d655760405162461bcd60e51b815260040161050a90611c8d565b60008190556040518181527f2f33e68d48a82acaa58e3dcb12a4c7738cdfe7041d35f0e29ec8c39b780b370c90602001610587565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1c9190611b61565b6001600160a01b0316336001600160a01b031614610e6b5760405162461bcd60e51b815260206004820152600c60248201526b54524144494e475f4f4e4c5960a01b604482015260640161050a565b6001600160a01b0380821660009081526005602090815260408083208685168452600690925290912054909116151580610eac57506001600160a01b038216155b80610ebc5750600681015460ff16155b15610ec657505050565b6001600160a01b03808416600081815260066020908152604080832080549588166001600160a01b0319968716811790915560018781018054918201815585529284209092018054909516841790945592517f0e67f4bbcd5c51b7365ca2dd861dc8094e393ca60de2ceae9d831761a839e92a9190a3505050565b6001600160a01b03811660009081526004602090815260409182902080548351818402810184019094528084526060939283018282801561063b576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161061d5750505050509050919050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611013573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110379190611b61565b6001600160a01b0316336001600160a01b0316146110675760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b03811661108d5760405162461bcd60e51b815260040161050a90611cb5565b6001600160a01b0381166000908152600460205260409020600581015460ff16156110f05760405162461bcd60e51b8152602060048201526013602482015272414c4c595f414c52454144595f41435449564560681b604482015260640161050a565b60058101805460ff191660011790556040516001600160a01b038316907f80495287b7fdd5e00b7c8c1eb065c5b63474d11ffb062cc82c13da77dda8424d90600090a25050565b6001600160a01b038082166000908152600660208181526040808420549094168084526005909152928220015490919060ff16611175576000611177565b805b9392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112019190611b61565b6001600160a01b0316336001600160a01b0316146112525760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b604482015260640161050a565b6001600160a01b038086166000908152600660208181526040808420549094168084526005909152929091209081015460ff166112945760009250505061157c565b600060646402540be4006112ac888560020154610647565b6112b6908a611bb6565b6112c09190611bcd565b6112ca9190611bcd565b90506000856112de6402540be40084611bb6565b6112e89190611bcd565b6040516329bc0a1f60e11b815230600482015260248101829052600160448201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690635378143e90606401600060405180830381600087803b15801561135a57600080fd5b505af115801561136e573d6000803e3d6000fd5b505084546001600160a01b031660009081526004602052604081206005810154909350909150819060ff16156114ad576064600054866113ae9190611bb6565b6113b89190611bcd565b91506064600054856113ca9190611bb6565b6113d49190611bcd565b90508a8360010160008282546113ea9190611c02565b92505081905550808360020160008282546114059190611c02565b92505081905550808360030160008282546114209190611c02565b925050819055508183600401600082825461143b9190611c02565b9091555061144b90508286611bef565b94506114578185611bef565b8654604080518e8152602081018590529081018590529195506001600160a01b038e8116929116907f0d54fedb563328d37f00fe5ba0bf7689519f8cf02318562adfe7b4bfab8cf4b49060600160405180910390a35b8a8660020160008282546114c19190611c02565b92505081905550838660030160008282546114dc9190611c02565b92505081905550838660040160008282546114f79190611c02565b92505081905550848660050160008282546115129190611c02565b9091555050604080518c8152602081018690529081018690526001600160a01b03808e1691908916907f74e9754b45c636e199e3d7bb764fae1a9acce47a984d10dcfd74849ec4babc4f9060600160405180910390a36115728286611c02565b9750505050505050505b949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190611b61565b6001600160a01b0316336001600160a01b0316146116365760405162461bcd60e51b815260040161050a90611b7e565b6001600160a01b03821661165c5760405162461bcd60e51b815260040161050a90611cb5565b6001600160a01b0382166000908152600560205260409020600681015460ff16156116c35760405162461bcd60e51b815260206004820152601760248201527652454645525245525f414c52454144595f41435449564560481b604482015260640161050a565b60068101805460ff191660011790556001600160a01b03821615611780576001600160a01b0382166000908152600460205260409020600581015460ff1661173f5760405162461bcd60e51b815260206004820152600f60248201526e414c4c595f4e4f545f41435449564560881b604482015260640161050a565b81546001600160a01b038085166001600160a01b03199283161784558254600181018455600093845260209093209092018054928616929091169190911790555b816001600160a01b0316836001600160a01b03167f15ad1d28b052a6cc2dd1d34d9e06a1847055d520e2163017e6e8aad6431b7f6a60405160405180910390a3505050565b3360009081526004602052604090206002810154806117f65760405162461bcd60e51b815260040161050a90611c3f565b600082600201819055507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561185e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118829190611b61565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af11580156118d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f59190611c6b565b5060405181815233907f3dfe9be199655709d01d635bf441264a809a090c98ed7aae9abdc85f7dcbc09d9060200161097f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa9190611b61565b6001600160a01b0316336001600160a01b0316146119da5760405162461bcd60e51b815260040161050a90611b7e565b60328111156119fb5760405162461bcd60e51b815260040161050a90611c8d565b60028190556040518181527f4dec17ad9a229f707b7c2fb9531cd3b9c548f9eca80c03457ca38a0bb1df35fe90602001610587565b600060208284031215611a4257600080fd5b5035919050565b6001600160a01b0381168114611a5e57600080fd5b50565b600060208284031215611a7357600080fd5b813561117781611a49565b6020808252825182820181905260009190848201906040850190845b81811015611abf5783516001600160a01b031683529284019291840191600101611a9a565b50909695505050505050565b60008060408385031215611ade57600080fd5b50508035926020909101359150565b60008060408385031215611b0057600080fd5b8235611b0b81611a49565b91506020830135611b1b81611a49565b809150509250929050565b60008060008060808587031215611b3c57600080fd5b8435611b4781611a49565b966020860135965060408601359560600135945092505050565b600060208284031215611b7357600080fd5b815161117781611a49565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105c8576105c8611ba0565b600082611bea57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105c8576105c8611ba0565b808201808211156105c8576105c8611ba0565b60208082526010908201526f414c52454144595f554e41435449564560801b604082015260600190565b6020808252601290820152714e4f5f50454e44494e475f5245574152445360701b604082015260600190565b600060208284031215611c7d57600080fd5b8151801515811461117757600080fd5b6020808252600e908201526d056414c55455f41424f56455f35360941b604082015260600190565b6020808252600990820152680414444524553535f360bc1b60408201526060019056fea264697066735822122094b2ccf6c38dd926e3b186921d3512bafadcb752125023377353a39b3e5eba8d64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15343,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "allyFeeP",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 15345,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "startReferrerFeeP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 15347,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "openFeeP",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 15349,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "targetVolumeWETH",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 15384,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "allyDetails",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(AllyDetails)15363_storage)"
      },
      {
        "astId": 15389,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "referrerDetails",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(ReferrerDetails)15379_storage)"
      },
      {
        "astId": 15393,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "referrerByTrader",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AllyDetails)15363_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Referrals.AllyDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(AllyDetails)15363_storage"
      },
      "t_mapping(t_address,t_struct(ReferrerDetails)15379_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Referrals.ReferrerDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferrerDetails)15379_storage"
      },
      "t_struct(AllyDetails)15363_storage": {
        "encoding": "inplace",
        "label": "struct Referrals.AllyDetails",
        "members": [
          {
            "astId": 15352,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "referrersReferred",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 15354,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "volumeReferredWETH",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15356,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "pendingRewardsToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15358,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15360,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsValueWETH",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15362,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "active",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReferrerDetails)15379_storage": {
        "encoding": "inplace",
        "label": "struct Referrals.ReferrerDetails",
        "members": [
          {
            "astId": 15365,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "ally",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15368,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "tradersReferred",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 15370,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "volumeReferredWETH",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15372,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "pendingRewardsToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15374,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsToken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 15376,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsValueWETH",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 15378,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}