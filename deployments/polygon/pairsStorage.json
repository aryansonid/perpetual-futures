{
  "address": "0x24b235B3305507617a1f8faf00796d2CeB70Fe07",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentOrderId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_storage",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "FeeAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "FeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "GroupAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "GroupUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "from",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "to",
          "type": "string"
        }
      ],
      "name": "PairAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PairUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "openFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftLimitOrderFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLevPosWETH",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Fee",
          "name": "_fee",
          "type": "tuple"
        }
      ],
      "name": "addFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "job",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCollateralP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Group",
          "name": "_group",
          "type": "tuple"
        }
      ],
      "name": "addGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "feed1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feed2",
                  "type": "address"
                },
                {
                  "internalType": "enum PairsStorage.FeedCalculation",
                  "name": "feedCalculation",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDeviationP",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PairsStorage.Feed",
              "name": "feed",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groupIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Pair",
          "name": "_pair",
          "type": "tuple"
        }
      ],
      "name": "addPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "feed1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feed2",
                  "type": "address"
                },
                {
                  "internalType": "enum PairsStorage.FeedCalculation",
                  "name": "feedCalculation",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDeviationP",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PairsStorage.Feed",
              "name": "feed",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groupIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Pair[]",
          "name": "_pairs",
          "type": "tuple[]"
        }
      ],
      "name": "addPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentOrderId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "fees",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "openFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "closeFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "oracleFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftLimitOrderFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "referralFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minLevPosWETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_long",
          "type": "bool"
        }
      ],
      "name": "groupCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "groupMaxCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groups",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "job",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "minLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxCollateralP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "groupsCollaterals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "groupsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "guaranteedSlEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "isPairListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairCloseFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairFeed",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "feed1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feed2",
              "type": "address"
            },
            {
              "internalType": "enum PairsStorage.FeedCalculation",
              "name": "feedCalculation",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Feed",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairJob",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairMinLevPosWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairMinLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairNftLimitOrderFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairOpenFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairOracleFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairReferralFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairSpreadP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "string",
          "name": "from",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "to",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "feed1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "feed2",
              "type": "address"
            },
            {
              "internalType": "enum PairsStorage.FeedCalculation",
              "name": "feedCalculation",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "maxDeviationP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Feed",
          "name": "feed",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "spreadP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "groupIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pairsBackend",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "feed1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feed2",
                  "type": "address"
                },
                {
                  "internalType": "enum PairsStorage.FeedCalculation",
                  "name": "feedCalculation",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDeviationP",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PairsStorage.Feed",
              "name": "feed",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groupIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Pair",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "job",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCollateralP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Group",
          "name": "",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "openFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftLimitOrderFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLevPosWETH",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Fee",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "openFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "closeFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "oracleFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nftLimitOrderFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "referralFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minLevPosWETH",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Fee",
          "name": "_fee",
          "type": "tuple"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "bytes32",
              "name": "job",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "minLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxCollateralP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Group",
          "name": "_group",
          "type": "tuple"
        }
      ],
      "name": "updateGroup",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_long",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_increase",
          "type": "bool"
        }
      ],
      "name": "updateGroupCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "from",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "to",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "feed1",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "feed2",
                  "type": "address"
                },
                {
                  "internalType": "enum PairsStorage.FeedCalculation",
                  "name": "feedCalculation",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDeviationP",
                  "type": "uint256"
                }
              ],
              "internalType": "struct PairsStorage.Feed",
              "name": "feed",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "groupIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "feeIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairsStorage.Pair",
          "name": "_pair",
          "type": "tuple"
        }
      ],
      "name": "updatePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x67874040ec354beaad581b6727c7db015b656f0ba4d70bfa7237da4bab93ede8",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x24b235B3305507617a1f8faf00796d2CeB70Fe07",
    "transactionIndex": 10,
    "gasUsed": "2747153",
    "logsBloom": "0x
    "blockHash": "0x779eaf27b5cae391d944f3e1c368898df09ce4b7f5c9d0ab92b2e988d30e003e",
    "transactionHash": "0x67874040ec354beaad581b6727c7db015b656f0ba4d70bfa7237da4bab93ede8",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 41260026,
        "transactionHash": "0x67874040ec354beaad581b6727c7db015b656f0ba4d70bfa7237da4bab93ede8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000509d7a1066c23f00000000000000000000000000000000000000000000000026f948570b24a0790000000000000000000000000000000000000000000022445c4b4825d0a91e7e00000000000000000000000000000000000000000000000026a8aadcfabdde3a0000000000000000000000000000000000000000000022445c9be59fe10fe0bd",
        "logIndex": 27,
        "blockHash": "0x779eaf27b5cae391d944f3e1c368898df09ce4b7f5c9d0ab92b2e988d30e003e"
      }
    ],
    "blockNumber": 41260026,
    "cumulativeGasUsed": "3999744",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1,
    "0x15D862D44BCf0918012575CB7fd660C1A74f374A"
  ],
  "numDeployments": 1,
  "solcInputHash": "063f6380a44fddc0413748fbb84bc8a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentOrderId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_storage\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"FeeAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"FeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"GroupAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"GroupUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PairUpdated\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftLimitOrderFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLevPosWETH\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Fee\",\"name\":\"_fee\",\"type\":\"tuple\"}],\"name\":\"addFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Group\",\"name\":\"_group\",\"type\":\"tuple\"}],\"name\":\"addGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"feed\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Pair\",\"name\":\"_pair\",\"type\":\"tuple\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"feed\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Pair[]\",\"name\":\"_pairs\",\"type\":\"tuple[]\"}],\"name\":\"addPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentOrderId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftLimitOrderFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLevPosWETH\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_long\",\"type\":\"bool\"}],\"name\":\"groupCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"groupMaxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groups\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"groupsCollaterals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"groupsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"guaranteedSlEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"isPairListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairCloseFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairFeed\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairJob\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairMinLevPosWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairMinLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairNftLimitOrderFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairOpenFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairOracleFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairReferralFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairSpreadP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"feed\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pairsBackend\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"feed\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Pair\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Group\",\"name\":\"\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftLimitOrderFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLevPosWETH\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Fee\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"closeFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"oracleFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftLimitOrderFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLevPosWETH\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Fee\",\"name\":\"_fee\",\"type\":\"tuple\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"job\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"minLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxCollateralP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Group\",\"name\":\"_group\",\"type\":\"tuple\"}],\"name\":\"updateGroup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_long\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_increase\",\"type\":\"bool\"}],\"name\":\"updateGroupCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"from\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"to\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"feed1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feed2\",\"type\":\"address\"},{\"internalType\":\"enum PairsStorage.FeedCalculation\",\"name\":\"feedCalculation\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviationP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Feed\",\"name\":\"feed\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct PairsStorage.Pair\",\"name\":\"_pair\",\"type\":\"tuple\"}],\"name\":\"updatePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PairsStorage.sol\":\"PairsStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/PairsStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/UniswapRouterInterface.sol\\\";\\nimport \\\"./interfaces/TokenInterface.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/VaultInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_1.sol\\\";\\nimport \\\"./interfaces/NftRewardsInterfaceV6.sol\\\";\\nimport \\\"./interfaces/VaultInterface.sol\\\";\\n\\ncontract PairsStorage {\\n    // Contracts (constant)\\n    StorageInterface public storageT;\\n\\n    // Params (constant)\\n    uint constant MIN_LEVERAGE = 2;\\n    uint constant MAX_LEVERAGE = 1000;\\n\\n    // Custom data types\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    }\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    struct Pair {\\n        string from;\\n        string to;\\n        Feed feed;\\n        uint spreadP; // PRECISION\\n        uint groupIndex;\\n        uint feeIndex;\\n    }\\n    struct Group {\\n        string name;\\n        bytes32 job;\\n        uint minLeverage;\\n        uint maxLeverage;\\n        uint maxCollateralP; // % (of WETH vault current balance)\\n    }\\n    struct Fee {\\n        string name;\\n        uint openFeeP; // PRECISION (% of leveraged pos)\\n        uint closeFeeP; // PRECISION (% of leveraged pos)\\n        uint oracleFeeP; // PRECISION (% of leveraged pos)\\n        uint nftLimitOrderFeeP; // PRECISION (% of leveraged pos)\\n        uint referralFeeP; // PRECISION (% of leveraged pos)\\n        uint minLevPosWETH; // 1e18 (collateral x leverage, useful for min fee)\\n    }\\n\\n    // State\\n    uint public currentOrderId;\\n\\n    uint public pairsCount;\\n    uint public groupsCount;\\n    uint public feesCount;\\n\\n    mapping(uint => Pair) public pairs;\\n    mapping(uint => Group) public groups;\\n    mapping(uint => Fee) public fees;\\n\\n    mapping(string => mapping(string => bool)) public isPairListed;\\n\\n    mapping(uint => uint[2]) public groupsCollaterals; // (long, short)\\n\\n    // Events\\n    event PairAdded(uint index, string from, string to);\\n    event PairUpdated(uint index);\\n\\n    event GroupAdded(uint index, string name);\\n    event GroupUpdated(uint index);\\n\\n    event FeeAdded(uint index, string name);\\n    event FeeUpdated(uint index);\\n\\n    constructor(uint _currentOrderId, address _storage) {\\n        require(_currentOrderId > 0, \\\"ORDER_ID_0\\\");\\n        currentOrderId = _currentOrderId;\\n        storageT = StorageInterface(_storage);\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\"); //// TODO check error function returned an unexpected amount of data\\n        _;\\n    }\\n\\n    modifier groupListed(uint _groupIndex) {\\n        require(groups[_groupIndex].minLeverage > 0, \\\"GROUP_NOT_LISTED\\\");\\n        _;\\n    }\\n    modifier feeListed(uint _feeIndex) {\\n        require(fees[_feeIndex].openFeeP > 0, \\\"FEE_NOT_LISTED\\\");\\n        _;\\n    }\\n\\n    modifier feedOk(Feed calldata _feed) {\\n        require(\\n            _feed.maxDeviationP > 0 && _feed.feed1 != address(0),\\n            \\\"WRONG_FEED\\\"\\n        );\\n        require(\\n            _feed.feedCalculation != FeedCalculation.COMBINE ||\\n                _feed.feed2 != address(0),\\n            \\\"FEED_2_MISSING\\\"\\n        );\\n        _;\\n    }\\n    modifier groupOk(Group calldata _group) {\\n        require(_group.job != bytes32(0), \\\"JOB_EMPTY\\\");\\n        require(\\n            _group.minLeverage >= MIN_LEVERAGE &&\\n                _group.maxLeverage <= MAX_LEVERAGE &&\\n                _group.minLeverage < _group.maxLeverage,\\n            \\\"WRONG_LEVERAGES\\\"\\n        );\\n        _;\\n    }\\n    modifier feeOk(Fee calldata _fee) {\\n        require(\\n            _fee.openFeeP > 0 &&\\n                _fee.closeFeeP > 0 &&\\n                _fee.oracleFeeP > 0 &&\\n                _fee.nftLimitOrderFeeP > 0 &&\\n                _fee.referralFeeP > 0 &&\\n                _fee.minLevPosWETH > 0,\\n            \\\"WRONG_FEES\\\"\\n        );\\n        _;\\n    }\\n\\n    // Manage pairs\\n    function addPair(\\n        Pair calldata _pair\\n    )\\n        public\\n        onlyGov // feedOk(_pair.feed)\\n    // groupListed(_pair.groupIndex) /// TODO : uncomment\\n    // feeListed(_pair.feeIndex)\\n    {\\n        require(!isPairListed[_pair.from][_pair.to], \\\"PAIR_ALREADY_LISTED\\\");\\n        pairs[pairsCount] = _pair;\\n        isPairListed[_pair.from][_pair.to] = true;\\n\\n        emit PairAdded(pairsCount++, _pair.from, _pair.to);\\n    }\\n\\n    function addPairs(Pair[] calldata _pairs) external {\\n        for (uint i = 0; i < _pairs.length; i++) {\\n            addPair(_pairs[i]);\\n        }\\n    }\\n\\n    function updatePair(\\n        uint _pairIndex,\\n        Pair calldata _pair\\n    ) external onlyGov feedOk(_pair.feed) feeListed(_pair.feeIndex) {\\n        Pair storage p = pairs[_pairIndex];\\n        require(isPairListed[p.from][p.to], \\\"PAIR_NOT_LISTED\\\");\\n\\n        p.feed = _pair.feed;\\n        p.spreadP = _pair.spreadP;\\n        p.feeIndex = _pair.feeIndex;\\n\\n        emit PairUpdated(_pairIndex);\\n    }\\n\\n    // Manage groups\\n    function addGroup(Group calldata _group) external onlyGov groupOk(_group) {\\n        groups[groupsCount] = _group;\\n        emit GroupAdded(groupsCount++, _group.name);\\n    }\\n\\n    function updateGroup(\\n        uint _id,\\n        Group calldata _group\\n    ) external onlyGov groupListed(_id) groupOk(_group) {\\n        groups[_id] = _group;\\n        emit GroupUpdated(_id);\\n    }\\n\\n    // Manage fees\\n    function addFee(Fee calldata _fee) external onlyGov feeOk(_fee) {\\n        fees[feesCount] = _fee;\\n        emit FeeAdded(feesCount++, _fee.name);\\n    }\\n\\n    function updateFee(\\n        uint _id,\\n        Fee calldata _fee\\n    ) external onlyGov feeListed(_id) feeOk(_fee) {\\n        fees[_id] = _fee;\\n        emit FeeUpdated(_id);\\n    }\\n\\n    // Update collateral open exposure for a group (callbacks)\\n    function updateGroupCollateral(\\n        uint _pairIndex,\\n        uint _amount,\\n        bool _long,\\n        bool _increase\\n    ) external {\\n        require(msg.sender == address(storageT.callbacks()), \\\"CALLBACKS_ONLY\\\");\\n\\n        uint[2] storage collateralOpen = groupsCollaterals[\\n            pairs[_pairIndex].groupIndex\\n        ];\\n        uint index = _long ? 0 : 1;\\n\\n        if (_increase) {\\n            collateralOpen[index] += _amount;\\n        } else {\\n            collateralOpen[index] = collateralOpen[index] > _amount\\n                ? collateralOpen[index] - _amount\\n                : 0;\\n        }\\n    }\\n\\n    // Fetch relevant info for order (aggregator)\\n    function pairJob(\\n        uint _pairIndex\\n    ) external returns (string memory, string memory, bytes32, uint) {\\n        require(\\n            msg.sender == address(storageT.priceAggregator()),\\n            \\\"AGGREGATOR_ONLY\\\"\\n        );\\n\\n        Pair memory p = pairs[_pairIndex];\\n        require(isPairListed[p.from][p.to], \\\"PAIR_NOT_LISTED\\\");\\n\\n        return (p.from, p.to, groups[p.groupIndex].job, currentOrderId++);\\n    }\\n\\n    // Getters (pairs & groups)\\n    function pairFeed(uint _pairIndex) external view returns (Feed memory) {\\n        return pairs[_pairIndex].feed;\\n    }\\n\\n    function pairSpreadP(uint _pairIndex) external view returns (uint) {\\n        return pairs[_pairIndex].spreadP;\\n    }\\n\\n    function pairMinLeverage(uint _pairIndex) external view returns (uint) {\\n        return groups[pairs[_pairIndex].groupIndex].minLeverage;\\n    }\\n\\n    function pairMaxLeverage(uint _pairIndex) external view returns (uint) {\\n        return groups[pairs[_pairIndex].groupIndex].maxLeverage;\\n    }\\n\\n    function groupMaxCollateral(uint _pairIndex) external view returns (uint) {\\n        return\\n            (groups[pairs[_pairIndex].groupIndex].maxCollateralP *\\n                VaultInterface(address(storageT.vault())).currentBalanceWETH()) / 100;\\n    }\\n\\n    function groupCollateral(\\n        uint _pairIndex,\\n        bool _long\\n    ) external view returns (uint) {\\n        return groupsCollaterals[pairs[_pairIndex].groupIndex][_long ? 0 : 1];\\n    }\\n\\n    function guaranteedSlEnabled(uint _pairIndex) external view returns (bool) {\\n        return pairs[_pairIndex].groupIndex == 0; // crypto only\\n    }\\n\\n    // Getters (fees)\\n    function pairOpenFeeP(uint _pairIndex) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].openFeeP;\\n    }\\n\\n    function pairCloseFeeP(uint _pairIndex) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].closeFeeP;\\n    }\\n\\n    function pairOracleFeeP(uint _pairIndex) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].oracleFeeP;\\n    }\\n\\n    function pairNftLimitOrderFeeP(\\n        uint _pairIndex\\n    ) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].nftLimitOrderFeeP;\\n    }\\n\\n    function pairReferralFeeP(uint _pairIndex) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].referralFeeP;\\n    }\\n\\n    function pairMinLevPosWETH(uint _pairIndex) external view returns (uint) {\\n        return fees[pairs[_pairIndex].feeIndex].minLevPosWETH;\\n    }\\n\\n    // Getters (backend)\\n    function pairsBackend(\\n        uint _index\\n    ) external view returns (Pair memory, Group memory, Fee memory) {\\n        Pair memory p = pairs[_index];\\n        return (p, groups[p.groupIndex], fees[p.feeIndex]);\\n    }\\n}\\n\",\"keccak256\":\"0x33006e8b50f0da22e3a38ee39765944dd1467d6b9acf6c57402d15b3ee9b3e5c\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./NftRewardsInterfaceV6.sol\\\";\\n\\ninterface AggregatorInterfaceV1_1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE,\\n        UPDATE_SL\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\\n\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n\\n    function unregisterPendingSlOrder(uint orderId) external;\\n\\n    struct PendingSl {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice;\\n        bool buy;\\n        uint newSl;\\n    }\\n}\\n\",\"keccak256\":\"0xdca1370bd5b47fe1d3d2a5fe3539a5f98cef7b9ceb27d8ee5158f321ed3cdaf0\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/NftRewardsInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa5fff0932e0bd3d5b4506ea934f81dffc1c586042c6e0b31d1b1891ca6eba639\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32a4e5c386170b9da2ec3cd5ac53a4c82c64cfe94f41990f635cd18a73eccf73\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf439723f853b013721f9cc98c3e9ace8f63d178512916f35307be17c090b2a12\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0x7404086c41bf7d149aec1e867862091338a331ad5f70464885b3783468914e65\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface UniswapRouterInterface {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa6247e4240f1769c9b0842a4868f38ef020a84d3099233745e359da3b7d7eb0a\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface VaultInterface {\\n    function sendWETHToTrader(address, uint) external;\\n\\n    function receiveWETHFromTrader(address, uint, uint) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function distributeRewardWETH(uint) external;\\n}\\n\",\"keccak256\":\"0x57e5b0d1c855799be22d4a5a98b34e61fd71e3200e7a6b44c28528ffeb59c096\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cb5760003560e01c80638251135b1161010a5780639848a68d116100ad578063b81b2b711161007c578063b81b2b711461056c578063b91ac78814610575578063c03c76d61461059a578063db7c3f9d146105cd578063f7acbabd146105e057600080fd5b80639848a68d146104d05780639c8dd2fa14610502578063a1d54e9b14610535578063b71ade2f1461055957600080fd5b80638251135b146103ec578063836a341a1461041f578063885e2750146104525780638c23f81c1461045b578063925931fc1461046e5780639521753e146104775780639567dccf1461048a57806396324bd4146104ac57600080fd5b8063472ff8bb11610172578063472ff8bb1461032b57806349dde63f1461033e5780634acc79ed14610351578063527b47c01461037757806359a992d01461038a57806362614661146103bd578063658de48a146103d05780637981aa83146103d957600080fd5b806315406fe5146101d05780631628bfeb146101f657806316fff074146102515780631eaa005c1461027c57806320f0fc5e1461029c57806324abd3fb146102b1578063281b693c146102d5578063302f81fc14610308575b600080fd5b6101e36101de366004612014565b610613565b6040519081526020015b60405180910390f35b6102416102043660046120d8565b8151602081840181018051600882529282019482019490942091909352815180830184018051928152908401929093019190912091525460ff1681565b60405190151581526020016101ed565b600054610264906001600160a01b031681565b6040516001600160a01b0390911681526020016101ed565b61028f61028a36600461213b565b610638565b6040516101ed91906121b9565b6102af6102aa3660046121dc565b6106df565b005b6102416102bf36600461213b565b6000908152600560205260409020600601541590565b6101e36102e336600461213b565b6000908152600560209081526040808320600690810154845290915290206003015490565b61031b61031636600461213b565b61086d565b6040516101ed949392919061227e565b6102af6103393660046122cf565b610bb6565b6102af61034c36600461231d565b610d40565b61036461035f36600461213b565b610ee0565b6040516101ed9796959493929190612359565b6102af6103853660046123b0565b610fa2565b6101e361039836600461213b565b6000908152600560209081526040808320600690810154845290915290206002015490565b6101e36103cb36600461213b565b611239565b6101e360045481565b6102af6103e73660046123ec565b611345565b6101e36103fa36600461213b565b6000908152600560209081526040808320600790810154845290915290206001015490565b6101e361042d36600461213b565b6000908152600560209081526040808320600790810154845290915290206002015490565b6101e360035481565b6102af610469366004612428565b6114f5565b6101e360015481565b6101e361048536600461245c565b61165f565b61049d61049836600461213b565b6116a8565b6040516101ed9392919061252e565b6104bf6104ba36600461213b565b611ad9565b6040516101ed9594939291906125cf565b6101e36104de36600461213b565b60009081526005602081815260408084206007908101548552909152909120015490565b6101e361051036600461213b565b6000908152600560209081526040808320600790810154845290915290206004015490565b6101e361054336600461213b565b6000908152600560208190526040909120015490565b6102af610567366004612606565b611b8f565b6101e360025481565b61058861058336600461213b565b611dc0565b6040516101ed9695949392919061263a565b6101e36105a836600461213b565b6000908152600560209081526040808320600790810154845290915290206006015490565b6102af6105db366004612690565b611f6c565b6101e36105ee36600461213b565b6000908152600560209081526040808320600790810154845290915290206003015490565b6009602052816000526040600020816002811061062f57600080fd5b01549150829050565b6040805160808101825260008082526020820181905291810182905260608101919091526000828152600560209081526040918290208251608081018452600280830180546001600160a01b039081168452600390940154938416948301949094529093840191600160a01b900460ff16908111156106b9576106b9612154565b60028111156106ca576106ca612154565b81526020016002820154815250509050919050565b60008054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561072f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610753919061271c565b6001600160a01b0316336001600160a01b0316146107a95760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b60448201526064015b60405180910390fd5b60008481526005602090815260408083206006015483526009909152812090836107d45760016107d7565b60005b60ff169050821561081057848282600281106107f5576107f5612740565b016000828254610805919061276c565b909155506108659050565b8482826002811061082357610823612740565b015411610831576000610850565b8482826002811061084457610844612740565b01546108509190612784565b82826002811061086257610862612740565b01555b505050505050565b60608060008060008054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e8919061271c565b6001600160a01b0316336001600160a01b03161461093a5760405162461bcd60e51b815260206004820152600f60248201526e41474752454741544f525f4f4e4c5960881b60448201526064016107a0565b600085815260056020526040808220815160c081019092528054829082906109619061279b565b80601f016020809104026020016040519081016040528092919081815260200182805461098d9061279b565b80156109da5780601f106109af576101008083540402835291602001916109da565b820191906000526020600020905b8154815290600101906020018083116109bd57829003601f168201915b505050505081526020016001820180546109f39061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1f9061279b565b8015610a6c5780601f10610a4157610100808354040283529160200191610a6c565b820191906000526020600020905b815481529060010190602001808311610a4f57829003601f168201915b505050918352505060408051608081018252600284810180546001600160a01b0390811684526003870154908116602080860191909152909501949293909290840191600160a01b90910460ff1690811115610aca57610aca612154565b6002811115610adb57610adb612154565b815260200160028201548152505081526020016005820154815260200160068201548152602001600782015481525050905060088160000151604051610b2191906127cf565b90815260200160405180910390208160200151604051610b4191906127cf565b9081526040519081900360200190205460ff16610b705760405162461bcd60e51b81526004016107a0906127eb565b8051602080830151608084015160009081526006909252604082206001908101548154929390929190610ba283612814565b919050559450945094509450509193509193565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2b919061271c565b6001600160a01b0316336001600160a01b031614610c5b5760405162461bcd60e51b81526004016107a09061282d565b806020810135610c7d5760405162461bcd60e51b81526004016107a09061284f565b6002816040013510158015610c9857506103e8816060013511155b8015610cab575080606001358160400135105b610cc75760405162461bcd60e51b81526004016107a090612872565b60035460009081526006602052604090208290610ce482826129fd565b5050600380547faf17de8e82beccc440012117a600dc37e26925225d0f1ee192fc107eb3dcbca4916000610d1783612814565b90915550610d25848061289b565b604051610d3493929190612b13565b60405180910390a15050565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db5919061271c565b6001600160a01b0316336001600160a01b031614610de55760405162461bcd60e51b81526004016107a09061282d565b6000828152600760205260409020600101548290610e155760405162461bcd60e51b81526004016107a090612b36565b8160008160200135118015610e2e575060008160400135115b8015610e3e575060008160600135115b8015610e4e575060008160800135115b8015610e5e575060008160a00135115b8015610e6e575060008160c00135115b610e8a5760405162461bcd60e51b81526004016107a090612b5e565b60008481526007602052604090208390610ea48282612b82565b50506040518481527f8c4d35e54a3f2ef1134138fd8ea3daee6a3c89e10d2665996babdf70261e2c76906020015b60405180910390a150505050565b600760205260009081526040902080548190610efb9061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054610f279061279b565b8015610f745780601f10610f4957610100808354040283529160200191610f74565b820191906000526020600020905b815481529060010190602001808311610f5757829003601f168201915b5050505050908060010154908060020154908060030154908060040154908060050154908060060154905087565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ff3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611017919061271c565b6001600160a01b0316336001600160a01b0316146110475760405162461bcd60e51b81526004016107a09061282d565b8060400160008160600135118015611075575060006110696020830183612c7d565b6001600160a01b031614155b6110ae5760405162461bcd60e51b815260206004820152600a60248201526915d493d391d7d191515160b21b60448201526064016107a0565b60026110c06060830160408401612ca7565b60028111156110d1576110d1612154565b1415806110f7575060006110eb6040830160208401612c7d565b6001600160a01b031614155b6111345760405162461bcd60e51b815260206004820152600e60248201526d464545445f325f4d495353494e4760901b60448201526064016107a0565b6101008201356000818152600760205260409020600101546111685760405162461bcd60e51b81526004016107a090612b36565b600084815260056020526040908190209051600890611188908390612cc4565b9081526020016040518091039020816001016040516111a79190612cc4565b9081526040519081900360200190205460ff166111d65760405162461bcd60e51b81526004016107a0906127eb565b60408401600282016111e88282612d5a565b505060c0840135600582015561010084013560078201556040518581527f123a1b961ae93e7acda9790b318237b175b45ac09277cd3614305d8baa3f19539060200160405180910390a15050505050565b600080546040805163fbfa77cf60e01b815290516064926001600160a01b03169163fbfa77cf9160048083019260209291908290030181865afa158015611284573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a8919061271c565b6001600160a01b031663f457fa9a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113099190612de1565b600084815260056020908152604080832060069081015484529091529020600401546113359190612dfa565b61133f9190612e19565b92915050565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611396573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ba919061271c565b6001600160a01b0316336001600160a01b0316146113ea5760405162461bcd60e51b81526004016107a09061282d565b600082815260066020526040902060020154829061143d5760405162461bcd60e51b815260206004820152601060248201526f11d493d55417d393d517d31254d5115160821b60448201526064016107a0565b81602081013561145f5760405162461bcd60e51b81526004016107a09061284f565b600281604001351015801561147a57506103e8816060013511155b801561148d575080606001358160400135105b6114a95760405162461bcd60e51b81526004016107a090612872565b600084815260066020526040902083906114c382826129fd565b50506040518481527fcfde8f228364c70f12cbbac5a88fc91ceca76dd750ac93364991a333b34afb8e90602001610ed2565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611546573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156a919061271c565b6001600160a01b0316336001600160a01b03161461159a5760405162461bcd60e51b81526004016107a09061282d565b80600081602001351180156115b3575060008160400135115b80156115c3575060008160600135115b80156115d3575060008160800135115b80156115e3575060008160a00135115b80156115f3575060008160c00135115b61160f5760405162461bcd60e51b81526004016107a090612b5e565b6004546000908152600760205260409020829061162c8282612b82565b5050600480547f482049823c85e038e099fe4f2b901487c4800def71c9a3f5bae2de8381ec54f6916000610d1783612814565b6000828152600560209081526040808320600601548352600990915281208261168957600161168c565b60005b60ff166002811061169f5761169f612740565b01549392505050565b6116b0611fb5565b6116e56040518060a0016040528060608152602001600080191681526020016000815260200160008152602001600081525090565b6117256040518060e00160405280606081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600084815260056020526040808220815160c0810190925280548290829061174c9061279b565b80601f01602080910402602001604051908101604052809291908181526020018280546117789061279b565b80156117c55780601f1061179a576101008083540402835291602001916117c5565b820191906000526020600020905b8154815290600101906020018083116117a857829003601f168201915b505050505081526020016001820180546117de9061279b565b80601f016020809104026020016040519081016040528092919081815260200182805461180a9061279b565b80156118575780601f1061182c57610100808354040283529160200191611857565b820191906000526020600020905b81548152906001019060200180831161183a57829003601f168201915b505050918352505060408051608081018252600284810180546001600160a01b0390811684526003870154908116602080860191909152909501949293909290840191600160a01b90910460ff16908111156118b5576118b5612154565b60028111156118c6576118c6612154565b8152602001600282015481525050815260200160058201548152602001600682015481526020016007820154815250509050806006600083608001518152602001908152602001600020600760008460a001518152602001908152602001600020816040518060a00160405290816000820180546119439061279b565b80601f016020809104026020016040519081016040528092919081815260200182805461196f9061279b565b80156119bc5780601f10611991576101008083540402835291602001916119bc565b820191906000526020600020905b81548152906001019060200180831161199f57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820154815250509150806040518060e0016040529081600082018054611a0b9061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054611a379061279b565b8015611a845780601f10611a5957610100808354040283529160200191611a84565b820191906000526020600020905b815481529060010190602001808311611a6757829003601f168201915b5050505050815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820154815250509050935093509350509193909250565b600660205260009081526040902080548190611af49061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054611b209061279b565b8015611b6d5780601f10611b4257610100808354040283529160200191611b6d565b820191906000526020600020905b815481529060010190602001808311611b5057829003601f168201915b5050505050908060010154908060020154908060030154908060040154905085565b60008054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c04919061271c565b6001600160a01b0316336001600160a01b031614611c345760405162461bcd60e51b81526004016107a09061282d565b6008611c40828061289b565b604051611c4e929190612e3b565b9081526020016040518091039020818060200190611c6c919061289b565b604051611c7a929190612e3b565b9081526040519081900360200190205460ff1615611cd05760405162461bcd60e51b81526020600482015260136024820152721410525497d053149150511657d31254d51151606a1b60448201526064016107a0565b60025460009081526005602052604090208190611ced8282612e4b565b50600190506008611cfe838061289b565b604051611d0c929190612e3b565b9081526020016040518091039020828060200190611d2a919061289b565b604051611d38929190612e3b565b908152604051908190036020019020805491151560ff19909216919091179055600280547f3adfd40f2b74073df2a84238acdb7f460565a557b3cc13bddc8833289bf38e09916000611d8983612814565b90915550611d97838061289b565b611da4602086018661289b565b604051611db5959493929190612f56565b60405180910390a150565b600560205260009081526040902080548190611ddb9061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e079061279b565b8015611e545780601f10611e2957610100808354040283529160200191611e54565b820191906000526020600020905b815481529060010190602001808311611e3757829003601f168201915b505050505090806001018054611e699061279b565b80601f0160208091040260200160405190810160405280929190818152602001828054611e959061279b565b8015611ee25780601f10611eb757610100808354040283529160200191611ee2565b820191906000526020600020905b815481529060010190602001808311611ec557829003601f168201915b505060408051608081018252600287810180546001600160a01b03908116845260038a0154908116602085015297989792965094509185019250600160a01b900460ff1690811115611f3657611f36612154565b6002811115611f4757611f47612154565b8152602001600282015481525050908060050154908060060154908060070154905086565b60005b81811015611fb057611f9e838383818110611f8c57611f8c612740565b90506020028101906105679190612f8f565b80611fa881612814565b915050611f6f565b505050565b6040518060c001604052806060815260200160608152602001611ff96040805160808101825260008082526020820181905290918201908152602001600081525090565b81526020016000815260200160008152602001600081525090565b6000806040838503121561202757600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261205d57600080fd5b81356001600160401b038082111561207757612077612036565b604051601f8301601f19908116603f0116810190828211818310171561209f5761209f612036565b816040528381528660208588010111156120b857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156120eb57600080fd5b82356001600160401b038082111561210257600080fd5b61210e8683870161204c565b9350602085013591508082111561212457600080fd5b506121318582860161204c565b9150509250929050565b60006020828403121561214d57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b80516001600160a01b039081168352602080830151909116908301526040810151600381106121a957634e487b7160e01b600052602160045260246000fd5b6040830152606090810151910152565b6080810161133f828461216a565b803580151581146121d757600080fd5b919050565b600080600080608085870312156121f257600080fd5b8435935060208501359250612209604086016121c7565b9150612217606086016121c7565b905092959194509250565b60005b8381101561223d578181015183820152602001612225565b8381111561224c576000848401525b50505050565b6000815180845261226a816020860160208601612222565b601f01601f19169290920160200192915050565b6080815260006122916080830187612252565b82810360208401526122a38187612252565b604084019590955250506060015292915050565b600060a082840312156122c957600080fd5b50919050565b6000602082840312156122e157600080fd5b81356001600160401b038111156122f757600080fd5b612303848285016122b7565b949350505050565b600060e082840312156122c957600080fd5b6000806040838503121561233057600080fd5b8235915060208301356001600160401b0381111561234d57600080fd5b6121318582860161230b565b60e08152600061236c60e083018a612252565b60208301989098525060408101959095526060850193909352608084019190915260a083015260c090910152919050565b600061012082840312156122c957600080fd5b600080604083850312156123c357600080fd5b8235915060208301356001600160401b038111156123e057600080fd5b6121318582860161239d565b600080604083850312156123ff57600080fd5b8235915060208301356001600160401b0381111561241c57600080fd5b612131858286016122b7565b60006020828403121561243a57600080fd5b81356001600160401b0381111561245057600080fd5b6123038482850161230b565b6000806040838503121561246f57600080fd5b8235915061247f602084016121c7565b90509250929050565b6000815160a0845261249d60a0850182612252565b9050602083015160208501526040830151604085015260608301516060850152608083015160808501528091505092915050565b6000815160e084526124e660e0850182612252565b90506020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c08501528091505092915050565b606081526000845161012080606085015261254d610180850183612252565b91506020870151605f1985840301608086015261256a8382612252565b925050604087015161257f60a086018261216a565b50606087015190840152608086015161014084015260a086015161016084015282810360208401526125b18186612488565b905082810360408401526125c581856124d1565b9695505050505050565b60a0815260006125e260a0830188612252565b90508560208301528460408301528360608301528260808301529695505050505050565b60006020828403121561261857600080fd5b81356001600160401b0381111561262e57600080fd5b6123038482850161239d565b600061012080835261264e8184018a612252565b905082810360208401526126628189612252565b915050612672604083018761216a565b8460c08301528360e083015282610100830152979650505050505050565b600080602083850312156126a357600080fd5b82356001600160401b03808211156126ba57600080fd5b818501915085601f8301126126ce57600080fd5b8135818111156126dd57600080fd5b8660208260051b85010111156126f257600080fd5b60209290920196919550909350505050565b6001600160a01b038116811461271957600080fd5b50565b60006020828403121561272e57600080fd5b815161273981612704565b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561277f5761277f612756565b500190565b60008282101561279657612796612756565b500390565b600181811c908216806127af57607f821691505b6020821081036122c957634e487b7160e01b600052602260045260246000fd5b600082516127e1818460208701612222565b9190910192915050565b6020808252600f908201526e1410525497d393d517d31254d51151608a1b604082015260600190565b60006001820161282657612826612756565b5060010190565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b6020808252600990820152684a4f425f454d50545960b81b604082015260600190565b6020808252600f908201526e57524f4e475f4c455645524147455360881b604082015260600190565b6000808335601e198436030181126128b257600080fd5b8301803591506001600160401b038211156128cc57600080fd5b6020019150368190038213156128e157600080fd5b9250929050565b601f821115611fb057600081815260208120601f850160051c8101602086101561290f5750805b601f850160051c820191505b818110156108655782815560010161291b565b600019600383901b1c191660019190911b1790565b6001600160401b0383111561295a5761295a612036565b61296e83612968835461279b565b836128e8565b6000601f84116001811461299c576000851561298a5750838201355b612994868261292e565b8455506129f6565b600083815260209020601f19861690835b828110156129cd57868501358255602094850194600190920191016129ad565b50868210156129ea5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b612a07828361289b565b6001600160401b03811115612a1e57612a1e612036565b612a3281612a2c855461279b565b856128e8565b6000601f821160018114612a605760008315612a4e5750838201355b612a58848261292e565b865550612aba565b600085815260209020601f19841690835b82811015612a915786850135825560209485019460019092019101612a71565b5084821015612aae5760001960f88660031b161c19848701351681555b505060018360011b0185555b50505050602082013560018201556040820135600282015560608201356003820155608082013560048201555050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b838152604060208201526000612b2d604083018486612aea565b95945050505050565b6020808252600e908201526d11915157d393d517d31254d5115160921b604082015260600190565b6020808252600a908201526957524f4e475f4645455360b01b604082015260600190565b612b8c828361289b565b6001600160401b03811115612ba357612ba3612036565b612bb181612a2c855461279b565b6000601f821160018114612bdf5760008315612bcd5750838201355b612bd7848261292e565b865550612c39565b600085815260209020601f19841690835b82811015612c105786850135825560209485019460019092019101612bf0565b5084821015612c2d5760001960f88660031b161c19848701351681555b505060018360011b0185555b505050506020820135600182015560408201356002820155606082013560038201556080820135600482015560a0820135600582015560c082013560068201555050565b600060208284031215612c8f57600080fd5b813561273981612704565b6003811061271957600080fd5b600060208284031215612cb957600080fd5b813561273981612c9a565b6000808354612cd28161279b565b60018281168015612cea5760018114612cff57612d2e565b60ff1984168752821515830287019450612d2e565b8760005260208060002060005b85811015612d255781548a820152908401908201612d0c565b50505082870194505b50929695505050505050565b80546001600160a01b0319166001600160a01b0392909216919091179055565b8135612d6581612704565b612d6f8183612d3a565b50600181016020830135612d8281612704565b612d8c8183612d3a565b506040830135612d9b81612c9a565b60038110612db957634e487b7160e01b600052602160045260246000fd5b815460ff60a01b191660a09190911b60ff60a01b161790556060919091013560029190910155565b600060208284031215612df357600080fd5b5051919050565b6000816000190483118215151615612e1457612e14612756565b500290565b600082612e3657634e487b7160e01b600052601260045260246000fd5b500490565b8183823760009101908152919050565b612e55828361289b565b6001600160401b03811115612e6c57612e6c612036565b612e7a81612a2c855461279b565b6000601f821160018114612ea85760008315612e965750838201355b612ea0848261292e565b865550612f02565b600085815260209020601f19841690835b82811015612ed95786850135825560209485019460019092019101612eb9565b5084821015612ef65760001960f88660031b161c19848701351681555b505060018360011b0185555b50505050612f13602083018361289b565b612f21818360018601612943565b5050612f336040830160028301612d5a565b60c0820135600582015560e0820135600682015561010082013560078201555050565b858152606060208201526000612f70606083018688612aea565b8281036040840152612f83818587612aea565b98975050505050505050565b6000823561011e198336030181126127e157600080fdfea26469706673582212203f50a2cf2b79062876cd4e9fb656e10a044a0c15af7a9f196d20ba1cc5835d1664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13202,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "storageT",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(StorageInterface)31943"
      },
      {
        "astId": 13264,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "currentOrderId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13266,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "pairsCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 13268,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "groupsCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13270,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "feesCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13275,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "pairs",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(Pair)13236_storage)"
      },
      {
        "astId": 13280,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "groups",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Group)13247_storage)"
      },
      {
        "astId": 13285,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "fees",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(Fee)13262_storage)"
      },
      {
        "astId": 13291,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "isPairListed",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_bool))"
      },
      {
        "astId": 13297,
        "contract": "contracts/PairsStorage.sol:PairsStorage",
        "label": "groupsCollaterals",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_array(t_uint256)2_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(StorageInterface)31943": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_enum(FeedCalculation)13212": {
        "encoding": "inplace",
        "label": "enum PairsStorage.FeedCalculation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_string_memory_ptr,t_mapping(t_string_memory_ptr,t_bool))": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => mapping(string => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_bool)"
      },
      "t_mapping(t_uint256,t_array(t_uint256)2_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[2])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)2_storage"
      },
      "t_mapping(t_uint256,t_struct(Fee)13262_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairsStorage.Fee)",
        "numberOfBytes": "32",
        "value": "t_struct(Fee)13262_storage"
      },
      "t_mapping(t_uint256,t_struct(Group)13247_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairsStorage.Group)",
        "numberOfBytes": "32",
        "value": "t_struct(Group)13247_storage"
      },
      "t_mapping(t_uint256,t_struct(Pair)13236_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairsStorage.Pair)",
        "numberOfBytes": "32",
        "value": "t_struct(Pair)13236_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Fee)13262_storage": {
        "encoding": "inplace",
        "label": "struct PairsStorage.Fee",
        "members": [
          {
            "astId": 13249,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 13251,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "openFeeP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 13253,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "closeFeeP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13255,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "oracleFeeP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13257,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "nftLimitOrderFeeP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 13259,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "referralFeeP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13261,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "minLevPosWETH",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Feed)13222_storage": {
        "encoding": "inplace",
        "label": "struct PairsStorage.Feed",
        "members": [
          {
            "astId": 13214,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "feed1",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 13216,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "feed2",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 13219,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "feedCalculation",
            "offset": 20,
            "slot": "1",
            "type": "t_enum(FeedCalculation)13212"
          },
          {
            "astId": 13221,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "maxDeviationP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Group)13247_storage": {
        "encoding": "inplace",
        "label": "struct PairsStorage.Group",
        "members": [
          {
            "astId": 13238,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 13240,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "job",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13242,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "minLeverage",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 13244,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "maxLeverage",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 13246,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "maxCollateralP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Pair)13236_storage": {
        "encoding": "inplace",
        "label": "struct PairsStorage.Pair",
        "members": [
          {
            "astId": 13224,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "from",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 13226,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "to",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 13229,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "feed",
            "offset": 0,
            "slot": "2",
            "type": "t_struct(Feed)13222_storage"
          },
          {
            "astId": 13231,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "spreadP",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 13233,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "groupIndex",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 13235,
            "contract": "contracts/PairsStorage.sol:PairsStorage",
            "label": "feeIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}