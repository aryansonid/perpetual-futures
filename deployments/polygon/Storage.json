{
  "address": "0x602562Aae7024D93B0c722BfED19aE64A5080757",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "AddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract NftInterfaceV5[5]",
          "name": "nfts",
          "type": "address[5]"
        }
      ],
      "name": "NftsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdatedPair",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "openingInterestShort",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "openingInterestLong",
          "type": "uint256"
        }
      ],
      "name": "OpenningInterestUpated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "name": "SpreadReductionsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "SupportedTokenAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": true,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        }
      ],
      "name": "TradeClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": true,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        }
      ],
      "name": "TradeOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "TradingContractAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "a",
          "type": "address"
        }
      ],
      "name": "TradingContractRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PRECISION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "addSupportedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trading",
          "type": "address"
        }
      ],
      "name": "addTradingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbacks",
      "outputs": [
        {
          "internalType": "contract PausableInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultLeverageUnlocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dev",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFeesToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "devFeesWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "distributeLpRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "firstEmptyOpenLimitIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "firstEmptyTradeIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGov",
      "outputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getLeverageUnlocked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidatableTrades",
      "outputs": [
        {
          "internalType": "uint256[100]",
          "name": "_orderTypes",
          "type": "uint256[100]"
        },
        {
          "internalType": "address[100]",
          "name": "traderaddreses",
          "type": "address[100]"
        },
        {
          "internalType": "uint256[100]",
          "name": "pairIndexs",
          "type": "uint256[100]"
        },
        {
          "internalType": "uint256[100]",
          "name": "indexs",
          "type": "uint256[100]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getOpenLimitOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.OpenLimitOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOpenLimitOrders",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.OpenLimitOrder[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOpenTrades",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getOpenTradesInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPriceWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openInterestWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpLastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slLastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "beingMarketClosed",
              "type": "bool"
            }
          ],
          "internalType": "struct StorageInterface.TradeInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getPendingMarketOrder",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        }
      ],
      "name": "getPendingNftOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftHolder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterface.LimitOrder",
              "name": "orderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct StorageInterface.PendingNftOrder",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getPendingOrderIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "getReferral",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSpreadReductionsArray",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gov",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govFeesToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "govFeesWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leveragedPositionSize",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_WETH",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_fullFee",
          "type": "bool"
        }
      ],
      "name": "handleDevGovFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_mint",
          "type": "bool"
        }
      ],
      "name": "handleTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "hasOpenLimitOrder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseNftRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "increaseReferralRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isTradingContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkErc677",
      "outputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGainP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPendingMarketOrders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSlP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTradesPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTradesPerPair",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mintWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nftLastSuccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftSuccessTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nfts",
      "outputs": [
        {
          "internalType": "contract NftInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openInterestWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openLimitOrderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openLimitOrders",
      "outputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionP",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "buy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openLimitOrdersCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openTrades",
      "outputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPosToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "buy",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openTradesCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "openTradesInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPriceWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openInterestWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tpLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "beingMarketClosed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairTraders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        }
      ],
      "name": "pairTradersArray",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairTradersId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairs",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingMarketCloseCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingMarketOpenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingOrderIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        }
      ],
      "name": "pendingOrderIdsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract PoolInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceAggregator",
      "outputs": [
        {
          "internalType": "contract AggregatorInterfaceV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trading",
          "type": "address"
        }
      ],
      "name": "removeTradingContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reqID_pendingMarketOrder",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "trade",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "block",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wantedPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reqID_pendingNftOrder",
      "outputs": [
        {
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        }
      ],
      "name": "setCallbacks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lev",
          "type": "uint256"
        }
      ],
      "name": "setDefaultLeverageUnlocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dev",
          "type": "address"
        }
      ],
      "name": "setDev",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newLeverage",
          "type": "uint256"
        }
      ],
      "name": "setLeverageUnlocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxGainP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newMaxOpenInterest",
          "type": "uint256"
        }
      ],
      "name": "setMaxOpenInterestWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxPendingMarketOrders",
          "type": "uint256"
        }
      ],
      "name": "setMaxPendingMarketOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_max",
          "type": "uint256"
        }
      ],
      "name": "setMaxSlP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTradesPerBlock",
          "type": "uint256"
        }
      ],
      "name": "setMaxTradesPerBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxTradesPerPair",
          "type": "uint256"
        }
      ],
      "name": "setMaxTradesPerPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_blocks",
          "type": "uint256"
        }
      ],
      "name": "setNftSuccessTimelock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "setOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pairs",
          "type": "uint256"
        }
      ],
      "name": "setPairs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aggregator",
          "type": "address"
        }
      ],
      "name": "setPriceAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[5]",
          "name": "_r",
          "type": "uint256[5]"
        }
      ],
      "name": "setSpreadReductionsP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenWETHRouter",
          "type": "address"
        }
      ],
      "name": "setTokenWETHRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trading",
          "type": "address"
        }
      ],
      "name": "setTrading",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "spreadReductionsP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.OpenLimitOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "storeOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "_order",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "storePendingMarketOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftHolder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterface.LimitOrder",
              "name": "orderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct StorageInterface.PendingNftOrder",
          "name": "_nftOrder",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_orderId",
          "type": "uint256"
        }
      ],
      "name": "storePendingNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "storeReferral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "_trade",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenPriceWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openInterestWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tpLastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slLastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "beingMarketClosed",
              "type": "bool"
            }
          ],
          "internalType": "struct StorageInterface.TradeInfo",
          "name": "_tradeInfo",
          "type": "tuple"
        }
      ],
      "name": "storeTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenWETHRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensBurned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokensMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "traders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "leverageUnlocked",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "referralRewardsTotal",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradesPerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trading",
      "outputs": [
        {
          "internalType": "contract PausableInterfaceV5",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_leveragedPosWETH",
          "type": "uint256"
        }
      ],
      "name": "transferLinkToAggregator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "unregisterOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_open",
          "type": "bool"
        }
      ],
      "name": "unregisterPendingMarketOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_order",
          "type": "uint256"
        }
      ],
      "name": "unregisterPendingNftOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "unregisterTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract NftInterfaceV5[5]",
          "name": "_nfts",
          "type": "address[5]"
        }
      ],
      "name": "updateNfts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.OpenLimitOrder",
          "name": "_o",
          "type": "tuple"
        }
      ],
      "name": "updateOpenLimitOrder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TokenInterface",
          "name": "_newToken",
          "type": "address"
        }
      ],
      "name": "updateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "_t",
          "type": "tuple"
        }
      ],
      "name": "updateTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x43e726e34e5039a51cd2822ce1b45f1157f4fa90d1a48266f6621aae59f3db98",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x602562Aae7024D93B0c722BfED19aE64A5080757",
    "transactionIndex": 4,
    "gasUsed": "5737003",
    "logsBloom": "0x
    "blockHash": "0xeb3bb4c859cf542ac0f5bd66664ec7677a615e3f58c1b4e3ecd4ddd29d60e86d",
    "transactionHash": "0x43e726e34e5039a51cd2822ce1b45f1157f4fa90d1a48266f6621aae59f3db98",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 42113365,
        "transactionHash": "0x43e726e34e5039a51cd2822ce1b45f1157f4fa90d1a48266f6621aae59f3db98",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000022e5f9fa61d39100000000000000000000000000000000000000000000000054ddc1e8894969e00000000000000000000000000000000000000000000011eead7cda4332d5123f00000000000000000000000000000000000000000000000054badbee8ee7964f0000000000000000000000000000000000000000000011eead9fc03d2d36e5d0",
        "logIndex": 45,
        "blockHash": "0xeb3bb4c859cf542ac0f5bd66664ec7677a615e3f58c1b4e3ecd4ddd29d60e86d"
      }
    ],
    "blockNumber": 42113365,
    "cumulativeGasUsed": "7294863",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA480ef36DDFe6bCBe8429C7FD3c2565060F75C2E",
    "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "0xa667403454F483dE81A0363Af7FcEE563819D910"
  ],
  "numDeployments": 1,
  "solcInputHash": "5d0f3acf6d102b09563e4596939a2e69",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"AddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract NftInterfaceV5[5]\",\"name\":\"nfts\",\"type\":\"address[5]\"}],\"name\":\"NftsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdatedPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"openingInterestShort\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"openingInterestLong\",\"type\":\"uint256\"}],\"name\":\"OpenningInterestUpated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"name\":\"SpreadReductionsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"SupportedTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":true,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"}],\"name\":\"TradeClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":true,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"}],\"name\":\"TradeOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"TradingContractAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"TradingContractRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addSupportedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"}],\"name\":\"addTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"contract PausableInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultLeverageUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dev\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeesToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devFeesWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeLpRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"firstEmptyOpenLimitIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"firstEmptyTradeIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getLeverageUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidatableTrades\",\"outputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"_orderTypes\",\"type\":\"uint256[100]\"},{\"internalType\":\"address[100]\",\"name\":\"traderaddreses\",\"type\":\"address[100]\"},{\"internalType\":\"uint256[100]\",\"name\":\"pairIndexs\",\"type\":\"uint256[100]\"},{\"internalType\":\"uint256[100]\",\"name\":\"indexs\",\"type\":\"uint256[100]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getOpenLimitOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.OpenLimitOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOpenLimitOrders\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.OpenLimitOrder[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOpenTrades\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getOpenTradesInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"beingMarketClosed\",\"type\":\"bool\"}],\"internalType\":\"struct StorageInterface.TradeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getPendingMarketOrder\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"}],\"name\":\"getPendingNftOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageInterface.PendingNftOrder\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getPendingOrderIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"getReferral\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpreadReductionsArray\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gov\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFeesToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"govFeesWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leveragedPositionSize\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_WETH\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_fullFee\",\"type\":\"bool\"}],\"name\":\"handleDevGovFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_mint\",\"type\":\"bool\"}],\"name\":\"handleTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"hasOpenLimitOrder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseNftRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"increaseReferralRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isTradingContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkErc677\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGainP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPendingMarketOrders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradesPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradesPerPair\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mintWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftLastSuccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftSuccessTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nfts\",\"outputs\":[{\"internalType\":\"contract NftInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openInterestWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openLimitOrderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openLimitOrders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openLimitOrdersCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openTrades\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openTradesCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"openTradesInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"beingMarketClosed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairTraders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"}],\"name\":\"pairTradersArray\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairTradersId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingMarketCloseCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingMarketOpenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingOrderIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"}],\"name\":\"pendingOrderIdsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract PoolInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceAggregator\",\"outputs\":[{\"internalType\":\"contract AggregatorInterfaceV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"}],\"name\":\"removeTradingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reqID_pendingMarketOrder\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reqID_pendingNftOrder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"}],\"name\":\"setCallbacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lev\",\"type\":\"uint256\"}],\"name\":\"setDefaultLeverageUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDev\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newLeverage\",\"type\":\"uint256\"}],\"name\":\"setLeverageUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxGainP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newMaxOpenInterest\",\"type\":\"uint256\"}],\"name\":\"setMaxOpenInterestWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxPendingMarketOrders\",\"type\":\"uint256\"}],\"name\":\"setMaxPendingMarketOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setMaxSlP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTradesPerBlock\",\"type\":\"uint256\"}],\"name\":\"setMaxTradesPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTradesPerPair\",\"type\":\"uint256\"}],\"name\":\"setMaxTradesPerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_blocks\",\"type\":\"uint256\"}],\"name\":\"setNftSuccessTimelock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"setOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pairs\",\"type\":\"uint256\"}],\"name\":\"setPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aggregator\",\"type\":\"address\"}],\"name\":\"setPriceAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"_r\",\"type\":\"uint256[5]\"}],\"name\":\"setSpreadReductionsP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenWETHRouter\",\"type\":\"address\"}],\"name\":\"setTokenWETHRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"}],\"name\":\"setTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"spreadReductionsP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.OpenLimitOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"storeOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"_order\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"storePendingMarketOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageInterface.PendingNftOrder\",\"name\":\"_nftOrder\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_orderId\",\"type\":\"uint256\"}],\"name\":\"storePendingNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"storeReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"_trade\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openInterestWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tpLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"beingMarketClosed\",\"type\":\"bool\"}],\"internalType\":\"struct StorageInterface.TradeInfo\",\"name\":\"_tradeInfo\",\"type\":\"tuple\"}],\"name\":\"storeTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenWETHRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensBurned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"traders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"leverageUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"referralRewardsTotal\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradesPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"contract PausableInterfaceV5\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_leveragedPosWETH\",\"type\":\"uint256\"}],\"name\":\"transferLinkToAggregator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"unregisterOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"unregisterPendingMarketOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_order\",\"type\":\"uint256\"}],\"name\":\"unregisterPendingNftOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"unregisterTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract NftInterfaceV5[5]\",\"name\":\"_nfts\",\"type\":\"address[5]\"}],\"name\":\"updateNfts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.OpenLimitOrder\",\"name\":\"_o\",\"type\":\"tuple\"}],\"name\":\"updateOpenLimitOrder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenInterface\",\"name\":\"_newToken\",\"type\":\"address\"}],\"name\":\"updateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"_t\",\"type\":\"tuple\"}],\"name\":\"updateTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Storage.sol\":\"Storage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1.sol\\\";\\nimport \\\"./interfaces/PoolInterfaceV5.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/PausableInterfaceV5.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Storage is StorageInterface {\\n    // Constants\\n    uint public constant PRECISION = 1e10;\\n    bytes32 public constant MINTER_ROLE =\\n        0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\\n    TokenInterface public WETH;\\n    IOracle public oracle;\\n    TokenInterface public constant linkErc677 =\\n        TokenInterface(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\\n\\n    // Contracts (updatable)\\n    AggregatorInterfaceV1 public priceAggregator;\\n    PoolInterfaceV5 public pool;\\n    PausableInterfaceV5 public trading;\\n    PausableInterfaceV5 public callbacks;\\n    TokenInterface public token =\\n        TokenInterface(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\\n    NftInterfaceV5[5] public nfts = [\\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\\n    ];\\n    address public vault;\\n    address public tokenWETHRouter;\\n\\n    // Trading variables\\n    uint public maxTradesPerPair = 3;\\n    uint public maxTradesPerBlock = 5;\\n    uint public maxPendingMarketOrders = 5;\\n    uint public maxGainP = 900; // %\\n    uint public maxSlP = 80; // %\\n    uint public defaultLeverageUnlocked = 50; // x\\n    uint public nftSuccessTimelock = 50; // 50 blocks\\n    uint[5] public spreadReductionsP = [15, 20, 25, 30, 35]; // %\\n\\n    // Gov & dev addresses (updatable)\\n    address public gov; //TODO need to change to our\\n    address public dev; //TODO need to change to our\\n\\n    // Gov & dev fees\\n    uint public devFeesToken; // 1e18\\n    uint public devFeesWETH; // 1e18\\n    uint public govFeesToken; // 1e18\\n    uint public govFeesWETH; // 1e18\\n\\n    // Stats\\n    uint public tokensBurned; // 1e18\\n    uint public tokensMinted; // 1e18\\n    uint public nftRewards; // 1e18\\n\\n    uint public pairs = 2;\\n\\n    // Enums\\n    // enum LimitOrder {\\n    //     TP,\\n    //     SL,\\n    //     LIQ,\\n    //     OPEN\\n    // }\\n\\n    // Structs\\n    struct Trader {\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal; // 1e18\\n    }\\n    // struct Trade {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint initialPosToken; // 1e18\\n    //     uint positionSizeWETH; // 1e18\\n    //     uint openPrice; // PRECISION\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION\\n    //     uint sl; // PRECISION\\n    // }\\n    // struct TradeInfo {\\n    //     uint tokenId;\\n    //     uint tokenPriceWETH; // PRECISION\\n    //     uint openInterestWETH; // 1e18\\n    //     uint tpLastUpdated;\\n    //     uint slLastUpdated;\\n    //     bool beingMarketClosed;\\n    // }\\n    // struct OpenLimitOrder {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint positionSize; // 1e18 (WETH or GFARM2)\\n    //     uint spreadReductionP;\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION (%)\\n    //     uint sl; // PRECISION (%)\\n    //     uint minPrice; // PRECISION\\n    //     uint maxPrice; // PRECISION\\n    //     uint block;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingMarketOrder {\\n    //     Trade trade;\\n    //     uint block;\\n    //     uint wantedPrice; // PRECISION\\n    //     uint slippageP; // PRECISION (%)\\n    //     uint spreadReductionP;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingNftOrder {\\n    //     address nftHolder;\\n    //     uint nftId;\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     LimitOrder orderType;\\n    // }\\n\\n    // Supported tokens to open trades with\\n    address[] public supportedTokens;\\n\\n    // User info mapping\\n    mapping(address => Trader) public traders;\\n\\n    // Trades mappings\\n    mapping(address => mapping(uint => mapping(uint => Trade)))\\n        public openTrades;\\n    mapping(address => mapping(uint => mapping(uint => TradeInfo)))\\n        public openTradesInfo;\\n    mapping(address => mapping(uint => uint)) public openTradesCount;\\n\\n    // Limit orders mappings\\n    mapping(address => mapping(uint => mapping(uint => uint)))\\n        public openLimitOrderIds;\\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\\n    OpenLimitOrder[] public openLimitOrders;\\n\\n    // Pending orders mappings\\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\\n    mapping(address => uint[]) public pendingOrderIds;\\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\\n\\n    // List of open trades & limit orders\\n    mapping(uint => address[]) public pairTraders;\\n    mapping(address => mapping(uint => uint)) public pairTradersId;\\n\\n    // Current and max open interests for each pair\\n    mapping(uint => uint[3]) public openInterestWETH; // 1e18 [long,short,max]\\n\\n    // Restrictions & Timelocks\\n    mapping(uint => uint) public tradesPerBlock;\\n    mapping(uint => uint) public nftLastSuccess;\\n\\n    // List of allowed contracts => can update storage + mint/burn tokens\\n    mapping(address => bool) public isTradingContract;\\n\\n    // Events\\n    event SupportedTokenAdded(address a);\\n    event TradingContractAdded(address a);\\n    event TradingContractRemoved(address a);\\n    event AddressUpdated(string name, address a);\\n    event NftsUpdated(NftInterfaceV5[5] nfts);\\n    event NumberUpdated(string name, uint value);\\n    event NumberUpdatedPair(string name, uint pairIndex, uint value);\\n    event SpreadReductionsUpdated(uint[5]);\\n\\n    constructor(address _WETH, address _gov, address _dev) {\\n        WETH = TokenInterface(_WETH);\\n        gov = _gov;\\n        dev = _dev;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(\\n            isTradingContract[msg.sender],\\n            // &&\\n            //     token.hasRole(MINTER_ROLE, msg.sender)\\n            \\\"here here\\\"\\n        );\\n        _;\\n    }\\n\\n    // Manage addresses\\n    function setGov(address _gov) external onlyGov {\\n        require(_gov != address(0));\\n        gov = _gov;\\n        emit AddressUpdated(\\\"gov\\\", _gov);\\n    }\\n\\n    function setDev(address _dev) external onlyGov {\\n        require(_dev != address(0));\\n        dev = _dev;\\n        emit AddressUpdated(\\\"dev\\\", _dev);\\n    }\\n\\n    function updateToken(TokenInterface _newToken) external onlyGov {\\n        require(trading.isPaused() && callbacks.isPaused(), \\\"NOT_PAUSED\\\");\\n        require(address(_newToken) != address(0));\\n        token = _newToken;\\n        emit AddressUpdated(\\\"token\\\", address(_newToken));\\n    }\\n\\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov {\\n        require(address(_nfts[0]) != address(0));\\n        nfts = _nfts;\\n        emit NftsUpdated(_nfts);\\n    }\\n\\n    // Trading + callbacks contracts\\n    function addTradingContract(address _trading) external onlyGov {\\n        // require(token.hasRole(MINTER_ROLE, _trading), \\\"NOT_MINTER\\\"); /// TODO : need to have a gtoken type token of our own\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = true;\\n        emit TradingContractAdded(_trading);\\n    }\\n\\n    function removeTradingContract(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = false;\\n        emit TradingContractRemoved(_trading);\\n    }\\n\\n    function addSupportedToken(address _token) external onlyGov {\\n        require(_token != address(0));\\n        supportedTokens.push(_token);\\n        emit SupportedTokenAdded(_token);\\n    }\\n\\n    function setPriceAggregator(address _aggregator) external onlyGov {\\n        require(_aggregator != address(0));\\n        priceAggregator = AggregatorInterfaceV1(_aggregator);\\n        emit AddressUpdated(\\\"priceAggregator\\\", _aggregator);\\n    }\\n\\n    function setPool(address _pool) external onlyGov {\\n        require(_pool != address(0));\\n        pool = PoolInterfaceV5(_pool);\\n        emit AddressUpdated(\\\"pool\\\", _pool);\\n    }\\n\\n    function setVault(address _vault) external onlyGov {\\n        require(_vault != address(0));\\n        vault = _vault;\\n        emit AddressUpdated(\\\"vault\\\", _vault);\\n    }\\n\\n    function setTrading(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        trading = PausableInterfaceV5(_trading);\\n        emit AddressUpdated(\\\"trading\\\", _trading);\\n    }\\n\\n    function setCallbacks(address _callbacks) external onlyGov {\\n        require(_callbacks != address(0));\\n        callbacks = PausableInterfaceV5(_callbacks);\\n        emit AddressUpdated(\\\"callbacks\\\", _callbacks);\\n    }\\n\\n    function setTokenWETHRouter(address _tokenWETHRouter) external onlyGov {\\n        require(_tokenWETHRouter != address(0));\\n        tokenWETHRouter = _tokenWETHRouter;\\n        emit AddressUpdated(\\\"tokenWETHRouter\\\", _tokenWETHRouter);\\n    }\\n\\n    // Manage trading variables\\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov {\\n        require(_maxTradesPerBlock > 0);\\n        maxTradesPerBlock = _maxTradesPerBlock;\\n        emit NumberUpdated(\\\"maxTradesPerBlock\\\", _maxTradesPerBlock);\\n    }\\n\\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov {\\n        require(_maxTradesPerPair > 0);\\n        maxTradesPerPair = _maxTradesPerPair;\\n        emit NumberUpdated(\\\"maxTradesPerPair\\\", _maxTradesPerPair);\\n    }\\n\\n    function setMaxPendingMarketOrders(\\n        uint _maxPendingMarketOrders\\n    ) external onlyGov {\\n        require(_maxPendingMarketOrders > 0);\\n        maxPendingMarketOrders = _maxPendingMarketOrders;\\n        emit NumberUpdated(\\\"maxPendingMarketOrders\\\", _maxPendingMarketOrders);\\n    }\\n\\n    function setMaxGainP(uint _max) external onlyGov {\\n        require(_max >= 300);\\n        maxGainP = _max;\\n        emit NumberUpdated(\\\"maxGainP\\\", _max);\\n    }\\n\\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov {\\n        require(_lev > 0);\\n        defaultLeverageUnlocked = _lev;\\n        emit NumberUpdated(\\\"defaultLeverageUnlocked\\\", _lev);\\n    }\\n\\n    function setMaxSlP(uint _max) external onlyGov {\\n        require(_max >= 50);\\n        maxSlP = _max;\\n        emit NumberUpdated(\\\"maxSlP\\\", _max);\\n    }\\n\\n    function setNftSuccessTimelock(uint _blocks) external onlyGov {\\n        nftSuccessTimelock = _blocks;\\n        emit NumberUpdated(\\\"nftSuccessTimelock\\\", _blocks);\\n    }\\n\\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov {\\n        require(\\n            _r[0] > 0 &&\\n                _r[1] > _r[0] &&\\n                _r[2] > _r[1] &&\\n                _r[3] > _r[2] &&\\n                _r[4] > _r[3]\\n        );\\n        spreadReductionsP = _r;\\n        emit SpreadReductionsUpdated(_r);\\n    }\\n\\n    function setMaxOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _newMaxOpenInterest\\n    ) external onlyGov {\\n        // Can set max open interest to 0 to pause trading on this pair only\\n        openInterestWETH[_pairIndex][2] = _newMaxOpenInterest;\\n        emit NumberUpdatedPair(\\n            \\\"maxOpenInterestWETH\\\",\\n            _pairIndex,\\n            _newMaxOpenInterest\\n        );\\n    }\\n\\n    // Manage stored trades\\n    function storeTrade(\\n        Trade memory _trade,\\n        TradeInfo memory _tradeInfo\\n    ) external onlyTrading {\\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\\n\\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\\n        tradesPerBlock[block.number]++;\\n\\n        if (openTradesCount[_trade.trader][_trade.pairIndex] == 1) {\\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[\\n                _trade.pairIndex\\n            ].length;\\n            pairTraders[_trade.pairIndex].push(_trade.trader);\\n        }\\n\\n        _tradeInfo.beingMarketClosed = false;\\n        openTradesInfo[_trade.trader][_trade.pairIndex][\\n            _trade.index\\n        ] = _tradeInfo;\\n\\n        updateOpenInterestWETH(\\n            _trade.pairIndex,\\n            _tradeInfo.openInterestWETH,\\n            true,\\n            _trade.buy\\n        );\\n\\n        emit TradeOpen(_trade);\\n    }\\n\\n    function unregisterTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[trader][pairIndex][index];\\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n\\n        updateOpenInterestWETH(pairIndex, i.openInterestWETH, false, t.buy);\\n\\n        if (openTradesCount[trader][pairIndex] == 1) {\\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\\n            address[] storage p = pairTraders[pairIndex];\\n\\n            p[_pairTradersId] = p[p.length - 1];\\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\\n\\n            delete pairTradersId[trader][pairIndex];\\n            p.pop();\\n        }\\n\\n        delete openTrades[trader][pairIndex][index];\\n        delete openTradesInfo[trader][pairIndex][index];\\n\\n        openTradesCount[trader][pairIndex]--;\\n        tradesPerBlock[block.number]++;\\n\\n        emit TradeClose(t);\\n    }\\n\\n    // Manage pending market orders\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory _order,\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        pendingOrderIds[_order.trade.trader].push(_id);\\n\\n        reqID_pendingMarketOrder[_id] = _order;\\n        reqID_pendingMarketOrder[_id].block = block.number;\\n\\n        if (_open) {\\n            pendingMarketOpenCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n        } else {\\n            pendingMarketCloseCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                _order.trade.index\\n            ].beingMarketClosed = true;\\n        }\\n    }\\n\\n    function unregisterPendingMarketOrder(\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\\n\\n        for (uint i = 0; i < orderIds.length; i++) {\\n            if (orderIds[i] == _id) {\\n                if (_open) {\\n                    pendingMarketOpenCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                } else {\\n                    pendingMarketCloseCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                        _order.trade.index\\n                    ].beingMarketClosed = false;\\n                }\\n\\n                orderIds[i] = orderIds[orderIds.length - 1];\\n                orderIds.pop();\\n\\n                delete reqID_pendingMarketOrder[_id];\\n                return;\\n            }\\n        }\\n    }\\n\\n    // Manage open interest\\n    function updateOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _leveragedPosWETH,\\n        bool _open,\\n        bool _long\\n    ) private {\\n        uint index = _long ? 0 : 1;\\n        uint[3] storage o = openInterestWETH[_pairIndex];\\n        o[index] = _open\\n            ? o[index] + _leveragedPosWETH\\n            : o[index] - _leveragedPosWETH;\\n        emit OpenningInterestUpated(_pairIndex, o[1], o[0]);\\n    }\\n\\n    // Manage open limit orders\\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading {\\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\\n        o.block = block.number;\\n        openLimitOrders.push(o);\\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] =\\n            openLimitOrders.length -\\n            1;\\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\\n    }\\n\\n    function updateOpenLimitOrder(\\n        OpenLimitOrder calldata _o\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)) {\\n            return;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]\\n        ];\\n        o.positionSize = _o.positionSize;\\n        o.buy = _o.buy;\\n        o.leverage = _o.leverage;\\n        o.tp = _o.tp;\\n        o.sl = _o.sl;\\n        o.minPrice = _o.minPrice;\\n        o.maxPrice = _o.maxPrice;\\n        o.block = block.number;\\n    }\\n\\n    function unregisterOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_trader, _pairIndex, _index)) {\\n            return;\\n        }\\n\\n        // Copy last order to deleted order => update id of this limit order\\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length - 1];\\n        openLimitOrderIds[openLimitOrders[id].trader][\\n            openLimitOrders[id].pairIndex\\n        ][openLimitOrders[id].index] = id;\\n\\n        // Remove\\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders.pop();\\n\\n        openLimitOrdersCount[_trader][_pairIndex]--;\\n    }\\n\\n    // Manage NFT orders\\n    function storePendingNftOrder(\\n        PendingNftOrder memory _nftOrder,\\n        uint _orderId\\n    ) external onlyTrading {\\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\\n    }\\n\\n    function unregisterPendingNftOrder(uint _order) external onlyTrading {\\n        delete reqID_pendingNftOrder[_order];\\n    }\\n\\n    // Manage open trade\\n    function updateSl(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newSl\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.sl = _newSl;\\n        i.slLastUpdated = block.number;\\n    }\\n\\n    function updateTp(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newTp\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.tp = _newTp;\\n        i.tpLastUpdated = block.number;\\n    }\\n\\n    function updateTrade(Trade memory _t) external onlyTrading {\\n        // useful when partial adding/closing\\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.initialPosToken = _t.initialPosToken;\\n        t.positionSizeWETH = _t.positionSizeWETH;\\n        t.openPrice = _t.openPrice;\\n        t.leverage = _t.leverage;\\n    }\\n\\n    // Manage referrals\\n    function storeReferral(\\n        address _trader,\\n        address _referral\\n    ) external onlyTrading {\\n        Trader storage trader = traders[_trader];\\n        trader.referral = _referral != address(0) &&\\n            trader.referral == address(0) &&\\n            _referral != _trader\\n            ? _referral\\n            : trader.referral;\\n    }\\n\\n    function increaseReferralRewards(\\n        address _referral,\\n        uint _amount\\n    ) external onlyTrading {\\n        traders[_referral].referralRewardsTotal += _amount;\\n    }\\n\\n    // Manage rewards\\n    function distributeLpRewards(uint _amount) external onlyTrading {\\n        pool.increaseAccTokensPerLp(_amount);\\n    }\\n\\n    function increaseNftRewards(\\n        uint _nftId,\\n        uint _amount\\n    ) external onlyTrading {\\n        nftLastSuccess[_nftId] = block.number;\\n        nftRewards += _amount;\\n    }\\n\\n    // Unlock next leverage\\n    function setLeverageUnlocked(\\n        address _trader,\\n        uint _newLeverage\\n    ) external onlyTrading {\\n        traders[_trader].leverageUnlocked = _newLeverage;\\n    }\\n\\n    // Manage dev & gov fees\\n    function handleDevGovFees(\\n        uint _pairIndex,\\n        uint _leveragedPositionSize,\\n        bool _WETH,\\n        bool _fullFee\\n    ) external onlyTrading returns (uint fee) {\\n        fee =\\n            (_leveragedPositionSize * priceAggregator.openFeeP(_pairIndex)) /\\n            PRECISION /\\n            100;\\n        if (!_fullFee) {\\n            fee /= 2;\\n        }\\n\\n        if (_WETH) {\\n            govFeesWETH += fee;\\n            devFeesWETH += fee;\\n        } else {\\n            govFeesToken += fee;\\n            devFeesToken += fee;\\n        }\\n\\n        fee *= 2;\\n    }\\n\\n    function claimFees() external onlyGov {\\n        token.mint(dev, devFeesToken);\\n        token.mint(gov, govFeesToken);\\n\\n        tokensMinted += devFeesToken + govFeesToken;\\n\\n        WETH.transfer(gov, govFeesWETH);\\n        WETH.transfer(dev, devFeesWETH);\\n\\n        devFeesToken = 0;\\n        govFeesToken = 0;\\n        devFeesWETH = 0;\\n        govFeesWETH = 0;\\n    }\\n\\n    // Manage tokens\\n    function handleTokens(\\n        address _a,\\n        uint _amount,\\n        bool _mint\\n    ) external onlyTrading {\\n        if (_mint) {\\n            token.mint(_a, _amount);\\n            tokensMinted += _amount;\\n        } else {\\n            token.burn(_a, _amount);\\n            tokensBurned += _amount;\\n        }\\n    }\\n\\n    function transferWETH(\\n        address _from,\\n        address _to,\\n        uint _amount\\n    ) external onlyTrading {\\n        if (_from == address(this)) {\\n            WETH.transfer(_to, _amount);\\n        } else {\\n            WETH.transferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    function mintWETH(address _to, uint _amount) external onlyTrading {\\n        WETH.mint(_to, _amount);\\n    }\\n\\n    function transferLinkToAggregator(\\n        address _from,\\n        uint _pairIndex,\\n        uint _leveragedPosWETH\\n    ) external onlyTrading {\\n        linkErc677.transferFrom(\\n            _from,\\n            address(priceAggregator),\\n            priceAggregator.linkFee(_pairIndex, _leveragedPosWETH)\\n        );\\n    }\\n\\n    // View utils functions\\n    function firstEmptyTradeIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (openTrades[trader][pairIndex][i].leverage == 0) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function firstEmptyOpenLimitIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (!hasOpenLimitOrder(trader, pairIndex, i)) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasOpenLimitOrder(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) public view returns (bool) {\\n        if (openLimitOrders.length == 0) {\\n            return false;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[trader][pairIndex][index]\\n        ];\\n        return\\n            o.trader == trader && o.pairIndex == pairIndex && o.index == index;\\n    }\\n\\n    // Additional getters\\n    function getReferral(address _trader) external view returns (address) {\\n        return traders[_trader].referral;\\n    }\\n\\n    function getLeverageUnlocked(address _trader) external view returns (uint) {\\n        return traders[_trader].leverageUnlocked;\\n    }\\n\\n    function pairTradersArray(\\n        uint _pairIndex\\n    ) external view returns (address[] memory) {\\n        return pairTraders[_pairIndex];\\n    }\\n\\n    function getPendingOrderIds(\\n        address _trader\\n    ) external view returns (uint[] memory) {\\n        return pendingOrderIds[_trader];\\n    }\\n\\n    function pendingOrderIdsCount(\\n        address _trader\\n    ) external view returns (uint) {\\n        return pendingOrderIds[_trader].length;\\n    }\\n\\n    function getOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external view returns (OpenLimitOrder memory) {\\n        require(hasOpenLimitOrder(_trader, _pairIndex, _index));\\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]];\\n    }\\n\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (OpenLimitOrder[] memory)\\n    {\\n        return openLimitOrders;\\n    }\\n\\n    function getSupportedTokens() external view returns (address[] memory) {\\n        return supportedTokens;\\n    }\\n\\n    function getSpreadReductionsArray() external view returns (uint[5] memory) {\\n        return spreadReductionsP;\\n    }\\n\\n    function getGov() external view returns (address _gov) {\\n        return gov;\\n    }\\n\\n    function setOracle(address _oracle) external {\\n        oracle = IOracle(_oracle);\\n    }\\n\\n    function getOpenTrades(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (Trade memory) {\\n        return openTrades[trader][pairIndex][index];\\n    }\\n\\n    function getOpenTradesInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (TradeInfo memory) {\\n        return openTradesInfo[trader][pairIndex][index];\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) external view returns (PendingMarketOrder memory) {\\n        return reqID_pendingMarketOrder[orderId];\\n    }\\n\\n    function getPendingNftOrder(\\n        uint orderId\\n    ) external view returns (PendingNftOrder memory) {\\n        return reqID_pendingNftOrder[orderId];\\n    }\\n\\n    function setPairs(uint256 _pairs) external {\\n        pairs = _pairs;\\n    }\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traderaddreses,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs\\n        )\\n    {\\n        uint256 index;\\n\\n        for (uint256 i; i < pairs; i++) {\\n            address[] memory traders = pairTraders[i];\\n            for (uint j; j < traders.length; j++) {\\n                uint256 numOfTrades = openTradesCount[traders[j]][i];\\n                uint k;\\n                while (numOfTrades != 0) {\\n                    console.log(traders[j]);\\n                    Trade memory t = openTrades[traders[j]][i][k];\\n                    console.log(\\\"here\\\");\\n                    (bool liquidated, ) = trading.isTradeLiquidatablePure(t);\\n                    if (liquidated) {\\n                        traderaddreses[index] = t.trader;\\n                        _orderTypes[index] = 2;\\n                        pairIndexs[index] = t.pairIndex;\\n                        indexs[index] = t.index;\\n                        index++;\\n                    }\\n                    (bool parLiquidated, ) = trading.isTradeLiquidatablePure(t);\\n                    if (parLiquidated && !liquidated) {\\n                        traderaddreses[index] = t.trader;\\n                        _orderTypes[index] = 4;\\n                        pairIndexs[index] = t.pairIndex;\\n                        indexs[index] = t.index;\\n                        index++;\\n                    }\\n                    if (index == 99) break;\\n                    numOfTrades--;\\n                    k++;\\n                }\\n                if (index == 99) break;\\n            }\\n            if (index == 99) break;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd717807136903fd190564e0c78f608dca9b6624797163ea801ff824bd8c25cdf\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {StorageInterface} from \\\"./StorageInterface.sol\\\";\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n\\n    function isTradeParLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function isTradeLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function executeNftOrders(\\n        uint[100] memory _orderTypes,\\n        address[100] memory traders,\\n        uint[100] memory pairIndexs,\\n        uint[100] memory index\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc2b4bc1c485b738ee9e67e56724b7073f3665a718cc3a2b168681381eede7e8e\",\"license\":\"MIT\"},\"contracts/interfaces/PoolInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\",\"keccak256\":\"0xf8dccfa1b7714aea72c882ba90068cbb38351cfbfb5c0a65a03b47a5247548b7\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    event OpenningInterestUpated(\\n        uint256 indexed pairIndex,\\n        uint256 indexed openingInterestShort,\\n        uint256 indexed openingInterestLong\\n    );\\n\\n    event TradeOpen(Trade indexed t);\\n\\n    event TradeClose(Trade indexed t);\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traders,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs\\n        );\\n}\\n\",\"keccak256\":\"0x7fd824388d6db0a0b123aee340965916a7e5b7f2c1dec6c7689344b8c3654813\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x600680546001600160a01b031916737075cab6bcca06613e2d071bd918d1a0241379e217905561012060405273f9a4c522e327935bd1f5a338c121e14e4cc1f89860809081527377cd42b925e1a82f41d852d6be727cfc88fddbbc60a052733378ad81d09de23725ee9b9270635c97ed60192160c0527302e2c5825c1a3b69c0417706dbe1327c2af3e6c260e052732d266a94469d05c9e06d52a4d0d9c23b157767c261010052620000b690600790600562000190565b506003600e556005600f818155601082905561038460115560506012556032601381905560149081556040805160a0810182529283526020830191909152601990820152601e606082015260236080820152620001179160159190620001ed565b5060026023553480156200012a57600080fd5b506040516200606b3803806200606b8339810160408190526200014d9162000257565b600080546001600160a01b039485166001600160a01b031991821617909155601a805493851693821693909317909255601b8054919093169116179055620002a1565b8260058101928215620001db579160200282015b82811115620001db57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190620001a4565b50620001e992915062000223565b5090565b8260058101928215620001db579160200282015b82811115620001db578251829060ff1690559160200191906001019062000201565b5b80821115620001e9576000815560010162000224565b80516001600160a01b03811681146200025257600080fd5b919050565b6000806000606084860312156200026d57600080fd5b62000278846200023a565b925062000288602085016200023a565b915062000298604085016200023a565b90509250925092565b615dba80620002b16000396000f3fe608060405234801561001057600080fd5b50600436106106005760003560e01c80638c8ff1d51161031d578063d294f093116101a9578063ecf56a1f116100fa578063f823e2ae116100a8578063f823e2ae1461126b578063f8d24b481461127e578063fbfa77cf14611287578063fc0c546a1461129a578063fdb59413146112ad578063fe0fc8d6146112b6578063fece4eac146112c9578063ffb0a4a0146112e457600080fd5b8063ecf56a1f14611178578063eda00d541461118b578063ee51f636146111bc578063ee92a4ff1461121d578063f013d27814611226578063f65d9dbe14611239578063f7b3c6fd1461124257600080fd5b8063dcdf339a11610157578063dcdf339a146110fd578063e212991a14611110578063e3cbe3a714611123578063e3f04eba14611136578063e765540314611149578063e7873b581461115c578063ec44acf21461116557600080fd5b8063d294f0931461107a578063d3b5fe7014611082578063d3c7c2c714611095578063d477f05f1461109d578063d4bda908146110b0578063d5391393146110c3578063dc2123ff146110ea57600080fd5b8063aaf5eb681161026e578063bcc9f1d31161021c578063bcc9f1d314610fec578063c122fea614610fff578063c311ab3114611008578063c62556261461101b578063c76faf781461102e578063cab9458014611041578063cfad57a214611054578063cfbacc141461106757600080fd5b8063aaf5eb6814610e8a578063ad5c464814610e96578063b4b0f56714610ea9578063b66e6b0514610ebc578063b767608a14610f8e578063b7682d5414610fa1578063b8878a2c14610fcc57600080fd5b80639c8912f1116102cb5780639c8912f114610d215780639d1a107314610d4c578063a2ab2dee14610d5f578063a354418114610d70578063a3a80ffe14610d83578063a553906c14610e57578063aa3b7d7714610e6a57600080fd5b80638c8ff1d514610b8257806390d112b914610c0857806391cca3db14610c1b57806392a88fa214610c2e578063959509e414610c8957806397e7995a14610c9257806399794d3514610cbd57600080fd5b806352e5398f1161049c5780637395d79e116103ed5780637fdb96f31161039b5780637fdb96f314610afc5780638049fde714610b0f578063817fa1a414610b18578063878679e614610b2b5780638a0bd70214610b3e5780638a238ae514610b535780638bbb644c14610b665780638bf7f5f914610b6f57600080fd5b80637395d79e14610a5757806377a9fdcf14610a6a578063796d82d914610a7d5780637ad3def214610a865780637adbf97314610a995780637dc0d1d014610ac95780637f0584ed14610adc57600080fd5b80635fbfe8cc1161044a5780635fbfe8cc146109995780636690a806146109b95780636817031b146109cc57806368ca199d146109df5780636d69fcaf14610a085780636d81d98114610a1b5780636de9f32b14610a4e57600080fd5b806352e5398f1461090c5780635378143e1461092c57806356a6796f1461093f5780635a912551146109545780635ad9f9931461095d5780635b621e32146109665780635c76ac9e1461097957600080fd5b8063265aa621116105565780633b0f0f2f116105045780633b0f0f2f146108535780633dae10a01461088257806343b8fab5146108955780634415b369146108a85780634437152a146108d357806344d44f5a146108e65780635070e837146108f957600080fd5b8063265aa6211461075f57806328b1f88714610772578063292c1617146107855780632a0a1cb0146107985780632d1f941a146107b85780633078fff5146107c157806332149592146107d457600080fd5b8063145ed21c116105b3578063145ed21c146106a757806316f0115b146106ba5780631c8636b4146106cd578063201d8bdb1461070657806321f7a30b14610719578063255566e41461072c57806325615d271461074c57600080fd5b8062b127831461060557806306aef7de1461062e578063099fa934146106435780630a769d71146106565780630eee3e4a1461066e57806312d43a511461068157806313b36ff614610694575b600080fd5b600554610618906001600160a01b031681565b6040516106259190614f28565b60405180910390f35b61064161063c366004614fd8565b6112ed565b005b61064161065136600461505f565b611360565b61065e6113c8565b604051610625949392919061509b565b61064161067c3660046150fa565b611862565b601a54610618906001600160a01b031681565b6106416106a236600461505f565b6118f6565b6106416106b536600461512c565b611961565b600354610618906001600160a01b031681565b6106f86106db366004615149565b602860209081526000928352604080842090915290825290205481565b604051908152602001610625565b61064161071436600461505f565b6119f1565b610641610727366004615149565b611a75565b61073f61073a36600461505f565b611ad8565b60405161062591906151ad565b61064161075a36600461505f565b602355565b61061861076d36600461505f565b611ba3565b610641610780366004615149565b611bc3565b6106f8610793366004615149565b611c0e565b6107ab6107a63660046151ff565b611c72565b60405161062591906152a8565b6106f8601d5481565b600254610618906001600160a01b031681565b6107e76107e236600461505f565b611d24565b604080516001600160a01b03909e168e5260208e019c909c529a8c019990995260608b019790975260808a019590955292151560a089015260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a001610625565b61061861086136600461512c565b6001600160a01b039081166000908152602560205260409020600101541690565b6106f861089036600461505f565b611dab565b6106416108a336600461505f565b611dc2565b6106f86108b6366004615149565b603260209081526000928352604080842090915290825290205481565b6106416108e136600461512c565b611e3a565b6106f86108f4366004615149565b611ebf565b61064161090736600461512c565b611ef6565b6106f861091a36600461505f565b60346020526000908152604090205481565b61064161093a3660046152d6565b611f86565b6109476120bd565b6040516106259190615318565b6106f860125481565b6106f860225481565b61064161097436600461512c565b6120f9565b61098c61098736600461512c565b612173565b6040516106259190615349565b6109ac6109a736600461505f565b6121df565b604051610625919061538d565b6106416109c73660046151ff565b61224a565b6106416109da36600461512c565b61238a565b6106f86109ed36600461512c565b6001600160a01b031660009081526025602052604090205490565b610641610a1636600461512c565b612410565b610a3e610a2936600461512c565b60366020526000908152604090205460ff1681565b6040519015158152602001610625565b6106f860215481565b610641610a653660046150fa565b6124b5565b6106f8610a783660046150fa565b612507565b6106f8600f5481565b610641610a9436600461512c565b61252c565b610641610aa736600461512c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154610618906001600160a01b031681565b610aef610aea36600461505f565b6126d4565b60405161062591906153ce565b610641610b0a36600461541e565b6127ad565b6106f860105481565b610641610b26366004615459565b612849565b600d54610618906001600160a01b031681565b610b46612914565b604051610625919061557e565b610641610b613660046155c1565b612a03565b6106f860135481565b610641610b7d36600461505f565b612ab5565b610bd9610b903660046151ff565b6027602090815260009384526040808520825292845282842090528252902080546001820154600283015460038401546004850154600590950154939492939192909160ff1686565b6040805196875260208701959095529385019290925260608401526080830152151560a082015260c001610625565b610641610c163660046151ff565b612b27565b601b54610618906001600160a01b031681565b610c66610c3c36600461512c565b60256020526000908152604090208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610625565b6106f8601f5481565b6106f8610ca0366004615149565b602a60209081526000928352604080842090915290825290205481565b610d0f610ccb36600461505f565b602d602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695939490921692909160ff1686565b60405161062596959493929190615602565b6106f8610d2f366004615149565b602f60209081526000928352604080842090915290825290205481565b610641610d5a366004615647565b612e80565b601a546001600160a01b0316610618565b610641610d7e36600461541e565b612f42565b610e01610d913660046151ff565b602660209081526000938452604080852082529284528284209052825290208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901546001600160a01b03909816989697959694959394929360ff9092169290918a565b604080516001600160a01b03909b168b5260208b0199909952978901969096526060880194909452608087019290925260a0860152151560c085015260e084015261010083015261012082015261014001610625565b610641610e6536600461512c565b612fde565b6106f8610e7836600461505f565b60356020526000908152604090205481565b6106f86402540be40081565b600054610618906001600160a01b031681565b610641610eb73660046151ff565b613066565b610f7c610eca36600461505f565b602c6020908152600091825260409182902082516101408101845281546001600160a01b031681526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460ff16151560c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154600b830154600c840154600d850154600e90950154939492939192909186565b60405161062596959493929190615680565b610641610f9c3660046156bc565b613372565b6106f8610faf366004615149565b603060209081526000928352604080842090915290825290205481565b610fdf610fda3660046151ff565b6134a1565b60405161062591906156d5565b6106f8610ffa366004615149565b613624565b6106f860115481565b610641611016366004615777565b613655565b61061861102936600461505f565b613904565b61064161103c366004615807565b61392e565b61064161104f366004615899565b613b11565b61064161106236600461512c565b613e15565b6106f86110753660046158be565b613e99565b610641613ff3565b610641611090366004615908565b61420f565b6109ac614525565b6106416110ab36600461512c565b614586565b6106416110be3660046159bb565b61460a565b6106f87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6106416110f836600461505f565b6146a7565b610a3e61110b3660046151ff565b614718565b61064161111e36600461505f565b6147b4565b6106186111313660046150fa565b61481a565b61064161114436600461505f565b614852565b610641611157366004615149565b6148db565b6106f860205481565b600454610618906001600160a01b031681565b61064161118636600461505f565b614972565b6106f86111993660046151ff565b602960209081526000938452604080852082529284528284209052825290205481565b6111cf6111ca3660046151ff565b6149e9565b6040516106259190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b6106f8601c5481565b6106416112343660046159d8565b614a9d565b6106f8600e5481565b6106f861125036600461512c565b6001600160a01b03166000908152602e602052604090205490565b61064161127936600461512c565b614b47565b6106f860145481565b600c54610618906001600160a01b031681565b600654610618906001600160a01b031681565b6106f8601e5481565b6106416112c436600461512c565b614bc4565b61061873b0897686c545045afc77cf20ec7a532e3120e0f181565b6106f860235481565b601a546001600160a01b0316331461130457600080fd5b80516001600160a01b031661131857600080fd5b6113256007826005614db6565b507f89a3bfeda71ede5f8735aa09127c97cd56aa3803356c52f7c30caf418238b464816040516113559190615a10565b60405180910390a150565b601a546001600160a01b0316331461137757600080fd5b603281101561138557600080fd5b6012819055604080518181526006918101919091526506d6178536c560d41b606082015260208101829052600080516020615d4583398151915290608001611355565b6113d0614e0e565b6113d8614e0e565b6113e0614e0e565b6113e8614e0e565b6000805b60235481101561185a5760008181526031602090815260408083208054825181850281018501909352808352919290919083018282801561145657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611438575b5050505050905060005b815181101561183857600060286000848481518110611481576114816159fa565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600085815260200190815260200160002054905060005b8115611814576114e88484815181106114db576114db6159fa565b6020026020010151614c4e565b600060266000868681518110611500576115006159fa565b6020908102919091018101516001600160a01b03908116835282820193909352604091820160009081208a82528252828120868252825282902082516101408101845281549094168452600181015484830152600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460ff16151560c0860152600782015460e0860152600882015461010086015260099091015461012085015282518084019093528252636865726560e01b908201529091506115cd90614c91565b60048054604051631ad6f65d60e21b81526000926001600160a01b0390921691636b5bd974916115ff918691016152a8565b6040805180830381865afa15801561161b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163f9190615a41565b50905080156116d25781518b896064811061165c5761165c6159fa565b6001600160a01b03909216602092909202015260028c8960648110611683576116836159fa565b60200201818152505081602001518a89606481106116a3576116a36159fa565b602002015260408201518989606481106116bf576116bf6159fa565b6020020152876116ce81615a86565b9850505b60048054604051631ad6f65d60e21b81526000926001600160a01b0390921691636b5bd97491611704918791016152a8565b6040805180830381865afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190615a41565b509050808015611752575081155b156117e15782518c8a6064811061176b5761176b6159fa565b6001600160a01b03909216602092909202015260048d8a60648110611792576117926159fa565b60200201818152505082602001518b8a606481106117b2576117b26159fa565b602002015260408301518a8a606481106117ce576117ce6159fa565b6020020152886117dd81615a86565b9950505b886063036117f157505050611814565b846117fb81615a9f565b955050838061180990615a86565b9450505050506114c0565b85606303611823575050611838565b5050808061183090615a86565b915050611460565b5082606303611847575061185a565b508061185281615a86565b9150506113ec565b505090919293565b601a546001600160a01b0316331461187957600080fd5b6000828152603360205260409020819060020155604080516060808252601390820152720dac2f09ee0cadc92dce8cae4cae6e8ae8aa89606b1b6080820152602081018490529081018290527f957cd67ea49f3e1ee953cdd23a1ba1f11d973e842411220d5c24ef0e24e1c9569060a00160405180910390a15050565b601a546001600160a01b0316331461190d57600080fd5b61012c81101561191c57600080fd5b6011819055604080518181526008918101919091526706d61784761696e560c41b606082015260208101829052600080516020615d4583398151915290608001611355565b601a546001600160a01b0316331461197857600080fd5b6001600160a01b03811661198b57600080fd5b600d80546001600160a01b0319166001600160a01b03831690811790915560408051818152600f918101919091526e3a37b5b2b72ba2aa242937baba32b960891b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff16611a295760405162461bcd60e51b8152600401611a2090615ab6565b60405180910390fd5b6000908152602d6020526040812080546001600160a01b03199081168255600182018390556002820180549091169055600381018290556004810191909155600501805460ff19169055565b3360009081526036602052604090205460ff16611aa45760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03821660009081526025602052604081206002018054839290611acf908490615ad9565b90915550505050565b611b0e6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6000828152602d6020908152604091829020825160c08101845281546001600160a01b039081168252600183015493820193909352600282015490921692820192909252600382015460608201526004808301546080830152600583015491929160a084019160ff90911690811115611b8957611b89615175565b6004811115611b9a57611b9a615175565b90525092915050565b60078160058110611bb357600080fd5b01546001600160a01b0316905081565b3360009081526036602052604090205460ff16611bf25760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03909116600090815260256020526040902055565b6000805b600e54811015611c6b576001600160a01b038416600090815260266020908152604080832086845282528083208484529091528120600701549003611c5957809150611c6b565b80611c6381615a86565b915050611c12565b5092915050565b611c7a614e2d565b506001600160a01b0380841660009081526026602090815260408083208684528252808320858452825291829020825161014081018452815490941684526001810154918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460ff16151560c0830152600781015460e08301526008810154610100830152600901546101208201525b9392505050565b602b8181548110611d3457600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01546001600160a01b03909b169c50989a97999698959760ff90951696939592949193909291908d565b60158160058110611dbb57600080fd5b0154905081565b601a546001600160a01b03163314611dd957600080fd5b60008111611de657600080fd5b60138190556040805181815260179181019190915276191959985d5b1d13195d995c9859d9555b9b1bd8dad959604a1b606082015260208101829052600080516020615d4583398151915290608001611355565b601a546001600160a01b03163314611e5157600080fd5b6001600160a01b038116611e6457600080fd5b600380546001600160a01b0319166001600160a01b03831690811790915560408051818152600491810191909152631c1bdbdb60e21b60608201526020810191909152600080516020615d6583398151915290608001611355565b6000805b600e54811015611c6b57611ed8848483614718565b611ee457809150611c6b565b80611eee81615a86565b915050611ec3565b601a546001600160a01b03163314611f0d57600080fd5b6001600160a01b038116611f2057600080fd5b600280546001600160a01b0319166001600160a01b03831690811790915560408051818152600f918101919091526e383934b1b2a0b3b3b932b3b0ba37b960891b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff16611fb55760405162461bcd60e51b8152600401611a2090615ab6565b801561203c576006546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611fed9086908690600401615af1565b600060405180830381600087803b15801561200757600080fd5b505af115801561201b573d6000803e3d6000fd5b5050505081602160008282546120319190615ad9565b909155506120b89050565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061206e9086908690600401615af1565b600060405180830381600087803b15801561208857600080fd5b505af115801561209c573d6000803e3d6000fd5b5050505081602060008282546120b29190615ad9565b90915550505b505050565b6120c5614e8b565b6040805160a08101918290529060159060059082845b8154815260200190600101908083116120db575b5050505050905090565b601a546001600160a01b0316331461211057600080fd5b6001600160a01b03811661212357600080fd5b6001600160a01b03811660009081526036602052604090819020805460ff19169055517ff9cf924d7d98e6e0a27ec523cd7214b0bbdfaba197018b33b41a702f5238190e90611355908390614f28565b6001600160a01b0381166000908152602e60209081526040918290208054835181840281018401909452808452606093928301828280156121d357602002820191906000526020600020905b8154815260200190600101908083116121bf575b50505050509050919050565b6000818152603160209081526040918290208054835181840281018401909452808452606093928301828280156121d357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122215750505050509050919050565b3360009081526036602052604090205460ff166122795760405162461bcd60e51b8152600401611a2090615ab6565b60025460405163b9e0336f60e01b8152600481018490526024810183905273b0897686c545045afc77cf20ec7a532e3120e0f1916323b872dd9186916001600160a01b031690819063b9e0336f90604401602060405180830381865afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b9190615b0a565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064015b6020604051808303816000875af1158015612360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123849190615b23565b50505050565b601a546001600160a01b031633146123a157600080fd5b6001600160a01b0381166123b457600080fd5b600c80546001600160a01b0319166001600160a01b03831690811790915560408051818152600591810191909152641d985d5b1d60da1b60608201526020810191909152600080516020615d6583398151915290608001611355565b601a546001600160a01b0316331461242757600080fd5b6001600160a01b03811661243a57600080fd5b602480546001810182556000919091527f7cd332d19b93bcabe3cce7ca0c18a052f57e5fd03b4758a09f30f5ddc4b22ec40180546001600160a01b0319166001600160a01b0383161790556040517fd1be2e90bd3d24839d9dd94ad871068e1f9688b02fa43f2a62c9975dfa9de2d790611355908390614f28565b3360009081526036602052604090205460ff166124e45760405162461bcd60e51b8152600401611a2090615ab6565b600082815260356020526040812043905560228054839290611acf908490615ad9565b6033602052816000526040600020816003811061252357600080fd5b01549150829050565b601a546001600160a01b0316331461254357600080fd5b60048054604080516358c3de9360e11b815290516001600160a01b039092169263b187bd269282820192602092908290030181865afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190615b23565b801561262c5750600560009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015612608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262c9190615b23565b6126655760405162461bcd60e51b815260206004820152600a6024820152691393d517d4105554d15160b21b6044820152606401611a20565b6001600160a01b03811661267857600080fd5b600680546001600160a01b0319166001600160a01b03831690811790915560408051818152600591810191909152643a37b5b2b760d91b60608201526020810191909152600080516020615d6583398151915290608001611355565b6126dc614ea9565b506000908152602c602090815260409182902082516102008101845281546001600160a01b031660c08201908152600183015460e08301526002830154610100830152600383015461012083015260048301546101408301526005830154610160830152600683015460ff16151561018083015260078301546101a083015260088301546101c083015260098301546101e08301528152600a82015492810192909252600b81015492820192909252600c8201546060820152600d8201546080820152600e9091015460a082015290565b3360009081526036602052604090205460ff166127dc5760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03841660008181526026602090815260408083208784528252808320868452825280832093835260278252808320878452825280832086845290915281206007830154909103612834575050612384565b60089091018290554360039091015550505050565b3360009081526036602052604090205460ff166128785760405162461bcd60e51b8152600401611a2090615ab6565b6000818152602d6020908152604091829020845181546001600160a01b03199081166001600160a01b03928316178355928601516001808401919091559386015160028301805490941691161790915560608401516003820155608084015160048083019190915560a085015160058301805487959293919260ff1990911691849081111561290957612909615175565b021790555050505050565b6060602b805480602002602001604051908101604052809291908181526020016000905b828210156129fa576000848152602090819020604080516101a081018252600d860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a810154610140840152600b810154610160840152600c01546101808301529083529092019101612938565b50505050905090565b3360009081526036602052604090205460ff16612a325760405162461bcd60e51b8152600401611a2090615ab6565b306001600160a01b03841603612a745760005460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906123419085908590600401615af1565b6000546040516323b872dd60e01b81526001600160a01b038581166004830152848116602483015260448201849052909116906323b872dd90606401612341565b601a546001600160a01b03163314612acc57600080fd5b60008111612ad957600080fd5b600f81905560408051818152601191810191909152706d6178547261646573506572426c6f636b60781b606082015260208101829052600080516020615d4583398151915290608001611355565b3360009081526036602052604090205460ff16612b565760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03831660008181526026602090815260408083208684528252808320858452825280832093835260278252808320868452825280832085845290915281206007830154909103612bae575050505050565b60028101546006830154612bc991869160009060ff16614cd4565b6001600160a01b0385166000908152602860209081526040808320878452909152902054600103612d36576001600160a01b0385166000908152603260209081526040808320878452825280832054603190925290912080548190612c3090600190615b40565b81548110612c4057612c406159fa565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110612c7057612c706159fa565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160326000838581548110612cb557612cb56159fa565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182208b8352815282822094909455918a16825260328352808220898352909252908120558054819080612d1157612d11615b57565b600082815260209020810160001990810180546001600160a01b031916905501905550505b6001600160a01b03851660008181526026602090815260408083208884528252808320878452825280832080546001600160a01b03191681556001808201859055600280830186905560038084018790556004808501889055600580860189905560068601805460ff19908116909155600787018a9055600887018a90556009909601899055898952602788528689208e8a5288528689208d8a52885286892089815594850189905592840188905590830187905582018690550180549091169055928252602881528282208783529052908120805491612e1683615a9f565b9091555050436000908152603460205260408120805491612e3683615a86565b919050555081604051612e499190615b6d565b604051908190038120907f27da8e9ce15b7acef76d7ad1c9eeaa7a11d169ef774cc7a05d2aa1778c286e6e90600090a25050505050565b3360009081526036602052604090205460ff16612eaf5760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03808316600090815260256020526040902090821615801590612ee4575060018101546001600160a01b0316155b8015612f025750826001600160a01b0316826001600160a01b031614155b612f195760018101546001600160a01b0316612f1b565b815b60019190910180546001600160a01b0319166001600160a01b039092169190911790555050565b3360009081526036602052604090205460ff16612f715760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03841660008181526026602090815260408083208784528252808320868452825280832093835260278252808320878452825280832086845290915281206007830154909103612fc9575050612384565b60099091018290554360049091015550505050565b601a546001600160a01b03163314612ff557600080fd5b6001600160a01b03811661300857600080fd5b600480546001600160a01b0319166001600160a01b038316908117909155604080518181526007918101919091526674726164696e6760c81b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff166130955760405162461bcd60e51b8152600401611a2090615ab6565b6130a0838383614718565b156120b8576001600160a01b03831660009081526029602090815260408083208584528252808320848452909152902054602b80546130e190600190615b40565b815481106130f1576130f16159fa565b90600052602060002090600d0201602b8281548110613112576131126159fa565b6000918252602082208354600d9092020180546001600160a01b0319166001600160a01b0390921691909117815560018084015490820155600280840154908201556003808401549082015560048084015490820155600580840154908201805460ff909216151560ff1990921691909117905560068084015490820155600780840154908201556008808401549082015560098084015490820155600a8084015490820155600b8084015490820155600c92830154920191909155602b805483926029929091849081106131e9576131e96159fa565b60009182526020808320600d909202909101546001600160a01b031683528201929092526040018120602b805491929185908110613229576132296159fa565b90600052602060002090600d02016001015481526020019081526020016000206000602b848154811061325e5761325e6159fa565b600091825260208083206002600d90930201919091015483528281019390935260409182018120939093556001600160a01b0387168352602982528083208684528252808320858452909152812055602b8054806132be576132be615b57565b60008281526020808220600d6000199094019384020180546001600160a01b03191681556001810183905560028101839055600381018390556004810183905560058101805460ff1916905560068101839055600781018390556008810183905560098101839055600a8101839055600b8101839055600c01829055919092556001600160a01b0386168252602a81526040808320868452909152812080549161336783615a9f565b919050555050505050565b3360009081526036602052604090205460ff166133a15760405162461bcd60e51b8152600401611a2090615ab6565b6133c06133b1602083018361512c565b82602001358360400135614718565b1561349e576000602b6029826133d9602086018661512c565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092529020548154811061341e5761341e6159fa565b90600052602060002090600d02019050816060013581600301819055508160a001602081019061344e9190615beb565b60058201805460ff191691151591909117905560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a82015543600b909101555b50565b613517604051806101a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b613522848484614718565b61352b57600080fd5b6001600160a01b03841660009081526029602090815260408083208684528252808320858452909152902054602b8054909190811061356c5761356c6159fa565b6000918252602091829020604080516101a081018252600d90930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c9091015461018082015290509392505050565b602e602052816000526040600020818154811061364057600080fd5b90600052602060002001600091509150505481565b3360009081526036602052604090205460ff166136845760405162461bcd60e51b8152600401611a2090615ab6565b61369682600001518360200151611c0e565b604083810191825283516001600160a01b0390811660009081526026602090815283822081880180518452908252848320865184528252848320885181546001600160a01b031916951694851781558151600182015595516002870155606088015160038701556080880151600487015560a0880151600587015560c088015160068701805460ff191691151591909117905560e0880151600787015561010088015160088701556101208801516009909601959095559181526028825282812093518152929052812080549161376c83615a86565b909155505043600090815260346020526040812080549161378c83615a86565b909155505081516001600160a01b0316600090815260286020908152604080832082860151845290915290205460010361382c57602082810180516000908152603180845260408083205487516001600160a01b039081168552603287528285208651865287528285209190915593518352908452812085518154600181018355918352939091200180546001600160a01b031916929091169190911790555b600060a0820181815283516001600160a01b031682526027602090815260408084208287018051865290835281852082880151865283529381902085518155918501516001808401919091559085015160028301819055606086015160038401556080860151600484015592516005909201805460ff191692151592909217909155915160c08501516138c29391929190614cd4565b816040516138d09190615c08565b604051908190038120907f58afb50c04302a400c4c6a6987d5992be730e9ea9e499ce4f610996a40f9fe1990600090a25050565b6024818154811061391457600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526036602052604090205460ff1661395d5760405162461bcd60e51b8152600401611a2090615ab6565b8251516001600160a01b039081166000908152602e6020908152604080832080546001808201835591855283852001879055868452602c8352928190208751805182546001600160a01b031916961695909517815591840151928201929092558282015160028201556060808401516003830155608080850151600484015560a080860151600585015560c086015160068501805460ff191691151591909117905560e08601516007850155610100860151600885015561012090950151600984015592870151600b830155860151600c82015590850151600d82015590840151600e82015543600a909101558015613a8f578251516001600160a01b03166000908152602f60209081526040808320865183015184529091528120805491613a8583615a86565b9190505550505050565b8251516001600160a01b03166000908152603060209081526040808320865183015184529091528120805491613ac483615a86565b90915550508251516001600160a01b03166000908152602760209081526040808320865183015184528252808320865182015184529091529020600501805460ff19166001179055505050565b3360009081526036602052604090205460ff16613b405760405162461bcd60e51b8152600401611a2090615ab6565b6000828152602c6020908152604080832081516102008101835281546001600160a01b031660c08201818152600184015460e08401526002840154610100840152600384015461012084015260048401546101408401526005840154610160840152600684015460ff16151561018084015260078401546101a084015260088401546101c084015260098401546101e08401528252600a83015482860152600b83015482850152600c8301546060830152600d8301546080830152600e9092015460a0820152908452602e909252822090915b8154811015613e0d5784828281548110613c2f57613c2f6159fa565b906000526020600020015403613dfb578315613c84578251516001600160a01b03166000908152602f60209081526040808320865183015184529091528120805491613c7a83615a9f565b9190505550613cff565b8251516001600160a01b03166000908152603060209081526040808320865183015184529091528120805491613cb983615a9f565b90915550508251516001600160a01b03166000908152602760209081526040808320865183015184528252808320865182015184529091529020600501805460ff191690555b81548290613d0f90600190615b40565b81548110613d1f57613d1f6159fa565b9060005260206000200154828281548110613d3c57613d3c6159fa565b906000526020600020018190555081805480613d5a57613d5a615b57565b600082815260208082208301600019908101839055909201909255868252602c90526040812080546001600160a01b0319168155600181018290556002810182905560038101829055600481018290556005810182905560068101805460ff19169055600781018290556008810182905560098101829055600a8101829055600b8101829055600c8101829055600d8101829055600e015550613e11915050565b80613e0581615a86565b915050613c13565b5050505b5050565b601a546001600160a01b03163314613e2c57600080fd5b6001600160a01b038116613e3f57600080fd5b601a80546001600160a01b0319166001600160a01b038316908117909155604080518181526003918101919091526233b7bb60e91b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604081205460ff16613ec85760405162461bcd60e51b8152600401611a2090615ab6565b600254604051630710f2ff60e51b8152600481018790526064916402540be400916001600160a01b039091169063e21e5fe090602401602060405180830381865afa158015613f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3f9190615b0a565b613f499087615c9b565b613f539190615cba565b613f5d9190615cba565b905081613f7257613f6f600282615cba565b90505b8215613fae5780601f6000828254613f8a9190615ad9565b9250508190555080601d6000828254613fa39190615ad9565b90915550613fdf9050565b80601e6000828254613fc09190615ad9565b9250508190555080601c6000828254613fd99190615ad9565b90915550505b613fea600282615c9b565b95945050505050565b601a546001600160a01b0316331461400a57600080fd5b600654601b54601c546040516340c10f1960e01b81526001600160a01b03938416936340c10f199361404193911691600401615af1565b600060405180830381600087803b15801561405b57600080fd5b505af115801561406f573d6000803e3d6000fd5b5050600654601a54601e546040516340c10f1960e01b81526001600160a01b0393841695506340c10f1994506140ab9390921691600401615af1565b600060405180830381600087803b1580156140c557600080fd5b505af11580156140d9573d6000803e3d6000fd5b50505050601e54601c546140ed9190615ad9565b602160008282546140fe9190615ad9565b9091555050600054601a54601f5460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb9361413a93911691600401615af1565b6020604051808303816000875af1158015614159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417d9190615b23565b50600054601b54601d5460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb936141b593911691600401615af1565b6020604051808303816000875af11580156141d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f89190615b23565b506000601c819055601e819055601d819055601f55565b3360009081526036602052604090205460ff1661423e5760405162461bcd60e51b8152600401611a2090615ab6565b61425081600001518260200151611ebf565b60408201908152436101608301908152602b805460018082018355600083905285517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e4f600d90930292830180546001600160a01b0319166001600160a01b0390921691909117905560208601517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5083015593517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5182015560608501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5282015560808501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5382015560a08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e548201805460ff191691151591909117905560c08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5582015560e08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e568201556101008501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e578201556101208501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e588201556101408501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5982015591517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5a8301556101808401517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5b90920191909155546144bf9190615b40565b81516001600160a01b0390811660009081526029602090815260408083208287018051855290835281842082880151855283528184209590955585519093168252602a81528282209351825292909252812080549161451d83615a86565b919050555050565b606060248054806020026020016040519081016040528092919081815260200182805480156120ef57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161455f575050505050905090565b601a546001600160a01b0316331461459d57600080fd5b6001600160a01b0381166145b057600080fd5b601b80546001600160a01b0319166001600160a01b03831690811790915560408051818152600391810191909152623232bb60e91b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff166146395760405162461bcd60e51b8152600401611a2090615ab6565b80516001600160a01b0316600090815260266020908152604080832082850151845282528083208185015184529091528120600781015490910361467b575050565b606082015160038201556080820151600482015560a0820151600582015560e082015160079091015550565b601a546001600160a01b031633146146be57600080fd5b600081116146cb57600080fd5b600e819055604080518181526010918101919091526f36b0bc2a3930b232b9a832b92830b4b960811b606082015260208101829052600080516020615d4583398151915290608001611355565b602b54600090810361472c57506000611d1d565b6001600160a01b03841660009081526029602090815260408083208684528252808320858452909152812054602b8054909190811061476d5761476d6159fa565b60009182526020909120600d9091020180549091506001600160a01b03868116911614801561479f5750838160010154145b8015613fea5750600201549091149392505050565b601a546001600160a01b031633146147cb57600080fd5b601481905560408051818152601291810191909152716e66745375636365737354696d656c6f636b60701b606082015260208101829052600080516020615d4583398151915290608001611355565b6031602052816000526040600020818154811061483657600080fd5b6000918252602090912001546001600160a01b03169150829050565b3360009081526036602052604090205460ff166148815760405162461bcd60e51b8152600401611a2090615ab6565b600354604051633104b73f60e21b8152600481018390526001600160a01b039091169063c412dcfc90602401600060405180830381600087803b1580156148c757600080fd5b505af1158015613e0d573d6000803e3d6000fd5b3360009081526036602052604090205460ff1661490a5760405162461bcd60e51b8152600401611a2090615ab6565b6000546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061493c9085908590600401615af1565b600060405180830381600087803b15801561495657600080fd5b505af115801561496a573d6000803e3d6000fd5b505050505050565b601a546001600160a01b0316331461498957600080fd5b6000811161499657600080fd5b601081905560408051818152601691810191909152756d617850656e64696e674d61726b65744f726465727360501b606082015260208101829052600080516020615d4583398151915290608001611355565b614a246040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03929092166000908152602760209081526040808320938352928152828220938252928352819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460ff16151560a082015290565b601a546001600160a01b03163314614ab457600080fd5b803515801590614ac8575080356020820135115b8015614adb575060208101356040820135115b8015614aee575060408101356060820135115b8015614b01575060608101356080820135115b614b0a57600080fd5b614b176015826005614ee5565b507fdaae5e047a75b6f38ad4e279cdefe910fc35d5a99a91b8303bd948c0a999372a816040516113559190615cdc565b601a546001600160a01b03163314614b5e57600080fd5b6001600160a01b038116614b7157600080fd5b6001600160a01b03811660009081526036602052604090819020805460ff19166001179055517fb692fa98cbec9bd705572b4c7e0927e3f7698e9fe526dcef6f40f3d4d4980ca390611355908390614f28565b601a546001600160a01b03163314614bdb57600080fd5b6001600160a01b038116614bee57600080fd5b600580546001600160a01b0319166001600160a01b038316908117909155604080518181526009918101919091526863616c6c6261636b7360b81b60608201526020810191909152600080516020615d6583398151915290608001611355565b61349e81604051602401614c629190614f28565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052614d91565b61349e81604051602401614ca59190615cef565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614d91565b600081614ce2576001614ce5565b60005b600086815260336020526040902060ff91909116915083614d245784818360038110614d1357614d136159fa565b0154614d1f9190615b40565b614d43565b84818360038110614d3757614d376159fa565b0154614d439190615ad9565b818360038110614d5557614d556159fa565b01558054600182015460405188907f6da9a00899a8a4900c75b0c762b64375242e6c0fa1e5bd9e5c5b663bdbdfe13c90600090a4505050505050565b61349e8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b8260058101928215614dfe579160200282015b82811115614dfe57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614dc9565b50614e0a929150614f13565b5090565b60405180610c8001604052806064906020820280368337509192915050565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060a001604052806005906020820280368337509192915050565b6040518060c00160405280614ebc614e2d565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b8260058101928215614dfe579160200282015b82811115614dfe578235825591602001919060010190614ef8565b5b80821115614e0a5760008155600101614f14565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614f7557614f75614f3c565b60405290565b604051610140810167ffffffffffffffff81118282101715614f7557614f75614f3c565b6040516101a0810167ffffffffffffffff81118282101715614f7557614f75614f3c565b6001600160a01b038116811461349e57600080fd5b600060a08284031215614fea57600080fd5b82601f830112614ff957600080fd5b60405160a0810181811067ffffffffffffffff8211171561501c5761501c614f3c565b6040528060a084018581111561503157600080fd5b845b8181101561505457803561504681614fc3565b835260209283019201615033565b509195945050505050565b60006020828403121561507157600080fd5b5035919050565b8060005b606481101561238457815184526020938401939091019060010161507c565b61320081016150aa8287615078565b610c8082018560005b60648110156150db5781516001600160a01b03168352602092830192909101906001016150b3565b5050506150ec611900830185615078565b613fea612580830184615078565b6000806040838503121561510d57600080fd5b50508035926020909101359150565b803561512781614fc3565b919050565b60006020828403121561513e57600080fd5b8135611d1d81614fc3565b6000806040838503121561515c57600080fd5b823561516781614fc3565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600581106151a957634e487b7160e01b600052602160045260246000fd5b9052565b600060c08201905060018060a01b038084511683526020840151602084015280604085015116604084015250606083015160608301526080830151608083015260a0830151611c6b60a084018261518b565b60008060006060848603121561521457600080fd5b833561521f81614fc3565b95602085013595506040909401359392505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015161528660c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b61014081016152b78284615234565b92915050565b801515811461349e57600080fd5b8035615127816152bd565b6000806000606084860312156152eb57600080fd5b83356152f681614fc3565b925060208401359150604084013561530d816152bd565b809150509250925092565b60a08101818360005b6005811015615340578151835260209283019290910190600101615321565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561538157835183529284019291840191600101615365565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156153815783516001600160a01b0316835292840192918401916001016153a9565b60006101e0820190506153e2828451615234565b60208301516101408301526040830151610160830152606083015161018083015260808301516101a083015260a0909201516101c09091015290565b6000806000806080858703121561543457600080fd5b843561543f81614fc3565b966020860135965060408601359560600135945092505050565b60008082840360e081121561546d57600080fd5b60c081121561547b57600080fd5b50615484614f52565b833561548f81614fc3565b81526020848101359082015260408401356154a981614fc3565b80604083015250606084013560608201526080840135608082015260a0840135600581106154d657600080fd5b60a08201529460c0939093013593505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015161553160a084018215159052565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015615381576155ad8385516154e9565b928401926101a0929092019160010161559a565b6000806000606084860312156155d657600080fd5b83356155e181614fc3565b925060208401356155f181614fc3565b929592945050506040919091013590565b6001600160a01b0387811682526020820187905285166040820152606081018490526080810183905260c0810161563c60a083018461518b565b979650505050505050565b6000806040838503121561565a57600080fd5b823561566581614fc3565b9150602083013561567581614fc3565b809150509250929050565b6101e0810161568f8289615234565b6101408201969096526101608101949094526101808401929092526101a08301526101c090910152919050565b60006101a082840312156156cf57600080fd5b50919050565b6101a081016152b782846154e9565b600061014082840312156156f757600080fd5b6156ff614f7b565b905061570a8261511c565b81526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015261574a60c083016152cb565b60c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60008082840361020081121561578c57600080fd5b61579685856156e4565b925060c061013f19820112156157ab57600080fd5b506157b4614f52565b6101408401358152610160840135602082015261018084013560408201526101a084013560608201526101c084013560808201526101e08401356157f7816152bd565b60a0820152919491935090915050565b600080600083850361022081121561581e57600080fd5b6101e08082121561582e57600080fd5b615836614f52565b915061584287876156e4565b82526101408601356020830152610160860135604083015261018086013560608301526101a086013560808301526101c086013560a0830152909350840135915061589061020085016152cb565b90509250925092565b600080604083850312156158ac57600080fd5b823591506020830135615675816152bd565b600080600080608085870312156158d457600080fd5b843593506020850135925060408501356158ed816152bd565b915060608501356158fd816152bd565b939692955090935050565b60006101a0828403121561591b57600080fd5b615923614f9f565b61592c8361511c565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015261596260a084016152cb565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120808401359082015261014080840135908201526101608084013590820152610180928301359281019290925250919050565b600061014082840312156159ce57600080fd5b611d1d83836156e4565b600060a082840312156159ea57600080fd5b8260a0830111156156cf57600080fd5b634e487b7160e01b600052603260045260246000fd5b60a08101818360005b60058110156153405781516001600160a01b0316835260209283019290910190600101615a19565b60008060408385031215615a5457600080fd5b8251615a5f816152bd565b6020840151909250615675816152bd565b634e487b7160e01b600052601160045260246000fd5b600060018201615a9857615a98615a70565b5060010190565b600081615aae57615aae615a70565b506000190190565b60208082526009908201526868657265206865726560b81b604082015260600190565b60008219821115615aec57615aec615a70565b500190565b6001600160a01b03929092168252602082015260400190565b600060208284031215615b1c57600080fd5b5051919050565b600060208284031215615b3557600080fd5b8151611d1d816152bd565b600082821015615b5257615b52615a70565b500390565b634e487b7160e01b600052603160045260246000fd5b81546001600160a01b0316815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460ff16151560c0820152600782015460e08201526008820154610100820152600982015461012082015261014081015b5061014001919050565b600060208284031215615bfd57600080fd5b8135611d1d816152bd565b81516001600160a01b03168152602080830151908201526040808301519082015260608083015190820152615be1615c8d615c7f615c72615c63615c56608087016080890151815260200190565b60a0880151815260200190565b60c08701511515815260200190565b60e0860151815260200190565b610100850151815260200190565b610120840151815260200190565b6000816000190483118215151615615cb557615cb5615a70565b500290565b600082615cd757634e487b7160e01b600052601260045260246000fd5b500490565b60a0818101908383376000815292915050565b600060208083528351808285015260005b81811015615d1c57858101830151858201604001528201615d00565b81811115615d2e576000604083870101525b50601f01601f191692909201604001939250505056fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab943e9d45a11aaae5d87503e3bc248665d9807856e5cf2bdb4a988bee44422781a2646970667358221220c1c6c5ea846ce97a600354555014a1628009ce755dee5121eebd186eeef17e4964736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106106005760003560e01c80638c8ff1d51161031d578063d294f093116101a9578063ecf56a1f116100fa578063f823e2ae116100a8578063f823e2ae1461126b578063f8d24b481461127e578063fbfa77cf14611287578063fc0c546a1461129a578063fdb59413146112ad578063fe0fc8d6146112b6578063fece4eac146112c9578063ffb0a4a0146112e457600080fd5b8063ecf56a1f14611178578063eda00d541461118b578063ee51f636146111bc578063ee92a4ff1461121d578063f013d27814611226578063f65d9dbe14611239578063f7b3c6fd1461124257600080fd5b8063dcdf339a11610157578063dcdf339a146110fd578063e212991a14611110578063e3cbe3a714611123578063e3f04eba14611136578063e765540314611149578063e7873b581461115c578063ec44acf21461116557600080fd5b8063d294f0931461107a578063d3b5fe7014611082578063d3c7c2c714611095578063d477f05f1461109d578063d4bda908146110b0578063d5391393146110c3578063dc2123ff146110ea57600080fd5b8063aaf5eb681161026e578063bcc9f1d31161021c578063bcc9f1d314610fec578063c122fea614610fff578063c311ab3114611008578063c62556261461101b578063c76faf781461102e578063cab9458014611041578063cfad57a214611054578063cfbacc141461106757600080fd5b8063aaf5eb6814610e8a578063ad5c464814610e96578063b4b0f56714610ea9578063b66e6b0514610ebc578063b767608a14610f8e578063b7682d5414610fa1578063b8878a2c14610fcc57600080fd5b80639c8912f1116102cb5780639c8912f114610d215780639d1a107314610d4c578063a2ab2dee14610d5f578063a354418114610d70578063a3a80ffe14610d83578063a553906c14610e57578063aa3b7d7714610e6a57600080fd5b80638c8ff1d514610b8257806390d112b914610c0857806391cca3db14610c1b57806392a88fa214610c2e578063959509e414610c8957806397e7995a14610c9257806399794d3514610cbd57600080fd5b806352e5398f1161049c5780637395d79e116103ed5780637fdb96f31161039b5780637fdb96f314610afc5780638049fde714610b0f578063817fa1a414610b18578063878679e614610b2b5780638a0bd70214610b3e5780638a238ae514610b535780638bbb644c14610b665780638bf7f5f914610b6f57600080fd5b80637395d79e14610a5757806377a9fdcf14610a6a578063796d82d914610a7d5780637ad3def214610a865780637adbf97314610a995780637dc0d1d014610ac95780637f0584ed14610adc57600080fd5b80635fbfe8cc1161044a5780635fbfe8cc146109995780636690a806146109b95780636817031b146109cc57806368ca199d146109df5780636d69fcaf14610a085780636d81d98114610a1b5780636de9f32b14610a4e57600080fd5b806352e5398f1461090c5780635378143e1461092c57806356a6796f1461093f5780635a912551146109545780635ad9f9931461095d5780635b621e32146109665780635c76ac9e1461097957600080fd5b8063265aa621116105565780633b0f0f2f116105045780633b0f0f2f146108535780633dae10a01461088257806343b8fab5146108955780634415b369146108a85780634437152a146108d357806344d44f5a146108e65780635070e837146108f957600080fd5b8063265aa6211461075f57806328b1f88714610772578063292c1617146107855780632a0a1cb0146107985780632d1f941a146107b85780633078fff5146107c157806332149592146107d457600080fd5b8063145ed21c116105b3578063145ed21c146106a757806316f0115b146106ba5780631c8636b4146106cd578063201d8bdb1461070657806321f7a30b14610719578063255566e41461072c57806325615d271461074c57600080fd5b8062b127831461060557806306aef7de1461062e578063099fa934146106435780630a769d71146106565780630eee3e4a1461066e57806312d43a511461068157806313b36ff614610694575b600080fd5b600554610618906001600160a01b031681565b6040516106259190614f28565b60405180910390f35b61064161063c366004614fd8565b6112ed565b005b61064161065136600461505f565b611360565b61065e6113c8565b604051610625949392919061509b565b61064161067c3660046150fa565b611862565b601a54610618906001600160a01b031681565b6106416106a236600461505f565b6118f6565b6106416106b536600461512c565b611961565b600354610618906001600160a01b031681565b6106f86106db366004615149565b602860209081526000928352604080842090915290825290205481565b604051908152602001610625565b61064161071436600461505f565b6119f1565b610641610727366004615149565b611a75565b61073f61073a36600461505f565b611ad8565b60405161062591906151ad565b61064161075a36600461505f565b602355565b61061861076d36600461505f565b611ba3565b610641610780366004615149565b611bc3565b6106f8610793366004615149565b611c0e565b6107ab6107a63660046151ff565b611c72565b60405161062591906152a8565b6106f8601d5481565b600254610618906001600160a01b031681565b6107e76107e236600461505f565b611d24565b604080516001600160a01b03909e168e5260208e019c909c529a8c019990995260608b019790975260808a019590955292151560a089015260c088019190915260e08701526101008601526101208501526101408401526101608301526101808201526101a001610625565b61061861086136600461512c565b6001600160a01b039081166000908152602560205260409020600101541690565b6106f861089036600461505f565b611dab565b6106416108a336600461505f565b611dc2565b6106f86108b6366004615149565b603260209081526000928352604080842090915290825290205481565b6106416108e136600461512c565b611e3a565b6106f86108f4366004615149565b611ebf565b61064161090736600461512c565b611ef6565b6106f861091a36600461505f565b60346020526000908152604090205481565b61064161093a3660046152d6565b611f86565b6109476120bd565b6040516106259190615318565b6106f860125481565b6106f860225481565b61064161097436600461512c565b6120f9565b61098c61098736600461512c565b612173565b6040516106259190615349565b6109ac6109a736600461505f565b6121df565b604051610625919061538d565b6106416109c73660046151ff565b61224a565b6106416109da36600461512c565b61238a565b6106f86109ed36600461512c565b6001600160a01b031660009081526025602052604090205490565b610641610a1636600461512c565b612410565b610a3e610a2936600461512c565b60366020526000908152604090205460ff1681565b6040519015158152602001610625565b6106f860215481565b610641610a653660046150fa565b6124b5565b6106f8610a783660046150fa565b612507565b6106f8600f5481565b610641610a9436600461512c565b61252c565b610641610aa736600461512c565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600154610618906001600160a01b031681565b610aef610aea36600461505f565b6126d4565b60405161062591906153ce565b610641610b0a36600461541e565b6127ad565b6106f860105481565b610641610b26366004615459565b612849565b600d54610618906001600160a01b031681565b610b46612914565b604051610625919061557e565b610641610b613660046155c1565b612a03565b6106f860135481565b610641610b7d36600461505f565b612ab5565b610bd9610b903660046151ff565b6027602090815260009384526040808520825292845282842090528252902080546001820154600283015460038401546004850154600590950154939492939192909160ff1686565b6040805196875260208701959095529385019290925260608401526080830152151560a082015260c001610625565b610641610c163660046151ff565b612b27565b601b54610618906001600160a01b031681565b610c66610c3c36600461512c565b60256020526000908152604090208054600182015460029092015490916001600160a01b03169083565b604080519384526001600160a01b03909216602084015290820152606001610625565b6106f8601f5481565b6106f8610ca0366004615149565b602a60209081526000928352604080842090915290825290205481565b610d0f610ccb36600461505f565b602d602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b0394851695939490921692909160ff1686565b60405161062596959493929190615602565b6106f8610d2f366004615149565b602f60209081526000928352604080842090915290825290205481565b610641610d5a366004615647565b612e80565b601a546001600160a01b0316610618565b610641610d7e36600461541e565b612f42565b610e01610d913660046151ff565b602660209081526000938452604080852082529284528284209052825290208054600182015460028301546003840154600485015460058601546006870154600788015460088901546009909901546001600160a01b03909816989697959694959394929360ff9092169290918a565b604080516001600160a01b03909b168b5260208b0199909952978901969096526060880194909452608087019290925260a0860152151560c085015260e084015261010083015261012082015261014001610625565b610641610e6536600461512c565b612fde565b6106f8610e7836600461505f565b60356020526000908152604090205481565b6106f86402540be40081565b600054610618906001600160a01b031681565b610641610eb73660046151ff565b613066565b610f7c610eca36600461505f565b602c6020908152600091825260409182902082516101408101845281546001600160a01b031681526001820154928101929092526002810154928201929092526003820154606082015260048201546080820152600582015460a0820152600682015460ff16151560c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154600b830154600c840154600d850154600e90950154939492939192909186565b60405161062596959493929190615680565b610641610f9c3660046156bc565b613372565b6106f8610faf366004615149565b603060209081526000928352604080842090915290825290205481565b610fdf610fda3660046151ff565b6134a1565b60405161062591906156d5565b6106f8610ffa366004615149565b613624565b6106f860115481565b610641611016366004615777565b613655565b61061861102936600461505f565b613904565b61064161103c366004615807565b61392e565b61064161104f366004615899565b613b11565b61064161106236600461512c565b613e15565b6106f86110753660046158be565b613e99565b610641613ff3565b610641611090366004615908565b61420f565b6109ac614525565b6106416110ab36600461512c565b614586565b6106416110be3660046159bb565b61460a565b6106f87f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b6106416110f836600461505f565b6146a7565b610a3e61110b3660046151ff565b614718565b61064161111e36600461505f565b6147b4565b6106186111313660046150fa565b61481a565b61064161114436600461505f565b614852565b610641611157366004615149565b6148db565b6106f860205481565b600454610618906001600160a01b031681565b61064161118636600461505f565b614972565b6106f86111993660046151ff565b602960209081526000938452604080852082529284528284209052825290205481565b6111cf6111ca3660046151ff565b6149e9565b6040516106259190600060c082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a0830151151560a083015292915050565b6106f8601c5481565b6106416112343660046159d8565b614a9d565b6106f8600e5481565b6106f861125036600461512c565b6001600160a01b03166000908152602e602052604090205490565b61064161127936600461512c565b614b47565b6106f860145481565b600c54610618906001600160a01b031681565b600654610618906001600160a01b031681565b6106f8601e5481565b6106416112c436600461512c565b614bc4565b61061873b0897686c545045afc77cf20ec7a532e3120e0f181565b6106f860235481565b601a546001600160a01b0316331461130457600080fd5b80516001600160a01b031661131857600080fd5b6113256007826005614db6565b507f89a3bfeda71ede5f8735aa09127c97cd56aa3803356c52f7c30caf418238b464816040516113559190615a10565b60405180910390a150565b601a546001600160a01b0316331461137757600080fd5b603281101561138557600080fd5b6012819055604080518181526006918101919091526506d6178536c560d41b606082015260208101829052600080516020615d4583398151915290608001611355565b6113d0614e0e565b6113d8614e0e565b6113e0614e0e565b6113e8614e0e565b6000805b60235481101561185a5760008181526031602090815260408083208054825181850281018501909352808352919290919083018282801561145657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611438575b5050505050905060005b815181101561183857600060286000848481518110611481576114816159fa565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020600085815260200190815260200160002054905060005b8115611814576114e88484815181106114db576114db6159fa565b6020026020010151614c4e565b600060266000868681518110611500576115006159fa565b6020908102919091018101516001600160a01b03908116835282820193909352604091820160009081208a82528252828120868252825282902082516101408101845281549094168452600181015484830152600281015484840152600381015460608501526004808201546080860152600582015460a0860152600682015460ff16151560c0860152600782015460e0860152600882015461010086015260099091015461012085015282518084019093528252636865726560e01b908201529091506115cd90614c91565b60048054604051631ad6f65d60e21b81526000926001600160a01b0390921691636b5bd974916115ff918691016152a8565b6040805180830381865afa15801561161b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061163f9190615a41565b50905080156116d25781518b896064811061165c5761165c6159fa565b6001600160a01b03909216602092909202015260028c8960648110611683576116836159fa565b60200201818152505081602001518a89606481106116a3576116a36159fa565b602002015260408201518989606481106116bf576116bf6159fa565b6020020152876116ce81615a86565b9850505b60048054604051631ad6f65d60e21b81526000926001600160a01b0390921691636b5bd97491611704918791016152a8565b6040805180830381865afa158015611720573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117449190615a41565b509050808015611752575081155b156117e15782518c8a6064811061176b5761176b6159fa565b6001600160a01b03909216602092909202015260048d8a60648110611792576117926159fa565b60200201818152505082602001518b8a606481106117b2576117b26159fa565b602002015260408301518a8a606481106117ce576117ce6159fa565b6020020152886117dd81615a86565b9950505b886063036117f157505050611814565b846117fb81615a9f565b955050838061180990615a86565b9450505050506114c0565b85606303611823575050611838565b5050808061183090615a86565b915050611460565b5082606303611847575061185a565b508061185281615a86565b9150506113ec565b505090919293565b601a546001600160a01b0316331461187957600080fd5b6000828152603360205260409020819060020155604080516060808252601390820152720dac2f09ee0cadc92dce8cae4cae6e8ae8aa89606b1b6080820152602081018490529081018290527f957cd67ea49f3e1ee953cdd23a1ba1f11d973e842411220d5c24ef0e24e1c9569060a00160405180910390a15050565b601a546001600160a01b0316331461190d57600080fd5b61012c81101561191c57600080fd5b6011819055604080518181526008918101919091526706d61784761696e560c41b606082015260208101829052600080516020615d4583398151915290608001611355565b601a546001600160a01b0316331461197857600080fd5b6001600160a01b03811661198b57600080fd5b600d80546001600160a01b0319166001600160a01b03831690811790915560408051818152600f918101919091526e3a37b5b2b72ba2aa242937baba32b960891b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff16611a295760405162461bcd60e51b8152600401611a2090615ab6565b60405180910390fd5b6000908152602d6020526040812080546001600160a01b03199081168255600182018390556002820180549091169055600381018290556004810191909155600501805460ff19169055565b3360009081526036602052604090205460ff16611aa45760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03821660009081526025602052604081206002018054839290611acf908490615ad9565b90915550505050565b611b0e6040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6000828152602d6020908152604091829020825160c08101845281546001600160a01b039081168252600183015493820193909352600282015490921692820192909252600382015460608201526004808301546080830152600583015491929160a084019160ff90911690811115611b8957611b89615175565b6004811115611b9a57611b9a615175565b90525092915050565b60078160058110611bb357600080fd5b01546001600160a01b0316905081565b3360009081526036602052604090205460ff16611bf25760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03909116600090815260256020526040902055565b6000805b600e54811015611c6b576001600160a01b038416600090815260266020908152604080832086845282528083208484529091528120600701549003611c5957809150611c6b565b80611c6381615a86565b915050611c12565b5092915050565b611c7a614e2d565b506001600160a01b0380841660009081526026602090815260408083208684528252808320858452825291829020825161014081018452815490941684526001810154918401919091526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460ff16151560c0830152600781015460e08301526008810154610100830152600901546101208201525b9392505050565b602b8181548110611d3457600080fd5b60009182526020909120600d9091020180546001820154600283015460038401546004850154600586015460068701546007880154600889015460098a0154600a8b0154600b8c0154600c909c01546001600160a01b03909b169c50989a97999698959760ff90951696939592949193909291908d565b60158160058110611dbb57600080fd5b0154905081565b601a546001600160a01b03163314611dd957600080fd5b60008111611de657600080fd5b60138190556040805181815260179181019190915276191959985d5b1d13195d995c9859d9555b9b1bd8dad959604a1b606082015260208101829052600080516020615d4583398151915290608001611355565b601a546001600160a01b03163314611e5157600080fd5b6001600160a01b038116611e6457600080fd5b600380546001600160a01b0319166001600160a01b03831690811790915560408051818152600491810191909152631c1bdbdb60e21b60608201526020810191909152600080516020615d6583398151915290608001611355565b6000805b600e54811015611c6b57611ed8848483614718565b611ee457809150611c6b565b80611eee81615a86565b915050611ec3565b601a546001600160a01b03163314611f0d57600080fd5b6001600160a01b038116611f2057600080fd5b600280546001600160a01b0319166001600160a01b03831690811790915560408051818152600f918101919091526e383934b1b2a0b3b3b932b3b0ba37b960891b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff16611fb55760405162461bcd60e51b8152600401611a2090615ab6565b801561203c576006546040516340c10f1960e01b81526001600160a01b03909116906340c10f1990611fed9086908690600401615af1565b600060405180830381600087803b15801561200757600080fd5b505af115801561201b573d6000803e3d6000fd5b5050505081602160008282546120319190615ad9565b909155506120b89050565b600654604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac9061206e9086908690600401615af1565b600060405180830381600087803b15801561208857600080fd5b505af115801561209c573d6000803e3d6000fd5b5050505081602060008282546120b29190615ad9565b90915550505b505050565b6120c5614e8b565b6040805160a08101918290529060159060059082845b8154815260200190600101908083116120db575b5050505050905090565b601a546001600160a01b0316331461211057600080fd5b6001600160a01b03811661212357600080fd5b6001600160a01b03811660009081526036602052604090819020805460ff19169055517ff9cf924d7d98e6e0a27ec523cd7214b0bbdfaba197018b33b41a702f5238190e90611355908390614f28565b6001600160a01b0381166000908152602e60209081526040918290208054835181840281018401909452808452606093928301828280156121d357602002820191906000526020600020905b8154815260200190600101908083116121bf575b50505050509050919050565b6000818152603160209081526040918290208054835181840281018401909452808452606093928301828280156121d357602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116122215750505050509050919050565b3360009081526036602052604090205460ff166122795760405162461bcd60e51b8152600401611a2090615ab6565b60025460405163b9e0336f60e01b8152600481018490526024810183905273b0897686c545045afc77cf20ec7a532e3120e0f1916323b872dd9186916001600160a01b031690819063b9e0336f90604401602060405180830381865afa1580156122e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061230b9190615b0a565b6040516001600160e01b031960e086901b1681526001600160a01b03938416600482015292909116602483015260448201526064015b6020604051808303816000875af1158015612360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123849190615b23565b50505050565b601a546001600160a01b031633146123a157600080fd5b6001600160a01b0381166123b457600080fd5b600c80546001600160a01b0319166001600160a01b03831690811790915560408051818152600591810191909152641d985d5b1d60da1b60608201526020810191909152600080516020615d6583398151915290608001611355565b601a546001600160a01b0316331461242757600080fd5b6001600160a01b03811661243a57600080fd5b602480546001810182556000919091527f7cd332d19b93bcabe3cce7ca0c18a052f57e5fd03b4758a09f30f5ddc4b22ec40180546001600160a01b0319166001600160a01b0383161790556040517fd1be2e90bd3d24839d9dd94ad871068e1f9688b02fa43f2a62c9975dfa9de2d790611355908390614f28565b3360009081526036602052604090205460ff166124e45760405162461bcd60e51b8152600401611a2090615ab6565b600082815260356020526040812043905560228054839290611acf908490615ad9565b6033602052816000526040600020816003811061252357600080fd5b01549150829050565b601a546001600160a01b0316331461254357600080fd5b60048054604080516358c3de9360e11b815290516001600160a01b039092169263b187bd269282820192602092908290030181865afa15801561258a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125ae9190615b23565b801561262c5750600560009054906101000a90046001600160a01b03166001600160a01b031663b187bd266040518163ffffffff1660e01b8152600401602060405180830381865afa158015612608573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061262c9190615b23565b6126655760405162461bcd60e51b815260206004820152600a6024820152691393d517d4105554d15160b21b6044820152606401611a20565b6001600160a01b03811661267857600080fd5b600680546001600160a01b0319166001600160a01b03831690811790915560408051818152600591810191909152643a37b5b2b760d91b60608201526020810191909152600080516020615d6583398151915290608001611355565b6126dc614ea9565b506000908152602c602090815260409182902082516102008101845281546001600160a01b031660c08201908152600183015460e08301526002830154610100830152600383015461012083015260048301546101408301526005830154610160830152600683015460ff16151561018083015260078301546101a083015260088301546101c083015260098301546101e08301528152600a82015492810192909252600b81015492820192909252600c8201546060820152600d8201546080820152600e9091015460a082015290565b3360009081526036602052604090205460ff166127dc5760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03841660008181526026602090815260408083208784528252808320868452825280832093835260278252808320878452825280832086845290915281206007830154909103612834575050612384565b60089091018290554360039091015550505050565b3360009081526036602052604090205460ff166128785760405162461bcd60e51b8152600401611a2090615ab6565b6000818152602d6020908152604091829020845181546001600160a01b03199081166001600160a01b03928316178355928601516001808401919091559386015160028301805490941691161790915560608401516003820155608084015160048083019190915560a085015160058301805487959293919260ff1990911691849081111561290957612909615175565b021790555050505050565b6060602b805480602002602001604051908101604052809291908181526020016000905b828210156129fa576000848152602090819020604080516101a081018252600d860290920180546001600160a01b03168352600180820154848601526002820154928401929092526003810154606084015260048101546080840152600581015460ff16151560a0840152600681015460c0840152600781015460e084015260088101546101008401526009810154610120840152600a810154610140840152600b810154610160840152600c01546101808301529083529092019101612938565b50505050905090565b3360009081526036602052604090205460ff16612a325760405162461bcd60e51b8152600401611a2090615ab6565b306001600160a01b03841603612a745760005460405163a9059cbb60e01b81526001600160a01b039091169063a9059cbb906123419085908590600401615af1565b6000546040516323b872dd60e01b81526001600160a01b038581166004830152848116602483015260448201849052909116906323b872dd90606401612341565b601a546001600160a01b03163314612acc57600080fd5b60008111612ad957600080fd5b600f81905560408051818152601191810191909152706d6178547261646573506572426c6f636b60781b606082015260208101829052600080516020615d4583398151915290608001611355565b3360009081526036602052604090205460ff16612b565760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03831660008181526026602090815260408083208684528252808320858452825280832093835260278252808320868452825280832085845290915281206007830154909103612bae575050505050565b60028101546006830154612bc991869160009060ff16614cd4565b6001600160a01b0385166000908152602860209081526040808320878452909152902054600103612d36576001600160a01b0385166000908152603260209081526040808320878452825280832054603190925290912080548190612c3090600190615b40565b81548110612c4057612c406159fa565b9060005260206000200160009054906101000a90046001600160a01b0316818381548110612c7057612c706159fa565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160326000838581548110612cb557612cb56159fa565b60009182526020808320909101546001600160a01b03908116845283820194909452604092830182208b8352815282822094909455918a16825260328352808220898352909252908120558054819080612d1157612d11615b57565b600082815260209020810160001990810180546001600160a01b031916905501905550505b6001600160a01b03851660008181526026602090815260408083208884528252808320878452825280832080546001600160a01b03191681556001808201859055600280830186905560038084018790556004808501889055600580860189905560068601805460ff19908116909155600787018a9055600887018a90556009909601899055898952602788528689208e8a5288528689208d8a52885286892089815594850189905592840188905590830187905582018690550180549091169055928252602881528282208783529052908120805491612e1683615a9f565b9091555050436000908152603460205260408120805491612e3683615a86565b919050555081604051612e499190615b6d565b604051908190038120907f27da8e9ce15b7acef76d7ad1c9eeaa7a11d169ef774cc7a05d2aa1778c286e6e90600090a25050505050565b3360009081526036602052604090205460ff16612eaf5760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03808316600090815260256020526040902090821615801590612ee4575060018101546001600160a01b0316155b8015612f025750826001600160a01b0316826001600160a01b031614155b612f195760018101546001600160a01b0316612f1b565b815b60019190910180546001600160a01b0319166001600160a01b039092169190911790555050565b3360009081526036602052604090205460ff16612f715760405162461bcd60e51b8152600401611a2090615ab6565b6001600160a01b03841660008181526026602090815260408083208784528252808320868452825280832093835260278252808320878452825280832086845290915281206007830154909103612fc9575050612384565b60099091018290554360049091015550505050565b601a546001600160a01b03163314612ff557600080fd5b6001600160a01b03811661300857600080fd5b600480546001600160a01b0319166001600160a01b038316908117909155604080518181526007918101919091526674726164696e6760c81b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff166130955760405162461bcd60e51b8152600401611a2090615ab6565b6130a0838383614718565b156120b8576001600160a01b03831660009081526029602090815260408083208584528252808320848452909152902054602b80546130e190600190615b40565b815481106130f1576130f16159fa565b90600052602060002090600d0201602b8281548110613112576131126159fa565b6000918252602082208354600d9092020180546001600160a01b0319166001600160a01b0390921691909117815560018084015490820155600280840154908201556003808401549082015560048084015490820155600580840154908201805460ff909216151560ff1990921691909117905560068084015490820155600780840154908201556008808401549082015560098084015490820155600a8084015490820155600b8084015490820155600c92830154920191909155602b805483926029929091849081106131e9576131e96159fa565b60009182526020808320600d909202909101546001600160a01b031683528201929092526040018120602b805491929185908110613229576132296159fa565b90600052602060002090600d02016001015481526020019081526020016000206000602b848154811061325e5761325e6159fa565b600091825260208083206002600d90930201919091015483528281019390935260409182018120939093556001600160a01b0387168352602982528083208684528252808320858452909152812055602b8054806132be576132be615b57565b60008281526020808220600d6000199094019384020180546001600160a01b03191681556001810183905560028101839055600381018390556004810183905560058101805460ff1916905560068101839055600781018390556008810183905560098101839055600a8101839055600b8101839055600c01829055919092556001600160a01b0386168252602a81526040808320868452909152812080549161336783615a9f565b919050555050505050565b3360009081526036602052604090205460ff166133a15760405162461bcd60e51b8152600401611a2090615ab6565b6133c06133b1602083018361512c565b82602001358360400135614718565b1561349e576000602b6029826133d9602086018661512c565b6001600160a01b031681526020808201929092526040908101600090812086840135825283528181208683013582529092529020548154811061341e5761341e6159fa565b90600052602060002090600d02019050816060013581600301819055508160a001602081019061344e9190615beb565b60058201805460ff191691151591909117905560c0820135600682015560e0820135600782015561010082013560088201556101208201356009820155610140820135600a82015543600b909101555b50565b613517604051806101a0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b613522848484614718565b61352b57600080fd5b6001600160a01b03841660009081526029602090815260408083208684528252808320858452909152902054602b8054909190811061356c5761356c6159fa565b6000918252602091829020604080516101a081018252600d90930290910180546001600160a01b031683526001810154938301939093526002830154908201526003820154606082015260048201546080820152600582015460ff16151560a0820152600682015460c0820152600782015460e082015260088201546101008201526009820154610120820152600a820154610140820152600b820154610160820152600c9091015461018082015290509392505050565b602e602052816000526040600020818154811061364057600080fd5b90600052602060002001600091509150505481565b3360009081526036602052604090205460ff166136845760405162461bcd60e51b8152600401611a2090615ab6565b61369682600001518360200151611c0e565b604083810191825283516001600160a01b0390811660009081526026602090815283822081880180518452908252848320865184528252848320885181546001600160a01b031916951694851781558151600182015595516002870155606088015160038701556080880151600487015560a0880151600587015560c088015160068701805460ff191691151591909117905560e0880151600787015561010088015160088701556101208801516009909601959095559181526028825282812093518152929052812080549161376c83615a86565b909155505043600090815260346020526040812080549161378c83615a86565b909155505081516001600160a01b0316600090815260286020908152604080832082860151845290915290205460010361382c57602082810180516000908152603180845260408083205487516001600160a01b039081168552603287528285208651865287528285209190915593518352908452812085518154600181018355918352939091200180546001600160a01b031916929091169190911790555b600060a0820181815283516001600160a01b031682526027602090815260408084208287018051865290835281852082880151865283529381902085518155918501516001808401919091559085015160028301819055606086015160038401556080860151600484015592516005909201805460ff191692151592909217909155915160c08501516138c29391929190614cd4565b816040516138d09190615c08565b604051908190038120907f58afb50c04302a400c4c6a6987d5992be730e9ea9e499ce4f610996a40f9fe1990600090a25050565b6024818154811061391457600080fd5b6000918252602090912001546001600160a01b0316905081565b3360009081526036602052604090205460ff1661395d5760405162461bcd60e51b8152600401611a2090615ab6565b8251516001600160a01b039081166000908152602e6020908152604080832080546001808201835591855283852001879055868452602c8352928190208751805182546001600160a01b031916961695909517815591840151928201929092558282015160028201556060808401516003830155608080850151600484015560a080860151600585015560c086015160068501805460ff191691151591909117905560e08601516007850155610100860151600885015561012090950151600984015592870151600b830155860151600c82015590850151600d82015590840151600e82015543600a909101558015613a8f578251516001600160a01b03166000908152602f60209081526040808320865183015184529091528120805491613a8583615a86565b9190505550505050565b8251516001600160a01b03166000908152603060209081526040808320865183015184529091528120805491613ac483615a86565b90915550508251516001600160a01b03166000908152602760209081526040808320865183015184528252808320865182015184529091529020600501805460ff19166001179055505050565b3360009081526036602052604090205460ff16613b405760405162461bcd60e51b8152600401611a2090615ab6565b6000828152602c6020908152604080832081516102008101835281546001600160a01b031660c08201818152600184015460e08401526002840154610100840152600384015461012084015260048401546101408401526005840154610160840152600684015460ff16151561018084015260078401546101a084015260088401546101c084015260098401546101e08401528252600a83015482860152600b83015482850152600c8301546060830152600d8301546080830152600e9092015460a0820152908452602e909252822090915b8154811015613e0d5784828281548110613c2f57613c2f6159fa565b906000526020600020015403613dfb578315613c84578251516001600160a01b03166000908152602f60209081526040808320865183015184529091528120805491613c7a83615a9f565b9190505550613cff565b8251516001600160a01b03166000908152603060209081526040808320865183015184529091528120805491613cb983615a9f565b90915550508251516001600160a01b03166000908152602760209081526040808320865183015184528252808320865182015184529091529020600501805460ff191690555b81548290613d0f90600190615b40565b81548110613d1f57613d1f6159fa565b9060005260206000200154828281548110613d3c57613d3c6159fa565b906000526020600020018190555081805480613d5a57613d5a615b57565b600082815260208082208301600019908101839055909201909255868252602c90526040812080546001600160a01b0319168155600181018290556002810182905560038101829055600481018290556005810182905560068101805460ff19169055600781018290556008810182905560098101829055600a8101829055600b8101829055600c8101829055600d8101829055600e015550613e11915050565b80613e0581615a86565b915050613c13565b5050505b5050565b601a546001600160a01b03163314613e2c57600080fd5b6001600160a01b038116613e3f57600080fd5b601a80546001600160a01b0319166001600160a01b038316908117909155604080518181526003918101919091526233b7bb60e91b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604081205460ff16613ec85760405162461bcd60e51b8152600401611a2090615ab6565b600254604051630710f2ff60e51b8152600481018790526064916402540be400916001600160a01b039091169063e21e5fe090602401602060405180830381865afa158015613f1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f3f9190615b0a565b613f499087615c9b565b613f539190615cba565b613f5d9190615cba565b905081613f7257613f6f600282615cba565b90505b8215613fae5780601f6000828254613f8a9190615ad9565b9250508190555080601d6000828254613fa39190615ad9565b90915550613fdf9050565b80601e6000828254613fc09190615ad9565b9250508190555080601c6000828254613fd99190615ad9565b90915550505b613fea600282615c9b565b95945050505050565b601a546001600160a01b0316331461400a57600080fd5b600654601b54601c546040516340c10f1960e01b81526001600160a01b03938416936340c10f199361404193911691600401615af1565b600060405180830381600087803b15801561405b57600080fd5b505af115801561406f573d6000803e3d6000fd5b5050600654601a54601e546040516340c10f1960e01b81526001600160a01b0393841695506340c10f1994506140ab9390921691600401615af1565b600060405180830381600087803b1580156140c557600080fd5b505af11580156140d9573d6000803e3d6000fd5b50505050601e54601c546140ed9190615ad9565b602160008282546140fe9190615ad9565b9091555050600054601a54601f5460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb9361413a93911691600401615af1565b6020604051808303816000875af1158015614159573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061417d9190615b23565b50600054601b54601d5460405163a9059cbb60e01b81526001600160a01b039384169363a9059cbb936141b593911691600401615af1565b6020604051808303816000875af11580156141d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141f89190615b23565b506000601c819055601e819055601d819055601f55565b3360009081526036602052604090205460ff1661423e5760405162461bcd60e51b8152600401611a2090615ab6565b61425081600001518260200151611ebf565b60408201908152436101608301908152602b805460018082018355600083905285517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e4f600d90930292830180546001600160a01b0319166001600160a01b0390921691909117905560208601517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5083015593517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5182015560608501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5282015560808501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5382015560a08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e548201805460ff191691151591909117905560c08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5582015560e08501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e568201556101008501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e578201556101208501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e588201556101408501517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5982015591517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5a8301556101808401517f11c44e4875b74d31ff9fd779bf2566af7bd15b87fc985d01f5094b89e3669e5b90920191909155546144bf9190615b40565b81516001600160a01b0390811660009081526029602090815260408083208287018051855290835281842082880151855283528184209590955585519093168252602a81528282209351825292909252812080549161451d83615a86565b919050555050565b606060248054806020026020016040519081016040528092919081815260200182805480156120ef57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161455f575050505050905090565b601a546001600160a01b0316331461459d57600080fd5b6001600160a01b0381166145b057600080fd5b601b80546001600160a01b0319166001600160a01b03831690811790915560408051818152600391810191909152623232bb60e91b60608201526020810191909152600080516020615d6583398151915290608001611355565b3360009081526036602052604090205460ff166146395760405162461bcd60e51b8152600401611a2090615ab6565b80516001600160a01b0316600090815260266020908152604080832082850151845282528083208185015184529091528120600781015490910361467b575050565b606082015160038201556080820151600482015560a0820151600582015560e082015160079091015550565b601a546001600160a01b031633146146be57600080fd5b600081116146cb57600080fd5b600e819055604080518181526010918101919091526f36b0bc2a3930b232b9a832b92830b4b960811b606082015260208101829052600080516020615d4583398151915290608001611355565b602b54600090810361472c57506000611d1d565b6001600160a01b03841660009081526029602090815260408083208684528252808320858452909152812054602b8054909190811061476d5761476d6159fa565b60009182526020909120600d9091020180549091506001600160a01b03868116911614801561479f5750838160010154145b8015613fea5750600201549091149392505050565b601a546001600160a01b031633146147cb57600080fd5b601481905560408051818152601291810191909152716e66745375636365737354696d656c6f636b60701b606082015260208101829052600080516020615d4583398151915290608001611355565b6031602052816000526040600020818154811061483657600080fd5b6000918252602090912001546001600160a01b03169150829050565b3360009081526036602052604090205460ff166148815760405162461bcd60e51b8152600401611a2090615ab6565b600354604051633104b73f60e21b8152600481018390526001600160a01b039091169063c412dcfc90602401600060405180830381600087803b1580156148c757600080fd5b505af1158015613e0d573d6000803e3d6000fd5b3360009081526036602052604090205460ff1661490a5760405162461bcd60e51b8152600401611a2090615ab6565b6000546040516340c10f1960e01b81526001600160a01b03909116906340c10f199061493c9085908590600401615af1565b600060405180830381600087803b15801561495657600080fd5b505af115801561496a573d6000803e3d6000fd5b505050505050565b601a546001600160a01b0316331461498957600080fd5b6000811161499657600080fd5b601081905560408051818152601691810191909152756d617850656e64696e674d61726b65744f726465727360501b606082015260208101829052600080516020615d4583398151915290608001611355565b614a246040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581525090565b506001600160a01b03929092166000908152602760209081526040808320938352928152828220938252928352819020815160c0810183528154815260018201549381019390935260028101549183019190915260038101546060830152600481015460808301526005015460ff16151560a082015290565b601a546001600160a01b03163314614ab457600080fd5b803515801590614ac8575080356020820135115b8015614adb575060208101356040820135115b8015614aee575060408101356060820135115b8015614b01575060608101356080820135115b614b0a57600080fd5b614b176015826005614ee5565b507fdaae5e047a75b6f38ad4e279cdefe910fc35d5a99a91b8303bd948c0a999372a816040516113559190615cdc565b601a546001600160a01b03163314614b5e57600080fd5b6001600160a01b038116614b7157600080fd5b6001600160a01b03811660009081526036602052604090819020805460ff19166001179055517fb692fa98cbec9bd705572b4c7e0927e3f7698e9fe526dcef6f40f3d4d4980ca390611355908390614f28565b601a546001600160a01b03163314614bdb57600080fd5b6001600160a01b038116614bee57600080fd5b600580546001600160a01b0319166001600160a01b038316908117909155604080518181526009918101919091526863616c6c6261636b7360b81b60608201526020810191909152600080516020615d6583398151915290608001611355565b61349e81604051602401614c629190614f28565b60408051601f198184030181529190526020810180516001600160e01b031663161765e160e11b179052614d91565b61349e81604051602401614ca59190615cef565b60408051601f198184030181529190526020810180516001600160e01b031663104c13eb60e21b179052614d91565b600081614ce2576001614ce5565b60005b600086815260336020526040902060ff91909116915083614d245784818360038110614d1357614d136159fa565b0154614d1f9190615b40565b614d43565b84818360038110614d3757614d376159fa565b0154614d439190615ad9565b818360038110614d5557614d556159fa565b01558054600182015460405188907f6da9a00899a8a4900c75b0c762b64375242e6c0fa1e5bd9e5c5b663bdbdfe13c90600090a4505050505050565b61349e8160006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b8260058101928215614dfe579160200282015b82811115614dfe57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190614dc9565b50614e0a929150614f13565b5090565b60405180610c8001604052806064906020820280368337509192915050565b60405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b6040518060a001604052806005906020820280368337509192915050565b6040518060c00160405280614ebc614e2d565b815260200160008152602001600081526020016000815260200160008152602001600081525090565b8260058101928215614dfe579160200282015b82811115614dfe578235825591602001919060010190614ef8565b5b80821115614e0a5760008155600101614f14565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715614f7557614f75614f3c565b60405290565b604051610140810167ffffffffffffffff81118282101715614f7557614f75614f3c565b6040516101a0810167ffffffffffffffff81118282101715614f7557614f75614f3c565b6001600160a01b038116811461349e57600080fd5b600060a08284031215614fea57600080fd5b82601f830112614ff957600080fd5b60405160a0810181811067ffffffffffffffff8211171561501c5761501c614f3c565b6040528060a084018581111561503157600080fd5b845b8181101561505457803561504681614fc3565b835260209283019201615033565b509195945050505050565b60006020828403121561507157600080fd5b5035919050565b8060005b606481101561238457815184526020938401939091019060010161507c565b61320081016150aa8287615078565b610c8082018560005b60648110156150db5781516001600160a01b03168352602092830192909101906001016150b3565b5050506150ec611900830185615078565b613fea612580830184615078565b6000806040838503121561510d57600080fd5b50508035926020909101359150565b803561512781614fc3565b919050565b60006020828403121561513e57600080fd5b8135611d1d81614fc3565b6000806040838503121561515c57600080fd5b823561516781614fc3565b946020939093013593505050565b634e487b7160e01b600052602160045260246000fd5b600581106151a957634e487b7160e01b600052602160045260246000fd5b9052565b600060c08201905060018060a01b038084511683526020840151602084015280604085015116604084015250606083015160608301526080830151608083015260a0830151611c6b60a084018261518b565b60008060006060848603121561521457600080fd5b833561521f81614fc3565b95602085013595506040909401359392505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015161528660c084018215159052565b5060e08181015190830152610100808201519083015261012090810151910152565b61014081016152b78284615234565b92915050565b801515811461349e57600080fd5b8035615127816152bd565b6000806000606084860312156152eb57600080fd5b83356152f681614fc3565b925060208401359150604084013561530d816152bd565b809150509250925092565b60a08101818360005b6005811015615340578151835260209283019290910190600101615321565b50505092915050565b6020808252825182820181905260009190848201906040850190845b8181101561538157835183529284019291840191600101615365565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156153815783516001600160a01b0316835292840192918401916001016153a9565b60006101e0820190506153e2828451615234565b60208301516101408301526040830151610160830152606083015161018083015260808301516101a083015260a0909201516101c09091015290565b6000806000806080858703121561543457600080fd5b843561543f81614fc3565b966020860135965060408601359560600135945092505050565b60008082840360e081121561546d57600080fd5b60c081121561547b57600080fd5b50615484614f52565b833561548f81614fc3565b81526020848101359082015260408401356154a981614fc3565b80604083015250606084013560608201526080840135608082015260a0840135600581106154d657600080fd5b60a08201529460c0939093013593505050565b80516001600160a01b031682526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015161553160a084018215159052565b5060c0818101519083015260e08082015190830152610100808201519083015261012080820151908301526101408082015190830152610160808201519083015261018090810151910152565b6020808252825182820181905260009190848201906040850190845b81811015615381576155ad8385516154e9565b928401926101a0929092019160010161559a565b6000806000606084860312156155d657600080fd5b83356155e181614fc3565b925060208401356155f181614fc3565b929592945050506040919091013590565b6001600160a01b0387811682526020820187905285166040820152606081018490526080810183905260c0810161563c60a083018461518b565b979650505050505050565b6000806040838503121561565a57600080fd5b823561566581614fc3565b9150602083013561567581614fc3565b809150509250929050565b6101e0810161568f8289615234565b6101408201969096526101608101949094526101808401929092526101a08301526101c090910152919050565b60006101a082840312156156cf57600080fd5b50919050565b6101a081016152b782846154e9565b600061014082840312156156f757600080fd5b6156ff614f7b565b905061570a8261511c565b81526020820135602082015260408201356040820152606082013560608201526080820135608082015260a082013560a082015261574a60c083016152cb565b60c082015260e082013560e082015261010080830135818301525061012080830135818301525092915050565b60008082840361020081121561578c57600080fd5b61579685856156e4565b925060c061013f19820112156157ab57600080fd5b506157b4614f52565b6101408401358152610160840135602082015261018084013560408201526101a084013560608201526101c084013560808201526101e08401356157f7816152bd565b60a0820152919491935090915050565b600080600083850361022081121561581e57600080fd5b6101e08082121561582e57600080fd5b615836614f52565b915061584287876156e4565b82526101408601356020830152610160860135604083015261018086013560608301526101a086013560808301526101c086013560a0830152909350840135915061589061020085016152cb565b90509250925092565b600080604083850312156158ac57600080fd5b823591506020830135615675816152bd565b600080600080608085870312156158d457600080fd5b843593506020850135925060408501356158ed816152bd565b915060608501356158fd816152bd565b939692955090935050565b60006101a0828403121561591b57600080fd5b615923614f9f565b61592c8361511c565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015261596260a084016152cb565b60a082015260c0838101359082015260e080840135908201526101008084013590820152610120808401359082015261014080840135908201526101608084013590820152610180928301359281019290925250919050565b600061014082840312156159ce57600080fd5b611d1d83836156e4565b600060a082840312156159ea57600080fd5b8260a0830111156156cf57600080fd5b634e487b7160e01b600052603260045260246000fd5b60a08101818360005b60058110156153405781516001600160a01b0316835260209283019290910190600101615a19565b60008060408385031215615a5457600080fd5b8251615a5f816152bd565b6020840151909250615675816152bd565b634e487b7160e01b600052601160045260246000fd5b600060018201615a9857615a98615a70565b5060010190565b600081615aae57615aae615a70565b506000190190565b60208082526009908201526868657265206865726560b81b604082015260600190565b60008219821115615aec57615aec615a70565b500190565b6001600160a01b03929092168252602082015260400190565b600060208284031215615b1c57600080fd5b5051919050565b600060208284031215615b3557600080fd5b8151611d1d816152bd565b600082821015615b5257615b52615a70565b500390565b634e487b7160e01b600052603160045260246000fd5b81546001600160a01b0316815260018201546020820152600282015460408201526003820154606082015260048201546080820152600582015460a0820152600682015460ff16151560c0820152600782015460e08201526008820154610100820152600982015461012082015261014081015b5061014001919050565b600060208284031215615bfd57600080fd5b8135611d1d816152bd565b81516001600160a01b03168152602080830151908201526040808301519082015260608083015190820152615be1615c8d615c7f615c72615c63615c56608087016080890151815260200190565b60a0880151815260200190565b60c08701511515815260200190565b60e0860151815260200190565b610100850151815260200190565b610120840151815260200190565b6000816000190483118215151615615cb557615cb5615a70565b500290565b600082615cd757634e487b7160e01b600052601260045260246000fd5b500490565b60a0818101908383376000815292915050565b600060208083528351808285015260005b81811015615d1c57858101830151858201604001528201615d00565b81811115615d2e576000604083870101525b50601f01601f191692909201604001939250505056fe8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab943e9d45a11aaae5d87503e3bc248665d9807856e5cf2bdb4a988bee44422781a2646970667358221220c1c6c5ea846ce97a600354555014a1628009ce755dee5121eebd186eeef17e4964736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 517,
        "contract": "contracts/Storage.sol:Storage",
        "label": "WETH",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(TokenInterface)8920"
      },
      {
        "astId": 520,
        "contract": "contracts/Storage.sol:Storage",
        "label": "oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IOracle)7606"
      },
      {
        "astId": 529,
        "contract": "contracts/Storage.sol:Storage",
        "label": "priceAggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorInterfaceV1)7100"
      },
      {
        "astId": 532,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pool",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(PoolInterfaceV5)8262"
      },
      {
        "astId": 535,
        "contract": "contracts/Storage.sol:Storage",
        "label": "trading",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PausableInterfaceV5)8254"
      },
      {
        "astId": 538,
        "contract": "contracts/Storage.sol:Storage",
        "label": "callbacks",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(PausableInterfaceV5)8254"
      },
      {
        "astId": 544,
        "contract": "contracts/Storage.sol:Storage",
        "label": "token",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(TokenInterface)8920"
      },
      {
        "astId": 565,
        "contract": "contracts/Storage.sol:Storage",
        "label": "nfts",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_contract(NftInterfaceV5)7883)5_storage"
      },
      {
        "astId": 567,
        "contract": "contracts/Storage.sol:Storage",
        "label": "vault",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 569,
        "contract": "contracts/Storage.sol:Storage",
        "label": "tokenWETHRouter",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 572,
        "contract": "contracts/Storage.sol:Storage",
        "label": "maxTradesPerPair",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 575,
        "contract": "contracts/Storage.sol:Storage",
        "label": "maxTradesPerBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 578,
        "contract": "contracts/Storage.sol:Storage",
        "label": "maxPendingMarketOrders",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/Storage.sol:Storage",
        "label": "maxGainP",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 584,
        "contract": "contracts/Storage.sol:Storage",
        "label": "maxSlP",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 587,
        "contract": "contracts/Storage.sol:Storage",
        "label": "defaultLeverageUnlocked",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 590,
        "contract": "contracts/Storage.sol:Storage",
        "label": "nftSuccessTimelock",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 600,
        "contract": "contracts/Storage.sol:Storage",
        "label": "spreadReductionsP",
        "offset": 0,
        "slot": "21",
        "type": "t_array(t_uint256)5_storage"
      },
      {
        "astId": 602,
        "contract": "contracts/Storage.sol:Storage",
        "label": "gov",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 604,
        "contract": "contracts/Storage.sol:Storage",
        "label": "dev",
        "offset": 0,
        "slot": "27",
        "type": "t_address"
      },
      {
        "astId": 606,
        "contract": "contracts/Storage.sol:Storage",
        "label": "devFeesToken",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 608,
        "contract": "contracts/Storage.sol:Storage",
        "label": "devFeesWETH",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 610,
        "contract": "contracts/Storage.sol:Storage",
        "label": "govFeesToken",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 612,
        "contract": "contracts/Storage.sol:Storage",
        "label": "govFeesWETH",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 614,
        "contract": "contracts/Storage.sol:Storage",
        "label": "tokensBurned",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 616,
        "contract": "contracts/Storage.sol:Storage",
        "label": "tokensMinted",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 618,
        "contract": "contracts/Storage.sol:Storage",
        "label": "nftRewards",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 621,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pairs",
        "offset": 0,
        "slot": "35",
        "type": "t_uint256"
      },
      {
        "astId": 631,
        "contract": "contracts/Storage.sol:Storage",
        "label": "supportedTokens",
        "offset": 0,
        "slot": "36",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 636,
        "contract": "contracts/Storage.sol:Storage",
        "label": "traders",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_struct(Trader)628_storage)"
      },
      {
        "astId": 645,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openTrades",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Trade)8342_storage)))"
      },
      {
        "astId": 654,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openTradesInfo",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInfo)8355_storage)))"
      },
      {
        "astId": 660,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openTradesCount",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 668,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openLimitOrderIds",
        "offset": 0,
        "slot": "41",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))"
      },
      {
        "astId": 674,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openLimitOrdersCount",
        "offset": 0,
        "slot": "42",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 678,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openLimitOrders",
        "offset": 0,
        "slot": "43",
        "type": "t_array(t_struct(OpenLimitOrder)8382_storage)dyn_storage"
      },
      {
        "astId": 683,
        "contract": "contracts/Storage.sol:Storage",
        "label": "reqID_pendingMarketOrder",
        "offset": 0,
        "slot": "44",
        "type": "t_mapping(t_uint256,t_struct(PendingMarketOrder)8396_storage)"
      },
      {
        "astId": 688,
        "contract": "contracts/Storage.sol:Storage",
        "label": "reqID_pendingNftOrder",
        "offset": 0,
        "slot": "45",
        "type": "t_mapping(t_uint256,t_struct(PendingNftOrder)8410_storage)"
      },
      {
        "astId": 693,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pendingOrderIds",
        "offset": 0,
        "slot": "46",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 699,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pendingMarketOpenCount",
        "offset": 0,
        "slot": "47",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 705,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pendingMarketCloseCount",
        "offset": 0,
        "slot": "48",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 710,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pairTraders",
        "offset": 0,
        "slot": "49",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 716,
        "contract": "contracts/Storage.sol:Storage",
        "label": "pairTradersId",
        "offset": 0,
        "slot": "50",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 722,
        "contract": "contracts/Storage.sol:Storage",
        "label": "openInterestWETH",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_uint256,t_array(t_uint256)3_storage)"
      },
      {
        "astId": 726,
        "contract": "contracts/Storage.sol:Storage",
        "label": "tradesPerBlock",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 730,
        "contract": "contracts/Storage.sol:Storage",
        "label": "nftLastSuccess",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 734,
        "contract": "contracts/Storage.sol:Storage",
        "label": "isTradingContract",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(NftInterfaceV5)7883)5_storage": {
        "base": "t_contract(NftInterfaceV5)7883",
        "encoding": "inplace",
        "label": "contract NftInterfaceV5[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_struct(OpenLimitOrder)8382_storage)dyn_storage": {
        "base": "t_struct(OpenLimitOrder)8382_storage",
        "encoding": "dynamic_array",
        "label": "struct StorageInterface.OpenLimitOrder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)5_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorInterfaceV1)7100": {
        "encoding": "inplace",
        "label": "contract AggregatorInterfaceV1",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)7606": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_contract(NftInterfaceV5)7883": {
        "encoding": "inplace",
        "label": "contract NftInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_contract(PausableInterfaceV5)8254": {
        "encoding": "inplace",
        "label": "contract PausableInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_contract(PoolInterfaceV5)8262": {
        "encoding": "inplace",
        "label": "contract PoolInterfaceV5",
        "numberOfBytes": "20"
      },
      "t_contract(TokenInterface)8920": {
        "encoding": "inplace",
        "label": "contract TokenInterface",
        "numberOfBytes": "20"
      },
      "t_enum(LimitOrder)8321": {
        "encoding": "inplace",
        "label": "enum StorageInterface.LimitOrder",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Trade)8342_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct StorageInterface.Trade)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Trade)8342_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInfo)8355_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct StorageInterface.TradeInfo)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInfo)8355_storage))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Trader)628_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Storage.Trader)",
        "numberOfBytes": "32",
        "value": "t_struct(Trader)628_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Trade)8342_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct StorageInterface.Trade))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Trade)8342_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInfo)8355_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct StorageInterface.TradeInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TradeInfo)8355_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(PendingMarketOrder)8396_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StorageInterface.PendingMarketOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingMarketOrder)8396_storage"
      },
      "t_mapping(t_uint256,t_struct(PendingNftOrder)8410_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StorageInterface.PendingNftOrder)",
        "numberOfBytes": "32",
        "value": "t_struct(PendingNftOrder)8410_storage"
      },
      "t_mapping(t_uint256,t_struct(Trade)8342_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StorageInterface.Trade)",
        "numberOfBytes": "32",
        "value": "t_struct(Trade)8342_storage"
      },
      "t_mapping(t_uint256,t_struct(TradeInfo)8355_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StorageInterface.TradeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeInfo)8355_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(OpenLimitOrder)8382_storage": {
        "encoding": "inplace",
        "label": "struct StorageInterface.OpenLimitOrder",
        "members": [
          {
            "astId": 8357,
            "contract": "contracts/Storage.sol:Storage",
            "label": "trader",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8359,
            "contract": "contracts/Storage.sol:Storage",
            "label": "pairIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8361,
            "contract": "contracts/Storage.sol:Storage",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8363,
            "contract": "contracts/Storage.sol:Storage",
            "label": "positionSize",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8365,
            "contract": "contracts/Storage.sol:Storage",
            "label": "spreadReductionP",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8367,
            "contract": "contracts/Storage.sol:Storage",
            "label": "buy",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 8369,
            "contract": "contracts/Storage.sol:Storage",
            "label": "leverage",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 8371,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8373,
            "contract": "contracts/Storage.sol:Storage",
            "label": "sl",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8375,
            "contract": "contracts/Storage.sol:Storage",
            "label": "minPrice",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 8377,
            "contract": "contracts/Storage.sol:Storage",
            "label": "maxPrice",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8379,
            "contract": "contracts/Storage.sol:Storage",
            "label": "block",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8381,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tokenId",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "416"
      },
      "t_struct(PendingMarketOrder)8396_storage": {
        "encoding": "inplace",
        "label": "struct StorageInterface.PendingMarketOrder",
        "members": [
          {
            "astId": 8385,
            "contract": "contracts/Storage.sol:Storage",
            "label": "trade",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Trade)8342_storage"
          },
          {
            "astId": 8387,
            "contract": "contracts/Storage.sol:Storage",
            "label": "block",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 8389,
            "contract": "contracts/Storage.sol:Storage",
            "label": "wantedPrice",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 8391,
            "contract": "contracts/Storage.sol:Storage",
            "label": "slippageP",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 8393,
            "contract": "contracts/Storage.sol:Storage",
            "label": "spreadReductionP",
            "offset": 0,
            "slot": "13",
            "type": "t_uint256"
          },
          {
            "astId": 8395,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tokenId",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "480"
      },
      "t_struct(PendingNftOrder)8410_storage": {
        "encoding": "inplace",
        "label": "struct StorageInterface.PendingNftOrder",
        "members": [
          {
            "astId": 8398,
            "contract": "contracts/Storage.sol:Storage",
            "label": "nftHolder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8400,
            "contract": "contracts/Storage.sol:Storage",
            "label": "nftId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8402,
            "contract": "contracts/Storage.sol:Storage",
            "label": "trader",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 8404,
            "contract": "contracts/Storage.sol:Storage",
            "label": "pairIndex",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8406,
            "contract": "contracts/Storage.sol:Storage",
            "label": "index",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8409,
            "contract": "contracts/Storage.sol:Storage",
            "label": "orderType",
            "offset": 0,
            "slot": "5",
            "type": "t_enum(LimitOrder)8321"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Trade)8342_storage": {
        "encoding": "inplace",
        "label": "struct StorageInterface.Trade",
        "members": [
          {
            "astId": 8323,
            "contract": "contracts/Storage.sol:Storage",
            "label": "trader",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 8325,
            "contract": "contracts/Storage.sol:Storage",
            "label": "pairIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8327,
            "contract": "contracts/Storage.sol:Storage",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8329,
            "contract": "contracts/Storage.sol:Storage",
            "label": "initialPosToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8331,
            "contract": "contracts/Storage.sol:Storage",
            "label": "positionSizeWETH",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8333,
            "contract": "contracts/Storage.sol:Storage",
            "label": "openPrice",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 8335,
            "contract": "contracts/Storage.sol:Storage",
            "label": "buy",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 8337,
            "contract": "contracts/Storage.sol:Storage",
            "label": "leverage",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 8339,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 8341,
            "contract": "contracts/Storage.sol:Storage",
            "label": "sl",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_struct(TradeInfo)8355_storage": {
        "encoding": "inplace",
        "label": "struct StorageInterface.TradeInfo",
        "members": [
          {
            "astId": 8344,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8346,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tokenPriceWETH",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 8348,
            "contract": "contracts/Storage.sol:Storage",
            "label": "openInterestWETH",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 8350,
            "contract": "contracts/Storage.sol:Storage",
            "label": "tpLastUpdated",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 8352,
            "contract": "contracts/Storage.sol:Storage",
            "label": "slLastUpdated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 8354,
            "contract": "contracts/Storage.sol:Storage",
            "label": "beingMarketClosed",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(Trader)628_storage": {
        "encoding": "inplace",
        "label": "struct Storage.Trader",
        "members": [
          {
            "astId": 623,
            "contract": "contracts/Storage.sol:Storage",
            "label": "leverageUnlocked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 625,
            "contract": "contracts/Storage.sol:Storage",
            "label": "referral",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 627,
            "contract": "contracts/Storage.sol:Storage",
            "label": "referralRewardsTotal",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}