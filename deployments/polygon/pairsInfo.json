{
  "address": "0x15002a412C4D8dEB2F6E249Df630D259eb71D681",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "valueLong",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "valueShort",
          "type": "int256"
        }
      ],
      "name": "AccFundingFeesStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "AccRolloverFeesStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rolloverFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "fundingFees",
          "type": "int256"
        }
      ],
      "name": "FeesCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "FundingFeePerBlockPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "ManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "MaxNegativePnlOnOpenPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueAbove",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueBelow",
          "type": "uint256"
        }
      ],
      "name": "OnePercentDepthUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct PairInfos.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "PairParamsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RolloverFeePerBlockPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rollover",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "funding",
          "type": "int256"
        }
      ],
      "name": "TradeInitialAccFeesStored",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesLong",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesShort",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccFundingFeesUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getAccRolloverFeesUpdateBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getFundingFeePerBlockP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getOnePercentDepthAbove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getOnePercentDepthBelow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "getPairInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairInfos.PairParams[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accPerCollateral",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairInfos.PairRolloverFees[]",
          "name": "",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "accPerOiLong",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "accPerOiShort",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdateBlock",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairInfos.PairFundingFees[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccFundingFees",
      "outputs": [
        {
          "internalType": "int256",
          "name": "valueLong",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "valueShort",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "getRolloverFeePerBlockP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeFundingFee",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "accFundingFeesPerOi",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "endAccFundingFeesPerOi",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeFundingFeePure",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccFundingFeesPerOi",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeInitialAccRolloverFeesPerCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        }
      ],
      "name": "getTradeLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "getTradeLiquidationPricePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradeOpenedAfterUpdate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        }
      ],
      "name": "getTradePartialLiquidationPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tradeOpenInterest",
          "type": "uint256"
        }
      ],
      "name": "getTradePriceImpact",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAfterImpact",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "openPrice",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "startOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tradeOpenInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePercentDepth",
          "type": "uint256"
        }
      ],
      "name": "getTradePriceImpactPure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "priceAfterImpact",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "getTradeRolloverFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "accRolloverFeesPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endAccRolloverFeesPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "getTradeRolloverFeePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "leverage",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "getTradeValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFee",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "fundingFee",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "closingFee",
          "type": "uint256"
        }
      ],
      "name": "getTradeValuePure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNegativePnlOnOpenP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairFundingFees",
      "outputs": [
        {
          "internalType": "int256",
          "name": "accPerOiLong",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "accPerOiShort",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairParams",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "onePercentDepthAbove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "onePercentDepthBelow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rolloverFeePerBlockP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundingFeePerBlockP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairRolloverFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accPerCollateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdateBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "setFundingFeePerBlockP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        }
      ],
      "name": "setFundingFeePerBlockPArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxNegativePnlOnOpenP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueAbove",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueBelow",
          "type": "uint256"
        }
      ],
      "name": "setOnePercentDepth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "valuesAbove",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "valuesBelow",
          "type": "uint256[]"
        }
      ],
      "name": "setOnePercentDepthArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairInfos.PairParams",
          "name": "value",
          "type": "tuple"
        }
      ],
      "name": "setPairParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "onePercentDepthAbove",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "onePercentDepthBelow",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rolloverFeePerBlockP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "fundingFeePerBlockP",
              "type": "uint256"
            }
          ],
          "internalType": "struct PairInfos.PairParams[]",
          "name": "values",
          "type": "tuple[]"
        }
      ],
      "name": "setPairParamsArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setRolloverFeePerBlockP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setRolloverFeePerBlockPArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "long",
          "type": "bool"
        }
      ],
      "name": "storeTradeInitialAccFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tradeInitialAccFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rollover",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "funding",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "openedAfterUpdate",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x99631b1baf9b237bfbd114e1b83716dd75a1db043abfd39d3c7660300cf8765f",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x15002a412C4D8dEB2F6E249Df630D259eb71D681",
    "transactionIndex": 14,
    "gasUsed": "2304411",
    "logsBloom": "0x
    "blockHash": "0xecef7ee3b586bfdee11c5c08e1d0d1424f088fa9160fa8ee54fb67f882d9283f",
    "transactionHash": "0x99631b1baf9b237bfbd114e1b83716dd75a1db043abfd39d3c7660300cf8765f",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 41260031,
        "transactionHash": "0x99631b1baf9b237bfbd114e1b83716dd75a1db043abfd39d3c7660300cf8765f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000027b4ded94c93d000000000000000000000000000000000000000000000000026a8aadcf81f2d2a000000000000000000000000000000000000000000002244611d969c79a871410000000000000000000000000000000000000000000000002680f5fe1ed2995a00000000000000000000000000000000000000000000224461454b7b52f50511",
        "logIndex": 48,
        "blockHash": "0xecef7ee3b586bfdee11c5c08e1d0d1424f088fa9160fa8ee54fb67f882d9283f"
      }
    ],
    "blockNumber": 41260031,
    "cumulativeGasUsed": "7671187",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15D862D44BCf0918012575CB7fd660C1A74f374A"
  ],
  "numDeployments": 1,
  "solcInputHash": "063f6380a44fddc0413748fbb84bc8a5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"name\":\"AccFundingFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"AccRolloverFeesStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rolloverFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"fundingFees\",\"type\":\"int256\"}],\"name\":\"FeesCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"FundingFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MaxNegativePnlOnOpenPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"OnePercentDepthUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct PairInfos.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"PairParamsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RolloverFeePerBlockPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"}],\"name\":\"TradeInitialAccFeesStored\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesLong\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesShort\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccFundingFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getAccRolloverFeesUpdateBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getFundingFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthAbove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getOnePercentDepthBelow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"getPairInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairInfos.PairParams[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct PairInfos.PairRolloverFees[]\",\"name\":\"\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"internalType\":\"struct PairInfos.PairFundingFees[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"valueLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"valueShort\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getPendingAccRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"getRolloverFeePerBlockP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFee\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"accFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"endAccFundingFeesPerOi\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeFundingFeePure\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccFundingFeesPerOi\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeInitialAccRolloverFeesPerCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"}],\"name\":\"getTradeLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"getTradeLiquidationPricePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradeOpenedAfterUpdate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"}],\"name\":\"getTradePartialLiquidationPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpact\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"startOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tradeOpenInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepth\",\"type\":\"uint256\"}],\"name\":\"getTradePriceImpactPure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceAfterImpact\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"accRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endAccRolloverFeesPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"getTradeRolloverFeePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFee\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"fundingFee\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"closingFee\",\"type\":\"uint256\"}],\"name\":\"getTradeValuePure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNegativePnlOnOpenP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairFundingFees\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"accPerOiLong\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"accPerOiShort\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairRolloverFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accPerCollateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"setFundingFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"}],\"name\":\"setFundingFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxNegativePnlOnOpenP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueBelow\",\"type\":\"uint256\"}],\"name\":\"setOnePercentDepth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesAbove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"valuesBelow\",\"type\":\"uint256[]\"}],\"name\":\"setOnePercentDepthArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairInfos.PairParams\",\"name\":\"value\",\"type\":\"tuple\"}],\"name\":\"setPairParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"onePercentDepthAbove\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"onePercentDepthBelow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rolloverFeePerBlockP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundingFeePerBlockP\",\"type\":\"uint256\"}],\"internalType\":\"struct PairInfos.PairParams[]\",\"name\":\"values\",\"type\":\"tuple[]\"}],\"name\":\"setPairParamsArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setRolloverFeePerBlockP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setRolloverFeePerBlockPArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"long\",\"type\":\"bool\"}],\"name\":\"storeTradeInitialAccFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tradeInitialAccFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rollover\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"funding\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"openedAfterUpdate\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PairInfos.sol\":\"PairInfos\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/PairInfos.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./interfaces/UniswapRouterInterface.sol\\\";\\nimport \\\"./interfaces/TokenInterface.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/VaultInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_1.sol\\\";\\nimport \\\"./interfaces/NftRewardsInterfaceV6.sol\\\";\\n\\ncontract PairInfos {\\n    // Addresses\\n    StorageInterface immutable storageT;\\n    address public manager;\\n\\n    // Constant parameters\\n    uint constant PRECISION = 1e10; // 10 decimals\\n    uint constant LIQ_THRESHOLD_P = 90; // -90% (of collateral)\\n    uint constant PAR_LIQ_THRESHOLD_P = 80; // -90% (of collateral)\\n\\n    // Adjustable parameters\\n    uint public maxNegativePnlOnOpenP = 40 * PRECISION; // PRECISION (%)\\n\\n    // Pair parameters\\n    struct PairParams {\\n        uint onePercentDepthAbove; // WETH\\n        uint onePercentDepthBelow; // WETH\\n        uint rolloverFeePerBlockP; // PRECISION (%)\\n        uint fundingFeePerBlockP; // PRECISION (%)\\n    }\\n\\n    mapping(uint => PairParams) public pairParams;\\n\\n    // Pair acc funding fees\\n    struct PairFundingFees {\\n        int accPerOiLong; // 1e18 (WETH)\\n        int accPerOiShort; // 1e18 (WETH)\\n        uint lastUpdateBlock;\\n    }\\n\\n    mapping(uint => PairFundingFees) public pairFundingFees;\\n\\n    // Pair acc rollover fees\\n    struct PairRolloverFees {\\n        uint accPerCollateral; // 1e18 (WETH)\\n        uint lastUpdateBlock;\\n    }\\n\\n    mapping(uint => PairRolloverFees) public pairRolloverFees;\\n\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (WETH)\\n        int funding; // 1e18 (WETH)\\n        bool openedAfterUpdate;\\n    }\\n\\n    mapping(address => mapping(uint => mapping(uint => TradeInitialAccFees)))\\n        public tradeInitialAccFees;\\n\\n    // Events\\n    event ManagerUpdated(address value);\\n    event MaxNegativePnlOnOpenPUpdated(uint value);\\n\\n    event PairParamsUpdated(uint pairIndex, PairParams value);\\n    event OnePercentDepthUpdated(\\n        uint pairIndex,\\n        uint valueAbove,\\n        uint valueBelow\\n    );\\n    event RolloverFeePerBlockPUpdated(uint pairIndex, uint value);\\n    event FundingFeePerBlockPUpdated(uint pairIndex, uint value);\\n\\n    event TradeInitialAccFeesStored(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint rollover,\\n        int funding\\n    );\\n\\n    event AccFundingFeesStored(uint pairIndex, int valueLong, int valueShort);\\n    event AccRolloverFeesStored(uint pairIndex, uint value);\\n\\n    event FeesCharged(\\n        uint pairIndex,\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFees, // 1e18 (WETH)\\n        int fundingFees // 1e18 (WETH)\\n    );\\n\\n    constructor(StorageInterface _storageT) {\\n        storageT = _storageT;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"MANAGER_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyCallbacks() {\\n        require(msg.sender == address(storageT.callbacks()), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // Set manager address\\n    function setManager(address _manager) external onlyGov {\\n        manager = _manager;\\n\\n        emit ManagerUpdated(_manager);\\n    }\\n\\n    // Set max negative PnL % on trade opening\\n    function setMaxNegativePnlOnOpenP(uint value) external onlyManager {\\n        maxNegativePnlOnOpenP = value;\\n\\n        emit MaxNegativePnlOnOpenPUpdated(value);\\n    }\\n\\n    // Set parameters for pair\\n    function setPairParams(\\n        uint pairIndex,\\n        PairParams memory value\\n    ) public onlyManager {\\n        storeAccRolloverFees(pairIndex);\\n        storeAccFundingFees(pairIndex);\\n\\n        pairParams[pairIndex] = value;\\n\\n        emit PairParamsUpdated(pairIndex, value);\\n    }\\n\\n    function setPairParamsArray(\\n        uint[] memory indices,\\n        PairParams[] memory values\\n    ) external onlyManager {\\n        require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i = 0; i < indices.length; i++) {\\n            setPairParams(indices[i], values[i]);\\n        }\\n    }\\n\\n    // Set one percent depth for pair\\n    function setOnePercentDepth(\\n        uint pairIndex,\\n        uint valueAbove,\\n        uint valueBelow\\n    ) public onlyManager {\\n        PairParams storage p = pairParams[pairIndex];\\n\\n        p.onePercentDepthAbove = valueAbove;\\n        p.onePercentDepthBelow = valueBelow;\\n\\n        emit OnePercentDepthUpdated(pairIndex, valueAbove, valueBelow);\\n    }\\n\\n    function setOnePercentDepthArray(\\n        uint[] memory indices,\\n        uint[] memory valuesAbove,\\n        uint[] memory valuesBelow\\n    ) external onlyManager {\\n        require(\\n            indices.length == valuesAbove.length &&\\n                indices.length == valuesBelow.length,\\n            \\\"WRONG_LENGTH\\\"\\n        );\\n\\n        for (uint i = 0; i < indices.length; i++) {\\n            setOnePercentDepth(indices[i], valuesAbove[i], valuesBelow[i]);\\n        }\\n    }\\n\\n    // Set rollover fee for pair\\n    function setRolloverFeePerBlockP(\\n        uint pairIndex,\\n        uint value\\n    ) public onlyManager {\\n        require(value <= 25000000, \\\"TOO_HIGH\\\"); // \\u2248 100% per day\\n\\n        storeAccRolloverFees(pairIndex);\\n\\n        pairParams[pairIndex].rolloverFeePerBlockP = value;\\n\\n        emit RolloverFeePerBlockPUpdated(pairIndex, value);\\n    }\\n\\n    function setRolloverFeePerBlockPArray(\\n        uint[] memory indices,\\n        uint[] memory values\\n    ) external onlyManager {\\n        require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i = 0; i < indices.length; i++) {\\n            setRolloverFeePerBlockP(indices[i], values[i]);\\n        }\\n    }\\n\\n    // Set funding fee for pair\\n    function setFundingFeePerBlockP(uint pairIndex) public /*onlyManager*/ {\\n        _setFundingFeePerBlockP(pairIndex);\\n    }\\n\\n    function _setFundingFeePerBlockP(uint pairIndex) internal {\\n        uint value = (storageT.oracle()).getFundingFee(pairIndex);\\n        require(value <= 10000000, \\\"TOO_HIGH\\\"); // \\u2248 40% per day\\n\\n        storeAccFundingFees(pairIndex);\\n\\n        uint256 oldFee = pairParams[pairIndex].fundingFeePerBlockP;\\n        if (oldFee != value) {\\n            pairParams[pairIndex].fundingFeePerBlockP = value;\\n            emit FundingFeePerBlockPUpdated(pairIndex, value);\\n        }\\n    }\\n\\n    function setFundingFeePerBlockPArray(\\n        uint[] memory indices\\n    ) external onlyManager {\\n        // require(indices.length == values.length, \\\"WRONG_LENGTH\\\");\\n\\n        for (uint i = 0; i < indices.length; i++) {\\n            _setFundingFeePerBlockP(indices[i]);\\n        }\\n    }\\n\\n    // Store trade details when opened (acc fee values)\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external onlyCallbacks {\\n        _setFundingFeePerBlockP(pairIndex);\\n        TradeInitialAccFees storage t = tradeInitialAccFees[trader][pairIndex][\\n            index\\n        ];\\n\\n        t.rollover = getPendingAccRolloverFees(pairIndex);\\n\\n        t.funding = long\\n            ? pairFundingFees[pairIndex].accPerOiLong\\n            : pairFundingFees[pairIndex].accPerOiShort;\\n\\n        t.openedAfterUpdate = true;\\n\\n        emit TradeInitialAccFeesStored(\\n            trader,\\n            pairIndex,\\n            index,\\n            t.rollover,\\n            t.funding\\n        );\\n    }\\n\\n    // Acc rollover fees (store right before fee % update)\\n    function storeAccRolloverFees(uint pairIndex) private {\\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\\n\\n        r.accPerCollateral = getPendingAccRolloverFees(pairIndex);\\n        r.lastUpdateBlock = block.number;\\n\\n        emit AccRolloverFeesStored(pairIndex, r.accPerCollateral);\\n    }\\n\\n    function getPendingAccRolloverFees(\\n        uint pairIndex\\n    ) public view returns (uint) {\\n        // 1e18 (WETH)\\n        PairRolloverFees storage r = pairRolloverFees[pairIndex];\\n\\n        return\\n            r.accPerCollateral +\\n            ((block.number - r.lastUpdateBlock) *\\n                pairParams[pairIndex].rolloverFeePerBlockP *\\n                1e18) /\\n            PRECISION /\\n            100;\\n    }\\n\\n    // Acc funding fees (store right before trades opened / closed and fee % update)\\n    function storeAccFundingFees(uint pairIndex) private {\\n        PairFundingFees storage f = pairFundingFees[pairIndex];\\n\\n        (f.accPerOiLong, f.accPerOiShort) = getPendingAccFundingFees(pairIndex);\\n        f.lastUpdateBlock = block.number;\\n\\n        emit AccFundingFeesStored(pairIndex, f.accPerOiLong, f.accPerOiShort);\\n    }\\n\\n    function getPendingAccFundingFees(\\n        uint pairIndex\\n    ) public view returns (int valueLong, int valueShort) {\\n        PairFundingFees storage f = pairFundingFees[pairIndex];\\n\\n        valueLong = f.accPerOiLong;\\n        valueShort = f.accPerOiShort;\\n\\n        int openInterestWETHLong = int(storageT.openInterestWETH(pairIndex, 0));\\n        int openInterestWETHShort = int(\\n            storageT.openInterestWETH(pairIndex, 1)\\n        );\\n        int fundingFeesPaidByLongs = ((openInterestWETHLong -\\n            openInterestWETHShort) *\\n            int(block.number - f.lastUpdateBlock) *\\n            int(pairParams[pairIndex].fundingFeePerBlockP)) /\\n            int(PRECISION) /\\n            100;\\n\\n        if (openInterestWETHLong > 0) {\\n            valueLong += (fundingFeesPaidByLongs * 1e18) / openInterestWETHLong;\\n        }\\n\\n        if (openInterestWETHShort > 0) {\\n            valueShort +=\\n                (fundingFeesPaidByLongs * 1e18 * (-1)) /\\n                openInterestWETHShort;\\n        }\\n    }\\n\\n    // Dynamic price impact value on trade opening\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint tradeOpenInterest // 1e18 (WETH)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = getTradePriceImpactPure(\\n            openPrice,\\n            long,\\n            storageT.openInterestWETH(pairIndex, long ? 0 : 1),\\n            tradeOpenInterest,\\n            long\\n                ? pairParams[pairIndex].onePercentDepthAbove\\n                : pairParams[pairIndex].onePercentDepthBelow\\n        );\\n    }\\n\\n    function getTradePriceImpactPure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint startOpenInterest, // 1e18 (WETH)\\n        uint tradeOpenInterest, // 1e18 (WETH)\\n        uint onePercentDepth\\n    )\\n        public\\n        pure\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        )\\n    {\\n        if (onePercentDepth == 0) {\\n            return (0, openPrice);\\n        }\\n\\n        priceImpactP =\\n            ((startOpenInterest + tradeOpenInterest / 2) * PRECISION) /\\n            1e18 /\\n            onePercentDepth;\\n\\n        uint priceImpact = (priceImpactP * openPrice) / PRECISION / 100;\\n\\n        priceAfterImpact = long\\n            ? openPrice + priceImpact\\n            : openPrice - priceImpact;\\n    }\\n\\n    // Rollover fee value\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (WETH)\\n    ) public view returns (uint) {\\n        // 1e18 (WETH)\\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][\\n            index\\n        ];\\n\\n        if (!t.openedAfterUpdate) {\\n            return 0;\\n        }\\n        return\\n            getTradeRolloverFeePure(\\n                t.rollover,\\n                getPendingAccRolloverFees(pairIndex),\\n                collateral\\n            );\\n    }\\n\\n    function getTradeRolloverFeePure(\\n        uint accRolloverFeesPerCollateral,\\n        uint endAccRolloverFeesPerCollateral,\\n        uint collateral // 1e18 (WETH)\\n    ) public pure returns (uint) {\\n        // 1e18 (WETH)\\n        return\\n            ((endAccRolloverFeesPerCollateral - accRolloverFeesPerCollateral) *\\n                collateral) / 1e18;\\n    }\\n\\n    // Funding fee value\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage\\n    )\\n        public\\n        view\\n        returns (\\n            int // 1e18 (WETH) | Positive => Fee, Negative => Reward\\n        )\\n    {\\n        TradeInitialAccFees memory t = tradeInitialAccFees[trader][pairIndex][\\n            index\\n        ];\\n\\n        if (!t.openedAfterUpdate) {\\n            return 0;\\n        }\\n        (int pendingLong, int pendingShort) = getPendingAccFundingFees(\\n            pairIndex\\n        );\\n\\n        return\\n            getTradeFundingFeePure(\\n                t.funding,\\n                long ? pendingLong : pendingShort,\\n                collateral,\\n                leverage\\n            );\\n    }\\n\\n    function getTradeFundingFeePure(\\n        int accFundingFeesPerOi,\\n        int endAccFundingFeesPerOi,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage\\n    )\\n        public\\n        pure\\n        returns (\\n            int // 1e18 (WETH) | Positive => Fee, Negative => Reward\\n        )\\n    {\\n        return\\n            ((endAccFundingFeesPerOi - accFundingFeesPerOi) *\\n                int(collateral) *\\n                int(leverage)) / 1e18;\\n    }\\n\\n    // Liquidation price value after rollover and funding fees\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage\\n    ) external view returns (uint) {\\n        // PRECISION\\n        return\\n            getTradeLiquidationPricePure(\\n                openPrice,\\n                long,\\n                collateral,\\n                leverage,\\n                getTradeRolloverFee(trader, pairIndex, index, collateral),\\n                getTradeFundingFee(\\n                    trader,\\n                    pairIndex,\\n                    index,\\n                    long,\\n                    collateral,\\n                    leverage\\n                )\\n            );\\n    }\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee // 1e18 (WETH)\\n    ) public pure returns (uint) {\\n        // PRECISION\\n        int liqPriceDistance = (int(openPrice) *\\n            (int((collateral * PAR_LIQ_THRESHOLD_P) / 100) -\\n                int(rolloverFee) -\\n                fundingFee)) /\\n            int(collateral) /\\n            int(leverage);\\n\\n        int liqPrice = long\\n            ? int(openPrice) - liqPriceDistance\\n            : int(openPrice) + liqPriceDistance;\\n\\n        return liqPrice > 0 ? uint(liqPrice) : 0;\\n    }\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee // 1e18 (WETH)\\n    ) public pure returns (uint) {\\n        // PRECISION\\n        int liqPriceDistance = (int(openPrice) *\\n            (int((collateral * LIQ_THRESHOLD_P) / 100) -\\n                int(rolloverFee) -\\n                fundingFee)) /\\n            int(collateral) /\\n            int(leverage);\\n\\n        int liqPrice = long\\n            ? int(openPrice) - liqPriceDistance\\n            : int(openPrice) + liqPriceDistance;\\n\\n        return liqPrice > 0 ? uint(liqPrice) : 0;\\n    }\\n\\n    // WETH sent to trader after PnL and fees\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (WETH)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (WETH)\\n    ) external onlyCallbacks returns (uint amount) {\\n        // 1e18 (WETH)\\n        _setFundingFeePerBlockP(pairIndex);\\n\\n        uint r = getTradeRolloverFee(trader, pairIndex, index, collateral);\\n        int f = getTradeFundingFee(\\n            trader,\\n            pairIndex,\\n            index,\\n            long,\\n            collateral,\\n            leverage\\n        );\\n\\n        amount = getTradeValuePure(collateral, percentProfit, r, f, closingFee);\\n\\n        emit FeesCharged(\\n            pairIndex,\\n            long,\\n            collateral,\\n            leverage,\\n            percentProfit,\\n            r,\\n            f\\n        );\\n    }\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) public view returns (uint) {\\n        // 1e18 (WETH)\\n        int value = int(collateral) +\\n            (int(collateral) * percentProfit) /\\n            int(PRECISION) /\\n            100 -\\n            int(rolloverFee) -\\n            fundingFee;\\n\\n        if (value <= (int(collateral) * int(100 - LIQ_THRESHOLD_P)) / 100) {\\n            return 0;\\n        }\\n        value -= int(closingFee);\\n\\n        return value > 0 ? uint(value) : 0;\\n    }\\n\\n    // Useful getters\\n    function getPairInfos(\\n        uint[] memory indices\\n    )\\n        external\\n        view\\n        returns (\\n            PairParams[] memory,\\n            PairRolloverFees[] memory,\\n            PairFundingFees[] memory\\n        )\\n    {\\n        PairParams[] memory params = new PairParams[](indices.length);\\n        PairRolloverFees[] memory rolloverFees = new PairRolloverFees[](\\n            indices.length\\n        );\\n        PairFundingFees[] memory fundingFees = new PairFundingFees[](\\n            indices.length\\n        );\\n\\n        for (uint i = 0; i < indices.length; i++) {\\n            uint index = indices[i];\\n\\n            params[i] = pairParams[index];\\n            rolloverFees[i] = pairRolloverFees[index];\\n            fundingFees[i] = pairFundingFees[index];\\n        }\\n\\n        return (params, rolloverFees, fundingFees);\\n    }\\n\\n    function getOnePercentDepthAbove(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairParams[pairIndex].onePercentDepthAbove;\\n    }\\n\\n    function getOnePercentDepthBelow(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairParams[pairIndex].onePercentDepthBelow;\\n    }\\n\\n    function getRolloverFeePerBlockP(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairParams[pairIndex].rolloverFeePerBlockP;\\n    }\\n\\n    function getFundingFeePerBlockP(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairParams[pairIndex].fundingFeePerBlockP;\\n    }\\n\\n    function getAccRolloverFees(uint pairIndex) external view returns (uint) {\\n        return pairRolloverFees[pairIndex].accPerCollateral;\\n    }\\n\\n    function getAccRolloverFeesUpdateBlock(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairRolloverFees[pairIndex].lastUpdateBlock;\\n    }\\n\\n    function getAccFundingFeesLong(uint pairIndex) external view returns (int) {\\n        return pairFundingFees[pairIndex].accPerOiLong;\\n    }\\n\\n    function getAccFundingFeesShort(\\n        uint pairIndex\\n    ) external view returns (int) {\\n        return pairFundingFees[pairIndex].accPerOiShort;\\n    }\\n\\n    function getAccFundingFeesUpdateBlock(\\n        uint pairIndex\\n    ) external view returns (uint) {\\n        return pairFundingFees[pairIndex].lastUpdateBlock;\\n    }\\n\\n    function getTradeInitialAccRolloverFeesPerCollateral(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (uint) {\\n        return tradeInitialAccFees[trader][pairIndex][index].rollover;\\n    }\\n\\n    function getTradeInitialAccFundingFeesPerOi(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (int) {\\n        return tradeInitialAccFees[trader][pairIndex][index].funding;\\n    }\\n\\n    function getTradeOpenedAfterUpdate(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (bool) {\\n        return tradeInitialAccFees[trader][pairIndex][index].openedAfterUpdate;\\n    }\\n}\\n\",\"keccak256\":\"0x188f5a65b8035f1a41f57c1f9906d555a7887fd795878bd38dec27231869d55c\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2db40cc6e09498c8ed9453e3344a63f10dd2bd807df042c1bc657ddb2e08d124\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./NftRewardsInterfaceV6.sol\\\";\\n\\ninterface AggregatorInterfaceV1_1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE,\\n        UPDATE_SL\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\\n\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n\\n    function unregisterPendingSlOrder(uint orderId) external;\\n\\n    struct PendingSl {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice;\\n        bool buy;\\n        uint newSl;\\n    }\\n}\\n\",\"keccak256\":\"0xdca1370bd5b47fe1d3d2a5fe3539a5f98cef7b9ceb27d8ee5158f321ed3cdaf0\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xee98e4fbf009e257228d09fe8741b67c7e01247a83cff8ae73ccca4738624ff4\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xddaaad1ec0ae5742e39ffff1c2c85404729e3be57479f73b190c1d0492dcb01d\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf8f2f1f9d4faa342be365faaa63ac29b21c83e23ea6d8aca5aeec9b6e45f3ca0\",\"license\":\"MIT\"},\"contracts/interfaces/NftRewardsInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa5fff0932e0bd3d5b4506ea934f81dffc1c586042c6e0b31d1b1891ca6eba639\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x32a4e5c386170b9da2ec3cd5ac53a4c82c64cfe94f41990f635cd18a73eccf73\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf439723f853b013721f9cc98c3e9ace8f63d178512916f35307be17c090b2a12\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n}\\n\",\"keccak256\":\"0x7404086c41bf7d149aec1e867862091338a331ad5f70464885b3783468914e65\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x7a399fcb853dd13380cdcb8ec4fbfa3f37a559d521c5e45505bae5a1033f3604\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface UniswapRouterInterface {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0xa6247e4240f1769c9b0842a4868f38ef020a84d3099233745e359da3b7d7eb0a\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\ninterface VaultInterface {\\n    function sendWETHToTrader(address, uint) external;\\n\\n    function receiveWETHFromTrader(address, uint, uint) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function distributeRewardWETH(uint) external;\\n}\\n\",\"keccak256\":\"0x57e5b0d1c855799be22d4a5a98b34e61fd71e3200e7a6b44c28528ffeb59c096\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052620000166402540be40060286200005b565b6001553480156200002657600080fd5b506040516200294e3803806200294e833981016040819052620000499162000089565b6001600160a01b0316608052620000bb565b60008160001904831182151516156200008457634e487b7160e01b600052601160045260246000fd5b500290565b6000602082840312156200009c57600080fd5b81516001600160a01b0381168114620000b457600080fd5b9392505050565b60805161284d62000101600039600081816107f5015281816110da015281816113450152818161165f015281816118d10152818161196f0152611ac0015261284d6000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c80636bcbe86011610151578063b74243ba116100c3578063ee52e5fe11610087578063ee52e5fe146106fc578063f0270f331461071c578063f69606541461073f578063f6c50efe14610752578063fcc37c8714610765578063fe3cfd8c1461077857600080fd5b8063b74243ba1461067c578063bf1db1f61461068f578063c22ff7bf146106b6578063cfc23e9e146106c9578063d0ebdbe7146106e957600080fd5b806380f6cfc21161011557806380f6cfc2146105dd5780639c625e1e146105e65780639cf9c939146105f9578063a77e8e2a14610643578063ab21a05c14610656578063ab7baf041461066957600080fd5b80636bcbe8601461057e5780636ceaca67146105915780636f6af697146105a45780637884274f146105b75780637ea95f32146105ca57600080fd5b806331556d2f116101ea57806342dee1ad116101ae57806342dee1ad1461043257806346dbab3614610489578063481c6a75146104cd57806358f796bc146104f85780635ed5804e1461050b5780636bc84d591461056b57600080fd5b806331556d2f146103c2578063338139ad146103d5578063351533e7146103f95780633598b0cc1461040c5780633df7fd721461041f57600080fd5b806312fdefd91161023157806312fdefd91461031e57806321adc48f146103465780632b180a7d146103695780632d0a5fd41461038c5780632d15e4e01461039f57600080fd5b80630dd34f571461026e5780630e0052fc146102965780630e6bc39a146102c75780630ea77770146102dc57806312b6566e146102fe575b600080fd5b61028161027c366004611d17565b6107b9565b60405190151581526020015b60405180910390f35b6102b96102a4366004611d4c565b60009081526004602052604090206001015490565b60405190815260200161028d565b6102da6102d5366004611d7a565b6107f3565b005b6102ef6102ea366004611e96565b610992565b60405161028d93929190611f1b565b6102b961030c366004611d4c565b60009081526004602052604090205490565b61033161032c366004611fd6565b610c3e565b6040805192835260208301919091520161028d565b6102b9610354366004611d4c565b60009081526003602052604090206001015490565b6102b9610377366004611d4c565b60009081526002602052604090206001015490565b6102da61039a366004611e96565b610cef565b6102b96103ad366004611d4c565b60009081526003602052604090206002015490565b6102da6103d0366004612081565b610d5d565b6102b96103e3366004611d4c565b6000908152600260208190526040909120015490565b6102da610407366004612146565b610e07565b6102da61041a366004611d4c565b610ed9565b6102da61042d3660046121cd565b610ee5565b610469610440366004611d4c565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161028d565b6102b9610497366004611d17565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020600101549392505050565b6000546104e0906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b6102b96105063660046121fa565b610f92565b61054e610519366004611d17565b600560209081526000938452604080852082529284528284209052825290208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161028d565b6102b9610579366004612235565b611013565b6102b961058c36600461229a565b611042565b6102b961059f3660046122e8565b6110d6565b6102da6105b2366004612354565b611230565b6102da6105c5366004611d4c565b6112d5565b6103316105d83660046123b7565b61133b565b6102b960015481565b6102b96105f43660046123f4565b611428565b610628610607366004611d4c565b60036020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161028d565b6102b9610651366004612420565b611452565b6102b9610664366004611d4c565b611490565b6102b961067736600461229a565b611503565b6102da61068a366004612452565b611517565b61033161069d366004611d4c565b6004602052600090815260409020805460019091015482565b6102b96106c4366004612474565b6115b9565b6102b96106d7366004611d4c565b60009081526002602052604090205490565b6102da6106f73660046124af565b61165d565b6102b961070a366004611d4c565b60009081526003602052604090205490565b6102b961072a366004611d4c565b60009081526002602052604090206003015490565b6102da61074d3660046123f4565b611778565b6102b96107603660046124cc565b611802565b610331610773366004611d4c565b61189c565b6102b9610786366004611d17565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020549392505050565b6001600160a01b0383166000908152600560209081526040808320858452825280832084845290915290206002015460ff165b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190612526565b6001600160a01b0316336001600160a01b0316146108ad5760405162461bcd60e51b81526004016108a490612543565b60405180910390fd5b6108b683611abc565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845290915290206108ea84611490565b81558161090857600084815260036020526040902060010154610918565b6000848152600360205260409020545b600182810182905560028301805460ff191690911790558154604080516001600160a01b038916815260208101889052908101869052606081019190915260808101919091527f4e58eed9e01cebfd4256725d6d1ce9fa694faa7ac5312e75af02360f453d048e9060a00160405180910390a15050505050565b6060806060600084516001600160401b038111156109b2576109b2611dc2565b604051908082528060200260200182016040528015610a0e57816020015b6109fb6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816109d05790505b509050600085516001600160401b03811115610a2c57610a2c611dc2565b604051908082528060200260200182016040528015610a7157816020015b6040805180820190915260008082526020820152815260200190600190039081610a4a5790505b509050600086516001600160401b03811115610a8f57610a8f611dc2565b604051908082528060200260200182016040528015610ae457816020015b610ad160405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610aad5790505b50905060005b8751811015610c30576000888281518110610b0757610b0761256b565b6020026020010151905060026000828152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050858381518110610b6957610b6961256b565b60200260200101819052506004600082815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050848381518110610bb857610bb861256b565b6020026020010181905250600360008281526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050838381518110610c1157610c1161256b565b6020026020010181905250508080610c2890612597565b915050610aea565b509196909550909350915050565b60008082600003610c5457506000905085610ce5565b82670de0b6b3a76400006402540be400610c6f6002886125c6565b610c7990896125da565b610c8391906125f2565b610c8d91906125c6565b610c9791906125c6565b9150600060646402540be400610cad8a866125f2565b610cb791906125c6565b610cc191906125c6565b905086610cd757610cd28189612611565b610ce1565b610ce181896125da565b9150505b9550959350505050565b6000546001600160a01b03163314610d195760405162461bcd60e51b81526004016108a490612628565b60005b8151811015610d5957610d47828281518110610d3a57610d3a61256b565b6020026020010151611abc565b80610d5181612597565b915050610d1c565b5050565b6000546001600160a01b03163314610d875760405162461bcd60e51b81526004016108a490612628565b8051825114610da85760405162461bcd60e51b81526004016108a49061264e565b60005b8251811015610e0257610df0838281518110610dc957610dc961256b565b6020026020010151838381518110610de357610de361256b565b6020026020010151610ee5565b80610dfa81612597565b915050610dab565b505050565b6000546001600160a01b03163314610e315760405162461bcd60e51b81526004016108a490612628565b81518351148015610e43575080518351145b610e5f5760405162461bcd60e51b81526004016108a49061264e565b60005b8351811015610ed357610ec1848281518110610e8057610e8061256b565b6020026020010151848381518110610e9a57610e9a61256b565b6020026020010151848481518110610eb457610eb461256b565b6020026020010151611778565b80610ecb81612597565b915050610e62565b50505050565b610ee281611abc565b50565b6000546001600160a01b03163314610f0f5760405162461bcd60e51b81526004016108a490612628565b610f1882611c48565b610f2182611c9f565b6000828152600260208181526040928390208451815590840151600182015582840151918101919091556060830151600390910155517f901e66575b0aecca6e394d488bfe990ff28995f6da67ef2fe1d6c900b6573a0390610f869084908490612674565b60405180910390a15050565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845282528083208151606081018352815481526001820154938101939093526002015460ff161515908201819052610ff257600091505061100b565b80516110079061100187611490565b85611428565b9150505b949350505050565b6000611036858585856110288d8d8d8b610f92565b61058c8e8e8e8d8d8d611802565b98975050505050505050565b600080848684866064611056605a856125f2565b61106091906125c6565b61106a91906126a9565b61107491906126a9565b61107e908b6126e8565b611088919061276d565b611092919061276d565b90506000876110aa576110a5828a61279b565b6110b4565b6110b4828a6126a9565b9050600081136110c55760006110c7565b805b925050505b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190612526565b6001600160a01b0316336001600160a01b0316146111895760405162461bcd60e51b81526004016108a490612543565b61119288611abc565b60006111a08a8a8a89610f92565b905060006111b28b8b8b8b8b8b611802565b90506111c187868484886115b9565b604080518c81528a15156020820152908101899052606081018890526080810187905260a0810184905260c081018390529093507f3a484d35e7358ad950e494938ebbac2c1319c2b76d162112f51d66752244dde39060e00160405180910390a1505098975050505050505050565b6000546001600160a01b0316331461125a5760405162461bcd60e51b81526004016108a490612628565b805182511461127b5760405162461bcd60e51b81526004016108a49061264e565b60005b8251811015610e02576112c383828151811061129c5761129c61256b565b60200260200101518383815181106112b6576112b661256b565b6020026020010151611517565b806112cd81612597565b91505061127e565b6000546001600160a01b031633146112ff5760405162461bcd60e51b81526004016108a490612628565b60018190556040518181527f5ba729b89796f40d260b117b8654dc301b1d9f7ec17a1e378ae31e4c70b6d2c0906020015b60405180910390a150565b60008061141b86857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377a9fdcf898961137f576001611382565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa1580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea91906127dc565b86886114075760008a815260026020526040902060010154610c3e565b60008a815260026020526040902054610c3e565b9097909650945050505050565b6000670de0b6b3a76400008261143e8686612611565b61144891906125f2565b61100b91906125c6565b6000670de0b6b3a7640000828461146988886126a9565b61147391906126e8565b61147d91906126e8565b611487919061276d565b95945050505050565b60008181526004602090815260408083206002928390529083209091015460018201546064916402540be400916114c79043612611565b6114d191906125f2565b6114e390670de0b6b3a76400006125f2565b6114ed91906125c6565b6114f791906125c6565b81546107ec91906125da565b6000808486848660646110566050856125f2565b6000546001600160a01b031633146115415760405162461bcd60e51b81526004016108a490612628565b63017d78408111156115655760405162461bcd60e51b81526004016108a4906127f5565b61156e82611c48565b60008281526002602081815260409283902090910183905581518481529081018390527f048ce436ab4f2632f2aac62af26be3383ebdf5efc9a63f0bbeb6d6c9762d70899101610f86565b600080838560646402540be4006115d08a8c6126e8565b6115da919061276d565b6115e4919061276d565b6115ee908a61279b565b6115f891906126a9565b61160291906126a9565b90506064611611605a82612611565b61161b90896126e8565b611625919061276d565b8113611635576000915050611487565b61163f83826126a9565b905060008113611650576000611652565b805b979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612526565b6001600160a01b0316336001600160a01b03161461172a5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b60448201526064016108a4565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d90602001611330565b6000546001600160a01b031633146117a25760405162461bcd60e51b81526004016108a490612628565b6000838152600260209081526040918290208481556001810184905582518681529182018590529181018390527f1daeaff85d4d7cfda495ef83720a04b81df77e38711ca570061e16efa6ffa2759060600160405180910390a150505050565b6001600160a01b0386166000908152600560209081526040808320888452825280832087845282528083208151606081018352815481526001820154938101939093526002015460ff1615159082018190526118625760009150506110cc565b60008061186e8961189c565b9150915061188e8360200151886118855782611887565b835b8888611452565b9a9950505050505050505050565b6000818152600360205260408082208054600182015492516377a9fdcf60e01b815260048101869052602481018590529093907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906377a9fdcf90604401602060405180830381865afa158015611920573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194491906127dc565b6040516377a9fdcf60e01b815260048101879052600160248201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906377a9fdcf90604401602060405180830381865afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906127dc565b9050600060646402540be400600260008a815260200190815260200160002060030154866002015443611a0d9190612611565b611a1786886126a9565b611a2191906126e8565b611a2b91906126e8565b611a35919061276d565b611a3f919061276d565b90506000831315611a745782611a5d82670de0b6b3a76400006126e8565b611a67919061276d565b611a71908761279b565b95505b6000821315611ab35781611a9082670de0b6b3a76400006126e8565b611a9c906000196126e8565b611aa6919061276d565b611ab0908661279b565b94505b50505050915091565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190612526565b6001600160a01b03166380463406836040518263ffffffff1660e01b8152600401611b6d91815260200190565b602060405180830381865afa158015611b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bae91906127dc565b905062989680811115611bd35760405162461bcd60e51b81526004016108a4906127f5565b611bdc82611c9f565b600082815260026020526040902060030154818114610e025760008381526002602090815260409182902060030184905581518581529081018490527fbe762e88e6ff669d272010f163dfb3c6d389b16831c73e10f95860b2e4f15298910160405180910390a1505050565b6000818152600460205260409020611c5f82611490565b8082554360018301556040805184815260208101929092527f66ae41afb9d1762b0b5f1a431a9e5c767128a1bec9ecb20e1ef9dba7dc3663d69101610f86565b6000818152600360205260409020611cb68261189c565b600183018190558183554360028401556040805185815260208101939093528201527fc08ace100a8e3b7186ad5fcb68a0b9e7e0bd60aa466cdba34932fa0513353c6490606001610f86565b6001600160a01b0381168114610ee257600080fd5b600080600060608486031215611d2c57600080fd5b8335611d3781611d02565b95602085013595506040909401359392505050565b600060208284031215611d5e57600080fd5b5035919050565b80358015158114611d7557600080fd5b919050565b60008060008060808587031215611d9057600080fd5b8435611d9b81611d02565b93506020850135925060408501359150611db760608601611d65565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e0057611e00611dc2565b604052919050565b60006001600160401b03821115611e2157611e21611dc2565b5060051b60200190565b600082601f830112611e3c57600080fd5b81356020611e51611e4c83611e08565b611dd8565b82815260059290921b84018101918181019086841115611e7057600080fd5b8286015b84811015611e8b5780358352918301918301611e74565b509695505050505050565b600060208284031215611ea857600080fd5b81356001600160401b03811115611ebe57600080fd5b61100b84828501611e2b565b600081518084526020808501945080840160005b83811015611f105781518051885283810151848901526040908101519088015260609096019590820190600101611ede565b509495945050505050565b60608082528451908201819052600090608090818401906020808901855b83811015611f7d57611f6d858351805182526020810151602083015260408101516040830152606081015160608301525050565b9385019390820190600101611f39565b5050858303818701528751808452928101935087810192915060005b82811015611fc0578351805186528201518286015260409094019392810192600101611f99565b5050505082810360408401526110078185611eca565b600080600080600060a08688031215611fee57600080fd5b85359450611ffe60208701611d65565b94979496505050506040830135926060810135926080909101359150565b60006080828403121561202e57600080fd5b604051608081018181106001600160401b038211171561205057612050611dc2565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000806040838503121561209457600080fd5b82356001600160401b03808211156120ab57600080fd5b6120b786838701611e2b565b93506020915081850135818111156120ce57600080fd5b85019050601f810186136120e157600080fd5b80356120ef611e4c82611e08565b81815260079190911b8201830190838101908883111561210e57600080fd5b928401925b8284101561213757612125898561201c565b82528482019150608084019350612113565b80955050505050509250929050565b60008060006060848603121561215b57600080fd5b83356001600160401b038082111561217257600080fd5b61217e87838801611e2b565b9450602086013591508082111561219457600080fd5b6121a087838801611e2b565b935060408601359150808211156121b657600080fd5b506121c386828701611e2b565b9150509250925092565b60008060a083850312156121e057600080fd5b823591506121f1846020850161201c565b90509250929050565b6000806000806080858703121561221057600080fd5b843561221b81611d02565b966020860135965060408601359560600135945092505050565b600080600080600080600060e0888a03121561225057600080fd5b873561225b81611d02565b965060208801359550604088013594506060880135935061227e60808901611d65565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c087890312156122b357600080fd5b863595506122c360208801611d65565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600080600080610100898b03121561230557600080fd5b883561231081611d02565b9750602089013596506040890135955061232c60608a01611d65565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806040838503121561236757600080fd5b82356001600160401b038082111561237e57600080fd5b61238a86838701611e2b565b935060208501359150808211156123a057600080fd5b506123ad85828601611e2b565b9150509250929050565b600080600080608085870312156123cd57600080fd5b84359350602085013592506123e460408601611d65565b9396929550929360600135925050565b60008060006060848603121561240957600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561243657600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561246557600080fd5b50508035926020909101359150565b600080600080600060a0868803121561248c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156124c157600080fd5b81356107ec81611d02565b60008060008060008060c087890312156124e557600080fd5b86356124f081611d02565b9550602087013594506040870135935061250c60608801611d65565b92506080870135915060a087013590509295509295509295565b60006020828403121561253857600080fd5b81516107ec81611d02565b6020808252600e908201526d43414c4c4241434b535f4f4e4c5960901b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125a9576125a9612581565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826125d5576125d56125b0565b500490565b600082198211156125ed576125ed612581565b500190565b600081600019048311821515161561260c5761260c612581565b500290565b60008282101561262357612623612581565b500390565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b82815260a081016107ec6020830184805182526020810151602083015260408101516040830152606081015160608301525050565b60008083128015600160ff1b8501841216156126c7576126c7612581565b6001600160ff1b03840183138116156126e2576126e2612581565b50500390565b60006001600160ff1b038184138284138082168684048611161561270e5761270e612581565b600160ff1b600087128281168783058912161561272d5761272d612581565b6000871292508782058712848416161561274957612749612581565b8785058712818416161561275f5761275f612581565b505050929093029392505050565b60008261277c5761277c6125b0565b600160ff1b82146000198414161561279657612796612581565b500590565b600080821280156001600160ff1b03849003851316156127bd576127bd612581565b600160ff1b83900384128116156127d6576127d6612581565b50500190565b6000602082840312156127ee57600080fd5b5051919050565b6020808252600890820152670a89e9ebe90928e960c31b60408201526060019056fea26469706673582212208e5c9472c09c77cb90f80982bc5382abf7866edd2cdd5dc026776a9b85c0757764736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102695760003560e01c80636bcbe86011610151578063b74243ba116100c3578063ee52e5fe11610087578063ee52e5fe146106fc578063f0270f331461071c578063f69606541461073f578063f6c50efe14610752578063fcc37c8714610765578063fe3cfd8c1461077857600080fd5b8063b74243ba1461067c578063bf1db1f61461068f578063c22ff7bf146106b6578063cfc23e9e146106c9578063d0ebdbe7146106e957600080fd5b806380f6cfc21161011557806380f6cfc2146105dd5780639c625e1e146105e65780639cf9c939146105f9578063a77e8e2a14610643578063ab21a05c14610656578063ab7baf041461066957600080fd5b80636bcbe8601461057e5780636ceaca67146105915780636f6af697146105a45780637884274f146105b75780637ea95f32146105ca57600080fd5b806331556d2f116101ea57806342dee1ad116101ae57806342dee1ad1461043257806346dbab3614610489578063481c6a75146104cd57806358f796bc146104f85780635ed5804e1461050b5780636bc84d591461056b57600080fd5b806331556d2f146103c2578063338139ad146103d5578063351533e7146103f95780633598b0cc1461040c5780633df7fd721461041f57600080fd5b806312fdefd91161023157806312fdefd91461031e57806321adc48f146103465780632b180a7d146103695780632d0a5fd41461038c5780632d15e4e01461039f57600080fd5b80630dd34f571461026e5780630e0052fc146102965780630e6bc39a146102c75780630ea77770146102dc57806312b6566e146102fe575b600080fd5b61028161027c366004611d17565b6107b9565b60405190151581526020015b60405180910390f35b6102b96102a4366004611d4c565b60009081526004602052604090206001015490565b60405190815260200161028d565b6102da6102d5366004611d7a565b6107f3565b005b6102ef6102ea366004611e96565b610992565b60405161028d93929190611f1b565b6102b961030c366004611d4c565b60009081526004602052604090205490565b61033161032c366004611fd6565b610c3e565b6040805192835260208301919091520161028d565b6102b9610354366004611d4c565b60009081526003602052604090206001015490565b6102b9610377366004611d4c565b60009081526002602052604090206001015490565b6102da61039a366004611e96565b610cef565b6102b96103ad366004611d4c565b60009081526003602052604090206002015490565b6102da6103d0366004612081565b610d5d565b6102b96103e3366004611d4c565b6000908152600260208190526040909120015490565b6102da610407366004612146565b610e07565b6102da61041a366004611d4c565b610ed9565b6102da61042d3660046121cd565b610ee5565b610469610440366004611d4c565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161028d565b6102b9610497366004611d17565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020600101549392505050565b6000546104e0906001600160a01b031681565b6040516001600160a01b03909116815260200161028d565b6102b96105063660046121fa565b610f92565b61054e610519366004611d17565b600560209081526000938452604080852082529284528284209052825290208054600182015460029092015490919060ff1683565b60408051938452602084019290925215159082015260600161028d565b6102b9610579366004612235565b611013565b6102b961058c36600461229a565b611042565b6102b961059f3660046122e8565b6110d6565b6102da6105b2366004612354565b611230565b6102da6105c5366004611d4c565b6112d5565b6103316105d83660046123b7565b61133b565b6102b960015481565b6102b96105f43660046123f4565b611428565b610628610607366004611d4c565b60036020526000908152604090208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161028d565b6102b9610651366004612420565b611452565b6102b9610664366004611d4c565b611490565b6102b961067736600461229a565b611503565b6102da61068a366004612452565b611517565b61033161069d366004611d4c565b6004602052600090815260409020805460019091015482565b6102b96106c4366004612474565b6115b9565b6102b96106d7366004611d4c565b60009081526002602052604090205490565b6102da6106f73660046124af565b61165d565b6102b961070a366004611d4c565b60009081526003602052604090205490565b6102b961072a366004611d4c565b60009081526002602052604090206003015490565b6102da61074d3660046123f4565b611778565b6102b96107603660046124cc565b611802565b610331610773366004611d4c565b61189c565b6102b9610786366004611d17565b6001600160a01b038316600090815260056020908152604080832085845282528083208484529091529020549392505050565b6001600160a01b0383166000908152600560209081526040808320858452825280832084845290915290206002015460ff165b9392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015610850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108749190612526565b6001600160a01b0316336001600160a01b0316146108ad5760405162461bcd60e51b81526004016108a490612543565b60405180910390fd5b6108b683611abc565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845290915290206108ea84611490565b81558161090857600084815260036020526040902060010154610918565b6000848152600360205260409020545b600182810182905560028301805460ff191690911790558154604080516001600160a01b038916815260208101889052908101869052606081019190915260808101919091527f4e58eed9e01cebfd4256725d6d1ce9fa694faa7ac5312e75af02360f453d048e9060a00160405180910390a15050505050565b6060806060600084516001600160401b038111156109b2576109b2611dc2565b604051908082528060200260200182016040528015610a0e57816020015b6109fb6040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001906001900390816109d05790505b509050600085516001600160401b03811115610a2c57610a2c611dc2565b604051908082528060200260200182016040528015610a7157816020015b6040805180820190915260008082526020820152815260200190600190039081610a4a5790505b509050600086516001600160401b03811115610a8f57610a8f611dc2565b604051908082528060200260200182016040528015610ae457816020015b610ad160405180606001604052806000815260200160008152602001600081525090565b815260200190600190039081610aad5790505b50905060005b8751811015610c30576000888281518110610b0757610b0761256b565b6020026020010151905060026000828152602001908152602001600020604051806080016040529081600082015481526020016001820154815260200160028201548152602001600382015481525050858381518110610b6957610b6961256b565b60200260200101819052506004600082815260200190815260200160002060405180604001604052908160008201548152602001600182015481525050848381518110610bb857610bb861256b565b6020026020010181905250600360008281526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050838381518110610c1157610c1161256b565b6020026020010181905250508080610c2890612597565b915050610aea565b509196909550909350915050565b60008082600003610c5457506000905085610ce5565b82670de0b6b3a76400006402540be400610c6f6002886125c6565b610c7990896125da565b610c8391906125f2565b610c8d91906125c6565b610c9791906125c6565b9150600060646402540be400610cad8a866125f2565b610cb791906125c6565b610cc191906125c6565b905086610cd757610cd28189612611565b610ce1565b610ce181896125da565b9150505b9550959350505050565b6000546001600160a01b03163314610d195760405162461bcd60e51b81526004016108a490612628565b60005b8151811015610d5957610d47828281518110610d3a57610d3a61256b565b6020026020010151611abc565b80610d5181612597565b915050610d1c565b5050565b6000546001600160a01b03163314610d875760405162461bcd60e51b81526004016108a490612628565b8051825114610da85760405162461bcd60e51b81526004016108a49061264e565b60005b8251811015610e0257610df0838281518110610dc957610dc961256b565b6020026020010151838381518110610de357610de361256b565b6020026020010151610ee5565b80610dfa81612597565b915050610dab565b505050565b6000546001600160a01b03163314610e315760405162461bcd60e51b81526004016108a490612628565b81518351148015610e43575080518351145b610e5f5760405162461bcd60e51b81526004016108a49061264e565b60005b8351811015610ed357610ec1848281518110610e8057610e8061256b565b6020026020010151848381518110610e9a57610e9a61256b565b6020026020010151848481518110610eb457610eb461256b565b6020026020010151611778565b80610ecb81612597565b915050610e62565b50505050565b610ee281611abc565b50565b6000546001600160a01b03163314610f0f5760405162461bcd60e51b81526004016108a490612628565b610f1882611c48565b610f2182611c9f565b6000828152600260208181526040928390208451815590840151600182015582840151918101919091556060830151600390910155517f901e66575b0aecca6e394d488bfe990ff28995f6da67ef2fe1d6c900b6573a0390610f869084908490612674565b60405180910390a15050565b6001600160a01b0384166000908152600560209081526040808320868452825280832085845282528083208151606081018352815481526001820154938101939093526002015460ff161515908201819052610ff257600091505061100b565b80516110079061100187611490565b85611428565b9150505b949350505050565b6000611036858585856110288d8d8d8b610f92565b61058c8e8e8e8d8d8d611802565b98975050505050505050565b600080848684866064611056605a856125f2565b61106091906125c6565b61106a91906126a9565b61107491906126a9565b61107e908b6126e8565b611088919061276d565b611092919061276d565b90506000876110aa576110a5828a61279b565b6110b4565b6110b4828a6126a9565b9050600081136110c55760006110c7565b805b925050505b9695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611135573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111599190612526565b6001600160a01b0316336001600160a01b0316146111895760405162461bcd60e51b81526004016108a490612543565b61119288611abc565b60006111a08a8a8a89610f92565b905060006111b28b8b8b8b8b8b611802565b90506111c187868484886115b9565b604080518c81528a15156020820152908101899052606081018890526080810187905260a0810184905260c081018390529093507f3a484d35e7358ad950e494938ebbac2c1319c2b76d162112f51d66752244dde39060e00160405180910390a1505098975050505050505050565b6000546001600160a01b0316331461125a5760405162461bcd60e51b81526004016108a490612628565b805182511461127b5760405162461bcd60e51b81526004016108a49061264e565b60005b8251811015610e02576112c383828151811061129c5761129c61256b565b60200260200101518383815181106112b6576112b661256b565b6020026020010151611517565b806112cd81612597565b91505061127e565b6000546001600160a01b031633146112ff5760405162461bcd60e51b81526004016108a490612628565b60018190556040518181527f5ba729b89796f40d260b117b8654dc301b1d9f7ec17a1e378ae31e4c70b6d2c0906020015b60405180910390a150565b60008061141b86857f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166377a9fdcf898961137f576001611382565b60005b6040516001600160e01b031960e085901b168152600481019290925260ff166024820152604401602060405180830381865afa1580156113c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ea91906127dc565b86886114075760008a815260026020526040902060010154610c3e565b60008a815260026020526040902054610c3e565b9097909650945050505050565b6000670de0b6b3a76400008261143e8686612611565b61144891906125f2565b61100b91906125c6565b6000670de0b6b3a7640000828461146988886126a9565b61147391906126e8565b61147d91906126e8565b611487919061276d565b95945050505050565b60008181526004602090815260408083206002928390529083209091015460018201546064916402540be400916114c79043612611565b6114d191906125f2565b6114e390670de0b6b3a76400006125f2565b6114ed91906125c6565b6114f791906125c6565b81546107ec91906125da565b6000808486848660646110566050856125f2565b6000546001600160a01b031633146115415760405162461bcd60e51b81526004016108a490612628565b63017d78408111156115655760405162461bcd60e51b81526004016108a4906127f5565b61156e82611c48565b60008281526002602081815260409283902090910183905581518481529081018390527f048ce436ab4f2632f2aac62af26be3383ebdf5efc9a63f0bbeb6d6c9762d70899101610f86565b600080838560646402540be4006115d08a8c6126e8565b6115da919061276d565b6115e4919061276d565b6115ee908a61279b565b6115f891906126a9565b61160291906126a9565b90506064611611605a82612611565b61161b90896126e8565b611625919061276d565b8113611635576000915050611487565b61163f83826126a9565b905060008113611650576000611652565b805b979650505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df9190612526565b6001600160a01b0316336001600160a01b03161461172a5760405162461bcd60e51b8152602060048201526008602482015267474f565f4f4e4c5960c01b60448201526064016108a4565b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d90602001611330565b6000546001600160a01b031633146117a25760405162461bcd60e51b81526004016108a490612628565b6000838152600260209081526040918290208481556001810184905582518681529182018590529181018390527f1daeaff85d4d7cfda495ef83720a04b81df77e38711ca570061e16efa6ffa2759060600160405180910390a150505050565b6001600160a01b0386166000908152600560209081526040808320888452825280832087845282528083208151606081018352815481526001820154938101939093526002015460ff1615159082018190526118625760009150506110cc565b60008061186e8961189c565b9150915061188e8360200151886118855782611887565b835b8888611452565b9a9950505050505050505050565b6000818152600360205260408082208054600182015492516377a9fdcf60e01b815260048101869052602481018590529093907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906377a9fdcf90604401602060405180830381865afa158015611920573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194491906127dc565b6040516377a9fdcf60e01b815260048101879052600160248201529091506000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906377a9fdcf90604401602060405180830381865afa1580156119b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119da91906127dc565b9050600060646402540be400600260008a815260200190815260200160002060030154866002015443611a0d9190612611565b611a1786886126a9565b611a2191906126e8565b611a2b91906126e8565b611a35919061276d565b611a3f919061276d565b90506000831315611a745782611a5d82670de0b6b3a76400006126e8565b611a67919061276d565b611a71908761279b565b95505b6000821315611ab35781611a9082670de0b6b3a76400006126e8565b611a9c906000196126e8565b611aa6919061276d565b611ab0908661279b565b94505b50505050915091565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190612526565b6001600160a01b03166380463406836040518263ffffffff1660e01b8152600401611b6d91815260200190565b602060405180830381865afa158015611b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bae91906127dc565b905062989680811115611bd35760405162461bcd60e51b81526004016108a4906127f5565b611bdc82611c9f565b600082815260026020526040902060030154818114610e025760008381526002602090815260409182902060030184905581518581529081018490527fbe762e88e6ff669d272010f163dfb3c6d389b16831c73e10f95860b2e4f15298910160405180910390a1505050565b6000818152600460205260409020611c5f82611490565b8082554360018301556040805184815260208101929092527f66ae41afb9d1762b0b5f1a431a9e5c767128a1bec9ecb20e1ef9dba7dc3663d69101610f86565b6000818152600360205260409020611cb68261189c565b600183018190558183554360028401556040805185815260208101939093528201527fc08ace100a8e3b7186ad5fcb68a0b9e7e0bd60aa466cdba34932fa0513353c6490606001610f86565b6001600160a01b0381168114610ee257600080fd5b600080600060608486031215611d2c57600080fd5b8335611d3781611d02565b95602085013595506040909401359392505050565b600060208284031215611d5e57600080fd5b5035919050565b80358015158114611d7557600080fd5b919050565b60008060008060808587031215611d9057600080fd5b8435611d9b81611d02565b93506020850135925060408501359150611db760608601611d65565b905092959194509250565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611e0057611e00611dc2565b604052919050565b60006001600160401b03821115611e2157611e21611dc2565b5060051b60200190565b600082601f830112611e3c57600080fd5b81356020611e51611e4c83611e08565b611dd8565b82815260059290921b84018101918181019086841115611e7057600080fd5b8286015b84811015611e8b5780358352918301918301611e74565b509695505050505050565b600060208284031215611ea857600080fd5b81356001600160401b03811115611ebe57600080fd5b61100b84828501611e2b565b600081518084526020808501945080840160005b83811015611f105781518051885283810151848901526040908101519088015260609096019590820190600101611ede565b509495945050505050565b60608082528451908201819052600090608090818401906020808901855b83811015611f7d57611f6d858351805182526020810151602083015260408101516040830152606081015160608301525050565b9385019390820190600101611f39565b5050858303818701528751808452928101935087810192915060005b82811015611fc0578351805186528201518286015260409094019392810192600101611f99565b5050505082810360408401526110078185611eca565b600080600080600060a08688031215611fee57600080fd5b85359450611ffe60208701611d65565b94979496505050506040830135926060810135926080909101359150565b60006080828403121561202e57600080fd5b604051608081018181106001600160401b038211171561205057612050611dc2565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b6000806040838503121561209457600080fd5b82356001600160401b03808211156120ab57600080fd5b6120b786838701611e2b565b93506020915081850135818111156120ce57600080fd5b85019050601f810186136120e157600080fd5b80356120ef611e4c82611e08565b81815260079190911b8201830190838101908883111561210e57600080fd5b928401925b8284101561213757612125898561201c565b82528482019150608084019350612113565b80955050505050509250929050565b60008060006060848603121561215b57600080fd5b83356001600160401b038082111561217257600080fd5b61217e87838801611e2b565b9450602086013591508082111561219457600080fd5b6121a087838801611e2b565b935060408601359150808211156121b657600080fd5b506121c386828701611e2b565b9150509250925092565b60008060a083850312156121e057600080fd5b823591506121f1846020850161201c565b90509250929050565b6000806000806080858703121561221057600080fd5b843561221b81611d02565b966020860135965060408601359560600135945092505050565b600080600080600080600060e0888a03121561225057600080fd5b873561225b81611d02565b965060208801359550604088013594506060880135935061227e60808901611d65565b925060a0880135915060c0880135905092959891949750929550565b60008060008060008060c087890312156122b357600080fd5b863595506122c360208801611d65565b95989597505050506040840135936060810135936080820135935060a0909101359150565b600080600080600080600080610100898b03121561230557600080fd5b883561231081611d02565b9750602089013596506040890135955061232c60608a01611d65565b979a969950949760808101359660a0820135965060c0820135955060e0909101359350915050565b6000806040838503121561236757600080fd5b82356001600160401b038082111561237e57600080fd5b61238a86838701611e2b565b935060208501359150808211156123a057600080fd5b506123ad85828601611e2b565b9150509250929050565b600080600080608085870312156123cd57600080fd5b84359350602085013592506123e460408601611d65565b9396929550929360600135925050565b60008060006060848603121561240957600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561243657600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561246557600080fd5b50508035926020909101359150565b600080600080600060a0868803121561248c57600080fd5b505083359560208501359550604085013594606081013594506080013592509050565b6000602082840312156124c157600080fd5b81356107ec81611d02565b60008060008060008060c087890312156124e557600080fd5b86356124f081611d02565b9550602087013594506040870135935061250c60608801611d65565b92506080870135915060a087013590509295509295509295565b60006020828403121561253857600080fd5b81516107ec81611d02565b6020808252600e908201526d43414c4c4241434b535f4f4e4c5960901b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016125a9576125a9612581565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826125d5576125d56125b0565b500490565b600082198211156125ed576125ed612581565b500190565b600081600019048311821515161561260c5761260c612581565b500290565b60008282101561262357612623612581565b500390565b6020808252600c908201526b4d414e414745525f4f4e4c5960a01b604082015260600190565b6020808252600c908201526b0aea49e9c8ebe988a9c8ea8960a31b604082015260600190565b82815260a081016107ec6020830184805182526020810151602083015260408101516040830152606081015160608301525050565b60008083128015600160ff1b8501841216156126c7576126c7612581565b6001600160ff1b03840183138116156126e2576126e2612581565b50500390565b60006001600160ff1b038184138284138082168684048611161561270e5761270e612581565b600160ff1b600087128281168783058912161561272d5761272d612581565b6000871292508782058712848416161561274957612749612581565b8785058712818416161561275f5761275f612581565b505050929093029392505050565b60008261277c5761277c6125b0565b600160ff1b82146000198414161561279657612796612581565b500590565b600080821280156001600160ff1b03849003851316156127bd576127bd612581565b600160ff1b83900384128116156127d6576127d6612581565b50500190565b6000602082840312156127ee57600080fd5b5051919050565b6020808252600890820152670a89e9ebe90928e960c31b60408201526060019056fea26469706673582212208e5c9472c09c77cb90f80982bc5382abf7866edd2cdd5dc026776a9b85c0757764736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11438,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "manager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11452,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "maxNegativePnlOnOpenP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 11466,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "pairParams",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(PairParams)11461_storage)"
      },
      {
        "astId": 11478,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "pairFundingFees",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(PairFundingFees)11473_storage)"
      },
      {
        "astId": 11488,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "pairRolloverFees",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_struct(PairRolloverFees)11483_storage)"
      },
      {
        "astId": 11504,
        "contract": "contracts/PairInfos.sol:PairInfos",
        "label": "tradeInitialAccFees",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => struct PairInfos.TradeInitialAccFees)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct PairInfos.TradeInitialAccFees))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage)"
      },
      "t_mapping(t_uint256,t_struct(PairFundingFees)11473_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairInfos.PairFundingFees)",
        "numberOfBytes": "32",
        "value": "t_struct(PairFundingFees)11473_storage"
      },
      "t_mapping(t_uint256,t_struct(PairParams)11461_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairInfos.PairParams)",
        "numberOfBytes": "32",
        "value": "t_struct(PairParams)11461_storage"
      },
      "t_mapping(t_uint256,t_struct(PairRolloverFees)11483_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairInfos.PairRolloverFees)",
        "numberOfBytes": "32",
        "value": "t_struct(PairRolloverFees)11483_storage"
      },
      "t_mapping(t_uint256,t_struct(TradeInitialAccFees)11495_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PairInfos.TradeInitialAccFees)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeInitialAccFees)11495_storage"
      },
      "t_struct(PairFundingFees)11473_storage": {
        "encoding": "inplace",
        "label": "struct PairInfos.PairFundingFees",
        "members": [
          {
            "astId": 11468,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "accPerOiLong",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 11470,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "accPerOiShort",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 11472,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "lastUpdateBlock",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(PairParams)11461_storage": {
        "encoding": "inplace",
        "label": "struct PairInfos.PairParams",
        "members": [
          {
            "astId": 11454,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "onePercentDepthAbove",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11456,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "onePercentDepthBelow",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11458,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "rolloverFeePerBlockP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11460,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "fundingFeePerBlockP",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(PairRolloverFees)11483_storage": {
        "encoding": "inplace",
        "label": "struct PairInfos.PairRolloverFees",
        "members": [
          {
            "astId": 11480,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "accPerCollateral",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11482,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "lastUpdateBlock",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TradeInitialAccFees)11495_storage": {
        "encoding": "inplace",
        "label": "struct PairInfos.TradeInitialAccFees",
        "members": [
          {
            "astId": 11490,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "rollover",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11492,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "funding",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 11494,
            "contract": "contracts/PairInfos.sol:PairInfos",
            "label": "openedAfterUpdate",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}