{
  "address": "0x956b22f49E41119228A7BE9E047fc2568473EC79",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksV6_4.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksV6_4.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksV6_4.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isLimitInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksV6_4.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksV6_4.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksV6_4.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isSlInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksV6_4.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksV6_4.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksV6_4.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isTpInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x515a15099c754f6af35d470ea003d51a8bb64c969aaee8c6537177e9eef62519",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0x956b22f49E41119228A7BE9E047fc2568473EC79",
    "transactionIndex": 11,
    "gasUsed": "629957",
    "logsBloom": "0x
    "blockHash": "0x2f854561ce864db1995363f812bae1f5b0ec21e6678de1ede56a38761f33745a",
    "transactionHash": "0x515a15099c754f6af35d470ea003d51a8bb64c969aaee8c6537177e9eef62519",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 39744056,
        "transactionHash": "0x515a15099c754f6af35d470ea003d51a8bb64c969aaee8c6537177e9eef62519",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000005985b55545baa00000000000000000000000000000000000000000000000046bc7e111c74f933000000000000000000000000000000000000000000003414ff4ed9b530b2100300000000000000000000000000000000000000000000000046b6e5b5c7209d89000000000000000000000000000000000000000000003414ff54721086066bad",
        "logIndex": 57,
        "blockHash": "0x2f854561ce864db1995363f812bae1f5b0ec21e6678de1ede56a38761f33745a"
      }
    ],
    "blockNumber": 39744056,
    "cumulativeGasUsed": "2883611",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "ec3cbe74776f6123e7e1f431318f92a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksV6_4.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksV6_4.TradeType\"}],\"internalType\":\"struct TradingCallbacksV6_4.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isLimitInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksV6_4.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksV6_4.TradeType\"}],\"internalType\":\"struct TradingCallbacksV6_4.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isSlInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksV6_4.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksV6_4.TradeType\"}],\"internalType\":\"struct TradingCallbacksV6_4.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isTpInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TradeUtils.sol\":\"TradeUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/contract5/interfaces/ChainlinkFeedInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface ChainlinkFeedInterfaceV5 {\\n    function latestRoundData() external view returns (uint80, int, uint, uint, uint80);\\n}\",\"keccak256\":\"0x65dd2889864a18cc14ec4e1bdccf87ac171a4dc0002f07284919591e7e188247\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/IGToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IGToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(uint prevPositiveOpenPnl, uint newPositiveOpenPnl) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(uint depositId) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(uint currentBlock) external view returns (uint);\\n}\",\"keccak256\":\"0xf905733bd477ea861743a1eb451f946ce507402ae4ae3ef70a1446ffce3232ae\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\",\"keccak256\":\"0xe9a1bf37ab4d3d1c81384a660f1d01175df30ee5d4398217ff6e46d35e1d048a\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(uint) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\",\"keccak256\":\"0x3c0f19c1b86a0fe0fd5714c7cffb0b3bddfd0c98175810554724901faa6d5308\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/StorageInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"./TokenInterfaceV5.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IGToken.sol\\\";\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterfaceV5.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n}\\n\\ninterface StorageInterfaceV5 {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterfaceV5);\\n\\n    function token() external view returns (TokenInterfaceV5);\\n\\n    function linkErc677() external view returns (TokenInterfaceV5);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV6_4);\\n\\n    function vault() external view returns (IGToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(address, uint, uint) external view returns (bool);\\n\\n    function storePendingMarketOrder(PendingMarketOrder memory, uint, bool) external;\\n\\n    function openTrades(address, uint, uint) external view returns (Trade memory);\\n\\n    function openTradesInfo(address, uint, uint) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(address, uint, uint) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(uint) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(address, uint) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(uint) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(address, uint) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n}\\n\\ninterface IStateCopyUtils {\\n    function getOpenLimitOrders() external view returns (StorageInterfaceV5.OpenLimitOrder[] memory);\\n\\n    function nftRewards() external view returns (NftRewardsInterfaceV6_3_1);\\n}\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterfaceV5.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address, uint) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint, uint) external;\\n\\n    function openLimitOrderTypes(address, uint, uint) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(address, uint, uint, OpenLimitOrderType) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(uint, address, uint, address, uint, uint) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\\ninterface AggregatorInterfaceV6_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_4 {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n\\n    function setTradeData(SimplifiedTradeId calldata, TradeData memory) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\\n\\ninterface AggregatorInterfaceV6_2{\\n    enum OrderType { MARKET_OPEN, MARKET_CLOSE, LIMIT_OPEN, LIMIT_CLOSE, UPDATE_SL }\\n    function pairsStorage() external view returns(PairsStorageInterfaceV6);\\n    function getPrice(uint,OrderType,uint) external returns(uint);\\n    function tokenPriceWETH() external returns(uint);\\n    function linkFee(uint,uint) external view returns(uint);\\n    function openFeeP(uint) external view returns(uint);\\n    function pendingSlOrders(uint) external view returns(PendingSl memory);\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n    function unregisterPendingSlOrder(uint orderId) external;\\n    struct PendingSl{address trader; uint pairIndex; uint index; uint openPrice; bool buy; uint newSl; }\\n}\\n\\ninterface AggregatorInterfaceV6_3_1 is AggregatorInterfaceV6_2 {\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterfaceV5);\\n}\\n\\ninterface TradingCallbacksV6_3_1 {\\n    enum TradeType {MARKET, LIMIT}\\n    struct SimplifiedTradeId{ address trader; uint pairIndex; uint index; TradeType tradeType; }\\n    struct LastUpdated{ uint32 tp; uint32 sl; uint32 limit; uint32 created; }\\n    function tradeLastUpdated(address, uint, uint, TradeType) external view returns(LastUpdated memory);\\n    function setTradeLastUpdated(SimplifiedTradeId calldata, LastUpdated memory) external;\\n    function canExecuteTimeout() external view returns(uint);\\n}\",\"keccak256\":\"0x6f3b44cb9d44e21b89fc6c382f5f21c88ed93313d6facbd20772c7b2a4987d4c\",\"license\":\"MIT\"},\"contracts/contract5/interfaces/TokenInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface TokenInterfaceV5 {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\",\"keccak256\":\"0xbdaf20e556c21925c2f710802174ce66026cbd1d08e62ae3533cdd9fe3b618d4\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"../contract5/interfaces/StorageInterfaceV5.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksV6_4,\\n            TradingCallbacksV6_4.LastUpdated memory,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        TradingCallbacksV6_4.LastUpdated memory l = callbacks.tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (callbacks, l, TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type));\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksV6_4 callbacks,\\n            TradingCallbacksV6_4.LastUpdated memory l,\\n            TradingCallbacksV6_4.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksV6_4.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (TradingCallbacksV6_4 callbacks, TradingCallbacksV6_4.LastUpdated memory l, ) = _getTradeLastUpdated(\\n            _callbacks,\\n            id.trader,\\n            id.pairIndex,\\n            id.index,\\n            id.tradeType\\n        );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksV6_4.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksV6_4 callbacks = TradingCallbacksV6_4(_callbacks);\\n        callbacks.setTradeData(\\n            TradingCallbacksV6_4.SimplifiedTradeId(trader, pairIndex, index, _type),\\n            TradingCallbacksV6_4.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\",\"keccak256\":\"0x56e7f04d09083bfa48962abcf895e6f7c7e9024a9072f6e72e0f29368bbe1fc8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610a6f61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c806308af79631461007c57806325f40ef9146100a357806339e765e4146100c55780637d364089146100e5578063934648bb146100f857806395ecbbea1461010b578063a6b8633d1461012b575b600080fd5b61008f61008a36600461072d565b61014b565b604051901515815260200160405180910390f35b8180156100af57600080fd5b506100c36100be3660046107d9565b6101f5565b005b8180156100d157600080fd5b506100c36100e03660046107d9565b6102fd565b61008f6100f336600461072d565b61038b565b61008f61010636600461072d565b610426565b81801561011757600080fd5b506100c36101263660046107d9565b6104c4565b81801561013757600080fd5b506100c36101463660046107d9565b61059a565b600080600061016d8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d49190610838565b816040015163ffffffff166101e99190610851565b90931095945050505050565b64ffffffffff8111156102395760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561028557610285610878565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b1681526102c29291906004016108e7565b600060405180830381600087803b1580156102dc57600080fd5b505af11580156102f0573d6000803e3d6000fd5b5050505050505050505050565b600080600061030f89898989896105ee565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061034e908490869060040161091d565b600060405180830381600087803b15801561036857600080fd5b505af115801561037c573d6000803e3d6000fd5b50505050505050505050505050565b60008060006103ad8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610838565b81516101e9919063ffffffff16610851565b60008060006104488686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610838565b816020015163ffffffff166101e99190610851565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b0316815260200189815260200188815260200187600181111561051557610515610878565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b16815261055e92919060040161091d565b600060405180830381600087803b15801561057857600080fd5b505af115801561058c573d6000803e3d6000fd5b505050505050505050505050565b60008060006105ac89898989896105ee565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061034e908490869060040161091d565b60408051608081018252600080825260208201819052918101829052606081018290526106396040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d8390610670908c908c908c908c90600401610966565b608060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906109ae565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156106ed576106ed610878565b9052919c909b50909950975050505050505050565b80356001600160a01b038116811461071957600080fd5b919050565b80356002811061071957600080fd5b600080600083850360c081121561074357600080fd5b61074c85610702565b93506080601f198201121561076057600080fd5b506040516080810181811067ffffffffffffffff8211171561079257634e487b7160e01b600052604160045260246000fd5b6040526107a160208601610702565b815260408501356020820152606085013560408201526107c36080860161071e565b60608201529295929450505060a0919091013590565b60008060008060008060c087890312156107f257600080fd5b6107fb87610702565b955061080960208801610702565b945060408701359350606087013592506108256080880161071e565b915060a087013590509295509295509295565b60006020828403121561084a57600080fd5b5051919050565b8082018082111561087257634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b600281106108ac57634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516108e2606084018261088e565b505050565b60c081016108f582856108b0565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b610100810161092c82856108b0565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b6001600160a01b0385168152602081018490526040810183905260808101610991606083018461088e565b95945050505050565b805163ffffffff8116811461071957600080fd5b6000608082840312156109c057600080fd5b6040516080810181811067ffffffffffffffff821117156109f157634e487b7160e01b600052604160045260246000fd5b6040526109fd8361099a565b8152610a0b6020840161099a565b6020820152610a1c6040840161099a565b6040820152610a2d6060840161099a565b6060820152939250505056fea26469706673582212204de6b30fa58639525e37b7987fe6eef653b96119dcc8da2d887cac8400df9a5a64736f6c63430008110033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c806308af79631461007c57806325f40ef9146100a357806339e765e4146100c55780637d364089146100e5578063934648bb146100f857806395ecbbea1461010b578063a6b8633d1461012b575b600080fd5b61008f61008a36600461072d565b61014b565b604051901515815260200160405180910390f35b8180156100af57600080fd5b506100c36100be3660046107d9565b6101f5565b005b8180156100d157600080fd5b506100c36100e03660046107d9565b6102fd565b61008f6100f336600461072d565b61038b565b61008f61010636600461072d565b610426565b81801561011757600080fd5b506100c36101263660046107d9565b6104c4565b81801561013757600080fd5b506100c36101463660046107d9565b61059a565b600080600061016d8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d49190610838565b816040015163ffffffff166101e99190610851565b90931095945050505050565b64ffffffffff8111156102395760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561028557610285610878565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b1681526102c29291906004016108e7565b600060405180830381600087803b1580156102dc57600080fd5b505af11580156102f0573d6000803e3d6000fd5b5050505050505050505050565b600080600061030f89898989896105ee565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061034e908490869060040161091d565b600060405180830381600087803b15801561036857600080fd5b505af115801561037c573d6000803e3d6000fd5b50505050505050505050505050565b60008060006103ad8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610838565b81516101e9919063ffffffff16610851565b60008060006104488686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af9190610838565b816020015163ffffffff166101e99190610851565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b0316815260200189815260200188815260200187600181111561051557610515610878565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b16815261055e92919060040161091d565b600060405180830381600087803b15801561057857600080fd5b505af115801561058c573d6000803e3d6000fd5b505050505050505050505050565b60008060006105ac89898989896105ee565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061034e908490869060040161091d565b60408051608081018252600080825260208201819052918101829052606081018290526106396040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d8390610670908c908c908c908c90600401610966565b608060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906109ae565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156106ed576106ed610878565b9052919c909b50909950975050505050505050565b80356001600160a01b038116811461071957600080fd5b919050565b80356002811061071957600080fd5b600080600083850360c081121561074357600080fd5b61074c85610702565b93506080601f198201121561076057600080fd5b506040516080810181811067ffffffffffffffff8211171561079257634e487b7160e01b600052604160045260246000fd5b6040526107a160208601610702565b815260408501356020820152606085013560408201526107c36080860161071e565b60608201529295929450505060a0919091013590565b60008060008060008060c087890312156107f257600080fd5b6107fb87610702565b955061080960208801610702565b945060408701359350606087013592506108256080880161071e565b915060a087013590509295509295509295565b60006020828403121561084a57600080fd5b5051919050565b8082018082111561087257634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052602160045260246000fd5b600281106108ac57634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516108e2606084018261088e565b505050565b60c081016108f582856108b0565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b610100810161092c82856108b0565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b6001600160a01b0385168152602081018490526040810183905260808101610991606083018461088e565b95945050505050565b805163ffffffff8116811461071957600080fd5b6000608082840312156109c057600080fd5b6040516080810181811067ffffffffffffffff821117156109f157634e487b7160e01b600052604160045260246000fd5b6040526109fd8361099a565b8152610a0b6020840161099a565b6020820152610a1c6040840161099a565b6040820152610a2d6060840161099a565b6060820152939250505056fea26469706673582212204de6b30fa58639525e37b7987fe6eef653b96119dcc8da2d887cac8400df9a5a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}