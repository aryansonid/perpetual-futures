{
  "address": "0xBa9b2F1D565A4BF8cF945a404898E548e2921442",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksInterface.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksInterface.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksInterface.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isLimitInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksInterface.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksInterface.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksInterface.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isSlInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacksInterface.TradeType",
              "name": "tradeType",
              "type": "TradingCallbacksInterface.TradeType"
            }
          ],
          "internalType": "struct TradingCallbacksInterface.SimplifiedTradeId",
          "name": "id",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "isTpInTimeout",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9c073a950b9b06a4327de9298f1dec5fbc561c235070ad1f41385306d4921ddf",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xBa9b2F1D565A4BF8cF945a404898E548e2921442",
    "transactionIndex": 0,
    "gasUsed": "622871",
    "logsBloom": "0x
    "blockHash": "0x9981985b027e8fc2d94944eb52720119ea37a87f6f9e6a195d31f963af58553a",
    "transactionHash": "0x9c073a950b9b06a4327de9298f1dec5fbc561c235070ad1f41385306d4921ddf",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 40565565,
        "transactionHash": "0x9c073a950b9b06a4327de9298f1dec5fbc561c235070ad1f41385306d4921ddf",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000a667403454f483de81a0363af7fcee563819d910",
          "0x0000000000000000000000004cefb7df2ff89a05ddd0176de11e01ef0cf7ed84"
        ],
        "data": "0x000000000000000000000000000000000000000000000000005883ea3bd5f000000000000000000000000000000000000000000000000000844cef195bd2209a00000000000000000000000000000000000000000000000c75287cf5175a145b00000000000000000000000000000000000000000000000083f46b2f1ffc309a00000000000000000000000000000000000000000000000c758100df5330045b",
        "logIndex": 0,
        "blockHash": "0x9981985b027e8fc2d94944eb52720119ea37a87f6f9e6a195d31f963af58553a"
      }
    ],
    "blockNumber": 40565565,
    "cumulativeGasUsed": "622871",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3cd688277441e319231de487c3cf539d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksInterface.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksInterface.TradeType\"}],\"internalType\":\"struct TradingCallbacksInterface.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isLimitInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksInterface.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksInterface.TradeType\"}],\"internalType\":\"struct TradingCallbacksInterface.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isSlInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacksInterface.TradeType\",\"name\":\"tradeType\",\"type\":\"TradingCallbacksInterface.TradeType\"}],\"internalType\":\"struct TradingCallbacksInterface.SimplifiedTradeId\",\"name\":\"id\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"isTpInTimeout\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TradeUtils.sol\":\"TradeUtils\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n}\\n\",\"keccak256\":\"0x069b28b40ac432208c040c75ecdc880edccda8b3964d187ce2284a07b1d599f7\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x7e5147b0611f9d8ae4e6447c75c65f9c7274f2eba120a69abd5bcad9e0d99189\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    function getTWAP(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 twapPrice);\\n}\\n\",\"keccak256\":\"0x69705157ab674d51ab9b8404fa2faf15333f2696ce2e78362ab5bb96833ecdee\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xa203a16609a3f4479f4c276334d6731350d81ccd2e07e8e4d1e38028d702d76f\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xb2fa75a1891441870ad9e7ebaec3b828113cb231cba760d31e175233850efceb\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0x58654c006d22c41b610ba226e895483efb9caf61604472b2e9b80c4e45259bf1\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1_4.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1_4);\\n\\n    function vault() external view returns (IToken);\\n\\n    function trading() external view returns (address);\\n\\n    function callbacks() external view returns (address);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function openTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function openTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function reqID_pendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function reqID_pendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external returns (IOracle);\\n}\\n\",\"keccak256\":\"0xfc18f7e6a179bb1f82916b2b8e1a33946209b9079bb9996ec8ffd80e827f60b7\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe17da6c44e61e84ecbc9653dffeb3c4bf6ed43743256f1eaf1743b7903843dae\",\"license\":\"MIT\"},\"contracts/interfaces/TradingCallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface TradingCallbacksInterface {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x60edc8241ff757913fac7702067d9ba301d096a194cff7ec8e746769cf9fbe2b\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/StorageInterface.sol\\\";\\nimport \\\"../interfaces/TradingCallbacksInterface.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksInterface,\\n            TradingCallbacksInterface.LastUpdated memory,\\n            TradingCallbacksInterface.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\\n            .tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (\\n            callbacks,\\n            l,\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            )\\n        );\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeData(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdabfc087fb421fed441550b4a03146962afa96661eb7b1cecf790a1787de2aab\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610a4e61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c80633c63a7d01461007c57806378155b7d1461009e5780637df5100d146100be5780638fff7d82146100de578063aa3e8a8f146100fe578063c8ac93b014610125578063e52d23d814610138575b600080fd5b81801561008857600080fd5b5061009c61009736600461072d565b61014b565b005b8180156100aa57600080fd5b5061009c6100b936600461072d565b6101dc565b8180156100ca57600080fd5b5061009c6100d936600461072d565b6102b2565b8180156100ea57600080fd5b5061009c6100f936600461072d565b6103ba565b61011161010c3660046107c3565b61040b565b604051901515815260200160405180910390f35b6101116101333660046107c3565b6104b5565b6101116101463660046107c3565b610550565b600080600061015d89898989896105ee565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061019f90849086906004016108b2565b600060405180830381600087803b1580156101b957600080fd5b505af11580156101cd573d6000803e3d6000fd5b50505050505050505050505050565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b0316815260200189815260200188815260200187600181111561022d5761022d610843565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b1681526102769291906004016108b2565b600060405180830381600087803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b505050505050505050505050565b64ffffffffff8111156102f65760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561034257610342610843565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b16815261037f9291906004016108fb565b600060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b5050505050505050505050565b60008060006103cc89898989896105ee565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061019f90849086906004016108b2565b600080600061042d8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610931565b816040015163ffffffff166104a9919061094a565b90931095945050505050565b60008060006104d78686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610931565b81516104a9919063ffffffff1661094a565b60008060006105728686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610931565b816020015163ffffffff166104a9919061094a565b60408051608081018252600080825260208201819052918101829052606081018290526106396040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d8390610670908c908c908c908c90600401610971565b608060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906109b9565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156106ed576106ed610843565b9052919c909b50909950975050505050505050565b80356001600160a01b038116811461071957600080fd5b919050565b80356002811061071957600080fd5b60008060008060008060c0878903121561074657600080fd5b61074f87610702565b955061075d60208801610702565b945060408701359350606087013592506107796080880161071e565b915060a087013590509295509295509295565b6040516080810167ffffffffffffffff811182821017156107bd57634e487b7160e01b600052604160045260246000fd5b60405290565b600080600083850360c08112156107d957600080fd5b6107e285610702565b93506080601f19820112156107f657600080fd5b506107ff61078c565b61080b60208601610702565b8152604085013560208201526060850135604082015261082d6080860161071e565b60608201529295929450505060a0919091013590565b634e487b7160e01b600052602160045260246000fd5b6002811061087757634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516108ad6060840182610859565b505050565b61010081016108c1828561087b565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b60c08101610909828561087b565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b60006020828403121561094357600080fd5b5051919050565b8082018082111561096b57634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b038516815260208101849052604081018390526080810161099c6060830184610859565b95945050505050565b805163ffffffff8116811461071957600080fd5b6000608082840312156109cb57600080fd5b6109d361078c565b6109dc836109a5565b81526109ea602084016109a5565b60208201526109fb604084016109a5565b6040820152610a0c606084016109a5565b6060820152939250505056fea26469706673582212203abdb69d829bca837be253bd668eb3f1e08586b6cb8c9aa0385dee710d1be6f864736f6c63430008140033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100775760003560e01c80633c63a7d01461007c57806378155b7d1461009e5780637df5100d146100be5780638fff7d82146100de578063aa3e8a8f146100fe578063c8ac93b014610125578063e52d23d814610138575b600080fd5b81801561008857600080fd5b5061009c61009736600461072d565b61014b565b005b8180156100aa57600080fd5b5061009c6100b936600461072d565b6101dc565b8180156100ca57600080fd5b5061009c6100d936600461072d565b6102b2565b8180156100ea57600080fd5b5061009c6100f936600461072d565b6103ba565b61011161010c3660046107c3565b61040b565b604051901515815260200160405180910390f35b6101116101333660046107c3565b6104b5565b6101116101463660046107c3565b610550565b600080600061015d89898989896105ee565b63ffffffff87166020830152604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061019f90849086906004016108b2565b600060405180830381600087803b1580156101b957600080fd5b505af11580156101cd573d6000803e3d6000fd5b50505050505050505050505050565b60008190506000879050806001600160a01b0316637e09ae8a60405180608001604052808a6001600160a01b0316815260200189815260200188815260200187600181111561022d5761022d610843565b90526040805160808101825263ffffffff871680825260208201819052818301819052606082015290516001600160e01b031960e085901b1681526102769291906004016108b2565b600060405180830381600087803b15801561029057600080fd5b505af11580156102a4573d6000803e3d6000fd5b505050505050505050505050565b64ffffffffff8111156102f65760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640160405180910390fd5b6000869050806001600160a01b03166321c861966040518060800160405280896001600160a01b0316815260200188815260200187815260200186600181111561034257610342610843565b905260408051808201825264ffffffffff871681526000602082015290516001600160e01b031960e085901b16815261037f9291906004016108fb565b600060405180830381600087803b15801561039957600080fd5b505af11580156103ad573d6000803e3d6000fd5b5050505050505050505050565b60008060006103cc89898989896105ee565b63ffffffff87168252604051633f04d74560e11b815292955090935091506001600160a01b03841690637e09ae8a9061019f90849086906004016108b2565b600080600061042d8686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104949190610931565b816040015163ffffffff166104a9919061094a565b90931095945050505050565b60008060006104d78686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa15801561051a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053e9190610931565b81516104a9919063ffffffff1661094a565b60008060006105728686600001518760200151886040015189606001516105ee565b5091509150816001600160a01b031663676c51646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d99190610931565b816020015163ffffffff166104a9919061094a565b60408051608081018252600080825260208201819052918101829052606081018290526106396040805160808101825260008082526020820181905291810182905290606082015290565b604051639bd24d8360e01b815288906000906001600160a01b03831690639bd24d8390610670908c908c908c908c90600401610971565b608060405180830381865afa15801561068d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b191906109b9565b9050818160405180608001604052808c6001600160a01b031681526020018b81526020018a81526020018960018111156106ed576106ed610843565b9052919c909b50909950975050505050505050565b80356001600160a01b038116811461071957600080fd5b919050565b80356002811061071957600080fd5b60008060008060008060c0878903121561074657600080fd5b61074f87610702565b955061075d60208801610702565b945060408701359350606087013592506107796080880161071e565b915060a087013590509295509295509295565b6040516080810167ffffffffffffffff811182821017156107bd57634e487b7160e01b600052604160045260246000fd5b60405290565b600080600083850360c08112156107d957600080fd5b6107e285610702565b93506080601f19820112156107f657600080fd5b506107ff61078c565b61080b60208601610702565b8152604085013560208201526060850135604082015261082d6080860161071e565b60608201529295929450505060a0919091013590565b634e487b7160e01b600052602160045260246000fd5b6002811061087757634e487b7160e01b600052602160045260246000fd5b9052565b60018060a01b038151168252602081015160208301526040810151604083015260608101516108ad6060840182610859565b505050565b61010081016108c1828561087b565b63ffffffff8084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152509392505050565b60c08101610909828561087b565b825164ffffffffff1660808301526020909201516001600160d81b031660a090910152919050565b60006020828403121561094357600080fd5b5051919050565b8082018082111561096b57634e487b7160e01b600052601160045260246000fd5b92915050565b6001600160a01b038516815260208101849052604081018390526080810161099c6060830184610859565b95945050505050565b805163ffffffff8116811461071957600080fd5b6000608082840312156109cb57600080fd5b6109d361078c565b6109dc836109a5565b81526109ea602084016109a5565b60208201526109fb604084016109a5565b6040820152610a0c606084016109a5565b6060820152939250505056fea26469706673582212203abdb69d829bca837be253bd668eb3f1e08586b6cb8c9aa0385dee710d1be6f864736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}