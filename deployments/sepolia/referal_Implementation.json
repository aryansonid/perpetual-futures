{
  "address": "0xcb50D352ecf23dA243DD69809B174E4dcccc2C7C",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountValueWETH",
          "type": "uint256"
        }
      ],
      "name": "AllyRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        }
      ],
      "name": "AllyRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "AllyUnwhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "AllyWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferrerRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountValueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferrerRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        }
      ],
      "name": "ReferrerRewardsClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "ReferrerUnwhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "ReferrerWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedAllyFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOpenFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedStartReferrerFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "UpdatedTargetVolumeWETH",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allyDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsValueWETH",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allyFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAllyRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReferrerRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "volumeWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pairOpenFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPriceWETH",
          "type": "uint256"
        }
      ],
      "name": "distributePotentialReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getPercentOfOpenFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        }
      ],
      "name": "getPercentOfOpenFeeP_calc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "resultP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairOpenFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        }
      ],
      "name": "getReferrerFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "getReferrersReferred",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getTraderReferrer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referred",
          "type": "address"
        }
      ],
      "name": "getTradersReferred",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_allyFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_startReferrerFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_openFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_targetVolumeWETH",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerByTrader",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referrerDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "volumeReferredWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pendingRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRewardsValueWETH",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "registerPotentialReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startReferrerFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "targetVolumeWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "unwhitelistAlly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        }
      ],
      "name": "unwhitelistReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateAllyFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateOpenFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateStartReferrerFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updateTargetVolumeWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "whitelistAlly",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "referrer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "ally",
          "type": "address"
        }
      ],
      "name": "whitelistReferrer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd7c7ad19f6d47016f513eb255e7332328590576de371a641c317d4064dc12c71",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xcb50D352ecf23dA243DD69809B174E4dcccc2C7C",
    "transactionIndex": 24,
    "gasUsed": "1743346",
    "logsBloom": "0x
    "blockHash": "0xf44eb3a1fb08c81010663c6dc066b2690b6722fe9716e7a822963d43cf47d276",
    "transactionHash": "0xd7c7ad19f6d47016f513eb255e7332328590576de371a641c317d4064dc12c71",
    "logs": [],
    "blockNumber": 4864666,
    "cumulativeGasUsed": "4033269",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "988ef56db206df3adb44e87e8540bd4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueWETH\",\"type\":\"uint256\"}],\"name\":\"AllyRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AllyRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"AllyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountValueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"ReferrerRewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"ReferrerUnwhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"ReferrerWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedAllyFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedOpenFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedStartReferrerFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"UpdatedTargetVolumeWETH\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allyDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueWETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allyFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllyRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferrerRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPriceWETH\",\"type\":\"uint256\"}],\"name\":\"distributePotentialReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getPercentOfOpenFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"}],\"name\":\"getPercentOfOpenFeeP_calc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"resultP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairOpenFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"}],\"name\":\"getReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"getReferrersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getTraderReferrer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referred\",\"type\":\"address\"}],\"name\":\"getTradersReferred\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_allyFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startReferrerFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_targetVolumeWETH\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerByTrader\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referrerDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"volumeReferredWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pendingRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsValueWETH\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"registerPotentialReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startReferrerFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetVolumeWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"unwhitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"}],\"name\":\"unwhitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateAllyFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateOpenFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateStartReferrerFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updateTargetVolumeWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistAlly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ally\",\"type\":\"address\"}],\"name\":\"whitelistReferrer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Referrals.sol\":\"Referrals\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Referrals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/UniswapRouterInterface.sol\\\";\\nimport \\\"./interfaces/TokenInterface.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/VaultInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_2.sol\\\";\\nimport \\\"./interfaces/NftRewardsInterfaceV6.sol\\\";\\n\\ncontract Referrals is Initializable {\\n    // CONSTANTS\\n    uint constant PRECISION = 1e10;\\n    StorageInterface public storageT;\\n\\n    // ADJUSTABLE PARAMETERS\\n    uint public allyFeeP; // % (of referrer fees going to allies, eg. 10)\\n    uint public startReferrerFeeP; // % (of referrer fee when 0 volume referred, eg. 75)\\n    uint public openFeeP; // % (of opening fee used for referral system, eg. 33)\\n    uint public targetVolumeWETH; // WETH (to reach maximum referral system fee, eg. 1e8)\\n\\n    // CUSTOM TYPES\\n    struct AllyDetails {\\n        address[] referrersReferred;\\n        uint volumeReferredWETH; // 1e18\\n        uint pendingRewardsToken; // 1e18\\n        uint totalRewardsToken; // 1e18\\n        uint totalRewardsValueWETH; // 1e18\\n        bool active;\\n    }\\n\\n    struct ReferrerDetails {\\n        address ally;\\n        address[] tradersReferred;\\n        uint volumeReferredWETH; // 1e18\\n        uint pendingRewardsToken; // 1e18\\n        uint totalRewardsToken; // 1e18\\n        uint totalRewardsValueWETH; // 1e18\\n        bool active;\\n    }\\n\\n    // STATE (MAPPINGS)\\n    mapping(address => AllyDetails) public allyDetails;\\n    mapping(address => ReferrerDetails) public referrerDetails;\\n\\n    mapping(address => address) public referrerByTrader;\\n\\n    // EVENTS\\n    event UpdatedAllyFeeP(uint value);\\n    event UpdatedStartReferrerFeeP(uint value);\\n    event UpdatedOpenFeeP(uint value);\\n    event UpdatedTargetVolumeWETH(uint value);\\n\\n    event AllyWhitelisted(address indexed ally);\\n    event AllyUnwhitelisted(address indexed ally);\\n\\n    event ReferrerWhitelisted(address indexed referrer, address indexed ally);\\n    event ReferrerUnwhitelisted(address indexed referrer);\\n    event ReferrerRegistered(address indexed trader, address indexed referrer);\\n\\n    event AllyRewardDistributed(\\n        address indexed ally,\\n        address indexed trader,\\n        uint volumeWETH,\\n        uint amountToken,\\n        uint amountValueWETH\\n    );\\n    event ReferrerRewardDistributed(\\n        address indexed referrer,\\n        address indexed trader,\\n        uint volumeWETH,\\n        uint amountToken,\\n        uint amountValueWETH\\n    );\\n\\n    event AllyRewardsClaimed(address indexed ally, uint amountToken);\\n    event ReferrerRewardsClaimed(address indexed referrer, uint amountToken);\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        uint _allyFeeP,\\n        uint _startReferrerFeeP,\\n        uint _openFeeP,\\n        uint _targetVolumeWETH\\n    ) external initializer {\\n        require(\\n            address(_storageT) != address(0) &&\\n                _allyFeeP <= 50 &&\\n                _startReferrerFeeP <= 100 &&\\n                _openFeeP <= 50 &&\\n                _targetVolumeWETH > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n\\n        allyFeeP = _allyFeeP;\\n        startReferrerFeeP = _startReferrerFeeP;\\n        openFeeP = _openFeeP;\\n        targetVolumeWETH = _targetVolumeWETH;\\n    }\\n\\n    // MODIFIERS\\n    modifier onlyGov() {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(msg.sender == address(storageT.trading()), \\\"TRADING_ONLY\\\");\\n        _;\\n    }\\n    modifier onlyCallbacks() {\\n        require(msg.sender == address(storageT.callbacks()), \\\"CALLBACKS_ONLY\\\");\\n        _;\\n    }\\n\\n    // MANAGE PARAMETERS\\n    function updateAllyFeeP(uint value) external onlyGov {\\n        require(value <= 50, \\\"VALUE_ABOVE_50\\\");\\n\\n        allyFeeP = value;\\n\\n        emit UpdatedAllyFeeP(value);\\n    }\\n\\n    function updateStartReferrerFeeP(uint value) external onlyGov {\\n        require(value <= 100, \\\"VALUE_ABOVE_100\\\");\\n\\n        startReferrerFeeP = value;\\n\\n        emit UpdatedStartReferrerFeeP(value);\\n    }\\n\\n    function updateOpenFeeP(uint value) external onlyGov {\\n        require(value <= 50, \\\"VALUE_ABOVE_50\\\");\\n\\n        openFeeP = value;\\n\\n        emit UpdatedOpenFeeP(value);\\n    }\\n\\n    function updateTargetVolumeWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n\\n        targetVolumeWETH = value;\\n\\n        emit UpdatedTargetVolumeWETH(value);\\n    }\\n\\n    // MANAGE ALLIES\\n    function whitelistAlly(address ally) external onlyGov {\\n        require(ally != address(0), \\\"ADDRESS_0\\\");\\n\\n        AllyDetails storage a = allyDetails[ally];\\n        require(!a.active, \\\"ALLY_ALREADY_ACTIVE\\\");\\n\\n        a.active = true;\\n\\n        emit AllyWhitelisted(ally);\\n    }\\n\\n    function unwhitelistAlly(address ally) external onlyGov {\\n        AllyDetails storage a = allyDetails[ally];\\n        require(a.active, \\\"ALREADY_UNACTIVE\\\");\\n\\n        a.active = false;\\n\\n        emit AllyUnwhitelisted(ally);\\n    }\\n\\n    // MANAGE REFERRERS\\n    function whitelistReferrer(\\n        address referrer,\\n        address ally\\n    ) external onlyGov {\\n        require(referrer != address(0), \\\"ADDRESS_0\\\");\\n\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n        require(!r.active, \\\"REFERRER_ALREADY_ACTIVE\\\");\\n\\n        r.active = true;\\n\\n        if (ally != address(0)) {\\n            AllyDetails storage a = allyDetails[ally];\\n            require(a.active, \\\"ALLY_NOT_ACTIVE\\\");\\n\\n            r.ally = ally;\\n            a.referrersReferred.push(referrer);\\n        }\\n\\n        emit ReferrerWhitelisted(referrer, ally);\\n    }\\n\\n    function unwhitelistReferrer(address referrer) external onlyGov {\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n        require(r.active, \\\"ALREADY_UNACTIVE\\\");\\n\\n        r.active = false;\\n\\n        emit ReferrerUnwhitelisted(referrer);\\n    }\\n\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referrer\\n    ) external onlyTrading {\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n\\n        if (\\n            referrerByTrader[trader] != address(0) ||\\n            referrer == address(0) ||\\n            !r.active\\n        ) {\\n            return;\\n        }\\n\\n        referrerByTrader[trader] = referrer;\\n        r.tradersReferred.push(trader);\\n\\n        emit ReferrerRegistered(trader, referrer);\\n    }\\n\\n    // REWARDS DISTRIBUTION\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external onlyCallbacks returns (uint) {\\n        address referrer = referrerByTrader[trader];\\n        ReferrerDetails storage r = referrerDetails[referrer];\\n\\n        if (!r.active) {\\n            return 0;\\n        }\\n\\n        uint referrerRewardValueWETH = (volumeWETH *\\n            getReferrerFeeP(pairOpenFeeP, r.volumeReferredWETH)) /\\n            PRECISION /\\n            100;\\n\\n        uint referrerRewardToken = (referrerRewardValueWETH * PRECISION) /\\n            tokenPriceWETH;\\n\\n        storageT.handleTokens(address(this), referrerRewardToken, true);\\n\\n        AllyDetails storage a = allyDetails[r.ally];\\n\\n        uint allyRewardValueWETH;\\n        uint allyRewardToken;\\n\\n        if (a.active) {\\n            allyRewardValueWETH = (referrerRewardValueWETH * allyFeeP) / 100;\\n            allyRewardToken = (referrerRewardToken * allyFeeP) / 100;\\n\\n            a.volumeReferredWETH += volumeWETH;\\n            a.pendingRewardsToken += allyRewardToken;\\n            a.totalRewardsToken += allyRewardToken;\\n            a.totalRewardsValueWETH += allyRewardValueWETH;\\n\\n            referrerRewardValueWETH -= allyRewardValueWETH;\\n            referrerRewardToken -= allyRewardToken;\\n\\n            emit AllyRewardDistributed(\\n                r.ally,\\n                trader,\\n                volumeWETH,\\n                allyRewardToken,\\n                allyRewardValueWETH\\n            );\\n        }\\n\\n        r.volumeReferredWETH += volumeWETH;\\n        r.pendingRewardsToken += referrerRewardToken;\\n        r.totalRewardsToken += referrerRewardToken;\\n        r.totalRewardsValueWETH += referrerRewardValueWETH;\\n\\n        emit ReferrerRewardDistributed(\\n            referrer,\\n            trader,\\n            volumeWETH,\\n            referrerRewardToken,\\n            referrerRewardValueWETH\\n        );\\n\\n        return referrerRewardValueWETH + allyRewardValueWETH;\\n    }\\n\\n    // REWARDS CLAIMING\\n    function claimAllyRewards() external {\\n        AllyDetails storage a = allyDetails[msg.sender];\\n        uint rewardsToken = a.pendingRewardsToken;\\n\\n        require(rewardsToken > 0, \\\"NO_PENDING_REWARDS\\\");\\n\\n        a.pendingRewardsToken = 0;\\n        storageT.token().transfer(msg.sender, rewardsToken);\\n\\n        emit AllyRewardsClaimed(msg.sender, rewardsToken);\\n    }\\n\\n    function claimReferrerRewards() external {\\n        ReferrerDetails storage r = referrerDetails[msg.sender];\\n        uint rewardsToken = r.pendingRewardsToken;\\n\\n        require(rewardsToken > 0, \\\"NO_PENDING_REWARDS\\\");\\n\\n        r.pendingRewardsToken = 0;\\n        storageT.token().transfer(msg.sender, rewardsToken);\\n\\n        emit ReferrerRewardsClaimed(msg.sender, rewardsToken);\\n    }\\n\\n    // VIEW FUNCTIONS\\n    function getReferrerFeeP(\\n        uint pairOpenFeeP,\\n        uint volumeReferredWETH\\n    ) public view returns (uint) {\\n        uint maxReferrerFeeP = (pairOpenFeeP * 2 * openFeeP) / 100;\\n        uint minFeeP = (maxReferrerFeeP * startReferrerFeeP) / 100;\\n\\n        uint feeP = minFeeP +\\n            ((maxReferrerFeeP - minFeeP) * volumeReferredWETH) /\\n            1e18 /\\n            targetVolumeWETH;\\n\\n        return feeP > maxReferrerFeeP ? maxReferrerFeeP : feeP;\\n    }\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint) {\\n        return\\n            getPercentOfOpenFeeP_calc(\\n                referrerDetails[referrerByTrader[trader]].volumeReferredWETH\\n            );\\n    }\\n\\n    function getPercentOfOpenFeeP_calc(\\n        uint volumeReferredWETH\\n    ) public view returns (uint resultP) {\\n        resultP =\\n            (openFeeP *\\n                (startReferrerFeeP *\\n                    PRECISION +\\n                    (volumeReferredWETH *\\n                        PRECISION *\\n                        (100 - startReferrerFeeP)) /\\n                    1e18 /\\n                    targetVolumeWETH)) /\\n            100;\\n\\n        resultP = resultP > openFeeP * PRECISION\\n            ? openFeeP * PRECISION\\n            : resultP;\\n    }\\n\\n    function getTraderReferrer(address trader) external view returns (address) {\\n        address referrer = referrerByTrader[trader];\\n\\n        return referrerDetails[referrer].active ? referrer : address(0);\\n    }\\n\\n    function getReferrersReferred(\\n        address ally\\n    ) external view returns (address[] memory) {\\n        return allyDetails[ally].referrersReferred;\\n    }\\n\\n    function getTradersReferred(\\n        address referred\\n    ) external view returns (address[] memory) {\\n        return referrerDetails[referred].tradersReferred;\\n    }\\n}\\n\",\"keccak256\":\"0x8e01d7e45f4758cf1c449475da0abc7f7489ade7c08079fbd411b9bfa4fb3fd1\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd37be0934daaf172a910376e79b670d554a3b28f738fd8c8ec98b59e8d86b5f5\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\n\\ninterface AggregatorInterfaceV1_2 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE,\\n        UPDATE_SL\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pendingSlOrders(uint) external view returns (PendingSl memory);\\n\\n    function storePendingSlOrder(uint orderId, PendingSl calldata p) external;\\n\\n    function unregisterPendingSlOrder(uint orderId) external;\\n\\n    struct PendingSl {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice;\\n        bool buy;\\n        uint newSl;\\n    }\\n}\\n\",\"keccak256\":\"0x8f73a968409bf92b29f9ab402e2e97dc656f23ec231cf017e42d0d131fb4ba7e\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x4d3908114968a30bdbfae459ab2b3e842053fa0f08490ad50744cc3df3c1f439\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4cf9781a0df06a546607997f12d5d984942657e9eb908229ef5f7f6d5b2bd385\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xbd69c374c647aab1dce1c1b73e891823446281e9de4c7aea1c019d6979e2b5b0\",\"license\":\"MIT\"},\"contracts/interfaces/NftRewardsInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(TriggeredLimitId calldata, address) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(TriggeredLimitId calldata, uint) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4bbd3eac579cf4a0c15cb815b250d6b4e49d9ae9eaba08c4d23fcf51790dfce7\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfd1102a637e83931602623fcb549c8eee8460402473b62d8f13ab4a928458b38\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {StorageInterface} from \\\"./StorageInterface.sol\\\";\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n\\n    function isTradeParLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function isTradeLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function executeLiquidations(\\n        uint[100] memory _orderTypes,\\n        address[100] memory traders,\\n        uint[100] memory pairIndexs,\\n        uint[100] memory indexs,\\n        uint256 index\\n    ) external;\\n}\\n\",\"keccak256\":\"0x55c2a6ee9966a39778140bab34fd12c4467471ff2b63c1bed7856de3abc196b7\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    event OpenningInterestUpated(\\n        uint256 indexed pairIndex,\\n        uint256 indexed openingInterestShort,\\n        uint256 indexed openingInterestLong\\n    );\\n\\n    event TradeOpen(Trade indexed t);\\n\\n    event TradeClose(Trade indexed t);\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxSlP() external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traders,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs,\\n            uint256 index\\n        );\\n}\\n\",\"keccak256\":\"0x81e49fd166d6e22a4f7b811ccfc4c04183d38631f5ef6a7d08b0ee56750f4b5b\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b6f3ec1152b61791df030a08f58bb579f7e689138bb45b62925c8e07f986710\",\"license\":\"MIT\"},\"contracts/interfaces/UniswapRouterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface UniswapRouterInterface {\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x9a1977c9b6495c13d39572943b47b861e6adca9b081b37adbbb73a89cc734e1a\",\"license\":\"MIT\"},\"contracts/interfaces/VaultInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface VaultInterface {\\n    function sendWETHToTrader(address, uint) external;\\n\\n    function receiveWETHFromTrader(address, uint, uint) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function distributeRewardWETH(uint) external;\\n}\\n\",\"keccak256\":\"0xe5936bc56bb09abdaca23181b8bf5e48bc78e5ee842b1857e6fcea555dd3eef7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e90806100206000396000f3fe608060405234801561001057600080fd5b50600436106101795760003560e01c806394df2c7c116100d9578063c36acccd11610087578063c36acccd146103e2578063df374a9b1461040b578063e78c6fd214610414578063ea61c60214610427578063ee6cf8841461043a578063f79ad43e14610442578063f92ad2191461045557600080fd5b806394df2c7c1461036757806397365b741461037a5780639b8ab6841461038d578063a6a7d393146103a0578063a73a3e35146103a9578063bc786541146103bc578063c3160c68146103cf57600080fd5b806355c780281161013657806355c780281461022657806365ae45271461023957806365cbd307146102a757806369c82c28146102af5780636a83de79146102b85780637792a23114610341578063917abb961461035457600080fd5b806303e374641461017e57806316fff074146101935780631727e82d146101c9578063201ad16d146101e057806332a7b732146101f35780634e583b3114610213575b600080fd5b61019161018c366004611b6e565b610468565b005b6000546101ac906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d260025481565b6040519081526020016101c0565b6101d26101ee366004611b9f565b610597565b610206610201366004611b9f565b6105d3565b6040516101c09190611bbc565b6101d2610221366004611c09565b61064c565b610191610234366004611b9f565b6106f3565b61027d610247366004611b9f565b60056020819052600091825260409091206001810154600282015460038301546004840154939094015491939092909160ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016101c0565b61019161081c565b6101d260045481565b6103086102c6366004611b9f565b60066020819052600091825260409091208054600282015460038301546004840154600585015494909501546001600160a01b03909316949193909260ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c0016101c0565b6101d261034f366004611b6e565b61097c565b610191610362366004611b6e565b610a30565b610191610375366004611b9f565b610b46565b610191610388366004611b6e565b610c6f565b61019161039b366004611c2b565b610d6c565b6101d260015481565b6102066103b7366004611b9f565b610f08565b6101916103ca366004611b9f565b610f7c565b6101ac6103dd366004611b9f565b6110f5565b6101ac6103f0366004611b9f565b6007602052600090815260409020546001600160a01b031681565b6101d260035481565b6101d2610422366004611c64565b61113d565b610191610435366004611c2b565b611521565b61019161175b565b610191610450366004611b6e565b6118b3565b610191610463366004611c9f565b6119b0565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611ce3565b6001600160a01b0316336001600160a01b0316146105185760405162461bcd60e51b815260040161050f90611d00565b60405180910390fd5b606481111561055b5760405162461bcd60e51b815260206004820152600f60248201526e056414c55455f41424f56455f31303608c1b604482015260640161050f565b60028190556040518181527fb85b70acaeb40f1a2351367c48842ee0ea24ec05d411d99d80bf7a020c0dbb0f906020015b60405180910390a150565b6001600160a01b03808216600090815260076020908152604080832054909316825260069052908120600201546105cd9061097c565b92915050565b6001600160a01b03811660009081526006602090815260409182902060010180548351818402810184019094528084526060939283018282801561064057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610622575b50505050509050919050565b60008060646003548560026106619190611d38565b61066b9190611d38565b6106759190611d4f565b905060006064600254836106899190611d38565b6106939190611d4f565b90506000600454670de0b6b3a76400008684866106b09190611d71565b6106ba9190611d38565b6106c49190611d4f565b6106ce9190611d4f565b6106d89083611d84565b90508281116106e757806106e9565b825b9695505050505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190611ce3565b6001600160a01b0316336001600160a01b03161461079a5760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b03811660009081526006602081905260409091209081015460ff166107d85760405162461bcd60e51b815260040161050f90611d97565b60068101805460ff191690556040516001600160a01b038316907f6dd169357c2e2b04fd13a8807a11892b88875b7c70eeb73c3b6642c58516f0db90600090a25050565b33600090815260066020526040902060038101548061084d5760405162461bcd60e51b815260040161050f90611dc1565b60008260030181905550600060029054906101000a90046001600160a01b03166001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611ce3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561091d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190611ded565b5060405181815233907f25deb48f8299e9863bda34f0d343d51341ac7ac30bf63dbeb2e8212bc4a20bf1906020015b60405180910390a25050565b60006064600454670de0b6b3a7640000600254606461099b9190611d71565b6109aa6402540be40087611d38565b6109b49190611d38565b6109be9190611d4f565b6109c89190611d4f565b6402540be4006002546109db9190611d38565b6109e59190611d84565b6003546109f29190611d38565b6109fc9190611d4f565b90506402540be400600354610a119190611d38565b8111610a1d57806105cd565b6402540be4006003546105cd9190611d38565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190611ce3565b6001600160a01b0316336001600160a01b031614610ad75760405162461bcd60e51b815260040161050f90611d00565b60008111610b115760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161050f565b60048190556040518181527f383f05765c0b91a6aeaa9d95c63a0ac5b7cb19371e33e2aa1e3cac3f443dce539060200161058c565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190611ce3565b6001600160a01b0316336001600160a01b031614610bed5760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b03811660009081526005602081905260409091209081015460ff16610c2b5760405162461bcd60e51b815260040161050f90611d97565b60058101805460ff191690556040516001600160a01b038316907f6900afc1a924abca16a7f560e2dac3d71008c1cd1d88de8a85b6e4267116d18690600090a25050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190611ce3565b6001600160a01b0316336001600160a01b031614610d165760405162461bcd60e51b815260040161050f90611d00565b6032811115610d375760405162461bcd60e51b815260040161050f90611e0f565b60018190556040518181527f2f33e68d48a82acaa58e3dcb12a4c7738cdfe7041d35f0e29ec8c39b780b370c9060200161058c565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de39190611ce3565b6001600160a01b0316336001600160a01b031614610e325760405162461bcd60e51b815260206004820152600c60248201526b54524144494e475f4f4e4c5960a01b604482015260640161050f565b6001600160a01b0380821660009081526006602090815260408083208685168452600790925290912054909116151580610e7357506001600160a01b038216155b80610e835750600681015460ff16155b15610e8d57505050565b6001600160a01b03808416600081815260076020908152604080832080549588166001600160a01b0319968716811790915560018781018054918201815585529284209092018054909516841790945592517f0e67f4bbcd5c51b7365ca2dd861dc8094e393ca60de2ceae9d831761a839e92a9190a3505050565b6001600160a01b038116600090815260056020908152604091829020805483518184028101840190945280845260609392830182828015610640576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116106225750505050509050919050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff39190611ce3565b6001600160a01b0316336001600160a01b0316146110235760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b0381166110495760405162461bcd60e51b815260040161050f90611e37565b6001600160a01b03811660009081526005602081905260409091209081015460ff16156110ae5760405162461bcd60e51b8152602060048201526013602482015272414c4c595f414c52454144595f41435449564560681b604482015260640161050f565b60058101805460ff191660011790556040516001600160a01b038316907f80495287b7fdd5e00b7c8c1eb065c5b63474d11ffb062cc82c13da77dda8424d90600090a25050565b6001600160a01b03808216600090815260076020908152604080832054909316808352600691829052928220015490919060ff16611134576000611136565b805b9392505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190611ce3565b6001600160a01b0316336001600160a01b0316146112055760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b604482015260640161050f565b6001600160a01b03808616600090815260076020908152604080832054909316808352600691829052929091209081015460ff1661124857600092505050611519565b600060646402540be40061126088856002015461064c565b61126a908a611d38565b6112749190611d4f565b61127e9190611d4f565b90506000856112926402540be40084611d38565b61129c9190611d4f565b6000546040516329bc0a1f60e11b815230600482015260248101839052600160448201529192506201000090046001600160a01b031690635378143e90606401600060405180830381600087803b1580156112f657600080fd5b505af115801561130a573d6000803e3d6000fd5b505084546001600160a01b03166000908152600560208190526040822090810154909350909150819060ff161561144a5760646001548661134b9190611d38565b6113559190611d4f565b91506064600154856113679190611d38565b6113719190611d4f565b90508a8360010160008282546113879190611d84565b92505081905550808360020160008282546113a29190611d84565b92505081905550808360030160008282546113bd9190611d84565b92505081905550818360040160008282546113d89190611d84565b909155506113e890508286611d71565b94506113f48185611d71565b8654604080518e8152602081018590529081018590529195506001600160a01b038e8116929116907f0d54fedb563328d37f00fe5ba0bf7689519f8cf02318562adfe7b4bfab8cf4b49060600160405180910390a35b8a86600201600082825461145e9190611d84565b92505081905550838660030160008282546114799190611d84565b92505081905550838660040160008282546114949190611d84565b92505081905550848660050160008282546114af9190611d84565b9091555050604080518c8152602081018690529081018690526001600160a01b03808e1691908916907f74e9754b45c636e199e3d7bb764fae1a9acce47a984d10dcfd74849ec4babc4f9060600160405180910390a361150f8286611d84565b9750505050505050505b949350505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190611ce3565b6001600160a01b0316336001600160a01b0316146115c85760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b0382166115ee5760405162461bcd60e51b815260040161050f90611e37565b6001600160a01b03821660009081526006602081905260409091209081015460ff16156116575760405162461bcd60e51b815260206004820152601760248201527652454645525245525f414c52454144595f41435449564560481b604482015260640161050f565b60068101805460ff191660011790556001600160a01b03821615611716576001600160a01b03821660009081526005602081905260409091209081015460ff166116d55760405162461bcd60e51b815260206004820152600f60248201526e414c4c595f4e4f545f41435449564560881b604482015260640161050f565b81546001600160a01b038085166001600160a01b03199283161784558254600181018455600093845260209093209092018054928616929091169190911790555b816001600160a01b0316836001600160a01b03167f15ad1d28b052a6cc2dd1d34d9e06a1847055d520e2163017e6e8aad6431b7f6a60405160405180910390a3505050565b33600090815260056020526040902060028101548061178c5760405162461bcd60e51b815260040161050f90611dc1565b60008260020181905550600060029054906101000a90046001600160a01b03166001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611ce3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561185c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118809190611ded565b5060405181815233907f3dfe9be199655709d01d635bf441264a809a090c98ed7aae9abdc85f7dcbc09d90602001610970565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a9190611ce3565b6001600160a01b0316336001600160a01b03161461195a5760405162461bcd60e51b815260040161050f90611d00565b603281111561197b5760405162461bcd60e51b815260040161050f90611e0f565b60038190556040518181527f4dec17ad9a229f707b7c2fb9531cd3b9c548f9eca80c03457ca38a0bb1df35fe9060200161058c565b600054610100900460ff16158080156119d05750600054600160ff909116105b806119ea5750303b1580156119ea575060005460ff166001145b611a4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161050f565b6000805460ff191660011790558015611a70576000805461ff0019166101001790555b6001600160a01b03861615801590611a89575060328511155b8015611a96575060648411155b8015611aa3575060328311155b8015611aaf5750600082115b611aea5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640161050f565b6000805462010000600160b01b031916620100006001600160a01b0389160217905560018590556002849055600383905560048290558015611b66576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600060208284031215611b8057600080fd5b5035919050565b6001600160a01b0381168114611b9c57600080fd5b50565b600060208284031215611bb157600080fd5b813561113681611b87565b6020808252825182820181905260009190848201906040850190845b81811015611bfd5783516001600160a01b031683529284019291840191600101611bd8565b50909695505050505050565b60008060408385031215611c1c57600080fd5b50508035926020909101359150565b60008060408385031215611c3e57600080fd5b8235611c4981611b87565b91506020830135611c5981611b87565b809150509250929050565b60008060008060808587031215611c7a57600080fd5b8435611c8581611b87565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215611cb757600080fd5b8535611cc281611b87565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215611cf557600080fd5b815161113681611b87565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cd576105cd611d22565b600082611d6c57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105cd576105cd611d22565b808201808211156105cd576105cd611d22565b60208082526010908201526f414c52454144595f554e41435449564560801b604082015260600190565b6020808252601290820152714e4f5f50454e44494e475f5245574152445360701b604082015260600190565b600060208284031215611dff57600080fd5b8151801515811461113657600080fd5b6020808252600e908201526d056414c55455f41424f56455f35360941b604082015260600190565b6020808252600990820152680414444524553535f360bc1b60408201526060019056fea26469706673582212206490cea7a3d6b416677b6ef6d09d438ca3e5302a98f82329c59390ba47d4214564736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101795760003560e01c806394df2c7c116100d9578063c36acccd11610087578063c36acccd146103e2578063df374a9b1461040b578063e78c6fd214610414578063ea61c60214610427578063ee6cf8841461043a578063f79ad43e14610442578063f92ad2191461045557600080fd5b806394df2c7c1461036757806397365b741461037a5780639b8ab6841461038d578063a6a7d393146103a0578063a73a3e35146103a9578063bc786541146103bc578063c3160c68146103cf57600080fd5b806355c780281161013657806355c780281461022657806365ae45271461023957806365cbd307146102a757806369c82c28146102af5780636a83de79146102b85780637792a23114610341578063917abb961461035457600080fd5b806303e374641461017e57806316fff074146101935780631727e82d146101c9578063201ad16d146101e057806332a7b732146101f35780634e583b3114610213575b600080fd5b61019161018c366004611b6e565b610468565b005b6000546101ac906201000090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d260025481565b6040519081526020016101c0565b6101d26101ee366004611b9f565b610597565b610206610201366004611b9f565b6105d3565b6040516101c09190611bbc565b6101d2610221366004611c09565b61064c565b610191610234366004611b9f565b6106f3565b61027d610247366004611b9f565b60056020819052600091825260409091206001810154600282015460038301546004840154939094015491939092909160ff1685565b6040805195865260208601949094529284019190915260608301521515608082015260a0016101c0565b61019161081c565b6101d260045481565b6103086102c6366004611b9f565b60066020819052600091825260409091208054600282015460038301546004840154600585015494909501546001600160a01b03909316949193909260ff1686565b604080516001600160a01b03909716875260208701959095529385019290925260608401526080830152151560a082015260c0016101c0565b6101d261034f366004611b6e565b61097c565b610191610362366004611b6e565b610a30565b610191610375366004611b9f565b610b46565b610191610388366004611b6e565b610c6f565b61019161039b366004611c2b565b610d6c565b6101d260015481565b6102066103b7366004611b9f565b610f08565b6101916103ca366004611b9f565b610f7c565b6101ac6103dd366004611b9f565b6110f5565b6101ac6103f0366004611b9f565b6007602052600090815260409020546001600160a01b031681565b6101d260035481565b6101d2610422366004611c64565b61113d565b610191610435366004611c2b565b611521565b61019161175b565b610191610450366004611b6e565b6118b3565b610191610463366004611c9f565b6119b0565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104df9190611ce3565b6001600160a01b0316336001600160a01b0316146105185760405162461bcd60e51b815260040161050f90611d00565b60405180910390fd5b606481111561055b5760405162461bcd60e51b815260206004820152600f60248201526e056414c55455f41424f56455f31303608c1b604482015260640161050f565b60028190556040518181527fb85b70acaeb40f1a2351367c48842ee0ea24ec05d411d99d80bf7a020c0dbb0f906020015b60405180910390a150565b6001600160a01b03808216600090815260076020908152604080832054909316825260069052908120600201546105cd9061097c565b92915050565b6001600160a01b03811660009081526006602090815260409182902060010180548351818402810184019094528084526060939283018282801561064057602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610622575b50505050509050919050565b60008060646003548560026106619190611d38565b61066b9190611d38565b6106759190611d4f565b905060006064600254836106899190611d38565b6106939190611d4f565b90506000600454670de0b6b3a76400008684866106b09190611d71565b6106ba9190611d38565b6106c49190611d4f565b6106ce9190611d4f565b6106d89083611d84565b90508281116106e757806106e9565b825b9695505050505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a9190611ce3565b6001600160a01b0316336001600160a01b03161461079a5760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b03811660009081526006602081905260409091209081015460ff166107d85760405162461bcd60e51b815260040161050f90611d97565b60068101805460ff191690556040516001600160a01b038316907f6dd169357c2e2b04fd13a8807a11892b88875b7c70eeb73c3b6642c58516f0db90600090a25050565b33600090815260066020526040902060038101548061084d5760405162461bcd60e51b815260040161050f90611dc1565b60008260030181905550600060029054906101000a90046001600160a01b03166001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108ce9190611ce3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561091d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109419190611ded565b5060405181815233907f25deb48f8299e9863bda34f0d343d51341ac7ac30bf63dbeb2e8212bc4a20bf1906020015b60405180910390a25050565b60006064600454670de0b6b3a7640000600254606461099b9190611d71565b6109aa6402540be40087611d38565b6109b49190611d38565b6109be9190611d4f565b6109c89190611d4f565b6402540be4006002546109db9190611d38565b6109e59190611d84565b6003546109f29190611d38565b6109fc9190611d4f565b90506402540be400600354610a119190611d38565b8111610a1d57806105cd565b6402540be4006003546105cd9190611d38565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa79190611ce3565b6001600160a01b0316336001600160a01b031614610ad75760405162461bcd60e51b815260040161050f90611d00565b60008111610b115760405162461bcd60e51b8152602060048201526007602482015266056414c55455f360cc1b604482015260640161050f565b60048190556040518181527f383f05765c0b91a6aeaa9d95c63a0ac5b7cb19371e33e2aa1e3cac3f443dce539060200161058c565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbd9190611ce3565b6001600160a01b0316336001600160a01b031614610bed5760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b03811660009081526005602081905260409091209081015460ff16610c2b5760405162461bcd60e51b815260040161050f90611d97565b60058101805460ff191690556040516001600160a01b038316907f6900afc1a924abca16a7f560e2dac3d71008c1cd1d88de8a85b6e4267116d18690600090a25050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610cc2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce69190611ce3565b6001600160a01b0316336001600160a01b031614610d165760405162461bcd60e51b815260040161050f90611d00565b6032811115610d375760405162461bcd60e51b815260040161050f90611e0f565b60018190556040518181527f2f33e68d48a82acaa58e3dcb12a4c7738cdfe7041d35f0e29ec8c39b780b370c9060200161058c565b600060029054906101000a90046001600160a01b03166001600160a01b031663ec44acf26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de39190611ce3565b6001600160a01b0316336001600160a01b031614610e325760405162461bcd60e51b815260206004820152600c60248201526b54524144494e475f4f4e4c5960a01b604482015260640161050f565b6001600160a01b0380821660009081526006602090815260408083208685168452600790925290912054909116151580610e7357506001600160a01b038216155b80610e835750600681015460ff16155b15610e8d57505050565b6001600160a01b03808416600081815260076020908152604080832080549588166001600160a01b0319968716811790915560018781018054918201815585529284209092018054909516841790945592517f0e67f4bbcd5c51b7365ca2dd861dc8094e393ca60de2ceae9d831761a839e92a9190a3505050565b6001600160a01b038116600090815260056020908152604091829020805483518184028101840190945280845260609392830182828015610640576020028201919060005260206000209081546001600160a01b031681526001909101906020018083116106225750505050509050919050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff39190611ce3565b6001600160a01b0316336001600160a01b0316146110235760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b0381166110495760405162461bcd60e51b815260040161050f90611e37565b6001600160a01b03811660009081526005602081905260409091209081015460ff16156110ae5760405162461bcd60e51b8152602060048201526013602482015272414c4c595f414c52454144595f41435449564560681b604482015260640161050f565b60058101805460ff191660011790556040516001600160a01b038316907f80495287b7fdd5e00b7c8c1eb065c5b63474d11ffb062cc82c13da77dda8424d90600090a25050565b6001600160a01b03808216600090815260076020908152604080832054909316808352600691829052928220015490919060ff16611134576000611136565b805b9392505050565b60008060029054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015611190573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b49190611ce3565b6001600160a01b0316336001600160a01b0316146112055760405162461bcd60e51b815260206004820152600e60248201526d43414c4c4241434b535f4f4e4c5960901b604482015260640161050f565b6001600160a01b03808616600090815260076020908152604080832054909316808352600691829052929091209081015460ff1661124857600092505050611519565b600060646402540be40061126088856002015461064c565b61126a908a611d38565b6112749190611d4f565b61127e9190611d4f565b90506000856112926402540be40084611d38565b61129c9190611d4f565b6000546040516329bc0a1f60e11b815230600482015260248101839052600160448201529192506201000090046001600160a01b031690635378143e90606401600060405180830381600087803b1580156112f657600080fd5b505af115801561130a573d6000803e3d6000fd5b505084546001600160a01b03166000908152600560208190526040822090810154909350909150819060ff161561144a5760646001548661134b9190611d38565b6113559190611d4f565b91506064600154856113679190611d38565b6113719190611d4f565b90508a8360010160008282546113879190611d84565b92505081905550808360020160008282546113a29190611d84565b92505081905550808360030160008282546113bd9190611d84565b92505081905550818360040160008282546113d89190611d84565b909155506113e890508286611d71565b94506113f48185611d71565b8654604080518e8152602081018590529081018590529195506001600160a01b038e8116929116907f0d54fedb563328d37f00fe5ba0bf7689519f8cf02318562adfe7b4bfab8cf4b49060600160405180910390a35b8a86600201600082825461145e9190611d84565b92505081905550838660030160008282546114799190611d84565b92505081905550838660040160008282546114949190611d84565b92505081905550848660050160008282546114af9190611d84565b9091555050604080518c8152602081018690529081018690526001600160a01b03808e1691908916907f74e9754b45c636e199e3d7bb764fae1a9acce47a984d10dcfd74849ec4babc4f9060600160405180910390a361150f8286611d84565b9750505050505050505b949350505050565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611574573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115989190611ce3565b6001600160a01b0316336001600160a01b0316146115c85760405162461bcd60e51b815260040161050f90611d00565b6001600160a01b0382166115ee5760405162461bcd60e51b815260040161050f90611e37565b6001600160a01b03821660009081526006602081905260409091209081015460ff16156116575760405162461bcd60e51b815260206004820152601760248201527652454645525245525f414c52454144595f41435449564560481b604482015260640161050f565b60068101805460ff191660011790556001600160a01b03821615611716576001600160a01b03821660009081526005602081905260409091209081015460ff166116d55760405162461bcd60e51b815260206004820152600f60248201526e414c4c595f4e4f545f41435449564560881b604482015260640161050f565b81546001600160a01b038085166001600160a01b03199283161784558254600181018455600093845260209093209092018054928616929091169190911790555b816001600160a01b0316836001600160a01b03167f15ad1d28b052a6cc2dd1d34d9e06a1847055d520e2163017e6e8aad6431b7f6a60405160405180910390a3505050565b33600090815260056020526040902060028101548061178c5760405162461bcd60e51b815260040161050f90611dc1565b60008260020181905550600060029054906101000a90046001600160a01b03166001600160a01b031663fc0c546a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156117e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180d9190611ce3565b60405163a9059cbb60e01b8152336004820152602481018390526001600160a01b03919091169063a9059cbb906044016020604051808303816000875af115801561185c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118809190611ded565b5060405181815233907f3dfe9be199655709d01d635bf441264a809a090c98ed7aae9abdc85f7dcbc09d90602001610970565b600060029054906101000a90046001600160a01b03166001600160a01b03166312d43a516040518163ffffffff1660e01b8152600401602060405180830381865afa158015611906573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192a9190611ce3565b6001600160a01b0316336001600160a01b03161461195a5760405162461bcd60e51b815260040161050f90611d00565b603281111561197b5760405162461bcd60e51b815260040161050f90611e0f565b60038190556040518181527f4dec17ad9a229f707b7c2fb9531cd3b9c548f9eca80c03457ca38a0bb1df35fe9060200161058c565b600054610100900460ff16158080156119d05750600054600160ff909116105b806119ea5750303b1580156119ea575060005460ff166001145b611a4d5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161050f565b6000805460ff191660011790558015611a70576000805461ff0019166101001790555b6001600160a01b03861615801590611a89575060328511155b8015611a96575060648411155b8015611aa3575060328311155b8015611aaf5750600082115b611aea5760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640161050f565b6000805462010000600160b01b031916620100006001600160a01b0389160217905560018590556002849055600383905560048290558015611b66576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b600060208284031215611b8057600080fd5b5035919050565b6001600160a01b0381168114611b9c57600080fd5b50565b600060208284031215611bb157600080fd5b813561113681611b87565b6020808252825182820181905260009190848201906040850190845b81811015611bfd5783516001600160a01b031683529284019291840191600101611bd8565b50909695505050505050565b60008060408385031215611c1c57600080fd5b50508035926020909101359150565b60008060408385031215611c3e57600080fd5b8235611c4981611b87565b91506020830135611c5981611b87565b809150509250929050565b60008060008060808587031215611c7a57600080fd5b8435611c8581611b87565b966020860135965060408601359560600135945092505050565b600080600080600060a08688031215611cb757600080fd5b8535611cc281611b87565b97602087013597506040870135966060810135965060800135945092505050565b600060208284031215611cf557600080fd5b815161113681611b87565b602080825260089082015267474f565f4f4e4c5960c01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176105cd576105cd611d22565b600082611d6c57634e487b7160e01b600052601260045260246000fd5b500490565b818103818111156105cd576105cd611d22565b808201808211156105cd576105cd611d22565b60208082526010908201526f414c52454144595f554e41435449564560801b604082015260600190565b6020808252601290820152714e4f5f50454e44494e475f5245574152445360701b604082015260600190565b600060208284031215611dff57600080fd5b8151801515811461113657600080fd5b6020808252600e908201526d056414c55455f41424f56455f35360941b604082015260600190565b6020808252600990820152680414444524553535f360bc1b60408201526060019056fea26469706673582212206490cea7a3d6b416677b6ef6d09d438ca3e5302a98f82329c59390ba47d4214564736f6c63430008170033",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2892,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 2895,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 16008,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterface)33235"
      },
      {
        "astId": 16010,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "allyFeeP",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16012,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "startReferrerFeeP",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 16014,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "openFeeP",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16016,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "targetVolumeWETH",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16051,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "allyDetails",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(AllyDetails)16030_storage)"
      },
      {
        "astId": 16056,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "referrerDetails",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(ReferrerDetails)16046_storage)"
      },
      {
        "astId": 16060,
        "contract": "contracts/Referrals.sol:Referrals",
        "label": "referrerByTrader",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(StorageInterface)33235": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_struct(AllyDetails)16030_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Referrals.AllyDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(AllyDetails)16030_storage"
      },
      "t_mapping(t_address,t_struct(ReferrerDetails)16046_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Referrals.ReferrerDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferrerDetails)16046_storage"
      },
      "t_struct(AllyDetails)16030_storage": {
        "encoding": "inplace",
        "label": "struct Referrals.AllyDetails",
        "members": [
          {
            "astId": 16019,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "referrersReferred",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 16021,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "volumeReferredWETH",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 16023,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "pendingRewardsToken",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16025,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16027,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsValueWETH",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16029,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "active",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ReferrerDetails)16046_storage": {
        "encoding": "inplace",
        "label": "struct Referrals.ReferrerDetails",
        "members": [
          {
            "astId": 16032,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "ally",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 16035,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "tradersReferred",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 16037,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "volumeReferredWETH",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 16039,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "pendingRewardsToken",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 16041,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsToken",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 16043,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "totalRewardsValueWETH",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 16045,
            "contract": "contracts/Referrals.sol:Referrals",
            "label": "active",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}