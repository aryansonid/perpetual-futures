{
  "address": "0xFD0da7d4eDFD3575CF9F5084a2AB453D3caF287e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "ChainlinkCallbackTimeout",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "CouldNotCloseTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        }
      ],
      "name": "MarketOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderInitiated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        }
      ],
      "name": "NftOrderSameBlock",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NumberUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxSlippageP",
          "type": "uint256"
        }
      ],
      "name": "OpenLimitUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "SlUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "TpUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_msgSender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "callbacks",
      "outputs": [
        {
          "internalType": "contract CallbacksInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "closeTradeMarket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "call_data",
          "type": "bytes"
        }
      ],
      "name": "delegatedAction",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegations",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orderType",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        }
      ],
      "name": "executeLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[100]",
          "name": "_orderTypes",
          "type": "uint256[100]"
        },
        {
          "internalType": "address[100]",
          "name": "traders",
          "type": "address[100]"
        },
        {
          "internalType": "uint256[100]",
          "name": "pairIndexs",
          "type": "uint256[100]"
        },
        {
          "internalType": "uint256[100]",
          "name": "indexs",
          "type": "uint256[100]"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "executeLiquidations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "contract CallbacksInterface",
          "name": "_callbacks",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPosWETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_marketOrdersTimeout",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isTradeLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        }
      ],
      "name": "isTradeLiquidatablePure",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "isTradeParLiquidatable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        }
      ],
      "name": "isTradeParLiquidatablePure",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketOrdersTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPosWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLeveragedPosWETH",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "internalType": "enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "spreadReductionId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "slippageP",
          "type": "uint256"
        }
      ],
      "name": "openTrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        }
      ],
      "name": "setDelegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMarketOrdersTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMaxPosWETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newSl",
          "type": "uint256"
        }
      ],
      "name": "updateSl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newTp",
          "type": "uint256"
        }
      ],
      "name": "updateTp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x52503c93ce1034160367fb99f295f6e37588f7b96092dd759d31174415054c4f",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xFD0da7d4eDFD3575CF9F5084a2AB453D3caF287e",
    "transactionIndex": 1,
    "gasUsed": "14993165",
    "logsBloom": "0x
    "blockHash": "0xa5884bfbab3f5b6c2890c699cd9bed644bed7f6eb683b38259c00e6cedad7adb",
    "transactionHash": "0x52503c93ce1034160367fb99f295f6e37588f7b96092dd759d31174415054c4f",
    "logs": [],
    "blockNumber": 3067443,
    "cumulativeGasUsed": "14993165",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5e28ac8f4e0ba9fb55d9b76e74607fb0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"ChainlinkCallbackTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"CouldNotCloseTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"}],\"name\":\"MarketOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"}],\"name\":\"NftOrderSameBlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NumberUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"OpenLimitPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxSlippageP\",\"type\":\"uint256\"}],\"name\":\"OpenLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"SlUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"TpUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_msgSender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"callbacks\",\"outputs\":[{\"internalType\":\"contract CallbacksInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"closeTradeMarket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"call_data\",\"type\":\"bytes\"}],\"name\":\"delegatedAction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orderType\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"}],\"name\":\"executeLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[100]\",\"name\":\"_orderTypes\",\"type\":\"uint256[100]\"},{\"internalType\":\"address[100]\",\"name\":\"traders\",\"type\":\"address[100]\"},{\"internalType\":\"uint256[100]\",\"name\":\"pairIndexs\",\"type\":\"uint256[100]\"},{\"internalType\":\"uint256[100]\",\"name\":\"indexs\",\"type\":\"uint256[100]\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"executeLiquidations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"contract CallbacksInterface\",\"name\":\"_callbacks\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPosWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketOrdersTimeout\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isTradeLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"}],\"name\":\"isTradeLiquidatablePure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"isTradeParLiquidatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"}],\"name\":\"isTradeParLiquidatablePure\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketOrdersTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPosWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLeveragedPosWETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"internalType\":\"enum NftRewardsInterfaceV6_3_1.OpenLimitOrderType\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"}],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMarketOrdersTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMaxPosWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newSl\",\"type\":\"uint256\"}],\"name\":\"updateSl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newTp\",\"type\":\"uint256\"}],\"name\":\"updateTp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Trading.sol\":\"Trading\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Delegatable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nabstract contract Delegatable {\\n    mapping(address => address) public delegations;\\n    address private senderOverride;\\n\\n    function setDelegate(address delegate) external {\\n        require(tx.origin == msg.sender, \\\"NO_CONTRACT\\\");\\n\\n        delegations[msg.sender] = delegate;\\n    }\\n\\n    function removeDelegate() external {\\n        delegations[msg.sender] = address(0);\\n    }\\n\\n    function delegatedAction(\\n        address trader,\\n        bytes calldata call_data\\n    ) external returns (bytes memory) {\\n        require(delegations[trader] == msg.sender, \\\"DELEGATE_NOT_APPROVED\\\");\\n\\n        senderOverride = trader;\\n        (bool success, bytes memory result) = address(this).delegatecall(\\n            call_data\\n        );\\n        if (!success) {\\n            // Next 5 lines from https://ethereum.stackexchange.com/a/83577 (return the original revert reason)\\n            if (result.length < 68) revert();\\n            assembly {\\n                result := add(result, 0x04)\\n            }\\n            revert(abi.decode(result, (string)));\\n        }\\n\\n        senderOverride = address(0);\\n\\n        return result;\\n    }\\n\\n    function _msgSender() public view returns (address) {\\n        if (senderOverride == address(0)) {\\n            return msg.sender;\\n        } else {\\n            return senderOverride;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfab714c395b9e8d9b3048c2a5532e19c564b8dcbcf9b1be8b049ec707778d59b\",\"license\":\"MIT\"},\"contracts/Trading.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./Delegatable.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./libraries/TradeUtils.sol\\\";\\nimport \\\"./libraries/PackingUtils.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\nimport \\\"./interfaces/CallbacksInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_4.sol\\\";\\n\\ncontract Trading is Delegatable, Initializable {\\n    using TradeUtils for address;\\n    using PackingUtils for uint256;\\n\\n    // Contracts (constant)\\n    StorageInterface public storageT;\\n    NftRewardsInterfaceV6_3_1 public nftRewards;\\n    PairInfosInterface public pairInfos;\\n    ReferralsInterface public referrals;\\n    BorrowingFeesInterface public borrowingFees;\\n    CallbacksInterface public callbacks;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10;\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n\\n    // Params (adjustable)\\n    uint public maxPosWETH; // 1e18 (eg. 75000 * 1e18)\\n    uint public marketOrdersTimeout; // block (eg. 30)\\n    int public minLeveragedPosWETH = 10e18; //100 weth\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n\\n    // Events\\n    event Done(bool done);\\n    event Paused(bool paused);\\n\\n    event NumberUpdated(string name, uint value);\\n\\n    event MarketOrderInitiated(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        bool open\\n    );\\n\\n    event OpenLimitPlaced(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n    event OpenLimitUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newPrice,\\n        uint newTp,\\n        uint newSl,\\n        uint maxSlippageP\\n    );\\n    event OpenLimitCanceled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    event TpUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newTp\\n    );\\n    event SlUpdated(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint newSl\\n    );\\n\\n    event NftOrderInitiated(\\n        uint orderId,\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n    event NftOrderSameBlock(\\n        address indexed nftHolder,\\n        address indexed trader,\\n        uint indexed pairIndex\\n    );\\n\\n    event ChainlinkCallbackTimeout(\\n        uint indexed orderId,\\n        StorageInterface.PendingMarketOrder order\\n    );\\n    event CouldNotCloseTrade(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index\\n    );\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        BorrowingFeesInterface _borrowingFees,\\n        CallbacksInterface _callbacks,\\n        uint _maxPosWETH,\\n        uint _marketOrdersTimeout\\n    ) external initializer {\\n        require(\\n            address(_storageT) != address(0) &&\\n                address(_nftRewards) != address(0) &&\\n                address(_pairInfos) != address(0) &&\\n                address(_referrals) != address(0) &&\\n                address(_borrowingFees) != address(0) &&\\n                address(_callbacks) != address(0) &&\\n                _maxPosWETH > 0 &&\\n                _marketOrdersTimeout > 0,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        borrowingFees = _borrowingFees;\\n\\n        maxPosWETH = _maxPosWETH;\\n        marketOrdersTimeout = _marketOrdersTimeout;\\n        callbacks = _callbacks;\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier notContract() {\\n        isNotContract();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        require(msg.sender == storageT.gov(), \\\"GOV_ONLY\\\");\\n    }\\n\\n    function isNotContract() private view {\\n        require(tx.origin == msg.sender);\\n    }\\n\\n    function isNotDone() private view {\\n        require(!isDone, \\\"DONE\\\");\\n    }\\n\\n    // Manage params\\n    function setMaxPosWETH(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        maxPosWETH = value;\\n        emit NumberUpdated(\\\"maxPosWETH\\\", value);\\n    }\\n\\n    function setMarketOrdersTimeout(uint value) external onlyGov {\\n        require(value > 0, \\\"VALUE_0\\\");\\n        marketOrdersTimeout = value;\\n        emit NumberUpdated(\\\"marketOrdersTimeout\\\", value);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n        emit Paused(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n        emit Done(isDone);\\n    }\\n\\n    // Open new trade (MARKET/LIMIT)\\n    function openTrade(\\n        StorageInterface.Trade memory t,\\n        NftRewardsInterfaceV6_3_1.OpenLimitOrderType orderType, // LEGACY => market\\n        uint spreadReductionId,\\n        uint slippageP // 1e10 (%)\\n    )\\n        external\\n        // address referrer\\n        notContract\\n        notDone\\n    {\\n        require(!isPaused, \\\"PAUSED\\\");\\n        require(t.openPrice * slippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n        require(t.openPrice > 0, \\\"PRICE_ZERO\\\");\\n\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        address sender = _msgSender();\\n\\n        require(\\n            storageT.openTradesCount(sender, t.pairIndex) +\\n                storageT.pendingMarketOpenCount(sender, t.pairIndex) +\\n                storageT.openLimitOrdersCount(sender, t.pairIndex) <\\n                storageT.maxTradesPerPair(),\\n            \\\"MAX_TRADES_PER_PAIR\\\"\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(t.positionSizeWETH <= maxPosWETH, \\\"ABOVE_MAX_POS\\\");\\n        require(\\n            t.positionSizeWETH * t.leverage >=\\n                pairsStored.pairMinLevPosWETH(t.pairIndex),\\n            \\\"BELOW_MIN_POS\\\"\\n        );\\n\\n        require(\\n            t.leverage > 0 &&\\n                t.leverage >= pairsStored.pairMinLeverage(t.pairIndex) &&\\n                t.leverage <= pairMaxLeverage(pairsStored, t.pairIndex),\\n            \\\"LEVERAGE_INCORRECT\\\"\\n        );\\n\\n        // require(\\n        //     spreadReductionId == 0 ||\\n        //         storageT.nfts(spreadReductionId - 1).balanceOf(sender) > 0,\\n        //     \\\"NO_CORRESPONDING_NFT_SPREAD_REDUCTION\\\"\\n        // );\\n\\n        require(\\n            t.tp == 0 || (t.buy ? t.tp > t.openPrice : t.tp < t.openPrice),\\n            \\\"WRONG_TP\\\"\\n        );\\n        require(\\n            t.sl == 0 || (t.buy ? t.sl < t.openPrice : t.sl > t.openPrice),\\n            \\\"WRONG_SL\\\"\\n        );\\n\\n        (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n            0,\\n            t.pairIndex,\\n            t.buy,\\n            t.positionSizeWETH * t.leverage\\n        );\\n        require(\\n            priceImpactP * t.leverage <= pairInfos.maxNegativePnlOnOpenP(),\\n            \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n        );\\n\\n        storageT.transferWETH(sender, address(storageT), t.positionSizeWETH);\\n\\n        if (orderType != NftRewardsInterfaceV6_3_1.OpenLimitOrderType.LEGACY) {\\n            // uint index = storageT.firstEmptyOpenLimitIndex(sender, t.pairIndex);\\n            // storageT.storeOpenLimitOrder(\\n            //     StorageInterface.OpenLimitOrder(\\n            //         sender,\\n            //         t.pairIndex,\\n            //         index,\\n            //         t.positionSizeWETH,\\n            //         spreadReductionId > 0\\n            //             ? storageT.spreadReductionsP(spreadReductionId - 1)\\n            //             : 0,\\n            //         t.buy,\\n            //         t.leverage,\\n            //         t.tp,\\n            //         t.sl,\\n            //         t.openPrice,\\n            //         t.openPrice,\\n            //         block.number,\\n            //         0\\n            //     )\\n            // );\\n            // nftRewards.setOpenLimitOrderType(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     orderType\\n            // );\\n            // address c = storageT.callbacks();\\n            // c.setTradeLastUpdated(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     ChainUtils.getBlockNumber()\\n            // );\\n            // c.setTradeData(\\n            //     sender,\\n            //     t.pairIndex,\\n            //     index,\\n            //     TradingCallbacksInterface.TradeType.LIMIT,\\n            //     slippageP\\n            // );\\n            // emit OpenLimitPlaced(sender, t.pairIndex, index);\\n        } else {\\n            uint orderId = aggregator.getPrice(\\n                t.pairIndex,\\n                AggregatorInterfaceV1_4.OrderType.MARKET_OPEN,\\n                t.positionSizeWETH * t.leverage,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n            // storageT.storePendingMarketOrder(\\n            //     StorageInterface.PendingMarketOrder(\\n            //         StorageInterface.Trade(\\n            //             sender,\\n            //             t.pairIndex,\\n            //             0,\\n            //             0,\\n            //             t.positionSizeWETH,\\n            //             0,\\n            //             t.buy,\\n            //             t.leverage,\\n            //             t.tp,\\n            //             t.sl\\n            //         ),\\n            //         0,\\n            //         t.openPrice,\\n            //         slippageP,\\n            //         0,\\n            //         0\\n            //     ),\\n            //     orderId,\\n            //     true\\n            // );\\n\\n            (storageT.priceAggregator()).marketOrderfulfill(\\n                orderId,\\n                StorageInterface.PendingMarketOrder(\\n                    StorageInterface.Trade(\\n                        sender,\\n                        t.pairIndex,\\n                        0,\\n                        0,\\n                        t.positionSizeWETH,\\n                        0,\\n                        t.buy,\\n                        t.leverage,\\n                        t.tp,\\n                        t.sl\\n                    ),\\n                    0,\\n                    t.openPrice,\\n                    slippageP,\\n                    0,\\n                    0\\n                )\\n            );\\n\\n            emit MarketOrderInitiated(orderId, sender, t.pairIndex, true);\\n        }\\n\\n        // referrals.registerPotentialReferrer(sender, referrer);\\n    }\\n\\n    // Close trade (MARKET)\\n    function closeTradeMarket(\\n        uint pairIndex,\\n        uint index\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        StorageInterface.TradeInfo memory i = storageT.getOpenTradesInfo(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n\\n        require(\\n            storageT.pendingOrderIdsCount(sender) <\\n                storageT.maxPendingMarketOrders(),\\n            \\\"MAX_PENDING_ORDERS\\\"\\n        );\\n        require(!i.beingMarketClosed, \\\"ALREADY_BEING_CLOSED\\\");\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint orderId = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        ).getPrice(\\n                pairIndex,\\n                AggregatorInterfaceV1_4.OrderType.MARKET_CLOSE,\\n                (t.initialPosToken * i.tokenPriceWETH * t.leverage) / PRECISION,\\n                ChainUtils.getBlockNumber()\\n            );\\n\\n        // storageT.storePendingMarketOrder(\\n        //     StorageInterface.PendingMarketOrder(\\n        //         StorageInterface.Trade(\\n        //             sender,\\n        //             pairIndex,\\n        //             index,\\n        //             0,\\n        //             0,\\n        //             0,\\n        //             false,\\n        //             0,\\n        //             0,\\n        //             0\\n        //         ),\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0,\\n        //         0\\n        //     ),\\n        //     orderId,\\n        //     false\\n        // );\\n\\n        (storageT.priceAggregator()).marketOrderfulfill(\\n            orderId,\\n            StorageInterface.PendingMarketOrder(\\n                StorageInterface.Trade(\\n                    sender,\\n                    pairIndex,\\n                    index,\\n                    0,\\n                    0,\\n                    0,\\n                    false,\\n                    0,\\n                    0,\\n                    0\\n                ),\\n                0,\\n                0,\\n                0,\\n                0,\\n                0\\n            )\\n        );\\n\\n        emit MarketOrderInitiated(orderId, sender, pairIndex, false);\\n    }\\n\\n    // Manage limit order (OPEN)\\n    // function updateOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     uint price, // PRECISION\\n    //     uint tp,\\n    //     uint sl,\\n    //     uint maxSlippageP\\n    // ) external notContract notDone {\\n    //     require(price > 0, \\\"PRICE_ZERO\\\");\\n\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     require(tp == 0 || (o.buy ? tp > price : tp < price), \\\"WRONG_TP\\\");\\n    //     require(sl == 0 || (o.buy ? sl < price : sl > price), \\\"WRONG_SL\\\");\\n\\n    //     require(price * maxSlippageP < type(uint256).max, \\\"OVERFLOW\\\");\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     o.minPrice = price;\\n    //     o.maxPrice = price;\\n    //     o.tp = tp;\\n    //     o.sl = sl;\\n\\n    //     storageT.updateOpenLimitOrder(o);\\n\\n    //     address c = storageT.callbacks();\\n    //     c.setTradeLastUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         ChainUtils.getBlockNumber()\\n    //     );\\n    //     c.setTradeData(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         TradingCallbacksInterface.TradeType.LIMIT,\\n    //         maxSlippageP\\n    //     );\\n\\n    //     emit OpenLimitUpdated(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         price,\\n    //         tp,\\n    //         sl,\\n    //         maxSlippageP\\n    //     );\\n    // }\\n\\n    // function cancelOpenLimitOrder(\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) external notContract notDone {\\n    //     address sender = _msgSender();\\n    //     require(\\n    //         storageT.hasOpenLimitOrder(sender, pairIndex, index),\\n    //         \\\"NO_LIMIT\\\"\\n    //     );\\n\\n    //     StorageInterface.OpenLimitOrder memory o = storageT.getOpenLimitOrder(\\n    //         sender,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n\\n    //     checkNoPendingTrigger(\\n    //         sender,\\n    //         pairIndex,\\n    //         index,\\n    //         StorageInterface.LimitOrder.OPEN\\n    //     );\\n\\n    //     storageT.unregisterOpenLimitOrder(sender, pairIndex, index);\\n    //     storageT.transferWETH(address(storageT), sender, o.positionSize);\\n\\n    //     emit OpenLimitCanceled(sender, pairIndex, index);\\n    // }\\n\\n    // Manage limit order (TP/SL)\\n    function updateTp(\\n        uint pairIndex,\\n        uint index,\\n        uint newTp\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.TP\\n        // );\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        storageT.updateTp(sender, pairIndex, index, newTp);\\n        address(storageT.callbacks()).setTpLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit TpUpdated(sender, pairIndex, index, newTp);\\n    }\\n\\n    function updateSl(\\n        uint pairIndex,\\n        uint index,\\n        uint newSl\\n    ) external notContract notDone {\\n        address sender = _msgSender();\\n\\n        // checkNoPendingTrigger(\\n        //     sender,\\n        //     pairIndex,\\n        //     index,\\n        //     StorageInterface.LimitOrder.SL\\n        // );\\n\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            sender,\\n            pairIndex,\\n            index\\n        );\\n        require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n        uint maxSlDist = (t.openPrice * MAX_SL_P) / 100 / t.leverage;\\n\\n        require(\\n            newSl == 0 ||\\n                (\\n                    t.buy\\n                        ? newSl >= t.openPrice - maxSlDist\\n                        : newSl <= t.openPrice + maxSlDist\\n                ),\\n            \\\"SL_TOO_BIG\\\"\\n        );\\n\\n        storageT.updateSl(sender, pairIndex, index, newSl);\\n        address(storageT.callbacks()).setSlLastUpdated(\\n            sender,\\n            pairIndex,\\n            index,\\n            TradingCallbacksInterface.TradeType.MARKET,\\n            ChainUtils.getBlockNumber()\\n        );\\n\\n        emit SlUpdated(sender, pairIndex, index, newSl);\\n    }\\n\\n    function executeLiquidations(\\n        uint[100] memory _orderTypes,\\n        address[100] memory traders,\\n        uint[100] memory pairIndexs,\\n        uint[100] memory indexs,\\n        uint256 index\\n    ) public notDone {\\n        for (uint i; i < index; i++) {\\n            executeLiquidation(\\n                _orderTypes[i],\\n                traders[i],\\n                pairIndexs[i],\\n                indexs[i],\\n                1,\\n                1\\n            );\\n        }\\n    }\\n\\n    // Execute limit order\\n    function executeLiquidation(\\n        uint _orderType,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint nftId,\\n        uint nftType\\n    ) public notDone {\\n        // (\\n        //     uint _orderType,\\n        //     address trader,\\n        //     uint pairIndex,\\n        //     uint index,\\n        //     uint nftId,\\n        //     uint nftType\\n        // ) = packed.unpackExecuteNftOrder();\\n        StorageInterface.LimitOrder orderType = StorageInterface.LimitOrder(\\n            _orderType\\n        );\\n        address sender = _msgSender();\\n\\n        // require(nftType >= 1 && nftType <= 5, \\\"WRONG_NFT_TYPE\\\");\\n        // require(storageT.nfts(nftType - 1).ownerOf(nftId) == sender, \\\"NO_NFT\\\");\\n\\n        // require(\\n        //     block.number >=\\n        //         storageT.nftLastSuccess(nftId) + storageT.nftSuccessTimelock(),\\n        //     \\\"SUCCESS_TIMELOCK\\\"\\n        // );\\n\\n        bool isOpenLimit = orderType == StorageInterface.LimitOrder.OPEN;\\n        TradingCallbacksInterface.TradeType tradeType = isOpenLimit\\n            ? TradingCallbacksInterface.TradeType.LIMIT\\n            : TradingCallbacksInterface.TradeType.MARKET;\\n\\n        // require(\\n        //     canExecute(\\n        //         orderType,\\n        //         TradingCallbacksInterface.SimplifiedTradeId(\\n        //             trader,\\n        //             pairIndex,\\n        //             index,\\n        //             tradeType\\n        //         )\\n        //     ),\\n        //     \\\"IN_TIMEOUT\\\"\\n        // );\\n\\n        // handleBotInUse(sender, nftId, trader, pairIndex, index);\\n\\n        StorageInterface.Trade memory t;\\n\\n        if (isOpenLimit) {\\n            revert(\\\"Open Limit orders not supported yet\\\");\\n            // require(\\n            //     storageT.hasOpenLimitOrder(trader, pairIndex, index),\\n            //     \\\"NO_LIMIT\\\"\\n            // );\\n        } else {\\n            t = storageT.getOpenTrades(trader, pairIndex, index);\\n\\n            require(t.leverage > 0, \\\"NO_TRADE\\\");\\n\\n            if (orderType == StorageInterface.LimitOrder.LIQ) {\\n                uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        t.positionSizeWETH,\\n                        t.leverage\\n                    )\\n                );\\n\\n                require(\\n                    t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl),\\n                    \\\"HAS_SL\\\"\\n                );\\n            } else if (orderType == StorageInterface.LimitOrder.PAR_LIQ) {\\n                uint parLiqPrice = borrowingFees\\n                    .getTradePartialLiquidationPrice(\\n                        BorrowingFeesInterface.LiqPriceInput(\\n                            t.trader,\\n                            t.pairIndex,\\n                            t.index,\\n                            t.openPrice,\\n                            t.buy,\\n                            t.positionSizeWETH,\\n                            t.leverage\\n                        )\\n                    );\\n\\n                require(\\n                    t.sl == 0 ||\\n                        (t.buy ? parLiqPrice > t.sl : parLiqPrice < t.sl),\\n                    \\\"HAS_SL\\\"\\n                );\\n                int256 pnl = callbacks.getTradePnl(\\n                    t.trader,\\n                    t.pairIndex,\\n                    t.index\\n                );\\n                int256 position = int(t.positionSizeWETH) + pnl;\\n                require(\\n                    position * int256(t.leverage) >= minLeveragedPosWETH,\\n                    \\\"position to small for partial liquidation\\\"\\n                );\\n            } else {\\n                require(\\n                    orderType != StorageInterface.LimitOrder.SL || t.sl > 0,\\n                    \\\"NO_SL\\\"\\n                );\\n                require(\\n                    orderType != StorageInterface.LimitOrder.TP || t.tp > 0,\\n                    \\\"NO_TP\\\"\\n                );\\n            }\\n        }\\n\\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n        //         .TriggeredLimitId(trader, pairIndex, index, orderType);\\n\\n        if (\\n            true\\n            // !nftRewards.triggered(triggeredLimitId) ||\\n            // nftRewards.timedOut(triggeredLimitId)\\n        ) {\\n            uint leveragedPosWETH;\\n\\n            if (isOpenLimit) {\\n                // StorageInterface.OpenLimitOrder memory l = storageT\\n                //     .getOpenLimitOrder(trader, pairIndex, index);\\n                // leveragedPosWETH = l.positionSize * l.leverage;\\n                // (uint priceImpactP, ) = pairInfos.getTradePriceImpact(\\n                //     0,\\n                //     l.pairIndex,\\n                //     l.buy,\\n                //     leveragedPosWETH\\n                // );\\n                // require(\\n                //     priceImpactP * l.leverage <=\\n                //         pairInfos.maxNegativePnlOnOpenP(),\\n                //     \\\"PRICE_IMPACT_TOO_HIGH\\\"\\n                // );\\n            } else {\\n                leveragedPosWETH = t.positionSizeWETH * t.leverage;\\n            }\\n\\n            // storageT.transferLinkToAggregator(\\n            //     sender,\\n            //     pairIndex,\\n            //     leveragedPosWETH\\n            // );\\n\\n            (uint orderId /*uint linkFee*/, ) = getPriceNftOrder(\\n                isOpenLimit,\\n                trader,\\n                pairIndex,\\n                index,\\n                tradeType,\\n                orderType,\\n                leveragedPosWETH\\n            );\\n\\n            StorageInterface.PendingNftOrder memory pendingNftOrder;\\n            pendingNftOrder.nftHolder = sender;\\n            pendingNftOrder.nftId = nftId;\\n            pendingNftOrder.trader = trader;\\n            pendingNftOrder.pairIndex = pairIndex;\\n            pendingNftOrder.index = index;\\n            pendingNftOrder.orderType = orderType;\\n            storageT.storePendingNftOrder(pendingNftOrder, orderId);\\n\\n            (storageT.priceAggregator()).nftOrderfulfill(\\n                orderId,\\n                pendingNftOrder\\n            );\\n            emit NftOrderInitiated(orderId, sender, trader, pairIndex);\\n        } else {\\n            // nftRewards.storeTriggerSameBlock(triggeredLimitId, sender);\\n\\n            emit NftOrderSameBlock(sender, trader, pairIndex);\\n        }\\n    }\\n\\n    // Market timeout\\n    // function openTradeMarketTimeout(uint _order) external notContract notDone {\\n    //     address sender = _msgSender();\\n\\n    //     StorageInterface.PendingMarketOrder memory o = storageT\\n    //         .reqID_pendingMarketOrder(_order);\\n    //     StorageInterface.Trade memory t = o.trade;\\n\\n    //     require(\\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n    //         \\\"WAIT_TIMEOUT\\\"\\n    //     );\\n    //     require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n    //     require(t.leverage > 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n    //     storageT.unregisterPendingMarketOrder(_order, true);\\n    //     storageT.transferWETH(address(storageT), sender, t.positionSizeWETH);\\n\\n    //     emit ChainlinkCallbackTimeout(_order, o);\\n    // }\\n\\n    // function closeTradeMarketTimeout(uint _order) external notContract notDone {\\n    //     address sender = _msgSender();\\n\\n    //     StorageInterface.PendingMarketOrder memory o = storageT\\n    //         .reqID_pendingMarketOrder(_order);\\n    //     StorageInterface.Trade memory t = o.trade;\\n\\n    //     require(\\n    //         o.block > 0 && block.number >= o.block + marketOrdersTimeout,\\n    //         \\\"WAIT_TIMEOUT\\\"\\n    //     );\\n    //     require(t.trader == sender, \\\"NOT_YOUR_ORDER\\\");\\n    //     require(t.leverage == 0, \\\"WRONG_MARKET_ORDER_TYPE\\\");\\n\\n    //     storageT.unregisterPendingMarketOrder(_order, false);\\n\\n    //     (bool success, ) = address(this).delegatecall(\\n    //         abi.encodeWithSignature(\\n    //             \\\"closeTradeMarket(uint256,uint256)\\\",\\n    //             t.pairIndex,\\n    //             t.index\\n    //         )\\n    //     );\\n\\n    //     if (!success) {\\n    //         emit CouldNotCloseTrade(sender, t.pairIndex, t.index);\\n    //     }\\n\\n    //     emit ChainlinkCallbackTimeout(_order, o);\\n    // }\\n\\n    // //Helpers\\n    // function checkNoPendingTrigger(\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index,\\n    //     StorageInterface.LimitOrder orderType\\n    // ) private view {\\n    //     NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n    //         memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n    //             .TriggeredLimitId(trader, pairIndex, index, orderType);\\n    //     require(\\n    //         !nftRewards.triggered(triggeredLimitId) ||\\n    //             nftRewards.timedOut(triggeredLimitId),\\n    //         \\\"PENDING_TRIGGER\\\"\\n    //     );\\n    // }\\n\\n    // function canExecute(\\n    //     StorageInterface.LimitOrder orderType,\\n    //     TradingCallbacksInterface.SimplifiedTradeId memory id\\n    // ) private view returns (bool) {\\n    //     if (orderType == StorageInterface.LimitOrder.LIQ) return true;\\n\\n    //     uint b = ChainUtils.getBlockNumber();\\n    //     address cb = storageT.callbacks();\\n\\n    //     if (orderType == StorageInterface.LimitOrder.TP)\\n    //         return !cb.isTpInTimeout(id, b);\\n    //     if (orderType == StorageInterface.LimitOrder.SL)\\n    //         return !cb.isSlInTimeout(id, b);\\n\\n    //     return !cb.isLimitInTimeout(id, b);\\n    // }\\n\\n    function pairMaxLeverage(\\n        PairsStorageInterfaceV6 pairsStored,\\n        uint pairIndex\\n    ) private view returns (uint) {\\n        uint max = TradingCallbacksInterface(address(storageT.callbacks()))\\n            .pairMaxLeverage(pairIndex);\\n        return max > 0 ? max : pairsStored.pairMaxLeverage(pairIndex);\\n    }\\n\\n    // function handleBotInUse(\\n    //     address sender,\\n    //     uint nftId,\\n    //     address trader,\\n    //     uint pairIndex,\\n    //     uint index\\n    // ) private {\\n    //     (bytes32 nftHash, bytes32 botHash) = nftRewards.getNftBotHashes(\\n    //         block.number,\\n    //         sender,\\n    //         nftId,\\n    //         trader,\\n    //         pairIndex,\\n    //         index\\n    //     );\\n    //     require(!nftRewards.nftBotInUse(nftHash, botHash), \\\"BOT_IN_USE\\\");\\n\\n    //     nftRewards.setNftBotInUse(nftHash, botHash);\\n    // }\\n\\n    function getPriceNftOrder(\\n        bool isOpenLimit,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType tradeType,\\n        StorageInterface.LimitOrder orderType,\\n        uint leveragedPosWETH\\n    ) private returns (uint orderId, uint linkFee) {\\n        TradingCallbacksInterface.LastUpdated\\n            memory lastUpdated = TradingCallbacksInterface(\\n                address(storageT.callbacks())\\n            ).tradeLastUpdated(trader, pairIndex, index, tradeType);\\n\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n\\n        orderId = aggregator.getPrice(\\n            pairIndex,\\n            isOpenLimit\\n                ? AggregatorInterfaceV1_4.OrderType.LIMIT_OPEN\\n                : AggregatorInterfaceV1_4.OrderType.LIMIT_CLOSE,\\n            leveragedPosWETH,\\n            isOpenLimit\\n                ? lastUpdated.limit\\n                : orderType == StorageInterface.LimitOrder.SL\\n                ? lastUpdated.sl\\n                : orderType == StorageInterface.LimitOrder.TP\\n                ? lastUpdated.tp\\n                : lastUpdated.created\\n        );\\n\\n        // linkFee = aggregator.linkFee(pairIndex, leveragedPosWETH);\\n    }\\n\\n    function isTradeLiquidatable(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (bool) {\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            trader,\\n            pairIndex,\\n            index\\n        );\\n\\n        (bool liquidatable, bool noSL) = isTradeLiquidatablePure(t);\\n\\n        require(noSL, \\\"HAS_SL\\\");\\n\\n        return liquidatable;\\n    }\\n\\n    function isTradeLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) public view returns (bool, bool) {\\n        if (t.leverage == 0) return (false, false);\\n        uint liqPrice = borrowingFees.getTradeLiquidationPrice(\\n            BorrowingFeesInterface.LiqPriceInput(\\n                t.trader,\\n                t.pairIndex,\\n                t.index,\\n                t.openPrice,\\n                t.buy,\\n                t.positionSizeWETH,\\n                t.leverage\\n            )\\n        );\\n        (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\\n            t.pairIndex\\n        );\\n        bool noSL = t.sl == 0 || (t.buy ? liqPrice > t.sl : liqPrice < t.sl);\\n\\n        bool liquidatable = t.buy ? price <= liqPrice : price >= liqPrice;\\n\\n        return (liquidatable, noSL);\\n    }\\n\\n    function isTradeParLiquidatable(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (bool) {\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            trader,\\n            pairIndex,\\n            index\\n        );\\n\\n        (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\\n            pairIndex\\n        );\\n\\n        (bool parLiquidatable, bool noSL) = isTradeParLiquidatablePure(t);\\n\\n        require(noSL, \\\"HAS_SL\\\");\\n\\n        return parLiquidatable;\\n    }\\n\\n    function isTradeParLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) public view returns (bool, bool) {\\n        if (t.leverage == 0) return (false, false);\\n\\n        uint parLiqPrice = borrowingFees.getTradePartialLiquidationPrice(\\n            BorrowingFeesInterface.LiqPriceInput(\\n                t.trader,\\n                t.pairIndex,\\n                t.index,\\n                t.openPrice,\\n                t.buy,\\n                t.positionSizeWETH,\\n                t.leverage\\n            )\\n        );\\n        (uint256 price, uint256 lastUpdateTime) = (storageT.oracle()).getPrice(\\n            t.pairIndex\\n        );\\n        bool noSL = t.sl == 0 ||\\n            (t.buy ? parLiqPrice > t.sl : parLiqPrice < t.sl);\\n\\n        bool parLiquidatable = t.buy\\n            ? price <= parLiqPrice\\n            : price >= parLiqPrice;\\n\\n        return (parLiquidatable, noSL);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1ed6713cef547c03cdfa946ed5f4141e11960748db1899a57b5e63b6d08d1f\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd37be0934daaf172a910376e79b670d554a3b28f738fd8c8ec98b59e8d86b5f5\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe1262ceffbe82c77f3adaa31d439c79a7fa1726db48a4ad68ec84f09403e197d\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x84f882f552e28e119e3cf5ca7d6b4ca663371b516c0134c4d778906da2df906c\",\"license\":\"MIT\"},\"contracts/interfaces/CallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface CallbacksInterface {\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    // struct PendingMarketOrder {\\n    //     Trade trade;\\n    //     uint block;\\n    //     uint wantedPrice; // PRECISION\\n    //     uint slippageP; // PRECISION (%)\\n    //     uint spreadReductionP;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n\\n    // struct Trade {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint initialPosToken; // 1e18\\n    //     uint positionSizeWETH; // 1e18\\n    //     uint openPrice; // PRECISION\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION\\n    //     uint sl; // PRECISION\\n    // }\\n\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function executeNftOpenOrderCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n\\n    function getTradePnl(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (int256 pnl);\\n}\\n\",\"keccak256\":\"0x2367267b4c5a9f5f8d526171c3dd091862ce122d990ed73d6dd37d78ce4a344d\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x962ad22f47fc0a2fd3dfb883bf7780de5ed85c2bf33edd0968a1a35d9e62d21c\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x4d3908114968a30bdbfae459ab2b3e842053fa0f08490ad50744cc3df3c1f439\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4cf9781a0df06a546607997f12d5d984942657e9eb908229ef5f7f6d5b2bd385\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x288bab95d6c77a7f1423aaddd843ae8f1ce32f3dbd5a369d2980064dfb549701\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xbd69c374c647aab1dce1c1b73e891823446281e9de4c7aea1c019d6979e2b5b0\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0x88ed59116f2d558c2e829c9f8b15d105151d8738e07f579a7475892dd024db47\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfd1102a637e83931602623fcb549c8eee8460402473b62d8f13ab4a928458b38\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {StorageInterface} from \\\"./StorageInterface.sol\\\";\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n\\n    function isTradeParLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function isTradeLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function executeLiquidations(\\n        uint[100] memory _orderTypes,\\n        address[100] memory traders,\\n        uint[100] memory pairIndexs,\\n        uint[100] memory indexs,\\n        uint256 index\\n    ) external;\\n}\\n\",\"keccak256\":\"0x55c2a6ee9966a39778140bab34fd12c4467471ff2b63c1bed7856de3abc196b7\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0xf190cc5a8e2a88aef673fbea23fdb929891c75fd06c5cf3d3a3fd4e788bae576\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    event OpenningInterestUpated(\\n        uint256 indexed pairIndex,\\n        uint256 indexed openingInterestShort,\\n        uint256 indexed openingInterestLong\\n    );\\n\\n    event TradeOpen(Trade indexed t);\\n\\n    event TradeClose(Trade indexed t);\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxSlP() external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traders,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs,\\n            uint256 index\\n        );\\n}\\n\",\"keccak256\":\"0x81e49fd166d6e22a4f7b811ccfc4c04183d38631f5ef6a7d08b0ee56750f4b5b\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b6f3ec1152b61791df030a08f58bb579f7e689138bb45b62925c8e07f986710\",\"license\":\"MIT\"},\"contracts/interfaces/TradingCallbacksInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface TradingCallbacksInterface {\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    function tradeLastUpdated(\\n        address,\\n        uint,\\n        uint,\\n        TradeType\\n    ) external view returns (LastUpdated memory);\\n\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata,\\n        LastUpdated memory\\n    ) external;\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata,\\n        TradeData memory\\n    ) external;\\n\\n    function canExecuteTimeout() external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x505c78ea6e1a9c1e5ac1db10f8bf14ba037a0433240d506e718af9f783907e8b\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xab9f85c7c003d7e1063f86c5d5262250b6807bfa8d23d8c18ddf409a6aa9ed56\",\"license\":\"MIT\"},\"contracts/libraries/PackingUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nlibrary PackingUtils {\\n    function pack(\\n        uint256[] memory values,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256 packed) {\\n        require(\\n            values.length == bitLengths.length,\\n            \\\"Mismatch in the lengths of values and bitLengths arrays\\\"\\n        );\\n\\n        uint256 currentShift;\\n\\n        for (uint256 i; i < values.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Packed value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            require(\\n                values[i] <= maxValue,\\n                \\\"Value too large for specified bit length\\\"\\n            );\\n\\n            uint256 maskedValue = values[i] & maxValue;\\n            packed |= maskedValue << currentShift;\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack(\\n        uint256 packed,\\n        uint256[] memory bitLengths\\n    ) external pure returns (uint256[] memory values) {\\n        values = new uint256[](bitLengths.length);\\n\\n        uint256 currentShift;\\n        for (uint256 i; i < bitLengths.length; i++) {\\n            require(\\n                currentShift + bitLengths[i] <= 256,\\n                \\\"Unpacked value exceeds 256 bits\\\"\\n            );\\n\\n            uint256 maxValue = (1 << bitLengths[i]) - 1;\\n            uint256 mask = maxValue << currentShift;\\n            values[i] = (packed & mask) >> currentShift;\\n\\n            currentShift += bitLengths[i];\\n        }\\n    }\\n\\n    function unpack256To64(\\n        uint256 packed\\n    ) external pure returns (uint64 a, uint64 b, uint64 c, uint64 d) {\\n        a = uint64(packed);\\n        b = uint64(packed >> 64);\\n        c = uint64(packed >> 128);\\n        d = uint64(packed >> 192);\\n    }\\n\\n    // Function-specific unpacking utils\\n    function unpackExecuteNftOrder(\\n        uint256 packed\\n    )\\n        external\\n        pure\\n        returns (\\n            uint256 a,\\n            address b,\\n            uint256 c,\\n            uint256 d,\\n            uint256 e,\\n            uint256 f\\n        )\\n    {\\n        a = packed & 0xFF; // 8 bits\\n        b = address(uint160(packed >> 8)); // 160 bits\\n        c = (packed >> 168) & 0xFFFF; // 16 bits\\n        d = (packed >> 184) & 0xFFFF; // 16 bits\\n        e = (packed >> 200) & 0xFFFF; // 16 bits\\n        f = (packed >> 216) & 0xFFFF; // 16 bits\\n    }\\n}\\n\",\"keccak256\":\"0x600b1930583ab2ab8201912d367d1051844b2bd3a654f51bf329cc63aa854e2d\",\"license\":\"MIT\"},\"contracts/libraries/TradeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/StorageInterface.sol\\\";\\nimport \\\"../interfaces/TradingCallbacksInterface.sol\\\";\\n\\nlibrary TradeUtils {\\n    function _getTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type\\n    )\\n        internal\\n        view\\n        returns (\\n            TradingCallbacksInterface,\\n            TradingCallbacksInterface.LastUpdated memory,\\n            TradingCallbacksInterface.SimplifiedTradeId memory\\n        )\\n    {\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        TradingCallbacksInterface.LastUpdated memory l = callbacks\\n            .tradeLastUpdated(trader, pairIndex, index, _type);\\n\\n        return (\\n            callbacks,\\n            l,\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            )\\n        );\\n    }\\n\\n    function setTradeLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        uint32 b = uint32(blockNumber);\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeLastUpdated(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.LastUpdated(b, b, b, b)\\n        );\\n    }\\n\\n    function setSlLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.sl = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function setTpLastUpdated(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint blockNumber\\n    ) external {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n            TradingCallbacksInterface.SimplifiedTradeId memory id\\n        ) = _getTradeLastUpdated(_callbacks, trader, pairIndex, index, _type);\\n\\n        l.tp = uint32(blockNumber);\\n        callbacks.setTradeLastUpdated(id, l);\\n    }\\n\\n    function isTpInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.tp) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isSlInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.sl) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function isLimitInTimeout(\\n        address _callbacks,\\n        TradingCallbacksInterface.SimplifiedTradeId memory id,\\n        uint currentBlock\\n    ) external view returns (bool) {\\n        (\\n            TradingCallbacksInterface callbacks,\\n            TradingCallbacksInterface.LastUpdated memory l,\\n\\n        ) = _getTradeLastUpdated(\\n                _callbacks,\\n                id.trader,\\n                id.pairIndex,\\n                id.index,\\n                id.tradeType\\n            );\\n\\n        return currentBlock < uint256(l.limit) + callbacks.canExecuteTimeout();\\n    }\\n\\n    function setTradeData(\\n        address _callbacks,\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        TradingCallbacksInterface.TradeType _type,\\n        uint maxSlippageP\\n    ) external {\\n        require(maxSlippageP <= type(uint40).max, \\\"OVERFLOW\\\");\\n        TradingCallbacksInterface callbacks = TradingCallbacksInterface(\\n            _callbacks\\n        );\\n        callbacks.setTradeData(\\n            TradingCallbacksInterface.SimplifiedTradeId(\\n                trader,\\n                pairIndex,\\n                index,\\n                _type\\n            ),\\n            TradingCallbacksInterface.TradeData(uint40(maxSlippageP), 0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x26af226fefeccc1304752e1d14b4672b18340a102c33a9c191e4831f7626befd\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a45760003560e01c80638f062227116100ef578063b81bfa0511610092578063b81bfa0514610388578063be73fb991461039b578063bffe3486146103ae578063c740671f146103d7578063ca5eb5e1146103ea578063d3dc7539146103fd578063d8defd1514610410578063ff22dcac1461042357600080fd5b80638f062227146103095780639a10cc321461031b5780639a54adba1461033b578063a2a3c0cb14610344578063ae8421e114610357578063b187bd261461035f578063b1dfd5301461036c578063b35416991461037557600080fd5b806340b615971161015757806340b6159714610251578063410c0b7c1461027b578063531cc965146102925780635ad9f993146102a557806368cd5088146102b85780636b5bd974146102cb5780638456cb59146102de578063870f91d9146102e657600080fd5b8062b12783146101a9578063119df25f146101d95780631346b0ff146101e157806316fff074146101f4578063192a48f5146102075780632c1e4e551461021c57806336fb8b151461022f575b600080fd5b6007546101bc906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101bc610436565b6004546101bc906001600160a01b031681565b6002546101bc906001600160a01b031681565b61021a6102153660046134be565b61045e565b005b61021a61022a36600461350e565b610cb5565b61021a33600090815260208190526040902080546001600160a01b0319169055565b61026461025f366004613637565b610d3d565b6040805192151583529015156020830152016101d0565b61028460095481565b6040519081526020016101d0565b6006546101bc906001600160a01b031681565b6003546101bc906001600160a01b031681565b61021a6102c6366004613654565b610f7e565b6102646102d9366004613637565b611ba2565b61021a611c58565b6102f96102f43660046136a1565b611cae565b60405190151581526020016101d0565b600b546102f990610100900460ff1681565b61032e6103293660046136d6565b611e51565b6040516101d091906137ab565b610284600a5481565b61021a6103523660046137be565b611f8c565b61021a6124da565b600b546102f99060ff1681565b61028460085481565b61021a610383366004613831565b61253a565b61021a61039636600461350e565b6125c4565b61021a6103a93660046138db565b61264e565b6101bc6103bc366004613907565b6000602081905290815260409020546001600160a01b031681565b61021a6103e5366004613924565b61295f565b61021a6103f8366004613907565b612bb6565b6005546101bc906001600160a01b031681565b61021a61041e3660046138db565b612c22565b6102f96104313660046136a1565b612e8c565b6001546000906001600160a01b031661044e57503390565b506001546001600160a01b031690565b610466612f40565b600086600481111561047a5761047a6139b9565b90506000610486610436565b90506000600383600481111561049e5761049e6139b9565b1490506000816104af5760006104b2565b60015b905061051560405180610140016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525090565b82156105745760405162461bcd60e51b815260206004820152602360248201527f4f70656e204c696d6974206f7264657273206e6f7420737570706f72746564206044820152621e595d60ea1b60648201526084015b60405180910390fd5b6002546040516302a0a1cb60e41b81526001600160a01b0390911690632a0a1cb0906105a8908d908d908d906004016139cf565b61014060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea9190613a06565b905060008160e00151116106105760405162461bcd60e51b815260040161056b90613a98565b6002856004811115610624576106246139b9565b03610758576000600660009054906101000a90046001600160a01b03166001600160a01b031663706faf3a6040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b81526004016106c59190613aba565b602060405180830381865afa1580156106e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107069190613b0e565b90508161012001516000148061073657508160c0015161072d578161012001518110610736565b81610120015181115b6107525760405162461bcd60e51b815260040161056b90613b27565b50610a60565b600485600481111561076c5761076c6139b9565b036109ac576000600660009054906101000a90046001600160a01b03166001600160a01b03166364d372c66040518060e0016040528085600001516001600160a01b0316815260200185602001518152602001856040015181526020018560a0015181526020018560c0015115158152602001856080015181526020018560e001518152506040518263ffffffff1660e01b815260040161080d9190613aba565b602060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e9190613b0e565b90508161012001516000148061087e57508160c0015161087557816101200151811061087e565b81610120015181115b61089a5760405162461bcd60e51b815260040161056b90613b27565b6007548251602084015160408086015190516304ec194160e21b81526000946001600160a01b0316936313b06504936108da9391929091906004016139cf565b602060405180830381865afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b9190613b0e565b9050600081846080015161092f9190613b5d565b9050600a548460e00151826109449190613b85565b12156109a45760405162461bcd60e51b815260206004820152602960248201527f706f736974696f6e20746f20736d616c6c20666f72207061727469616c206c6960448201526838bab4b230ba34b7b760b91b606482015260840161056b565b505050610a60565b60018560048111156109c0576109c06139b9565b1415806109d257506000816101200151115b610a065760405162461bcd60e51b81526020600482015260056024820152641393d7d4d360da1b604482015260640161056b565b6000856004811115610a1a57610a1a6139b9565b141580610a2c57506000816101000151115b610a605760405162461bcd60e51b815260206004820152600560248201526404e4f5f54560dc1b604482015260640161056b565b600083610a7e578160e001518260800151610a7b9190613bb5565b90505b6000610a8f858d8d8d888c88612f83565b509050610ac86040805160c08101825260008082526020820181905291810182905260608101829052608081018290529060a082015290565b6001600160a01b038088168252602082018b90528d166040820152606081018c9052608081018b905260a08101886004811115610b0757610b076139b9565b90816004811115610b1a57610b1a6139b9565b90525060025460405163205fe86960e21b81526001600160a01b039091169063817fa1a490610b4f9084908690600401613c24565b600060405180830381600087803b158015610b6957600080fd5b505af1158015610b7d573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf89190613c3f565b6001600160a01b03166339fe9fd283836040518363ffffffff1660e01b8152600401610c25929190613c5c565b600060405180830381600087803b158015610c3f57600080fd5b505af1158015610c53573d6000803e3d6000fd5b505050508b8d6001600160a01b0316886001600160a01b03167f6d87222414c5850caf1d385b1e080a771b505825b082a2162d0f4af5ffc86c0085604051610c9d91815260200190565b60405180910390a45050505050505050505050505050565b610cbd6131d7565b60008111610cdd5760405162461bcd60e51b815260040161056b90613c70565b600881905560408051818152600a91810191909152690dac2f0a0dee6ae8aa8960b31b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab906080015b60405180910390a150565b6000808260e00151600003610d5757506000928392509050565b6000600660009054906101000a90046001600160a01b03166001600160a01b03166364d372c66040518060e0016040528087600001516001600160a01b0316815260200187602001518152602001876040015181526020018760a0015181526020018760c0015115158152602001876080015181526020018760e001518152506040518263ffffffff1660e01b8152600401610df39190613aba565b602060405180830381865afa158015610e10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e349190613b0e565b9050600080600260009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb09190613c3f565b6001600160a01b031663e757223087602001516040518263ffffffff1660e01b8152600401610ee191815260200190565b6040805180830381865afa158015610efd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f219190613c91565b91509150600086610120015160001480610f5557508660c00151610f4c578661012001518410610f55565b86610120015184115b905060008760c00151610f6b5784841015610f70565b848411155b989197509095505050505050565b610f86613299565b610f8e612f40565b600b5460ff1615610fca5760405162461bcd60e51b815260206004820152600660248201526514105554d15160d21b604482015260640161056b565b600019818560a00151610fdd9190613bb5565b106110155760405162461bcd60e51b81526020600482015260086024820152674f564552464c4f5760c01b604482015260640161056b565b60008460a00151116110565760405162461bcd60e51b815260206004820152600a60248201526950524943455f5a45524f60b01b604482015260640161056b565b60025460408051633078fff560e01b815290516000926001600160a01b031691633078fff59160048083019260209291908290030181865afa1580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c49190613c3f565b90506000816001600160a01b03166335b03c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611106573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112a9190613c3f565b90506000611136610436565b9050600260009054906101000a90046001600160a01b03166001600160a01b031663f65d9dbe6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561118b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111af9190613b0e565b6002546020890151604051634bf3ccad60e11b81526001600160a01b03909216916397e7995a916111e591869190600401613cb5565b602060405180830381865afa158015611202573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112269190613b0e565b60025460208a0151604051639c8912f160e01b81526001600160a01b0390921691639c8912f19161125c91879190600401613cb5565b602060405180830381865afa158015611279573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129d9190613b0e565b60025460208b01516040516307218dad60e21b81526001600160a01b0390921691631c8636b4916112d391889190600401613cb5565b602060405180830381865afa1580156112f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113149190613b0e565b61131e9190613cce565b6113289190613cce565b1061136b5760405162461bcd60e51b815260206004820152601360248201527226a0ac2faa2920a222a9afa822a92fa820a4a960691b604482015260640161056b565b600260009054906101000a90046001600160a01b03166001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156113be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e29190613b0e565b60025460405163f7b3c6fd60e01b81526001600160a01b0384811660048301529091169063f7b3c6fd90602401602060405180830381865afa15801561142c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114509190613b0e565b1061146d5760405162461bcd60e51b815260040161056b90613ce1565b600854876080015111156114b35760405162461bcd60e51b815260206004820152600d60248201526c41424f56455f4d41585f504f5360981b604482015260640161056b565b602087015160405163601e3b6b60e11b815260048101919091526001600160a01b0383169063c03c76d690602401602060405180830381865afa1580156114fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115229190613b0e565b8760e0015188608001516115369190613bb5565b10156115745760405162461bcd60e51b815260206004820152600d60248201526c42454c4f575f4d494e5f504f5360981b604482015260640161056b565b60008760e001511180156115fa5750602087015160405163059a992d60e41b815260048101919091526001600160a01b038316906359a992d090602401602060405180830381865afa1580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f29190613b0e565b8760e0015110155b8015611617575061160f8288602001516132a5565b8760e0015111155b6116585760405162461bcd60e51b815260206004820152601260248201527113115591549051d157d25390d3d4949150d560721b604482015260640161056b565b610100870151158061168c57508660c0015161167f578660a001518761010001511061168c565b8660a00151876101000151115b6116c35760405162461bcd60e51b8152602060048201526008602482015267057524f4e475f54560c41b604482015260640161056b565b61012087015115806116f757508660c001516116ea578660a00151876101200151116116f7565b8660a00151876101200151105b61172e5760405162461bcd60e51b815260206004820152600860248201526715d493d391d7d4d360c21b604482015260640161056b565b600454602088015160c089015160e08a015160808b01516000946001600160a01b031693637ea95f329386939192909161176791613bb5565b6040516001600160e01b031960e087901b168152600481019490945260248401929092521515604483015260648201526084016040805180830381865afa1580156117b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117da9190613c91565b509050600460009054906101000a90046001600160a01b03166001600160a01b03166380f6cfc26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611830573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118549190613b0e565b60e08901516118639083613bb5565b11156118a95760405162461bcd60e51b81526020600482015260156024820152740a0a492868abe929aa08286a8bea89e9ebe90928e9605b1b604482015260640161056b565b6002546080890151604051638a238ae560e01b81526001600160a01b03858116600483015290921660248301819052604483019190915290638a238ae590606401600060405180830381600087803b15801561190457600080fd5b505af1158015611918573d6000803e3d6000fd5b5060009250611925915050565b876002811115611937576119376139b9565b03611b98576000846001600160a01b0316636938c05d8a6020015160008c60e001518d608001516119689190613bb5565b611970613410565b6040518563ffffffff1660e01b815260040161198f9493929190613d21565b6020604051808303816000875af11580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190613b0e565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a4b9190613c3f565b6001600160a01b0316638f93b660826040518060c00160405280604051806101400160405280896001600160a01b031681526020018f60200151815260200160008152602001600081526020018f608001518152602001600081526020018f60c00151151581526020018f60e0015181526020018f610100015181526020018f61012001518152508152602001600081526020018d60a0015181526020018a81526020016000815260200160008152506040518363ffffffff1660e01b8152600401611b18929190613d47565b600060405180830381600087803b158015611b3257600080fd5b505af1158015611b46573d6000803e3d6000fd5b505050508860200151836001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a866001604051611b8e911515815260200190565b60405180910390a4505b5050505050505050565b6000808260e00151600003611bbc57506000928392509050565b6000600660009054906101000a90046001600160a01b03166001600160a01b031663706faf3a6040518060e0016040528087600001516001600160a01b0316815260200187602001518152602001876040015181526020018760a0015181526020018760c0015115158152602001876080015181526020018760e001518152506040518263ffffffff1660e01b8152600401610df39190613aba565b611c606131d7565b600b805460ff8082161560ff1990921682179092556040519116151581527f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd2906020015b60405180910390a1565b6002546040516302a0a1cb60e41b815260009182916001600160a01b0390911690632a0a1cb090611ce7908890889088906004016139cf565b61014060405180830381865afa158015611d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d299190613a06565b9050600080600260009054906101000a90046001600160a01b03166001600160a01b0316637dc0d1d06040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611da59190613c3f565b6001600160a01b031663e7572230876040518263ffffffff1660e01b8152600401611dd291815260200190565b6040805180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190613c91565b91509150600080611e2285610d3d565b9150915080611e435760405162461bcd60e51b815260040161056b90613b27565b5093505050505b9392505050565b6001600160a01b03838116600090815260208190526040902054606091163314611eb55760405162461bcd60e51b81526020600482015260156024820152741111531151d0551157d393d517d054141493d59151605a1b604482015260640161056b565b600180546001600160a01b0319166001600160a01b03861617905560405160009081903090611ee79087908790613e0a565b600060405180830381855af49150503d8060008114611f22576040519150601f19603f3d011682016040523d82523d6000602084013e611f27565b606091505b509150915081611f7357604481511015611f4057600080fd5b60048101905080806020019051810190611f5a9190613e1a565b60405162461bcd60e51b815260040161056b91906137ab565b600180546001600160a01b031916905595945050505050565b611f94613299565b611f9c612f40565b6000611fa6610436565b6002546040516302a0a1cb60e41b81529192506000916001600160a01b0390911690632a0a1cb090611fe0908590889088906004016139cf565b61014060405180830381865afa158015611ffe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120229190613a06565b600254604051637728fb1b60e11b81529192506000916001600160a01b039091169063ee51f6369061205c908690899089906004016139cf565b60c060405180830381865afa158015612079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209d9190613ec7565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316638049fde76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156120f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121169190613b0e565b60025460405163f7b3c6fd60e01b81526001600160a01b0386811660048301529091169063f7b3c6fd90602401602060405180830381865afa158015612160573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121849190613b0e565b106121a15760405162461bcd60e51b815260040161056b90613ce1565b8060a00151156121ea5760405162461bcd60e51b81526020600482015260146024820152731053149150511657d091525391d7d0d313d4d15160621b604482015260640161056b565b60008260e001511161220e5760405162461bcd60e51b815260040161056b90613a98565b60025460408051633078fff560e01b815290516000926001600160a01b031691633078fff59160048083019260209291908290030181865afa158015612258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227c9190613c3f565b6001600160a01b0316636938c05d8760016402540be4008760e00151876020015189606001516122ac9190613bb5565b6122b69190613bb5565b6122c09190613f47565b6122c8613410565b6040518563ffffffff1660e01b81526004016122e79493929190613d21565b6020604051808303816000875af1158015612306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232a9190613b0e565b9050600260009054906101000a90046001600160a01b03166001600160a01b0316633078fff56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561237f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a39190613c3f565b6001600160a01b0316638f93b660826040518060c001604052806040518061014001604052808a6001600160a01b031681526020018c81526020018b81526020016000815260200160008152602001600081526020016000151581526020016000815260200160008152602001600081525081526020016000815260200160008152602001600081526020016000815260200160008152506040518363ffffffff1660e01b8152600401612458929190613d47565b600060405180830381600087803b15801561247257600080fd5b505af1158015612486573d6000803e3d6000fd5b5050505085846001600160a01b0316827f3e544118c04e3bb18b669475695cd270ba0e41fb13177483f01c14222de62a8660006040516124ca911515815260200190565b60405180910390a4505050505050565b6124e26131d7565b600b805460ff610100808304821615810261ff001990931692909217928390556040517fc3a6f986261de9467c2838c6df8ef74f9107855159205600c0bc7a14cdfd388893611ca49390049091161515815260200190565b612542612f40565b60005b818110156125bc576125b486826064811061256257612562613f69565b602002015186836064811061257957612579613f69565b602002015186846064811061259057612590613f69565b60200201518685606481106125a7576125a7613f69565b602002015160018061045e565b600101612545565b505050505050565b6125cc6131d7565b600081116125ec5760405162461bcd60e51b815260040161056b90613c70565b600981905560408051818152601391810191909152721b585c9ad95d13dc99195c9cd51a5b595bdd5d606a1b6060820152602081018290527f8cf3e35f6221b16e1670a3413180c9484bf5aa71787905909fa82a6a2662e9ab90608001610d32565b612656613299565b61265e612f40565b6000612668610436565b6002546040516302a0a1cb60e41b81529192506000916001600160a01b0390911690632a0a1cb0906126a2908590899089906004016139cf565b61014060405180830381865afa1580156126c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e49190613a06565b905060008160e001511161270a5760405162461bcd60e51b815260040161056b90613a98565b60008160e001516064604b8460a001516127249190613bb5565b61272e9190613f47565b6127389190613f47565b905083158061277757508160c0015161276357808260a0015161275b9190613cce565b841115612777565b808260a001516127739190613f7f565b8410155b6127b05760405162461bcd60e51b815260206004820152600a602482015269534c5f544f4f5f42494760b01b604482015260640161056b565b60025460405163a354418160e01b81526001600160a01b039091169063a3544181906127e69086908a908a908a90600401613f92565b600060405180830381600087803b15801561280057600080fd5b505af1158015612814573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa15801561286a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288e9190613c3f565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$__633c63a7d0909185898960006128c0613410565b6040518763ffffffff1660e01b81526004016128e196959493929190613fc8565b60006040518083038186803b1580156128f957600080fd5b505af415801561290d573d6000803e3d6000fd5b505060408051888152602081018890528993506001600160a01b03871692507f1fc4a6c7ffe506697979b8ed54dc4135cd1ecd26a2745f70b760a2492222b316910160405180910390a3505050505050565b600154600160a81b900460ff1615808015612985575060018054600160a01b900460ff16105b806129a55750303b1580156129a5575060018054600160a01b900460ff16145b612a085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161056b565b6001805460ff60a01b1916600160a01b1790558015612a35576001805460ff60a81b1916600160a81b1790555b6001600160a01b03891615801590612a5557506001600160a01b03881615155b8015612a6957506001600160a01b03871615155b8015612a7d57506001600160a01b03861615155b8015612a9157506001600160a01b03851615155b8015612aa557506001600160a01b03841615155b8015612ab15750600083115b8015612abd5750600082115b612af85760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b604482015260640161056b565b600280546001600160a01b03199081166001600160a01b038c8116919091179092556003805482168b84161790556004805482168a841617905560058054821689841617905560068054821688841617905560088590556009849055600780549091169186169190911790558015612bab576001805460ff60a81b191681556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050505050565b323314612bf35760405162461bcd60e51b815260206004820152600b60248201526a1393d7d0d3d395149050d560aa1b604482015260640161056b565b33600090815260208190526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b612c2a613299565b612c32612f40565b6000612c3c610436565b6002546040516302a0a1cb60e41b81529192506000916001600160a01b0390911690632a0a1cb090612c76908590899089906004016139cf565b61014060405180830381865afa158015612c94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cb89190613a06565b905060008160e0015111612cde5760405162461bcd60e51b815260040161056b90613a98565b600254604051637fdb96f360e01b81526001600160a01b0390911690637fdb96f390612d14908590899089908990600401613f92565b600060405180830381600087803b158015612d2e57600080fd5b505af1158015612d42573d6000803e3d6000fd5b50505050600260009054906101000a90046001600160a01b03166001600160a01b031662b127836040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbc9190613c3f565b6001600160a01b031673__$f600c6c046224cd62da9c8e7a0d00fc8b2$",
  "libraries": {
    "TradeUtils": "0x7AF7e5081CeB3fE631d1B011ffeb22a9E5111260",
    "PackingUtils": "0xD04694bd45f3B0b7f69472Ec82a8aB22Bac00a8c"
  },
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 504,
        "contract": "contracts/Trading.sol:Trading",
        "label": "delegations",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 506,
        "contract": "contracts/Trading.sol:Trading",
        "label": "senderOverride",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6,
        "contract": "contracts/Trading.sol:Trading",
        "label": "_initialized",
        "offset": 20,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/Trading.sol:Trading",
        "label": "_initializing",
        "offset": 21,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 3503,
        "contract": "contracts/Trading.sol:Trading",
        "label": "storageT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(StorageInterface)11245"
      },
      {
        "astId": 3506,
        "contract": "contracts/Trading.sol:Trading",
        "label": "nftRewards",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(NftRewardsInterfaceV6_3_1)10235"
      },
      {
        "astId": 3509,
        "contract": "contracts/Trading.sol:Trading",
        "label": "pairInfos",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(PairInfosInterface)10447"
      },
      {
        "astId": 3512,
        "contract": "contracts/Trading.sol:Trading",
        "label": "referrals",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ReferralsInterface)10688"
      },
      {
        "astId": 3515,
        "contract": "contracts/Trading.sol:Trading",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(BorrowingFeesInterface)9781"
      },
      {
        "astId": 3518,
        "contract": "contracts/Trading.sol:Trading",
        "label": "callbacks",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(CallbacksInterface)9845"
      },
      {
        "astId": 3526,
        "contract": "contracts/Trading.sol:Trading",
        "label": "maxPosWETH",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3528,
        "contract": "contracts/Trading.sol:Trading",
        "label": "marketOrdersTimeout",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3531,
        "contract": "contracts/Trading.sol:Trading",
        "label": "minLeveragedPosWETH",
        "offset": 0,
        "slot": "10",
        "type": "t_int256"
      },
      {
        "astId": 3533,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isPaused",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 3535,
        "contract": "contracts/Trading.sol:Trading",
        "label": "isDone",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BorrowingFeesInterface)9781": {
        "encoding": "inplace",
        "label": "contract BorrowingFeesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(CallbacksInterface)9845": {
        "encoding": "inplace",
        "label": "contract CallbacksInterface",
        "numberOfBytes": "20"
      },
      "t_contract(NftRewardsInterfaceV6_3_1)10235": {
        "encoding": "inplace",
        "label": "contract NftRewardsInterfaceV6_3_1",
        "numberOfBytes": "20"
      },
      "t_contract(PairInfosInterface)10447": {
        "encoding": "inplace",
        "label": "contract PairInfosInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ReferralsInterface)10688": {
        "encoding": "inplace",
        "label": "contract ReferralsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterface)11245": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}