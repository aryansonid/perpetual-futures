{
  "address": "0xD13E9f1BeBFe1A60d6fd132a08d945D3B5cB4d4A",
  "abi": [
    {
      "inputs": [],
      "name": "Forbidden",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WrongParams",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradeValueWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeValueWETH",
          "type": "uint256"
        }
      ],
      "name": "BorrowingFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CanExecuteTimeoutUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ClosigFeeDeduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpFeeP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "ClosingFeeSharesPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "DevGovFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "done",
          "type": "bool"
        }
      ],
      "name": "Done",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "limitIndex",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "exactExecution",
          "type": "bool"
        }
      ],
      "name": "LimitExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isPartial",
          "type": "bool"
        }
      ],
      "name": "LiquidationExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "LiquidationFeeDeduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketCloseCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "initialPosToken",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "positionSizeWETH",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "openPrice",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "buy",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "leverage",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "sl",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct StorageInterface.Trade",
          "name": "t",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "open",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceImpactP",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionSizeWETH",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "percentProfit",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "WETHSentToTrader",
          "type": "uint256"
        }
      ],
      "name": "MarketExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "MarketOpenCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "NftBotFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "orderId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftHolder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StorageInterface.LimitOrder",
          "name": "orderType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "enum TradingCallbacks.CancelReason",
          "name": "cancelReason",
          "type": "uint8"
        }
      ],
      "name": "NftOrderCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "OpeningFeeDeduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "PairMaxLeverageUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_liquidatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "ParLiquidationFeeDeduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "paused",
          "type": "bool"
        }
      ],
      "name": "Pause",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "ReferralFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "SssFeeCharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_closingFeeP",
          "type": "uint256"
        }
      ],
      "name": "UpdatedClosingFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_openingFeeP",
          "type": "uint256"
        }
      ],
      "name": "UpdatedOpeningFeeP",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "VaultRewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "valueWETH",
          "type": "uint256"
        }
      ],
      "name": "WETHVaultFeeCharged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETHVaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFees",
      "outputs": [
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "canExecuteTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "closeTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closingFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "done",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "nftHolder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nftId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum StorageInterface.LimitOrder",
              "name": "orderType",
              "type": "uint8"
            }
          ],
          "internalType": "struct StorageInterface.PendingNftOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "executeNftCloseOrderCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPairsMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTradePnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "pnl",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "giveApproval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "_storageT",
          "type": "address"
        },
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "_nftRewards",
          "type": "address"
        },
        {
          "internalType": "contract PairInfosInterface",
          "name": "_pairInfos",
          "type": "address"
        },
        {
          "internalType": "contract ReferralsInterface",
          "name": "_referrals",
          "type": "address"
        },
        {
          "internalType": "contract StakingInterface",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract BorrowingFeesInterface",
          "name": "_borrowingFees",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "vaultToApprove",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "_vaultFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_liquidatorFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_liquidationFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_parLiquidationFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_openingFeeP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_closingFeeP",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.feeConfig",
          "name": "data",
          "type": "tuple"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isDone",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isPaused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidatorFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lpFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftRewards",
      "outputs": [
        {
          "internalType": "contract NftRewardsInterfaceV6_3_1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "orderId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "open",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "high",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "low",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradingCallbacks.AggregatorAnswer",
          "name": "a",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "trader",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "pairIndex",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "index",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialPosToken",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "positionSizeWETH",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "openPrice",
                  "type": "uint256"
                },
                {
                  "internalType": "bool",
                  "name": "buy",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "leverage",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "tp",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "sl",
                  "type": "uint256"
                }
              ],
              "internalType": "struct StorageInterface.Trade",
              "name": "trade",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "block",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wantedPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "slippageP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "spreadReductionP",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "internalType": "struct StorageInterface.PendingMarketOrder",
          "name": "o",
          "type": "tuple"
        }
      ],
      "name": "openTradeMarketCallback",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openingFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pairInfos",
      "outputs": [
        {
          "internalType": "contract PairInfosInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pairMaxLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parLiquidationFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referrals",
      "outputs": [
        {
          "internalType": "contract ReferralsInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_canExecuteTimeout",
          "type": "uint256"
        }
      ],
      "name": "setCanExecuteTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_closingFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_WETHVaultFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpFeeP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sssFeeP",
          "type": "uint256"
        }
      ],
      "name": "setClosingFeeSharesP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setLiquidatorFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_openingFeeP",
          "type": "uint256"
        }
      ],
      "name": "setOpeningFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pairIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setPairMaxLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "indices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "setPairMaxLeverageArray",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setParLiquidationFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint40",
              "name": "maxSlippageP",
              "type": "uint40"
            },
            {
              "internalType": "uint216",
              "name": "_placeholder",
              "type": "uint216"
            }
          ],
          "internalType": "struct TradingCallbacks.TradeData",
          "name": "_tradeData",
          "type": "tuple"
        }
      ],
      "name": "setTradeData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "trader",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "pairIndex",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            },
            {
              "internalType": "enum TradingCallbacks.TradeType",
              "name": "tradeType",
              "type": "uint8"
            }
          ],
          "internalType": "struct TradingCallbacks.SimplifiedTradeId",
          "name": "_id",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "tp",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "sl",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "limit",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "created",
              "type": "uint32"
            }
          ],
          "internalType": "struct TradingCallbacks.LastUpdated",
          "name": "_lastUpdated",
          "type": "tuple"
        }
      ],
      "name": "setTradeLastUpdated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeP",
          "type": "uint256"
        }
      ],
      "name": "setVaultFeeP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sssFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "contract StakingInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storageT",
      "outputs": [
        {
          "internalType": "contract StorageInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeData",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "maxSlippageP",
          "type": "uint40"
        },
        {
          "internalType": "uint216",
          "name": "_placeholder",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "enum TradingCallbacks.TradeType",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "tradeLastUpdated",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tp",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "sl",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "limit",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "created",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultFeeP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1467446367729f1bf3499a7d082eb45bc01e092f77e23fff7983bfdcf9134a8",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xD13E9f1BeBFe1A60d6fd132a08d945D3B5cB4d4A",
    "transactionIndex": 1,
    "gasUsed": "11338466",
    "logsBloom": "0x
    "blockHash": "0xe44533d92b3d0ca3498b567965c09dd381e025520daf90fdb77f65507e4b3973",
    "transactionHash": "0xd1467446367729f1bf3499a7d082eb45bc01e092f77e23fff7983bfdcf9134a8",
    "logs": [],
    "blockNumber": 3064492,
    "cumulativeGasUsed": "11338466",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "f9e74ed46d9c3384910af870de48cf0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"Forbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongParams\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradeValueWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValueWETH\",\"type\":\"uint256\"}],\"name\":\"BorrowingFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CanExecuteTimeoutUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ClosigFeeDeduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHVaultFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFeeP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sssFeeP\",\"type\":\"uint256\"}],\"name\":\"ClosingFeeSharesPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"DevGovFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"done\",\"type\":\"bool\"}],\"name\":\"Done\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"limitIndex\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"exactExecution\",\"type\":\"bool\"}],\"name\":\"LimitExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPartial\",\"type\":\"bool\"}],\"name\":\"LiquidationExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"LiquidationFeeDeduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketCloseCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"t\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"open\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceImpactP\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"percentProfit\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"WETHSentToTrader\",\"type\":\"uint256\"}],\"name\":\"MarketExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"MarketOpenCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"NftBotFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"enum TradingCallbacks.CancelReason\",\"name\":\"cancelReason\",\"type\":\"uint8\"}],\"name\":\"NftOrderCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OpeningFeeDeduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"PairMaxLeverageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_liquidatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"ParLiquidationFeeDeduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"ReferralFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"SssFeeCharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_closingFeeP\",\"type\":\"uint256\"}],\"name\":\"UpdatedClosingFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_openingFeeP\",\"type\":\"uint256\"}],\"name\":\"UpdatedOpeningFeeP\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"VaultRewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"valueWETH\",\"type\":\"uint256\"}],\"name\":\"WETHVaultFeeCharged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETHVaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFees\",\"outputs\":[{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"canExecuteTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"closeTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closingFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"done\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"nftHolder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum StorageInterface.LimitOrder\",\"name\":\"orderType\",\"type\":\"uint8\"}],\"internalType\":\"struct StorageInterface.PendingNftOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"executeNftCloseOrderCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPairsMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTradePnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"pnl\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"giveApproval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"_storageT\",\"type\":\"address\"},{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"_nftRewards\",\"type\":\"address\"},{\"internalType\":\"contract PairInfosInterface\",\"name\":\"_pairInfos\",\"type\":\"address\"},{\"internalType\":\"contract ReferralsInterface\",\"name\":\"_referrals\",\"type\":\"address\"},{\"internalType\":\"contract StakingInterface\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract BorrowingFeesInterface\",\"name\":\"_borrowingFees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vaultToApprove\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"_vaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidatorFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidationFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_parLiquidationFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_openingFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_closingFeeP\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.feeConfig\",\"name\":\"data\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isDone\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidatorFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftRewards\",\"outputs\":[{\"internalType\":\"contract NftRewardsInterfaceV6_3_1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"orderId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"open\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"high\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"low\",\"type\":\"uint256\"}],\"internalType\":\"struct TradingCallbacks.AggregatorAnswer\",\"name\":\"a\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPosToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionSizeWETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"openPrice\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"buy\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"leverage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sl\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.Trade\",\"name\":\"trade\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"block\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wantedPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"spreadReductionP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"internalType\":\"struct StorageInterface.PendingMarketOrder\",\"name\":\"o\",\"type\":\"tuple\"}],\"name\":\"openTradeMarketCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openingFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairInfos\",\"outputs\":[{\"internalType\":\"contract PairInfosInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairMaxLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parLiquidationFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referrals\",\"outputs\":[{\"internalType\":\"contract ReferralsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_canExecuteTimeout\",\"type\":\"uint256\"}],\"name\":\"setCanExecuteTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_closingFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_WETHVaultFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpFeeP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sssFeeP\",\"type\":\"uint256\"}],\"name\":\"setClosingFeeSharesP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setLiquidationFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setLiquidatorFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_openingFeeP\",\"type\":\"uint256\"}],\"name\":\"setOpeningFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setPairMaxLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"indices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"setPairMaxLeverageArray\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setParLiquidationFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"internalType\":\"struct TradingCallbacks.TradeData\",\"name\":\"_tradeData\",\"type\":\"tuple\"}],\"name\":\"setTradeData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pairIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"tradeType\",\"type\":\"uint8\"}],\"internalType\":\"struct TradingCallbacks.SimplifiedTradeId\",\"name\":\"_id\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"internalType\":\"struct TradingCallbacks.LastUpdated\",\"name\":\"_lastUpdated\",\"type\":\"tuple\"}],\"name\":\"setTradeLastUpdated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeP\",\"type\":\"uint256\"}],\"name\":\"setVaultFeeP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sssFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"contract StakingInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storageT\",\"outputs\":[{\"internalType\":\"contract StorageInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeData\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"maxSlippageP\",\"type\":\"uint40\"},{\"internalType\":\"uint216\",\"name\":\"_placeholder\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"enum TradingCallbacks.TradeType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"tradeLastUpdated\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"sl\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"limit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"created\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFeeP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TradingCallbacks.sol\":\"TradingCallbacks\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1.sol\\\";\\nimport \\\"./interfaces/PoolInterfaceV5.sol\\\";\\nimport \\\"./interfaces/NftInterfaceV5.sol\\\";\\nimport \\\"./interfaces/PausableInterfaceV5.sol\\\";\\n\\ncontract Storage is StorageInterface, Initializable {\\n    // Constants\\n    uint public constant PRECISION = 1e10;\\n    bytes32 public constant MINTER_ROLE =\\n        0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6;\\n    TokenInterface public WETH;\\n    IOracle public oracle;\\n    TokenInterface public constant linkErc677 =\\n        TokenInterface(0xb0897686c545045aFc77CF20eC7A532E3120E0F1);\\n\\n    // Contracts (updatable)\\n    AggregatorInterfaceV1 public priceAggregator;\\n    PoolInterfaceV5 public pool;\\n    PausableInterfaceV5 public trading;\\n    PausableInterfaceV5 public callbacks;\\n    TokenInterface public token =\\n        TokenInterface(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\\n    NftInterfaceV5[5] public nfts = [\\n        NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\\n        NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\\n        NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\\n        NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\\n        NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\\n    ];\\n    address public vault;\\n    address public tokenWETHRouter;\\n\\n    // Trading variables\\n    uint public maxTradesPerPair = 3;\\n    uint public maxTradesPerBlock = 5;\\n    uint public maxPendingMarketOrders = 5;\\n    uint public maxGainP = 900; // %\\n    uint public maxSlP = 80; // %\\n    uint public defaultLeverageUnlocked = 50; // x\\n    uint public nftSuccessTimelock = 50; // 50 blocks\\n    uint[5] public spreadReductionsP = [15, 20, 25, 30, 35]; // %\\n\\n    // Gov & dev addresses (updatable)\\n    address public gov; //TODO need to change to our\\n    address public dev; //TODO need to change to our\\n\\n    // Gov & dev fees\\n    uint public devFeesToken; // 1e18\\n    uint public devFeesWETH; // 1e18\\n    uint public govFeesToken; // 1e18\\n    uint public govFeesWETH; // 1e18\\n\\n    // Stats\\n    uint public tokensBurned; // 1e18\\n    uint public tokensMinted; // 1e18\\n    uint public nftRewards; // 1e18\\n\\n    uint public pairs = 2;\\n\\n    // Enums\\n    // enum LimitOrder {\\n    //     TP,\\n    //     SL,\\n    //     LIQ,\\n    //     OPEN\\n    // }\\n\\n    // Structs\\n    struct Trader {\\n        uint leverageUnlocked;\\n        address referral;\\n        uint referralRewardsTotal; // 1e18\\n    }\\n    // struct Trade {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint initialPosToken; // 1e18\\n    //     uint positionSizeWETH; // 1e18\\n    //     uint openPrice; // PRECISION\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION\\n    //     uint sl; // PRECISION\\n    // }\\n    // struct TradeInfo {\\n    //     uint tokenId;\\n    //     uint tokenPriceWETH; // PRECISION\\n    //     uint openInterestWETH; // 1e18\\n    //     uint tpLastUpdated;\\n    //     uint slLastUpdated;\\n    //     bool beingMarketClosed;\\n    // }\\n    // struct OpenLimitOrder {\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     uint positionSize; // 1e18 (WETH or GFARM2)\\n    //     uint spreadReductionP;\\n    //     bool buy;\\n    //     uint leverage;\\n    //     uint tp; // PRECISION (%)\\n    //     uint sl; // PRECISION (%)\\n    //     uint minPrice; // PRECISION\\n    //     uint maxPrice; // PRECISION\\n    //     uint block;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingMarketOrder {\\n    //     Trade trade;\\n    //     uint block;\\n    //     uint wantedPrice; // PRECISION\\n    //     uint slippageP; // PRECISION (%)\\n    //     uint spreadReductionP;\\n    //     uint tokenId; // index in supportedTokens\\n    // }\\n    // struct PendingNftOrder {\\n    //     address nftHolder;\\n    //     uint nftId;\\n    //     address trader;\\n    //     uint pairIndex;\\n    //     uint index;\\n    //     LimitOrder orderType;\\n    // }\\n\\n    // Supported tokens to open trades with\\n    address[] public supportedTokens;\\n\\n    // User info mapping\\n    mapping(address => Trader) public traders;\\n\\n    // Trades mappings\\n    mapping(address => mapping(uint => mapping(uint => Trade)))\\n        public openTrades;\\n    mapping(address => mapping(uint => mapping(uint => TradeInfo)))\\n        public openTradesInfo;\\n    mapping(address => mapping(uint => uint)) public openTradesCount;\\n\\n    // Limit orders mappings\\n    mapping(address => mapping(uint => mapping(uint => uint)))\\n        public openLimitOrderIds;\\n    mapping(address => mapping(uint => uint)) public openLimitOrdersCount;\\n    OpenLimitOrder[] public openLimitOrders;\\n\\n    // Pending orders mappings\\n    mapping(uint => PendingMarketOrder) public reqID_pendingMarketOrder;\\n    mapping(uint => PendingNftOrder) public reqID_pendingNftOrder;\\n    mapping(address => uint[]) public pendingOrderIds;\\n    mapping(address => mapping(uint => uint)) public pendingMarketOpenCount;\\n    mapping(address => mapping(uint => uint)) public pendingMarketCloseCount;\\n\\n    // List of open trades & limit orders\\n    mapping(uint => address[]) public pairTraders;\\n    mapping(address => mapping(uint => uint)) public pairTradersId;\\n\\n    // Current and max open interests for each pair\\n    mapping(uint => uint[3]) public openInterestWETH; // 1e18 [long,short,max]\\n\\n    // Restrictions & Timelocks\\n    mapping(uint => uint) public tradesPerBlock;\\n    mapping(uint => uint) public nftLastSuccess;\\n\\n    // List of allowed contracts => can update storage + mint/burn tokens\\n    mapping(address => bool) public isTradingContract;\\n\\n    // Events\\n    event SupportedTokenAdded(address a);\\n    event TradingContractAdded(address a);\\n    event TradingContractRemoved(address a);\\n    event AddressUpdated(string name, address a);\\n    event NftsUpdated(NftInterfaceV5[5] nfts);\\n    event NumberUpdated(string name, uint value);\\n    event NumberUpdatedPair(string name, uint pairIndex, uint value);\\n    event SpreadReductionsUpdated(uint[5]);\\n\\n    function initialize(\\n        address _WETH,\\n        address _gov,\\n        address _dev\\n    ) external initializer {\\n        WETH = TokenInterface(_WETH);\\n        gov = _gov;\\n        dev = _dev;\\n        token = TokenInterface(0x7075cAB6bCCA06613e2d071bd918D1a0241379E2);\\n        nfts = [\\n            NftInterfaceV5(0xF9A4c522E327935BD1F5a338c121E14e4cc1f898),\\n            NftInterfaceV5(0x77cd42B925e1A82f41d852D6BE727CFc88fddBbC),\\n            NftInterfaceV5(0x3378AD81D09DE23725Ee9B9270635c97Ed601921),\\n            NftInterfaceV5(0x02e2c5825C1a3b69C0417706DbE1327C2Af3e6C2),\\n            NftInterfaceV5(0x2D266A94469d05C9e06D52A4D0d9C23b157767c2)\\n        ];\\n        maxTradesPerPair = 3;\\n        maxTradesPerBlock = 5;\\n        maxPendingMarketOrders = 5;\\n        maxGainP = 900; // %\\n        maxSlP = 80; // %\\n        defaultLeverageUnlocked = 50; // x\\n        nftSuccessTimelock = 50; // 50 blocks\\n        spreadReductionsP = [15, 20, 25, 30, 35];\\n    }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        require(\\n            isTradingContract[msg.sender],\\n            // &&\\n            //     token.hasRole(MINTER_ROLE, msg.sender)\\n            \\\"here here\\\"\\n        );\\n        _;\\n    }\\n\\n    // Manage addresses\\n    function setGov(address _gov) external onlyGov {\\n        require(_gov != address(0));\\n        gov = _gov;\\n        emit AddressUpdated(\\\"gov\\\", _gov);\\n    }\\n\\n    function setDev(address _dev) external onlyGov {\\n        require(_dev != address(0));\\n        dev = _dev;\\n        emit AddressUpdated(\\\"dev\\\", _dev);\\n    }\\n\\n    function updateToken(TokenInterface _newToken) external onlyGov {\\n        require(trading.isPaused() && callbacks.isPaused(), \\\"NOT_PAUSED\\\");\\n        require(address(_newToken) != address(0));\\n        token = _newToken;\\n        emit AddressUpdated(\\\"token\\\", address(_newToken));\\n    }\\n\\n    function updateNfts(NftInterfaceV5[5] memory _nfts) external onlyGov {\\n        require(address(_nfts[0]) != address(0));\\n        nfts = _nfts;\\n        emit NftsUpdated(_nfts);\\n    }\\n\\n    // Trading + callbacks contracts\\n    function addTradingContract(address _trading) external onlyGov {\\n        // require(token.hasRole(MINTER_ROLE, _trading), \\\"NOT_MINTER\\\"); /// TODO : need to have a gtoken type token of our own\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = true;\\n        emit TradingContractAdded(_trading);\\n    }\\n\\n    function removeTradingContract(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        isTradingContract[_trading] = false;\\n        emit TradingContractRemoved(_trading);\\n    }\\n\\n    function addSupportedToken(address _token) external onlyGov {\\n        require(_token != address(0));\\n        supportedTokens.push(_token);\\n        emit SupportedTokenAdded(_token);\\n    }\\n\\n    function setPriceAggregator(address _aggregator) external onlyGov {\\n        require(_aggregator != address(0));\\n        priceAggregator = AggregatorInterfaceV1(_aggregator);\\n        emit AddressUpdated(\\\"priceAggregator\\\", _aggregator);\\n    }\\n\\n    function setPool(address _pool) external onlyGov {\\n        require(_pool != address(0));\\n        pool = PoolInterfaceV5(_pool);\\n        emit AddressUpdated(\\\"pool\\\", _pool);\\n    }\\n\\n    function setVault(address _vault) external onlyGov {\\n        require(_vault != address(0));\\n        vault = _vault;\\n        emit AddressUpdated(\\\"vault\\\", _vault);\\n    }\\n\\n    function setTrading(address _trading) external onlyGov {\\n        require(_trading != address(0));\\n        trading = PausableInterfaceV5(_trading);\\n        emit AddressUpdated(\\\"trading\\\", _trading);\\n    }\\n\\n    function setCallbacks(address _callbacks) external onlyGov {\\n        require(_callbacks != address(0));\\n        callbacks = PausableInterfaceV5(_callbacks);\\n        emit AddressUpdated(\\\"callbacks\\\", _callbacks);\\n    }\\n\\n    function setTokenWETHRouter(address _tokenWETHRouter) external onlyGov {\\n        require(_tokenWETHRouter != address(0));\\n        tokenWETHRouter = _tokenWETHRouter;\\n        emit AddressUpdated(\\\"tokenWETHRouter\\\", _tokenWETHRouter);\\n    }\\n\\n    // Manage trading variables\\n    function setMaxTradesPerBlock(uint _maxTradesPerBlock) external onlyGov {\\n        require(_maxTradesPerBlock > 0);\\n        maxTradesPerBlock = _maxTradesPerBlock;\\n        emit NumberUpdated(\\\"maxTradesPerBlock\\\", _maxTradesPerBlock);\\n    }\\n\\n    function setMaxTradesPerPair(uint _maxTradesPerPair) external onlyGov {\\n        require(_maxTradesPerPair > 0);\\n        maxTradesPerPair = _maxTradesPerPair;\\n        emit NumberUpdated(\\\"maxTradesPerPair\\\", _maxTradesPerPair);\\n    }\\n\\n    function setMaxPendingMarketOrders(\\n        uint _maxPendingMarketOrders\\n    ) external onlyGov {\\n        require(_maxPendingMarketOrders > 0);\\n        maxPendingMarketOrders = _maxPendingMarketOrders;\\n        emit NumberUpdated(\\\"maxPendingMarketOrders\\\", _maxPendingMarketOrders);\\n    }\\n\\n    function setMaxGainP(uint _max) external onlyGov {\\n        require(_max >= 300);\\n        maxGainP = _max;\\n        emit NumberUpdated(\\\"maxGainP\\\", _max);\\n    }\\n\\n    function setDefaultLeverageUnlocked(uint _lev) external onlyGov {\\n        require(_lev > 0);\\n        defaultLeverageUnlocked = _lev;\\n        emit NumberUpdated(\\\"defaultLeverageUnlocked\\\", _lev);\\n    }\\n\\n    function setMaxSlP(uint _max) external onlyGov {\\n        require(_max >= 50);\\n        maxSlP = _max;\\n        emit NumberUpdated(\\\"maxSlP\\\", _max);\\n    }\\n\\n    function setNftSuccessTimelock(uint _blocks) external onlyGov {\\n        nftSuccessTimelock = _blocks;\\n        emit NumberUpdated(\\\"nftSuccessTimelock\\\", _blocks);\\n    }\\n\\n    function setSpreadReductionsP(uint[5] calldata _r) external onlyGov {\\n        require(\\n            _r[0] > 0 &&\\n                _r[1] > _r[0] &&\\n                _r[2] > _r[1] &&\\n                _r[3] > _r[2] &&\\n                _r[4] > _r[3]\\n        );\\n        spreadReductionsP = _r;\\n        emit SpreadReductionsUpdated(_r);\\n    }\\n\\n    function setMaxOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _newMaxOpenInterest\\n    ) external onlyGov {\\n        // Can set max open interest to 0 to pause trading on this pair only\\n        openInterestWETH[_pairIndex][2] = _newMaxOpenInterest;\\n        emit NumberUpdatedPair(\\n            \\\"maxOpenInterestWETH\\\",\\n            _pairIndex,\\n            _newMaxOpenInterest\\n        );\\n    }\\n\\n    // Manage stored trades\\n    function storeTrade(\\n        Trade memory _trade,\\n        TradeInfo memory _tradeInfo\\n    ) external onlyTrading {\\n        _trade.index = firstEmptyTradeIndex(_trade.trader, _trade.pairIndex);\\n        openTrades[_trade.trader][_trade.pairIndex][_trade.index] = _trade;\\n\\n        openTradesCount[_trade.trader][_trade.pairIndex]++;\\n        tradesPerBlock[block.number]++;\\n\\n        if (openTradesCount[_trade.trader][_trade.pairIndex] == 1) {\\n            pairTradersId[_trade.trader][_trade.pairIndex] = pairTraders[\\n                _trade.pairIndex\\n            ].length;\\n            pairTraders[_trade.pairIndex].push(_trade.trader);\\n        }\\n\\n        _tradeInfo.beingMarketClosed = false;\\n        openTradesInfo[_trade.trader][_trade.pairIndex][\\n            _trade.index\\n        ] = _tradeInfo;\\n\\n        updateOpenInterestWETH(\\n            _trade.pairIndex,\\n            _tradeInfo.openInterestWETH,\\n            true,\\n            _trade.buy\\n        );\\n\\n        emit TradeOpen(_trade);\\n    }\\n\\n    function unregisterTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[trader][pairIndex][index];\\n        TradeInfo storage i = openTradesInfo[trader][pairIndex][index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n\\n        updateOpenInterestWETH(pairIndex, i.openInterestWETH, false, t.buy);\\n\\n        if (openTradesCount[trader][pairIndex] == 1) {\\n            uint _pairTradersId = pairTradersId[trader][pairIndex];\\n            address[] storage p = pairTraders[pairIndex];\\n\\n            p[_pairTradersId] = p[p.length - 1];\\n            pairTradersId[p[_pairTradersId]][pairIndex] = _pairTradersId;\\n\\n            delete pairTradersId[trader][pairIndex];\\n            p.pop();\\n        }\\n\\n        delete openTrades[trader][pairIndex][index];\\n        delete openTradesInfo[trader][pairIndex][index];\\n\\n        openTradesCount[trader][pairIndex]--;\\n        tradesPerBlock[block.number]++;\\n\\n        emit TradeClose(t);\\n    }\\n\\n    // Manage pending market orders\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory _order,\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        pendingOrderIds[_order.trade.trader].push(_id);\\n\\n        reqID_pendingMarketOrder[_id] = _order;\\n        reqID_pendingMarketOrder[_id].block = block.number;\\n\\n        if (_open) {\\n            pendingMarketOpenCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n        } else {\\n            pendingMarketCloseCount[_order.trade.trader][\\n                _order.trade.pairIndex\\n            ]++;\\n            openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                _order.trade.index\\n            ].beingMarketClosed = true;\\n        }\\n    }\\n\\n    function unregisterPendingMarketOrder(\\n        uint _id,\\n        bool _open\\n    ) external onlyTrading {\\n        PendingMarketOrder memory _order = reqID_pendingMarketOrder[_id];\\n        uint[] storage orderIds = pendingOrderIds[_order.trade.trader];\\n\\n        for (uint i = 0; i < orderIds.length; i++) {\\n            if (orderIds[i] == _id) {\\n                if (_open) {\\n                    pendingMarketOpenCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                } else {\\n                    pendingMarketCloseCount[_order.trade.trader][\\n                        _order.trade.pairIndex\\n                    ]--;\\n                    openTradesInfo[_order.trade.trader][_order.trade.pairIndex][\\n                        _order.trade.index\\n                    ].beingMarketClosed = false;\\n                }\\n\\n                orderIds[i] = orderIds[orderIds.length - 1];\\n                orderIds.pop();\\n\\n                delete reqID_pendingMarketOrder[_id];\\n                return;\\n            }\\n        }\\n    }\\n\\n    // Manage open interest\\n    function updateOpenInterestWETH(\\n        uint _pairIndex,\\n        uint _leveragedPosWETH,\\n        bool _open,\\n        bool _long\\n    ) private {\\n        uint index = _long ? 0 : 1;\\n        uint[3] storage o = openInterestWETH[_pairIndex];\\n        o[index] = _open\\n            ? o[index] + _leveragedPosWETH\\n            : o[index] - _leveragedPosWETH;\\n        emit OpenningInterestUpated(_pairIndex, o[1], o[0]);\\n    }\\n\\n    // Manage open limit orders\\n    function storeOpenLimitOrder(OpenLimitOrder memory o) external onlyTrading {\\n        o.index = firstEmptyOpenLimitIndex(o.trader, o.pairIndex);\\n        o.block = block.number;\\n        openLimitOrders.push(o);\\n        openLimitOrderIds[o.trader][o.pairIndex][o.index] =\\n            openLimitOrders.length -\\n            1;\\n        openLimitOrdersCount[o.trader][o.pairIndex]++;\\n    }\\n\\n    function updateOpenLimitOrder(\\n        OpenLimitOrder calldata _o\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_o.trader, _o.pairIndex, _o.index)) {\\n            return;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[_o.trader][_o.pairIndex][_o.index]\\n        ];\\n        o.positionSize = _o.positionSize;\\n        o.buy = _o.buy;\\n        o.leverage = _o.leverage;\\n        o.tp = _o.tp;\\n        o.sl = _o.sl;\\n        o.minPrice = _o.minPrice;\\n        o.maxPrice = _o.maxPrice;\\n        o.block = block.number;\\n    }\\n\\n    function unregisterOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external onlyTrading {\\n        if (!hasOpenLimitOrder(_trader, _pairIndex, _index)) {\\n            return;\\n        }\\n\\n        // Copy last order to deleted order => update id of this limit order\\n        uint id = openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders[id] = openLimitOrders[openLimitOrders.length - 1];\\n        openLimitOrderIds[openLimitOrders[id].trader][\\n            openLimitOrders[id].pairIndex\\n        ][openLimitOrders[id].index] = id;\\n\\n        // Remove\\n        delete openLimitOrderIds[_trader][_pairIndex][_index];\\n        openLimitOrders.pop();\\n\\n        openLimitOrdersCount[_trader][_pairIndex]--;\\n    }\\n\\n    // Manage NFT orders\\n    function storePendingNftOrder(\\n        PendingNftOrder memory _nftOrder,\\n        uint _orderId\\n    ) external onlyTrading {\\n        reqID_pendingNftOrder[_orderId] = _nftOrder;\\n    }\\n\\n    function unregisterPendingNftOrder(uint _order) external onlyTrading {\\n        delete reqID_pendingNftOrder[_order];\\n    }\\n\\n    // Manage open trade\\n    function updateSl(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newSl\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.sl = _newSl;\\n        i.slLastUpdated = block.number;\\n    }\\n\\n    function updateTp(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index,\\n        uint _newTp\\n    ) external onlyTrading {\\n        Trade storage t = openTrades[_trader][_pairIndex][_index];\\n        TradeInfo storage i = openTradesInfo[_trader][_pairIndex][_index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.tp = _newTp;\\n        i.tpLastUpdated = block.number;\\n    }\\n\\n    function updateTrade(Trade memory _t) external onlyTrading {\\n        // useful when partial adding/closing\\n        Trade storage t = openTrades[_t.trader][_t.pairIndex][_t.index];\\n        if (t.leverage == 0) {\\n            return;\\n        }\\n        t.initialPosToken = _t.initialPosToken;\\n        t.positionSizeWETH = _t.positionSizeWETH;\\n        t.openPrice = _t.openPrice;\\n        t.leverage = _t.leverage;\\n    }\\n\\n    // Manage referrals\\n    function storeReferral(\\n        address _trader,\\n        address _referral\\n    ) external onlyTrading {\\n        Trader storage trader = traders[_trader];\\n        trader.referral = _referral != address(0) &&\\n            trader.referral == address(0) &&\\n            _referral != _trader\\n            ? _referral\\n            : trader.referral;\\n    }\\n\\n    function increaseReferralRewards(\\n        address _referral,\\n        uint _amount\\n    ) external onlyTrading {\\n        traders[_referral].referralRewardsTotal += _amount;\\n    }\\n\\n    // Manage rewards\\n    function distributeLpRewards(uint _amount) external onlyTrading {\\n        pool.increaseAccTokensPerLp(_amount);\\n    }\\n\\n    function increaseNftRewards(\\n        uint _nftId,\\n        uint _amount\\n    ) external onlyTrading {\\n        nftLastSuccess[_nftId] = block.number;\\n        nftRewards += _amount;\\n    }\\n\\n    // Unlock next leverage\\n    function setLeverageUnlocked(\\n        address _trader,\\n        uint _newLeverage\\n    ) external onlyTrading {\\n        traders[_trader].leverageUnlocked = _newLeverage;\\n    }\\n\\n    // Manage dev & gov fees\\n    function handleDevGovFees(\\n        uint _pairIndex,\\n        uint _leveragedPositionSize,\\n        bool _WETH,\\n        bool _fullFee\\n    ) external onlyTrading returns (uint fee) {\\n        fee =\\n            (_leveragedPositionSize * priceAggregator.openFeeP(_pairIndex)) /\\n            PRECISION /\\n            100;\\n        if (!_fullFee) {\\n            fee /= 2;\\n        }\\n\\n        if (_WETH) {\\n            govFeesWETH += fee;\\n            devFeesWETH += fee;\\n        } else {\\n            govFeesToken += fee;\\n            devFeesToken += fee;\\n        }\\n\\n        fee *= 2;\\n    }\\n\\n    function claimFees() external onlyGov {\\n        token.mint(dev, devFeesToken);\\n        token.mint(gov, govFeesToken);\\n\\n        tokensMinted += devFeesToken + govFeesToken;\\n\\n        WETH.transfer(gov, govFeesWETH);\\n        WETH.transfer(dev, devFeesWETH);\\n\\n        devFeesToken = 0;\\n        govFeesToken = 0;\\n        devFeesWETH = 0;\\n        govFeesWETH = 0;\\n    }\\n\\n    // Manage tokens\\n    function handleTokens(\\n        address _a,\\n        uint _amount,\\n        bool _mint\\n    ) external onlyTrading {\\n        if (_mint) {\\n            token.mint(_a, _amount);\\n            tokensMinted += _amount;\\n        } else {\\n            token.burn(_a, _amount);\\n            tokensBurned += _amount;\\n        }\\n    }\\n\\n    function transferWETH(\\n        address _from,\\n        address _to,\\n        uint _amount\\n    ) external onlyTrading {\\n        if (_from == address(this)) {\\n            WETH.transfer(_to, _amount);\\n        } else {\\n            WETH.transferFrom(_from, _to, _amount);\\n        }\\n    }\\n\\n    function mintWETH(address _to, uint _amount) external onlyTrading {\\n        WETH.mint(_to, _amount);\\n    }\\n\\n    function transferLinkToAggregator(\\n        address _from,\\n        uint _pairIndex,\\n        uint _leveragedPosWETH\\n    ) external onlyTrading {\\n        linkErc677.transferFrom(\\n            _from,\\n            address(priceAggregator),\\n            priceAggregator.linkFee(_pairIndex, _leveragedPosWETH)\\n        );\\n    }\\n\\n    // View utils functions\\n    function firstEmptyTradeIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (openTrades[trader][pairIndex][i].leverage == 0) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function firstEmptyOpenLimitIndex(\\n        address trader,\\n        uint pairIndex\\n    ) public view returns (uint index) {\\n        for (uint i = 0; i < maxTradesPerPair; i++) {\\n            if (!hasOpenLimitOrder(trader, pairIndex, i)) {\\n                index = i;\\n                break;\\n            }\\n        }\\n    }\\n\\n    function hasOpenLimitOrder(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) public view returns (bool) {\\n        if (openLimitOrders.length == 0) {\\n            return false;\\n        }\\n        OpenLimitOrder storage o = openLimitOrders[\\n            openLimitOrderIds[trader][pairIndex][index]\\n        ];\\n        return\\n            o.trader == trader && o.pairIndex == pairIndex && o.index == index;\\n    }\\n\\n    // Additional getters\\n    function getReferral(address _trader) external view returns (address) {\\n        return traders[_trader].referral;\\n    }\\n\\n    function getLeverageUnlocked(address _trader) external view returns (uint) {\\n        return traders[_trader].leverageUnlocked;\\n    }\\n\\n    function pairTradersArray(\\n        uint _pairIndex\\n    ) external view returns (address[] memory) {\\n        return pairTraders[_pairIndex];\\n    }\\n\\n    function getPendingOrderIds(\\n        address _trader\\n    ) external view returns (uint[] memory) {\\n        return pendingOrderIds[_trader];\\n    }\\n\\n    function pendingOrderIdsCount(\\n        address _trader\\n    ) external view returns (uint) {\\n        return pendingOrderIds[_trader].length;\\n    }\\n\\n    function getOpenLimitOrder(\\n        address _trader,\\n        uint _pairIndex,\\n        uint _index\\n    ) external view returns (OpenLimitOrder memory) {\\n        require(hasOpenLimitOrder(_trader, _pairIndex, _index));\\n        return openLimitOrders[openLimitOrderIds[_trader][_pairIndex][_index]];\\n    }\\n\\n    function getOpenLimitOrders()\\n        external\\n        view\\n        returns (OpenLimitOrder[] memory)\\n    {\\n        return openLimitOrders;\\n    }\\n\\n    function getSupportedTokens() external view returns (address[] memory) {\\n        return supportedTokens;\\n    }\\n\\n    function getSpreadReductionsArray() external view returns (uint[5] memory) {\\n        return spreadReductionsP;\\n    }\\n\\n    function getGov() external view returns (address _gov) {\\n        return gov;\\n    }\\n\\n    function setOracle(address _oracle) external {\\n        oracle = IOracle(_oracle);\\n    }\\n\\n    function getOpenTrades(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (Trade memory) {\\n        return openTrades[trader][pairIndex][index];\\n    }\\n\\n    function getOpenTradesInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (TradeInfo memory) {\\n        return openTradesInfo[trader][pairIndex][index];\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) external view returns (PendingMarketOrder memory) {\\n        return reqID_pendingMarketOrder[orderId];\\n    }\\n\\n    function getPendingNftOrder(\\n        uint orderId\\n    ) external view returns (PendingNftOrder memory) {\\n        return reqID_pendingNftOrder[orderId];\\n    }\\n\\n    function setPairs(uint256 _pairs) external {\\n        pairs = _pairs;\\n    }\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traderaddreses,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs,\\n            uint256 index\\n        )\\n    {\\n        for (uint256 i; i < pairs; i++) {\\n            address[] memory traders = pairTraders[i];\\n            for (uint j; j < traders.length; j++) {\\n                uint256 numOfTrades = openTradesCount[traders[j]][i];\\n                uint k;\\n                while (numOfTrades != 0) {\\n                    Trade memory t = openTrades[traders[j]][i][k];\\n\\n                    (bool liquidated, bool noSL) = trading\\n                        .isTradeLiquidatablePure(t);\\n                    if (liquidated && noSL) {\\n                        traderaddreses[index] = t.trader;\\n                        _orderTypes[index] = 2;\\n                        pairIndexs[index] = t.pairIndex;\\n                        indexs[index] = t.index;\\n                        index++;\\n                    }\\n                    (bool parLiquidated, bool parNoSL) = trading\\n                        .isTradeParLiquidatablePure(t);\\n                    if (parLiquidated && !liquidated && parNoSL) {\\n                        traderaddreses[index] = t.trader;\\n                        _orderTypes[index] = 4;\\n                        pairIndexs[index] = t.pairIndex;\\n                        indexs[index] = t.index;\\n                        index++;\\n                    }\\n                    if (index == 99) break;\\n                    numOfTrades--;\\n                    k++;\\n                }\\n                if (index == 99) break;\\n            }\\n            if (index == 99) break;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe29adf0f1d16bd1f1e3cfffe8bfccc3dd48419617d264fa3e1463263fd16984\",\"license\":\"MIT\"},\"contracts/TradingCallbacks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/StorageInterface.sol\\\";\\nimport \\\"./interfaces/NFTRewardInterfaceV6_3.sol\\\";\\nimport \\\"./interfaces/PairInfosInterface.sol\\\";\\nimport \\\"./interfaces/ReferralsInterface.sol\\\";\\nimport \\\"./interfaces/StakingInterface.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\nimport \\\"./interfaces/BorrowingFeesInterface.sol\\\";\\nimport \\\"./interfaces/PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./interfaces/AggregatorInterfaceV1_4.sol\\\";\\nimport \\\"./Storage.sol\\\";\\n\\ncontract TradingCallbacks is Initializable {\\n    // Contracts (constant)\\n    StorageInterface public storageT;\\n    NftRewardsInterfaceV6_3_1 public nftRewards;\\n    PairInfosInterface public pairInfos;\\n    ReferralsInterface public referrals;\\n    StakingInterface public staking;\\n\\n    // Params (constant)\\n    uint constant PRECISION = 1e10; // 10 decimals\\n\\n    uint constant MAX_SL_P = 75; // -75% PNL\\n    uint constant MAX_GAIN_P = 900; // 900% PnL (10x)\\n    uint constant MAX_EXECUTE_TIMEOUT = 5; // 5 blocks\\n\\n    // Params (adjustable)\\n    uint public WETHVaultFeeP; // % of closing fee going to WETH vault (eg. 40)\\n    uint public lpFeeP; // % of closing fee going to GNS/WETH LPs (eg. 20)\\n    uint public sssFeeP; // % of closing fee going to GNS staking (eg. 40)\\n    uint public vaultFeeP = 50;\\n    uint public liquidatorFeeP = 50;\\n    uint public liquidationFeeP = 5;\\n    uint public parLiquidationFeeP = 3;\\n    uint public openingFeeP;\\n    uint public closingFeeP;\\n\\n    // State\\n    bool public isPaused; // Prevent opening new trades\\n    bool public isDone; // Prevent any interaction with the contract\\n    uint public canExecuteTimeout; // How long an update to TP/SL/Limit has to wait before it is executable\\n\\n    // Last Updated State\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => LastUpdated))))\\n        public tradeLastUpdated; // Block numbers for last updated\\n\\n    // v6.3.2 Storage/State\\n    BorrowingFeesInterface public borrowingFees;\\n\\n    mapping(uint => uint) public pairMaxLeverage;\\n\\n    // v6.4 Storage\\n    mapping(address => mapping(uint => mapping(uint => mapping(TradeType => TradeData))))\\n        public tradeData; // More storage for trades / limit orders\\n\\n    // Custom data types\\n    struct AggregatorAnswer {\\n        uint orderId;\\n        uint price;\\n        uint spreadP;\\n        uint open;\\n        uint high;\\n        uint low;\\n    }\\n\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n\\n    // Useful to avoid stack too deep errors\\n    struct Values {\\n        uint posWETH;\\n        uint levPosWETH;\\n        uint tokenPriceWETH;\\n        int profitP;\\n        uint price;\\n        uint liqPrice;\\n        uint WETHSentToTrader;\\n        uint reward1;\\n        uint reward2;\\n        uint reward3;\\n        bool exactExecution;\\n    }\\n\\n    struct SimplifiedTradeId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        TradeType tradeType;\\n    }\\n\\n    struct LastUpdated {\\n        uint32 tp;\\n        uint32 sl;\\n        uint32 limit;\\n        uint32 created;\\n    }\\n\\n    struct TradeData {\\n        uint40 maxSlippageP; // 1e10 (%)\\n        uint216 _placeholder; // for potential future data\\n    }\\n\\n    struct OpenTradePrepInput {\\n        uint executionPrice;\\n        uint wantedPrice;\\n        uint marketPrice;\\n        uint spreadP;\\n        uint spreadReductionP;\\n        bool buy;\\n        uint pairIndex;\\n        uint positionSize;\\n        uint leverage;\\n        uint maxSlippageP;\\n        uint tp;\\n        uint sl;\\n    }\\n\\n    struct feeConfig {\\n        uint _vaultFeeP;\\n        uint _liquidatorFeeP;\\n        uint _liquidationFeeP;\\n        uint _parLiquidationFeeP;\\n        uint _openingFeeP; // 1e4 precision\\n        uint _closingFeeP; // 1e4 precision\\n    }\\n\\n    enum TradeType {\\n        MARKET,\\n        LIMIT\\n    }\\n\\n    enum CancelReason {\\n        NONE,\\n        PAUSED,\\n        MARKET_CLOSED,\\n        SLIPPAGE,\\n        TP_REACHED,\\n        SL_REACHED,\\n        EXPOSURE_LIMITS,\\n        PRICE_IMPACT,\\n        MAX_LEVERAGE,\\n        NO_TRADE,\\n        WRONG_TRADE,\\n        NOT_HIT\\n    }\\n\\n    // Events\\n    event UpdatedOpeningFeeP(uint256 _openingFeeP);\\n\\n    event UpdatedClosingFeeP(uint256 _closingFeeP);\\n\\n    event MarketExecuted(\\n        uint indexed orderId,\\n        StorageInterface.Trade t,\\n        bool open,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit, // before fees\\n        uint WETHSentToTrader\\n    );\\n\\n    event LiquidationExecuted(\\n        uint indexed orderId,\\n        StorageInterface.Trade t,\\n        uint liqPrice,\\n        bool isPartial\\n    );\\n\\n    event LimitExecuted(\\n        uint indexed orderId,\\n        uint limitIndex,\\n        StorageInterface.Trade t,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        uint price,\\n        uint priceImpactP,\\n        uint positionSizeWETH,\\n        int percentProfit,\\n        uint WETHSentToTrader,\\n        bool exactExecution\\n    );\\n\\n    event MarketOpenCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        CancelReason cancelReason\\n    );\\n    event MarketCloseCanceled(\\n        uint indexed orderId,\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        CancelReason cancelReason\\n    );\\n    event NftOrderCanceled(\\n        uint indexed orderId,\\n        address indexed nftHolder,\\n        StorageInterface.LimitOrder orderType,\\n        CancelReason cancelReason\\n    );\\n\\n    event ClosingFeeSharesPUpdated(\\n        uint WETHVaultFeeP,\\n        uint lpFeeP,\\n        uint sssFeeP\\n    );\\n    event CanExecuteTimeoutUpdated(uint newValue);\\n\\n    event Pause(bool paused);\\n    event Done(bool done);\\n\\n    event DevGovFeeCharged(address indexed trader, uint valueWETH);\\n    event ClosigFeeDeduced(address indexed trader, uint256 fee);\\n    event OpeningFeeDeduced(address indexed trader, uint256 fee);\\n    event LiquidationFeeDeduced(\\n        uint256 _vaultFee,\\n        uint256 _liquidatorFee,\\n        address liquidator\\n    );\\n    event ParLiquidationFeeDeduced(\\n        uint256 _vaultFee,\\n        uint256 _liquidatorFee,\\n        address liquidator\\n    );\\n\\n    event ReferralFeeCharged(address indexed trader, uint valueWETH);\\n    event NftBotFeeCharged(address indexed trader, uint valueWETH);\\n    event SssFeeCharged(address indexed trader, uint valueWETH);\\n    event VaultRewardDistributed(address indexed trader, uint valueWETH);\\n    event WETHVaultFeeCharged(address indexed trader, uint valueWETH);\\n    event BorrowingFeeCharged(\\n        address indexed trader,\\n        uint tradeValueWETH,\\n        uint feeValueWETH\\n    );\\n    event PairMaxLeverageUpdated(uint indexed pairIndex, uint maxLeverage);\\n\\n    // Custom errors (save gas)\\n    error WrongParams();\\n    error Forbidden();\\n\\n    function initialize(\\n        StorageInterface _storageT,\\n        NftRewardsInterfaceV6_3_1 _nftRewards,\\n        PairInfosInterface _pairInfos,\\n        ReferralsInterface _referrals,\\n        StakingInterface _staking,\\n        BorrowingFeesInterface _borrowingFees,\\n        address vaultToApprove,\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP,\\n        uint _canExecuteTimeout,\\n        feeConfig memory data\\n    ) external initializer {\\n        if (\\n            address(_storageT) == address(0) ||\\n            address(_nftRewards) == address(0) ||\\n            address(_pairInfos) == address(0) ||\\n            address(_referrals) == address(0) ||\\n            address(_staking) == address(0) ||\\n            vaultToApprove == address(0) ||\\n            _WETHVaultFeeP + _lpFeeP + _sssFeeP != 100 ||\\n            _canExecuteTimeout > MAX_EXECUTE_TIMEOUT\\n        ) {\\n            revert WrongParams();\\n        }\\n\\n        storageT = _storageT;\\n        nftRewards = _nftRewards;\\n        pairInfos = _pairInfos;\\n        referrals = _referrals;\\n        staking = _staking;\\n        borrowingFees = _borrowingFees;\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n        vaultFeeP = data._vaultFeeP;\\n        liquidatorFeeP = data._liquidatorFeeP;\\n        liquidationFeeP = data._liquidationFeeP;\\n        parLiquidationFeeP = data._parLiquidationFeeP;\\n        openingFeeP = data._openingFeeP;\\n        closingFeeP = data._closingFeeP;\\n\\n        canExecuteTimeout = _canExecuteTimeout;\\n        TokenInterface t = storageT.WETH();\\n        t.approve(address(staking), type(uint256).max);\\n        t.approve(vaultToApprove, type(uint256).max);\\n    }\\n\\n    // function initializeV2(\\n    //     BorrowingFeesInterface _borrowingFees\\n    // ) external reinitializer(2) {\\n    //     if (address(_borrowingFees) == address(0)) {\\n    //         revert WrongParams();\\n    //     }\\n    //     borrowingFees = _borrowingFees;\\n    // }\\n\\n    // Modifiers\\n    modifier onlyGov() {\\n        isGov();\\n        _;\\n    }\\n    modifier onlyPriceAggregator() {\\n        isPriceAggregator();\\n        _;\\n    }\\n    modifier notDone() {\\n        isNotDone();\\n        _;\\n    }\\n    modifier onlyTrading() {\\n        isTrading();\\n        _;\\n    }\\n    modifier onlyManager() {\\n        isManager();\\n        _;\\n    }\\n\\n    // Saving code size by calling these functions inside modifiers\\n    function isGov() private view {\\n        if (msg.sender != storageT.gov()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isPriceAggregator() private view {\\n        if (msg.sender != address(storageT.priceAggregator())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isNotDone() private view {\\n        if (isDone) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isTrading() private view {\\n        if (msg.sender != address(storageT.trading())) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    function isManager() private view {\\n        if (msg.sender != pairInfos.manager()) {\\n            revert Forbidden();\\n        }\\n    }\\n\\n    // Manage params\\n    function setPairMaxLeverage(uint pairIndex, uint maxLeverage) external {\\n        _setPairMaxLeverage(pairIndex, maxLeverage);\\n    }\\n\\n    function setOpeningFee(uint256 _openingFeeP) external onlyGov {\\n        openingFeeP = _openingFeeP;\\n        emit UpdatedOpeningFeeP(_openingFeeP);\\n    }\\n\\n    function setClosingFee(uint256 _closingFeeP) external onlyGov {\\n        closingFeeP = _closingFeeP;\\n        emit UpdatedClosingFeeP(_closingFeeP);\\n    }\\n\\n    function setPairMaxLeverageArray(\\n        uint[] calldata indices,\\n        uint[] calldata values\\n    ) external onlyManager {\\n        uint len = indices.length;\\n\\n        if (len != values.length) {\\n            revert WrongParams();\\n        }\\n\\n        for (uint i; i < len; ) {\\n            _setPairMaxLeverage(indices[i], values[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _setPairMaxLeverage(uint pairIndex, uint maxLeverage) private {\\n        pairMaxLeverage[pairIndex] = maxLeverage;\\n        emit PairMaxLeverageUpdated(pairIndex, maxLeverage);\\n    }\\n\\n    function setClosingFeeSharesP(\\n        uint _WETHVaultFeeP,\\n        uint _lpFeeP,\\n        uint _sssFeeP\\n    ) external onlyGov {\\n        if (_WETHVaultFeeP + _lpFeeP + _sssFeeP != 100) {\\n            revert WrongParams();\\n        }\\n\\n        WETHVaultFeeP = _WETHVaultFeeP;\\n        lpFeeP = _lpFeeP;\\n        sssFeeP = _sssFeeP;\\n\\n        emit ClosingFeeSharesPUpdated(_WETHVaultFeeP, _lpFeeP, _sssFeeP);\\n    }\\n\\n    function setCanExecuteTimeout(uint _canExecuteTimeout) external onlyGov {\\n        if (_canExecuteTimeout > MAX_EXECUTE_TIMEOUT) {\\n            revert WrongParams();\\n        }\\n        canExecuteTimeout = _canExecuteTimeout;\\n        emit CanExecuteTimeoutUpdated(_canExecuteTimeout);\\n    }\\n\\n    // Manage state\\n    function pause() external onlyGov {\\n        isPaused = !isPaused;\\n\\n        emit Pause(isPaused);\\n    }\\n\\n    function done() external onlyGov {\\n        isDone = !isDone;\\n\\n        emit Done(isDone);\\n    }\\n\\n    // Callbacks\\n    function openTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n        //     a.orderId\\n        // );\\n\\n        // if (o.block == 0) {\\n        //     return;\\n        // }\\n\\n        StorageInterface.Trade memory t = o.trade;\\n\\n        (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        ) = _openTradePrep(\\n                OpenTradePrepInput(\\n                    a.price,\\n                    o.wantedPrice,\\n                    a.price,\\n                    a.spreadP,\\n                    o.spreadReductionP,\\n                    t.buy,\\n                    t.pairIndex,\\n                    t.positionSizeWETH,\\n                    t.leverage,\\n                    o.slippageP,\\n                    t.tp,\\n                    t.sl\\n                )\\n            );\\n        t.openPrice = priceAfterImpact;\\n        if (cancelReason == CancelReason.NONE) {\\n            (StorageInterface.Trade memory finalTrade, ) = registerTrade(\\n                t,\\n                1500,\\n                0\\n            );\\n\\n            emit MarketExecuted(\\n                a.orderId,\\n                finalTrade,\\n                true,\\n                finalTrade.openPrice,\\n                priceImpactP,\\n                (finalTrade.positionSizeWETH * finalTrade.leverage),\\n                0,\\n                0\\n            );\\n        } else {\\n            // uint devGovFeesWETH = storageT.handleDevGovFees(\\n            //     t.pairIndex,\\n            //     t.positionSizeWETH * t.leverage,\\n            //     true,\\n            //     true\\n            // );\\n            // transferFromStorageToAddress(\\n            //     t.trader,\\n            //     t.positionSizeWETH - devGovFeesWETH\\n            // );\\n\\n            // emit DevGovFeeCharged(t.trader, devGovFeesWETH);\\n            emit MarketOpenCanceled(\\n                a.orderId,\\n                t.trader,\\n                t.pairIndex,\\n                cancelReason\\n            );\\n\\n            revert(\\\"Market open order canceled\\\");\\n        }\\n\\n        // storageT.unregisterPendingMarketOrder(a.orderId, true);\\n    }\\n\\n    function closeTradeMarketCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingMarketOrder memory o = getPendingMarketOrder(\\n        //     a.orderId\\n        // );\\n\\n        // if (o.block == 0) {\\n        //     return;\\n        // }\\n\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trade.trader,\\n            o.trade.pairIndex,\\n            o.trade.index\\n        );\\n\\n        CancelReason cancelReason = t.leverage == 0\\n            ? CancelReason.NO_TRADE\\n            : (a.price == 0 ? CancelReason.MARKET_CLOSED : CancelReason.NONE);\\n\\n        if (cancelReason != CancelReason.NO_TRADE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n            AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n                address(storageT.priceAggregator())\\n            );\\n\\n            Values memory v;\\n            v.levPosWETH = (t.positionSizeWETH * t.leverage);\\n            // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    a.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                v.posWETH = v.levPosWETH / t.leverage;\\n\\n                v.WETHSentToTrader = unregisterTrade(\\n                    t,\\n                    true,\\n                    v.profitP,\\n                    v.posWETH,\\n                    i.openInterestWETH,\\n                    (v.levPosWETH * closingFeeP) / 10000,\\n                    // (v.levPosWETH *\\n                    //     aggregator.pairsStorage().pairNftLimitOrderFeeP(\\n                    //         t.pairIndex\\n                    //     )) /\\n                    //     100 /\\n                    //     PRECISION\\n                    0\\n                );\\n\\n                emit MarketExecuted(\\n                    a.orderId,\\n                    t,\\n                    false,\\n                    a.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader\\n                );\\n            } else {\\n                // Dev / gov rewards to pay for oracle cost\\n                // Charge in WETH if collateral in storage or token if collateral in vault\\n                // v.reward1 = t.positionSizeWETH > 0\\n                //     ? storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         v.levPosWETH,\\n                //         true,\\n                //         true\\n                //     )\\n                //     : (storageT.handleDevGovFees(\\n                //         t.pairIndex,\\n                //         (v.levPosWETH * PRECISION) / v.tokenPriceWETH,\\n                //         false,\\n                //         true\\n                //     ) * v.tokenPriceWETH) / PRECISION;\\n\\n                // t.initialPosToken -= (v.reward1 * PRECISION) / i.tokenPriceWETH;\\n                // storageT.updateTrade(t);\\n\\n                emit DevGovFeeCharged(t.trader, v.reward1);\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit MarketCloseCanceled(\\n                a.orderId,\\n                o.trade.trader,\\n                o.trade.pairIndex,\\n                o.trade.index,\\n                cancelReason\\n            );\\n            revert(\\\"Market close order canceled\\\");\\n        }\\n\\n        // storageT.unregisterPendingMarketOrder(a.orderId, false);\\n    }\\n\\n    // function executeNftOpenOrderCallback(\\n    //     AggregatorAnswer memory a\\n    // ) external onlyPriceAggregator notDone {\\n    //     StorageInterface.PendingNftOrder memory n = storageT\\n    //         .reqID_pendingNftOrder(a.orderId);\\n\\n    //     CancelReason cancelReason = !storageT.hasOpenLimitOrder(\\n    //         n.trader,\\n    //         n.pairIndex,\\n    //         n.index\\n    //     )\\n    //         ? CancelReason.NO_TRADE\\n    //         : CancelReason.NONE;\\n\\n    //     if (cancelReason == CancelReason.NONE) {\\n    //         StorageInterface.OpenLimitOrder memory o = storageT\\n    //             .getOpenLimitOrder(n.trader, n.pairIndex, n.index);\\n\\n    //         NftRewardsInterfaceV6_3_1.OpenLimitOrderType t = nftRewards\\n    //             .openLimitOrderTypes(n.trader, n.pairIndex, n.index);\\n\\n    //         cancelReason = (a.high >= o.maxPrice && a.low <= o.maxPrice)\\n    //             ? CancelReason.NONE\\n    //             : CancelReason.NOT_HIT;\\n\\n    //         // Note: o.minPrice always equals o.maxPrice so can use either\\n    //         (\\n    //             uint priceImpactP,\\n    //             uint priceAfterImpact,\\n    //             CancelReason _cancelReason\\n    //         ) = _openTradePrep(\\n    //                 OpenTradePrepInput(\\n    //                     cancelReason == CancelReason.NONE ? o.maxPrice : a.open,\\n    //                     o.maxPrice,\\n    //                     a.open,\\n    //                     a.spreadP,\\n    //                     o.spreadReductionP,\\n    //                     o.buy,\\n    //                     o.pairIndex,\\n    //                     o.positionSize,\\n    //                     o.leverage,\\n    //                     tradeData[o.trader][o.pairIndex][o.index][\\n    //                         TradeType.LIMIT\\n    //                     ].maxSlippageP,\\n    //                     o.tp,\\n    //                     o.sl\\n    //                 )\\n    //             );\\n\\n    //         bool exactExecution = cancelReason == CancelReason.NONE;\\n\\n    //         cancelReason = !exactExecution &&\\n    //             (\\n    //                 o.maxPrice == 0 ||\\n    //                     t ==\\n    //                     NftRewardsInterfaceV6_3_1.OpenLimitOrderType.MOMENTUM\\n    //                     ? (o.buy ? a.open < o.maxPrice : a.open > o.maxPrice)\\n    //                     : (o.buy ? a.open > o.maxPrice : a.open < o.maxPrice)\\n    //             )\\n    //             ? CancelReason.NOT_HIT\\n    //             : _cancelReason;\\n\\n    //         if (cancelReason == CancelReason.NONE) {\\n    //             (\\n    //                 StorageInterface.Trade memory finalTrade,\\n    //                 uint tokenPriceWETH\\n    //             ) = registerTrade(\\n    //                     StorageInterface.Trade(\\n    //                         o.trader,\\n    //                         o.pairIndex,\\n    //                         0,\\n    //                         0,\\n    //                         o.positionSize,\\n    //                         priceAfterImpact,\\n    //                         o.buy,\\n    //                         o.leverage,\\n    //                         o.tp,\\n    //                         o.sl\\n    //                     ),\\n    //                     n.nftId,\\n    //                     n.index\\n    //                 );\\n\\n    //             storageT.unregisterOpenLimitOrder(\\n    //                 o.trader,\\n    //                 o.pairIndex,\\n    //                 o.index\\n    //             );\\n\\n    //             emit LimitExecuted(\\n    //                 a.orderId,\\n    //                 n.index,\\n    //                 finalTrade,\\n    //                 n.nftHolder,\\n    //                 StorageInterface.LimitOrder.OPEN,\\n    //                 finalTrade.openPrice,\\n    //                 priceImpactP,\\n    //                 (finalTrade.initialPosToken * tokenPriceWETH) / PRECISION,\\n    //                 0,\\n    //                 0,\\n    //                 exactExecution\\n    //             );\\n    //         }\\n    //     }\\n\\n    //     if (cancelReason != CancelReason.NONE) {\\n    //         emit NftOrderCanceled(\\n    //             a.orderId,\\n    //             n.nftHolder,\\n    //             StorageInterface.LimitOrder.OPEN,\\n    //             cancelReason\\n    //         );\\n    //     }\\n\\n    //     nftRewards.unregisterTrigger(\\n    //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n    //             n.trader,\\n    //             n.pairIndex,\\n    //             n.index,\\n    //             n.orderType\\n    //         )\\n    //     );\\n\\n    //     storageT.unregisterPendingNftOrder(a.orderId);\\n    // }\\n\\n    function executeNftCloseOrderCallback(\\n        AggregatorAnswer memory a,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external onlyPriceAggregator notDone {\\n        // StorageInterface.PendingNftOrder memory o = storageT\\n        //     .reqID_pendingNftOrder(a.orderId);\\n\\n        // NftRewardsInterfaceV6_3_1.TriggeredLimitId\\n        //     memory triggeredLimitId = NftRewardsInterfaceV6_3_1\\n        //         .TriggeredLimitId(o.trader, o.pairIndex, o.index, o.orderType);\\n        StorageInterface.Trade memory t = getOpenTrade(\\n            o.trader,\\n            o.pairIndex,\\n            o.index\\n        );\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n\\n        CancelReason cancelReason = a.price == 0\\n            ? CancelReason.MARKET_CLOSED\\n            : (t.leverage == 0 ? CancelReason.NO_TRADE : CancelReason.NONE);\\n\\n        if (cancelReason == CancelReason.NONE) {\\n            StorageInterface.TradeInfo memory i = getOpenTradeInfo(\\n                t.trader,\\n                t.pairIndex,\\n                t.index\\n            );\\n\\n            PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n            Values memory v;\\n            v.levPosWETH = t.positionSizeWETH * t.leverage;\\n            v.posWETH = v.levPosWETH / t.leverage;\\n\\n            if (o.orderType == StorageInterface.LimitOrder.LIQ) {\\n                v.liqPrice = borrowingFees.getTradeLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            if (o.orderType == StorageInterface.LimitOrder.PAR_LIQ) {\\n                v.liqPrice = borrowingFees.getTradePartialLiquidationPrice(\\n                    BorrowingFeesInterface.LiqPriceInput(\\n                        t.trader,\\n                        t.pairIndex,\\n                        t.index,\\n                        t.openPrice,\\n                        t.buy,\\n                        v.posWETH,\\n                        t.leverage\\n                    )\\n                );\\n            }\\n\\n            v.price = o.orderType == StorageInterface.LimitOrder.TP\\n                ? t.tp\\n                : (\\n                    o.orderType == StorageInterface.LimitOrder.SL\\n                        ? t.sl\\n                        : v.liqPrice\\n                );\\n\\n            v.exactExecution =\\n                // v.price > 0 &&\\n                // a.low <= v.price &&\\n                // a.high >= v.price;\\n                v.price == a.price;\\n            if (v.exactExecution) {\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (v.posWETH * liquidationFeeP) / uint256(100)\\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\\n                    ? (v.posWETH * parLiquidationFeeP) / uint256(100)\\n                    : (v.levPosWETH *\\n                        pairsStored.pairNftLimitOrderFeeP(t.pairIndex)) /\\n                        100 /\\n                        PRECISION;\\n            } else {\\n                // revert(\\\"only exact execution allowed\\\");\\n                v.price = a.price;\\n                v.reward1 = o.orderType == StorageInterface.LimitOrder.LIQ\\n                    ? (\\n                        (t.buy ? a.price <= v.liqPrice : a.price >= v.liqPrice)\\n                            ? (v.posWETH * liquidationFeeP) / uint256(100)\\n                            : 0\\n                    )\\n                    : o.orderType == StorageInterface.LimitOrder.PAR_LIQ\\n                    ? (\\n                        (t.buy ? a.price <= v.liqPrice : a.price >= v.liqPrice)\\n                            ? (v.posWETH * parLiquidationFeeP) / uint256(100)\\n                            : 0\\n                    )\\n                    : (\\n                        ((o.orderType == StorageInterface.LimitOrder.TP &&\\n                            t.tp > 0 &&\\n                            (t.buy ? a.open >= t.tp : a.open <= t.tp)) ||\\n                            (o.orderType == StorageInterface.LimitOrder.SL &&\\n                                t.sl > 0 &&\\n                                (t.buy ? a.open <= t.sl : a.open >= t.sl)))\\n                            ? (v.levPosWETH *\\n                                pairsStored.pairNftLimitOrderFeeP(\\n                                    t.pairIndex\\n                                )) /\\n                                100 /\\n                                PRECISION\\n                            : 0\\n                    );\\n            }\\n\\n            cancelReason = v.reward1 == 0\\n                ? CancelReason.NOT_HIT\\n                : CancelReason.NONE;\\n\\n            // If can be triggered\\n            if (cancelReason == CancelReason.NONE) {\\n                v.profitP = currentPercentProfit(\\n                    t.openPrice,\\n                    v.price,\\n                    t.buy,\\n                    t.leverage\\n                );\\n                // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n                v.WETHSentToTrader = o.orderType !=\\n                    StorageInterface.LimitOrder.PAR_LIQ\\n                    ? unregisterTrade(\\n                        t,\\n                        false,\\n                        v.profitP,\\n                        v.posWETH,\\n                        i.openInterestWETH,\\n                        o.orderType == StorageInterface.LimitOrder.LIQ\\n                            ? v.reward1\\n                            : (v.levPosWETH *\\n                                pairsStored.pairCloseFeeP(t.pairIndex)) /\\n                                100 /\\n                                PRECISION,\\n                        0\\n                    )\\n                    : updateTrade(\\n                        t,\\n                        v.profitP,\\n                        v.posWETH,\\n                        i.openInterestWETH,\\n                        v.reward1,\\n                        v.reward1,\\n                        a.price\\n                    );\\n\\n                // Convert NFT bot fee from WETH to token value\\n                // v.reward2 = (v.reward1 * PRECISION) / v.tokenPriceWETH;\\n\\n                // nftRewards.distributeNftReward(\\n                //     triggeredLimitId,\\n                //     v.reward2,\\n                //     v.tokenPriceWETH\\n                // );\\n\\n                // storageT.increaseNftRewards(o.nftId, v.reward2);\\n                if (\\n                    o.orderType == StorageInterface.LimitOrder.LIQ ||\\n                    o.orderType == StorageInterface.LimitOrder.PAR_LIQ\\n                ) {\\n                    emit LiquidationExecuted(\\n                        a.orderId,\\n                        t,\\n                        v.price,\\n                        o.orderType != StorageInterface.LimitOrder.LIQ\\n                    );\\n                }\\n\\n                emit NftBotFeeCharged(t.trader, v.reward1);\\n\\n                emit LimitExecuted(\\n                    a.orderId,\\n                    o.index,\\n                    t,\\n                    o.nftHolder,\\n                    o.orderType,\\n                    v.price,\\n                    0,\\n                    v.posWETH,\\n                    v.profitP,\\n                    v.WETHSentToTrader,\\n                    v.exactExecution\\n                );\\n            }\\n        }\\n\\n        if (cancelReason != CancelReason.NONE) {\\n            emit NftOrderCanceled(\\n                a.orderId,\\n                o.nftHolder,\\n                o.orderType,\\n                cancelReason\\n            );\\n        }\\n\\n        // nftRewards.unregisterTrigger(triggeredLimitId);\\n        storageT.unregisterPendingNftOrder(a.orderId);\\n    }\\n\\n    // Shared code between market & limit callbacks\\n    function registerTrade(\\n        StorageInterface.Trade memory trade,\\n        uint nftId,\\n        uint limitIndex\\n    ) private returns (StorageInterface.Trade memory, uint) {\\n        AggregatorInterfaceV1_4 aggregator = AggregatorInterfaceV1_4(\\n            address(storageT.priceAggregator())\\n        );\\n        PairsStorageInterfaceV6 pairsStored = aggregator.pairsStorage();\\n\\n        Values memory v;\\n\\n        v.levPosWETH = trade.positionSizeWETH * trade.leverage;\\n        // trade opening fee deduction\\n        v.reward1 = (v.levPosWETH * openingFeeP) / 1e4;\\n\\n        distributeLPReward(trade.trader, v.reward1);\\n        emit OpeningFeeDeduced(trade.trader, v.reward1);\\n\\n        trade.positionSizeWETH = trade.positionSizeWETH - v.reward1;\\n\\n        // v.tokenPriceWETH = aggregator.tokenPriceWETH();\\n\\n        // 1. Charge referral fee (if applicable) and send WETH amount to vault\\n        // if (referrals.getTraderReferrer(trade.trader) != address(0)) {\\n        //     // Use this variable to store lev pos WETH for dev/gov fees after referral fees\\n        //     // and before volumeReferredWETH increases\\n        //     v.posWETH =\\n        //         (v.levPosWETH *\\n        //             (100 *\\n        //                 PRECISION -\\n        //                 referrals.getPercentOfOpenFeeP(trade.trader))) /\\n        //         100 /\\n        //         PRECISION;\\n\\n        //     v.reward1 = referrals.distributePotentialReward(\\n        //         trade.trader,\\n        //         v.levPosWETH,\\n        //         pairsStored.pairOpenFeeP(trade.pairIndex),\\n        //         v.tokenPriceWETH\\n        //     );\\n\\n        //     sendToVault(v.reward1, trade.trader);\\n        //     trade.positionSizeWETH -= v.reward1;\\n\\n        //     emit ReferralFeeCharged(trade.trader, v.reward1);\\n        // }\\n\\n        // // 2. Charge opening fee - referral fee (if applicable)\\n        // v.reward2 = storageT.handleDevGovFees(\\n        //     trade.pairIndex,\\n        //     (v.posWETH > 0 ? v.posWETH : v.levPosWETH),\\n        //     true,\\n        //     true\\n        // );\\n\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // emit DevGovFeeCharged(trade.trader, v.reward2);\\n\\n        // // 3. Charge NFT / SSS fee\\n        // v.reward2 =\\n        //     (v.levPosWETH *\\n        //         pairsStored.pairNftLimitOrderFeeP(trade.pairIndex)) /\\n        //     100 /\\n        //     PRECISION;\\n        // trade.positionSizeWETH -= v.reward2;\\n\\n        // 3.1 Distribute NFT fee and send WETH amount to vault (if applicable)\\n        // if (nftId < 1500) {\\n        //     sendToVault(v.reward2, trade.trader);\\n\\n        //     // Convert NFT bot fee from WETH to token value\\n        //     v.reward3 = (v.reward2 * PRECISION) / v.tokenPriceWETH;\\n\\n        //     nftRewards.distributeNftReward(\\n        //         NftRewardsInterfaceV6_3_1.TriggeredLimitId(\\n        //             trade.trader,\\n        //             trade.pairIndex,\\n        //             limitIndex,\\n        //             StorageInterface.LimitOrder.OPEN\\n        //         ),\\n        //         v.reward3,\\n        //         v.tokenPriceWETH\\n        //     );\\n        //     storageT.increaseNftRewards(nftId, v.reward3);\\n\\n        //     emit NftBotFeeCharged(trade.trader, v.reward2);\\n\\n        //     // 3.2 Distribute SSS fee (if applicable)\\n        // } else {\\n        //     distributeStakingReward(trade.trader, v.reward2);\\n        // }\\n\\n        // 4. Set trade final details\\n        trade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n\\n        // trade.initialPosToken =\\n        //     (trade.positionSizeWETH * PRECISION) /\\n        //     v.tokenPriceWETH;\\n\\n        trade.tp = correctTp(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.tp,\\n            trade.buy\\n        );\\n        trade.sl = correctSl(\\n            trade.openPrice,\\n            trade.leverage,\\n            trade.sl,\\n            trade.buy\\n        );\\n\\n        // 5. Call other contracts\\n        pairInfos.storeTradeInitialAccFees(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy\\n        );\\n        pairsStored.updateGroupCollateral(\\n            trade.pairIndex,\\n            trade.positionSizeWETH,\\n            trade.buy,\\n            true\\n        );\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.positionSizeWETH * trade.leverage,\\n            true,\\n            trade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            trade,\\n            StorageInterface.TradeInfo(\\n                0,\\n                v.tokenPriceWETH,\\n                trade.positionSizeWETH * trade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[trade.trader][\\n            trade.pairIndex\\n        ][trade.index][TradeType.MARKET];\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n\\n        return (trade, v.tokenPriceWETH);\\n    }\\n\\n    function unregisterTrade(\\n        StorageInterface.Trade memory trade,\\n        bool marketOrder,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH // 1e18 (= SSS reward if market order)\\n    ) private returns (uint WETHSentToTrader) {\\n        IToken vault = IToken(storageT.vault());\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentWETHPos,\\n            percentProfit,\\n            closingFeeWETH + nftFeeWETH\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestWETH,\\n            false,\\n            trade.buy\\n        );\\n        getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            openInterestWETH / trade.leverage,\\n            trade.buy,\\n            false\\n        );\\n\\n        // 3. Unregister trade from storage\\n\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n        // 4.1 If collateral in storage (opened after update)\\n        if (trade.positionSizeWETH > 0) {\\n            Values memory v;\\n\\n            // 4.1.1 WETH vault reward\\n            // v.reward2 = (closingFeeWETH * WETHVaultFeeP) / 100;\\n            // transferFromStorageToAddress(address(this), v.reward2);\\n            // vault.distributeReward(v.reward2);\\n\\n            // emit WETHVaultFeeCharged(trade.trader, v.reward2);\\n\\n            // 4.1.2 SSS reward\\n            // v.reward3 = marketOrder\\n            //     ? nftFeeWETH + (closingFeeWETH * sssFeeP) / 100\\n            //     : (closingFeeWETH * sssFeeP) / 100;\\n\\n            // distributeStakingReward(trade.trader, v.reward3);\\n\\n            // 4.1.3 Take WETH from vault if winning trade\\n            // or send WETH to vault if losing trade\\n\\n            // closing fee deducted\\n            v.levPosWETH = trade.positionSizeWETH * trade.leverage;\\n\\n            v.reward1 = (v.levPosWETH * closingFeeP) / 1e4;\\n\\n            distributeLPReward(trade.trader, v.reward1);\\n            emit ClosigFeeDeduced(trade.trader, v.reward1);\\n\\n            if (!marketOrder) {\\n                v.reward2 = (nftFeeWETH * vaultFeeP) / 100;\\n                sendToVault(v.reward2, trade.trader);\\n\\n                v.reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\\n                transferFromStorageToAddress(msg.sender, v.reward3);\\n\\n                emit LiquidationFeeDeduced(v.reward2, v.reward3, msg.sender);\\n            }\\n            uint WETHLeftInStorage = currentWETHPos -\\n                v.reward3 -\\n                v.reward2 -\\n                v.reward1;\\n            if (WETHSentToTrader > WETHLeftInStorage) {\\n                vault.sendAssets(\\n                    WETHSentToTrader - WETHLeftInStorage,\\n                    trade.trader\\n                );\\n                transferFromStorageToAddress(trade.trader, WETHLeftInStorage);\\n            } else {\\n                sendToVault(WETHLeftInStorage - WETHSentToTrader, trade.trader);\\n                transferFromStorageToAddress(trade.trader, WETHSentToTrader);\\n            }\\n\\n            // 4.2 If collateral in vault (opened before update)\\n        } else {\\n            vault.sendAssets(WETHSentToTrader, trade.trader);\\n        }\\n    }\\n\\n    function updateTrade(\\n        StorageInterface.Trade memory trade,\\n        int percentProfit, // PRECISION\\n        uint currentWETHPos, // 1e18\\n        uint openInterestWETH, // 1e18\\n        uint closingFeeWETH, // 1e18\\n        uint nftFeeWETH, // 1e18 (= SSS reward if market order)\\n        uint currentPice\\n    ) private returns (uint WETHSentToTrader) {\\n        // 1. Calculate net PnL (after all closing and holding fees)\\n        (WETHSentToTrader, ) = _getTradeValue(\\n            trade,\\n            currentWETHPos,\\n            percentProfit,\\n            0\\n        );\\n\\n        // 2. Calls to other contracts\\n        borrowingFees.handleTradeAction(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            openInterestWETH,\\n            true,\\n            trade.buy\\n        );\\n        uint256 pnl = (openInterestWETH / trade.leverage) - WETHSentToTrader;\\n        getPairsStorage().updateGroupCollateral(\\n            trade.pairIndex,\\n            pnl,\\n            trade.buy,\\n            false\\n        );\\n        {\\n            // send fee\\n            uint256 reward2 = (nftFeeWETH * vaultFeeP) / 100;\\n            sendToVault(reward2, trade.trader);\\n\\n            uint256 reward3 = (nftFeeWETH * liquidatorFeeP) / 100;\\n            transferFromStorageToAddress(msg.sender, reward3);\\n\\n            emit ParLiquidationFeeDeduced(reward2, reward3, msg.sender);\\n\\n            pnl = pnl - reward2 - reward3;\\n            sendToVault(pnl, trade.trader);\\n        }\\n\\n        // 3. Unregister trade from storage\\n\\n        storageT.unregisterTrade(trade.trader, trade.pairIndex, trade.index);\\n\\n        // create new trade\\n        StorageInterface.Trade memory newTrade;\\n\\n        newTrade.trader = trade.trader;\\n        newTrade.leverage = trade.leverage;\\n        newTrade.pairIndex = trade.pairIndex;\\n        newTrade.buy = trade.buy;\\n        newTrade.positionSizeWETH = WETHSentToTrader;\\n        newTrade.openPrice = currentPice;\\n\\n        newTrade.index = storageT.firstEmptyTradeIndex(\\n            trade.trader,\\n            trade.pairIndex\\n        );\\n\\n        newTrade.tp = trade.tp > 0\\n            ? _getUpdateTP(\\n                trade.openPrice,\\n                trade.tp,\\n                currentPice,\\n                trade.buy,\\n                trade.leverage\\n            )\\n            : 0;\\n\\n        newTrade.sl = trade.sl > 0\\n            ? _getUpdateSl(\\n                trade.openPrice,\\n                trade.sl,\\n                currentPice,\\n                trade.buy,\\n                trade.leverage\\n            )\\n            : 0;\\n\\n        pairInfos.storeTradeInitialAccFees(\\n            newTrade.trader,\\n            newTrade.pairIndex,\\n            newTrade.index,\\n            newTrade.buy\\n        );\\n\\n        borrowingFees.handleTradeAction(\\n            newTrade.trader,\\n            newTrade.pairIndex,\\n            newTrade.index,\\n            newTrade.positionSizeWETH * newTrade.leverage,\\n            true,\\n            newTrade.buy\\n        );\\n\\n        // 6. Store final trade in storage contract\\n        storageT.storeTrade(\\n            newTrade,\\n            StorageInterface.TradeInfo(\\n                0,\\n                0,\\n                newTrade.positionSizeWETH * newTrade.leverage,\\n                0,\\n                0,\\n                false\\n            )\\n        );\\n\\n        // 7. Store tradeLastUpdated\\n        LastUpdated storage lastUpdated = tradeLastUpdated[newTrade.trader][\\n            newTrade.pairIndex\\n        ][newTrade.index][TradeType.MARKET]; // no limit order support.\\n        uint32 currBlock = uint32(ChainUtils.getBlockNumber());\\n        lastUpdated.tp = currBlock;\\n        lastUpdated.sl = currBlock;\\n        lastUpdated.created = currBlock;\\n    }\\n\\n    // Utils (external)\\n    function setTradeLastUpdated(\\n        SimplifiedTradeId calldata _id,\\n        LastUpdated memory _lastUpdated\\n    ) external onlyTrading {\\n        tradeLastUpdated[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _lastUpdated;\\n    }\\n\\n    function setTradeData(\\n        SimplifiedTradeId calldata _id,\\n        TradeData memory _tradeData\\n    ) external onlyTrading {\\n        tradeData[_id.trader][_id.pairIndex][_id.index][\\n            _id.tradeType\\n        ] = _tradeData;\\n    }\\n\\n    // Utils (getters)\\n    function _getTradeValue(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit, // PRECISION\\n        uint closingFees // 1e18\\n    ) private returns (uint value, uint borrowingFee) {\\n        int netProfitP;\\n\\n        (netProfitP, borrowingFee) = _getBorrowingFeeAdjustedPercentProfit(\\n            trade,\\n            currentWETHPos,\\n            percentProfit\\n        );\\n\\n        value = pairInfos.getTradeValue(\\n            trade.trader,\\n            trade.pairIndex,\\n            trade.index,\\n            trade.buy,\\n            currentWETHPos,\\n            trade.leverage,\\n            netProfitP,\\n            closingFees\\n        );\\n\\n        emit BorrowingFeeCharged(trade.trader, value, borrowingFee);\\n    }\\n\\n    function _getBorrowingFeeAdjustedPercentProfit(\\n        StorageInterface.Trade memory trade,\\n        uint currentWETHPos, // 1e18\\n        int percentProfit // PRECISION\\n    ) private view returns (int netProfitP, uint borrowingFee) {\\n        borrowingFee = borrowingFees.getTradeBorrowingFee(\\n            BorrowingFeesInterface.BorrowingFeeInput(\\n                trade.trader,\\n                trade.pairIndex,\\n                trade.index,\\n                trade.buy,\\n                currentWETHPos,\\n                trade.leverage\\n            )\\n        );\\n        netProfitP =\\n            percentProfit -\\n            int((borrowingFee * 100 * PRECISION) / currentWETHPos);\\n    }\\n\\n    function withinMaxLeverage(\\n        uint pairIndex,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint pairMaxLev = pairMaxLeverage[pairIndex];\\n        return\\n            pairMaxLev == 0\\n                ? leverage <= getPairsStorage().pairMaxLeverage(pairIndex)\\n                : leverage <= pairMaxLev;\\n    }\\n\\n    function withinExposureLimits(\\n        uint pairIndex,\\n        bool buy,\\n        uint positionSizeWETH,\\n        uint leverage\\n    ) private view returns (bool) {\\n        uint levPositionSizeWETH = positionSizeWETH * leverage;\\n        return\\n            storageT.openInterestWETH(pairIndex, buy ? 0 : 1) +\\n                levPositionSizeWETH <=\\n            borrowingFees.getPairMaxOi(pairIndex) * 1e8 &&\\n            borrowingFees.withinMaxGroupOi(pairIndex, buy, levPositionSizeWETH);\\n    }\\n\\n    function currentPercentProfit(\\n        uint openPrice,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) private view returns (int p) {\\n        int maxPnlP = int(MAX_GAIN_P) * int(PRECISION);\\n\\n        p = openPrice > 0\\n            ? ((\\n                buy\\n                    ? int(currentPrice) - int(openPrice)\\n                    : int(openPrice) - int(currentPrice)\\n            ) *\\n                100 *\\n                int(PRECISION) *\\n                int(leverage)) / int(openPrice)\\n            : int(0);\\n        p = p > maxPnlP ? maxPnlP : p;\\n    }\\n\\n    function correctTp(\\n        uint openPrice,\\n        uint leverage,\\n        uint tp,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            tp == 0 ||\\n            currentPercentProfit(openPrice, tp, buy, leverage) ==\\n            int(MAX_GAIN_P) * int(PRECISION)\\n        ) {\\n            uint tpDiff = (openPrice * MAX_GAIN_P) / leverage / 100;\\n\\n            return\\n                buy\\n                    ? openPrice + tpDiff\\n                    : (tpDiff <= openPrice ? openPrice - tpDiff : 0);\\n        }\\n        return tp;\\n    }\\n\\n    function correctSl(\\n        uint openPrice,\\n        uint leverage,\\n        uint sl,\\n        bool buy\\n    ) private view returns (uint) {\\n        if (\\n            sl > 0 &&\\n            currentPercentProfit(openPrice, sl, buy, leverage) <\\n            int(MAX_SL_P) * int(PRECISION) * -1\\n        ) {\\n            uint slDiff = (openPrice * MAX_SL_P) / leverage / 100;\\n            return buy ? openPrice - slDiff : openPrice + slDiff;\\n        }\\n\\n        return sl;\\n    }\\n\\n    function marketExecutionPrice(\\n        uint price,\\n        uint spreadP,\\n        uint spreadReductionP,\\n        bool long\\n    ) private pure returns (uint) {\\n        uint priceDiff = (price *\\n            (spreadP - (spreadP * spreadReductionP) / 100)) /\\n            100 /\\n            PRECISION;\\n\\n        return long ? price + priceDiff : price - priceDiff;\\n    }\\n\\n    function _openTradePrep(\\n        OpenTradePrepInput memory c\\n    )\\n        private\\n        view\\n        returns (\\n            uint priceImpactP,\\n            uint priceAfterImpact,\\n            CancelReason cancelReason\\n        )\\n    {\\n        (priceImpactP, priceAfterImpact) = pairInfos.getTradePriceImpact(\\n            marketExecutionPrice(\\n                c.executionPrice,\\n                c.spreadP,\\n                c.spreadReductionP,\\n                c.buy\\n            ),\\n            c.pairIndex,\\n            c.buy,\\n            c.positionSize * c.leverage\\n        );\\n\\n        uint maxSlippage = c.maxSlippageP > 0\\n            ? (c.wantedPrice * c.maxSlippageP) / 100 / PRECISION\\n            : c.wantedPrice / 100; // 1% by default\\n        cancelReason = isPaused\\n            ? CancelReason.PAUSED\\n            : (\\n                c.marketPrice == 0\\n                    ? CancelReason.MARKET_CLOSED\\n                    : (\\n                        c.buy\\n                            ? priceAfterImpact > c.wantedPrice + maxSlippage\\n                            : priceAfterImpact < c.wantedPrice - maxSlippage\\n                    )\\n                    ? CancelReason.SLIPPAGE\\n                    : (c.tp > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact >= c.tp\\n                                : priceAfterImpact <= c.tp\\n                        ))\\n                    ? CancelReason.TP_REACHED\\n                    : (c.sl > 0 &&\\n                        (\\n                            c.buy\\n                                ? priceAfterImpact <= c.sl\\n                                : priceAfterImpact >= c.sl\\n                        ))\\n                    ? CancelReason.SL_REACHED\\n                    : !withinExposureLimits(\\n                        c.pairIndex,\\n                        c.buy,\\n                        c.positionSize,\\n                        c.leverage\\n                    )\\n                    ? CancelReason.EXPOSURE_LIMITS\\n                    : priceImpactP * c.leverage >\\n                        pairInfos.maxNegativePnlOnOpenP()\\n                    ? CancelReason.PRICE_IMPACT\\n                    : !withinMaxLeverage(c.pairIndex, c.leverage)\\n                    ? CancelReason.MAX_LEVERAGE\\n                    : CancelReason.NONE\\n            );\\n    }\\n\\n    function getPendingMarketOrder(\\n        uint orderId\\n    ) private view returns (StorageInterface.PendingMarketOrder memory) {\\n        return storageT.getPendingMarketOrder(orderId);\\n    }\\n\\n    function getPairsStorage() private view returns (PairsStorageInterfaceV6) {\\n        return\\n            (AggregatorInterfaceV1_4(address(storageT.priceAggregator())))\\n                .pairsStorage();\\n    }\\n\\n    function getOpenTrade(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (StorageInterface.Trade memory t) {\\n        return storageT.getOpenTrades(trader, pairIndex, index);\\n    }\\n\\n    function getOpenTradeInfo(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) private view returns (Storage.TradeInfo memory o) {\\n        return storageT.getOpenTradesInfo(trader, pairIndex, index);\\n    }\\n\\n    // Utils (private)\\n    function distributeStakingReward(address trader, uint amountWETH) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        staking.distributeRewardWETH(amountWETH);\\n        emit SssFeeCharged(trader, amountWETH);\\n    }\\n\\n    function distributeLPReward(address trader, uint amountWETH) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        IToken(storageT.vault()).distributeReward(amountWETH);\\n        emit VaultRewardDistributed(trader, amountWETH);\\n    }\\n\\n    function sendToVault(uint amountWETH, address trader) private {\\n        transferFromStorageToAddress(address(this), amountWETH);\\n        IToken(storageT.vault()).receiveAssets(amountWETH, trader);\\n    }\\n\\n    function transferFromStorageToAddress(address to, uint amountWETH) private {\\n        storageT.transferWETH(address(storageT), to, amountWETH);\\n    }\\n\\n    // Public views\\n    function getAllPairsMaxLeverage() external view returns (uint[] memory) {\\n        uint len = getPairsStorage().pairsCount();\\n        uint[] memory lev = new uint[](len);\\n\\n        for (uint i; i < len; ) {\\n            lev[i] = pairMaxLeverage[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return lev;\\n    }\\n\\n    function giveApproval() external {\\n        storageT.WETH().approve(address(storageT.vault()), type(uint256).max);\\n    }\\n\\n    function _getUpdateSl(\\n        uint openPrice,\\n        uint oldSl,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) internal pure returns (uint256 newSL) {\\n        int slP = ((\\n            buy ? int(oldSl) - int(openPrice) : int(openPrice) - int(oldSl)\\n        ) *\\n            100 *\\n            int(PRECISION) *\\n            int(leverage)) / int(openPrice);\\n\\n        int slDelta = (((slP * int(currentPrice)) / 100) / int(PRECISION)) /\\n            int(leverage);\\n\\n        newSL = buy\\n            ? currentPrice - uint(slDelta)\\n            : currentPrice + uint(slDelta);\\n    }\\n\\n    function _getUpdateTP(\\n        uint openPrice,\\n        uint oldTp,\\n        uint currentPrice,\\n        bool buy,\\n        uint leverage\\n    ) internal pure returns (uint256 newTp) {\\n        int tPP = ((\\n            buy ? int(oldTp) - int(openPrice) : int(openPrice) - int(oldTp)\\n        ) *\\n            100 *\\n            int(PRECISION) *\\n            int(leverage)) / int(openPrice);\\n        int tPDelta = (((tPP * int(currentPrice)) / 100) / int(PRECISION)) /\\n            int(leverage);\\n\\n        newTp = buy\\n            ? currentPrice + uint(tPDelta)\\n            : currentPrice - uint(tPDelta);\\n    }\\n\\n    function getTradePnl(\\n        address trader,\\n        uint pairIndex,\\n        uint index\\n    ) external view returns (int256 pnl) {\\n        StorageInterface.Trade memory t = storageT.getOpenTrades(\\n            trader,\\n            pairIndex,\\n            index\\n        );\\n        (uint256 currentPrice, ) = (storageT.oracle()).getPrice(pairIndex);\\n        int256 profitP = currentPercentProfit(\\n            t.openPrice,\\n            currentPrice,\\n            t.buy,\\n            t.leverage\\n        );\\n        (int netProfitP, ) = _getBorrowingFeeAdjustedPercentProfit(\\n            t,\\n            t.positionSizeWETH,\\n            profitP\\n        );\\n        int fundingFee = pairInfos.getTradeFundingFee(\\n            t.trader,\\n            t.pairIndex,\\n            t.index,\\n            t.buy,\\n            t.positionSizeWETH,\\n            t.leverage\\n        );\\n        uint256 tradeValue = pairInfos.getTradeValuePure(\\n            t.positionSizeWETH,\\n            netProfitP,\\n            0,\\n            fundingFee,\\n            0\\n        );\\n\\n        pnl = int(tradeValue) - int(t.positionSizeWETH);\\n    }\\n\\n    function setLiquidatorFeeP(uint256 _feeP) external {\\n        liquidatorFeeP = _feeP;\\n    }\\n\\n    function setVaultFeeP(uint256 _feeP) external {\\n        vaultFeeP = _feeP;\\n    }\\n\\n    function setLiquidationFeeP(uint _feeP) external {\\n        liquidationFeeP = _feeP;\\n    }\\n\\n    function setParLiquidationFeeP(uint _feeP) external {\\n        parLiquidationFeeP = _feeP;\\n    }\\n}\\n\",\"keccak256\":\"0x9a92854f611ed374a64e686abfd1a5a1fda67f7b4e5d79b20275f1c3685819a3\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function getPrice(uint, OrderType, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external view returns (uint);\\n\\n    function pairMinOpenLimitSlippageP(uint) external view returns (uint);\\n\\n    function closeFeeP(uint) external view returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n\\n    function tokenWETHReservesLp() external view returns (uint, uint);\\n\\n    function referralP(uint) external view returns (uint);\\n\\n    function nftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd37be0934daaf172a910376e79b670d554a3b28f738fd8c8ec98b59e8d86b5f5\",\"license\":\"MIT\"},\"contracts/interfaces/AggregatorInterfaceV1_4.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./PairsStorageInterfaceV6.sol\\\";\\nimport \\\"./ChainlinkFeedInterface.sol\\\";\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface AggregatorInterfaceV1_4 {\\n    enum OrderType {\\n        MARKET_OPEN,\\n        MARKET_CLOSE,\\n        LIMIT_OPEN,\\n        LIMIT_CLOSE\\n    }\\n\\n    function pairsStorage() external view returns (PairsStorageInterfaceV6);\\n\\n    function getPrice(uint, OrderType, uint, uint) external returns (uint);\\n\\n    function tokenPriceWETH() external returns (uint);\\n\\n    function linkFee(uint, uint) external view returns (uint);\\n\\n    function openFeeP(uint) external view returns (uint);\\n\\n    function linkPriceFeed() external view returns (ChainlinkFeedInterface);\\n\\n    function marketOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingMarketOrder memory o\\n    ) external;\\n\\n    function nftOrderfulfill(\\n        uint256 orderId,\\n        StorageInterface.PendingNftOrder memory o\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe1262ceffbe82c77f3adaa31d439c79a7fa1726db48a4ad68ec84f09403e197d\",\"license\":\"MIT\"},\"contracts/interfaces/BorrowingFeesInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface BorrowingFeesInterface {\\n    // Structs\\n    struct PairGroup {\\n        uint16 groupIndex;\\n        uint48 block;\\n        uint64 initialAccFeeLong; // 1e10 (%)\\n        uint64 initialAccFeeShort; // 1e10 (%)\\n        uint64 prevGroupAccFeeLong; // 1e10 (%)\\n        uint64 prevGroupAccFeeShort; // 1e10 (%)\\n        uint64 pairAccFeeLong; // 1e10 (%)\\n        uint64 pairAccFeeShort; // 1e10 (%)\\n        uint64 _placeholder; // might be useful later\\n    }\\n    struct Pair {\\n        PairGroup[] groups;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint48 feeExponent;\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct PairOi {\\n        uint72 long; // 1e10 (DAI)\\n        uint72 short; // 1e10 (DAI)\\n        uint72 max; // 1e10 (DAI)\\n        uint40 _placeholder; // might be useful later\\n    }\\n    struct Group {\\n        uint112 oiLong; // 1e10\\n        uint112 oiShort; // 1e10\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint48 accLastUpdatedBlock;\\n        uint80 maxOi; // 1e10\\n        uint lastAccBlockWeightedMarketCap; // 1e40\\n    }\\n    struct InitialAccFees {\\n        uint64 accPairFee; // 1e10 (%)\\n        uint64 accGroupFee; // 1e10 (%)\\n        uint48 block;\\n        uint80 _placeholder; // might be useful later\\n    }\\n    struct PairParams {\\n        uint16 groupIndex;\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint48 feeExponent;\\n        uint72 maxOi;\\n    }\\n    struct GroupParams {\\n        uint32 feePerBlock; // 1e10 (%)\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n    struct BorrowingFeeInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct LiqPriceInput {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint openPrice; // 1e10\\n        bool long;\\n        uint collateral; // 1e18 (DAI)\\n        uint leverage;\\n    }\\n    struct PendingAccFeesInput {\\n        uint64 accFeeLong; // 1e10 (%)\\n        uint64 accFeeShort; // 1e10 (%)\\n        uint oiLong; // 1e18\\n        uint oiShort; // 1e18\\n        uint32 feePerBlock; // 1e10\\n        uint currentBlock;\\n        uint accLastUpdatedBlock;\\n        uint72 maxOi; // 1e10\\n        uint48 feeExponent;\\n    }\\n\\n    // Events\\n    event PairParamsUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint48 feeExponent,\\n        uint72 maxOi\\n    );\\n    event PairGroupUpdated(\\n        uint indexed pairIndex,\\n        uint16 indexed prevGroupIndex,\\n        uint16 indexed newGroupIndex\\n    );\\n    event GroupUpdated(\\n        uint16 indexed groupIndex,\\n        uint32 feePerBlock,\\n        uint72 maxOi,\\n        uint48 feeExponent\\n    );\\n    event TradeInitialAccFeesStored(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        uint64 initialPairAccFee,\\n        uint64 initialGroupAccFee\\n    );\\n    event TradeActionHandled(\\n        address indexed trader,\\n        uint indexed pairIndex,\\n        uint index,\\n        bool open,\\n        bool long,\\n        uint positionSizeDai // 1e18\\n    );\\n    event PairAccFeesUpdated(\\n        uint indexed pairIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupAccFeesUpdated(\\n        uint16 indexed groupIndex,\\n        uint currentBlock,\\n        uint64 accFeeLong,\\n        uint64 accFeeShort\\n    );\\n    event GroupOiUpdated(\\n        uint16 indexed groupIndex,\\n        bool indexed long,\\n        bool indexed increase,\\n        uint112 amount,\\n        uint112 oiLong,\\n        uint112 oiShort\\n    );\\n\\n    // Functions\\n    function getTradeLiquidationPrice(\\n        LiqPriceInput calldata\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeBorrowingFee(\\n        BorrowingFeeInput memory\\n    ) external view returns (uint); // 1e18 (DAI)\\n\\n    function handleTradeAction(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint positionSizeDai, // 1e18 (collateral * leverage)\\n        bool open,\\n        bool long\\n    ) external;\\n\\n    function withinMaxGroupOi(\\n        uint pairIndex,\\n        bool long,\\n        uint positionSizeDai\\n    ) external view returns (bool);\\n\\n    function getPairMaxOi(uint pairIndex) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        LiqPriceInput calldata input\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x84f882f552e28e119e3cf5ca7d6b4ca663371b516c0134c4d778906da2df906c\",\"license\":\"MIT\"},\"contracts/interfaces/ChainlinkFeedInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ChainlinkFeedInterface {\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80, int, uint, uint, uint80);\\n}\\n\",\"keccak256\":\"0x962ad22f47fc0a2fd3dfb883bf7780de5ed85c2bf33edd0968a1a35d9e62d21c\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IOracle {\\n    function getPrice(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 price, uint256 lastupdateTime);\\n\\n    function getFundingFee(\\n        uint256 tokenIndex\\n    ) external view returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0x4d3908114968a30bdbfae459ab2b3e842053fa0f08490ad50744cc3df3c1f439\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4cf9781a0df06a546607997f12d5d984942657e9eb908229ef5f7f6d5b2bd385\",\"license\":\"MIT\"},\"contracts/interfaces/NFTRewardInterfaceV6_3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./StorageInterface.sol\\\";\\n\\ninterface NftRewardsInterfaceV6_3_1 {\\n    struct TriggeredLimitId {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        StorageInterface.LimitOrder order;\\n    }\\n    enum OpenLimitOrderType {\\n        LEGACY,\\n        REVERSAL,\\n        MOMENTUM\\n    }\\n\\n    function storeFirstToTrigger(\\n        TriggeredLimitId calldata,\\n        address,\\n        uint\\n    ) external;\\n\\n    function storeTriggerSameBlock(TriggeredLimitId calldata, address) external;\\n\\n    function unregisterTrigger(TriggeredLimitId calldata) external;\\n\\n    function distributeNftReward(\\n        TriggeredLimitId calldata,\\n        uint,\\n        uint\\n    ) external;\\n\\n    function openLimitOrderTypes(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrderType);\\n\\n    function setOpenLimitOrderType(\\n        address,\\n        uint,\\n        uint,\\n        OpenLimitOrderType\\n    ) external;\\n\\n    function triggered(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function timedOut(TriggeredLimitId calldata) external view returns (bool);\\n\\n    function botInUse(bytes32) external view returns (bool);\\n\\n    function getNftBotHashes(\\n        uint,\\n        address,\\n        uint,\\n        address,\\n        uint,\\n        uint\\n    ) external pure returns (bytes32, bytes32);\\n\\n    function setNftBotInUse(bytes32, bytes32) external;\\n\\n    function nftBotInUse(bytes32, bytes32) external view returns (bool);\\n\\n    function linkToTokenRewards(uint, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x288bab95d6c77a7f1423aaddd843ae8f1ce32f3dbd5a369d2980064dfb549701\",\"license\":\"MIT\"},\"contracts/interfaces/NftInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface NftInterfaceV5 {\\n    function balanceOf(address) external view returns (uint);\\n\\n    function ownerOf(uint) external view returns (address);\\n\\n    function transferFrom(address, address, uint) external;\\n\\n    function tokenOfOwnerByIndex(address, uint) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xbd69c374c647aab1dce1c1b73e891823446281e9de4c7aea1c019d6979e2b5b0\",\"license\":\"MIT\"},\"contracts/interfaces/PairInfosInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PairInfosInterface {\\n    // Trade initial acc fees\\n    struct TradeInitialAccFees {\\n        uint rollover; // 1e18 (DAI)\\n        int funding; // 1e18 (DAI)\\n        bool openedAfterUpdate;\\n    }\\n\\n    function tradeInitialAccFees(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInitialAccFees memory);\\n\\n    function maxNegativePnlOnOpenP() external view returns (uint); // PRECISION (%)\\n\\n    function storeTradeInitialAccFees(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long\\n    ) external;\\n\\n    function getTradePriceImpact(\\n        uint openPrice, // PRECISION\\n        uint pairIndex,\\n        bool long,\\n        uint openInterest // 1e18 (DAI)\\n    )\\n        external\\n        view\\n        returns (\\n            uint priceImpactP, // PRECISION (%)\\n            uint priceAfterImpact // PRECISION\\n        );\\n\\n    function getTradeRolloverFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint collateral // 1e18 (DAI)\\n    ) external view returns (uint);\\n\\n    function getTradeFundingFee(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    )\\n        external\\n        view\\n        returns (\\n            int // 1e18 (DAI) | Positive => Fee, Negative => Reward\\n        );\\n\\n    function getTradeLiquidationPricePure(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n\\n    function getTradeLiquidationPrice(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage\\n    ) external view returns (uint); // PRECISION\\n\\n    function getTradeValue(\\n        address trader,\\n        uint pairIndex,\\n        uint index,\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        int percentProfit, // PRECISION (%)\\n        uint closingFee // 1e18 (DAI)\\n    ) external returns (uint); // 1e18 (DAI)\\n\\n    function manager() external view returns (address);\\n\\n    function getTradeValuePure(\\n        uint collateral, // 1e18 (WETH)\\n        int percentProfit, // PRECISION (%)\\n        uint rolloverFee, // 1e18 (WETH)\\n        int fundingFee, // 1e18 (WETH)\\n        uint closingFee // 1e18 (WETH)\\n    ) external view returns (uint);\\n\\n    function getTradePartialLiquidationPrice(\\n        uint openPrice, // PRECISION\\n        bool long,\\n        uint collateral, // 1e18 (DAI)\\n        uint leverage,\\n        uint rolloverFee, // 1e18 (DAI)\\n        int fundingFee // 1e18 (DAI)\\n    ) external pure returns (uint);\\n}\\n\",\"keccak256\":\"0x88ed59116f2d558c2e829c9f8b15d105151d8738e07f579a7475892dd024db47\",\"license\":\"MIT\"},\"contracts/interfaces/PairsStorageInterfaceV6.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PairsStorageInterfaceV6 {\\n    enum FeedCalculation {\\n        DEFAULT,\\n        INVERT,\\n        COMBINE\\n    } // FEED 1, 1 / (FEED 1), (FEED 1)/(FEED 2)\\n    struct Feed {\\n        address feed1;\\n        address feed2;\\n        FeedCalculation feedCalculation;\\n        uint maxDeviationP;\\n    } // PRECISION (%)\\n\\n    function incrementCurrentOrderId() external returns (uint);\\n\\n    function updateGroupCollateral(uint, uint, bool, bool) external;\\n\\n    function pairJob(\\n        uint\\n    ) external returns (string memory, string memory, bytes32, uint);\\n\\n    function pairFeed(uint) external view returns (Feed memory);\\n\\n    function pairSpreadP(uint) external view returns (uint);\\n\\n    function pairMinLeverage(uint) external view returns (uint);\\n\\n    function pairMaxLeverage(uint) external view returns (uint);\\n\\n    function groupMaxCollateral(uint) external view returns (uint);\\n\\n    function groupCollateral(uint, bool) external view returns (uint);\\n\\n    function guaranteedSlEnabled(uint) external view returns (bool);\\n\\n    function pairOpenFeeP(uint) external view returns (uint);\\n\\n    function pairCloseFeeP(uint) external view returns (uint);\\n\\n    function pairOracleFeeP(uint) external view returns (uint);\\n\\n    function pairNftLimitOrderFeeP(uint) external view returns (uint);\\n\\n    function pairReferralFeeP(uint) external view returns (uint);\\n\\n    function pairMinLevPosWETH(uint) external view returns (uint);\\n\\n    function pairsCount() external view returns (uint);\\n}\\n\",\"keccak256\":\"0xfd1102a637e83931602623fcb549c8eee8460402473b62d8f13ab4a928458b38\",\"license\":\"MIT\"},\"contracts/interfaces/PausableInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {StorageInterface} from \\\"./StorageInterface.sol\\\";\\n\\ninterface PausableInterfaceV5 {\\n    function isPaused() external view returns (bool);\\n\\n    function isTradeParLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function isTradeLiquidatablePure(\\n        StorageInterface.Trade memory t\\n    ) external view returns (bool, bool);\\n\\n    function executeLiquidations(\\n        uint[100] memory _orderTypes,\\n        address[100] memory traders,\\n        uint[100] memory pairIndexs,\\n        uint[100] memory indexs,\\n        uint256 index\\n    ) external;\\n}\\n\",\"keccak256\":\"0x55c2a6ee9966a39778140bab34fd12c4467471ff2b63c1bed7856de3abc196b7\",\"license\":\"MIT\"},\"contracts/interfaces/PoolInterfaceV5.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface PoolInterfaceV5 {\\n    function increaseAccTokensPerLp(uint) external;\\n}\\n\",\"keccak256\":\"0x0ac90b66ca3eb22f6df4f0a4db277a57c6498fd6376ac0a6a40a7d5d49b2627b\",\"license\":\"MIT\"},\"contracts/interfaces/ReferralsInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface ReferralsInterface {\\n    function registerPotentialReferrer(\\n        address trader,\\n        address referral\\n    ) external;\\n\\n    function distributePotentialReward(\\n        address trader,\\n        uint volumeWETH,\\n        uint pairOpenFeeP,\\n        uint tokenPriceWETH\\n    ) external returns (uint);\\n\\n    function getPercentOfOpenFeeP(address trader) external view returns (uint);\\n\\n    function getTraderReferrer(\\n        address trader\\n    ) external view returns (address referrer);\\n}\\n\",\"keccak256\":\"0xf190cc5a8e2a88aef673fbea23fdb929891c75fd06c5cf3d3a3fd4e788bae576\",\"license\":\"MIT\"},\"contracts/interfaces/StakingInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface StakingInterface {\\n    function distributeRewardWETH(uint amount) external;\\n}\\n\",\"keccak256\":\"0x0c6ac7204ddb6b9bb241fb3080770f156352e3b9caf9fbf0aeeedf6bc4d2cd52\",\"license\":\"MIT\"},\"contracts/interfaces/StorageInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"./TokenInterface.sol\\\";\\nimport \\\"./NftInterfaceV5.sol\\\";\\nimport \\\"./IToken.sol\\\";\\nimport \\\"./AggregatorInterfaceV1.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\nimport \\\"./PausableInterfaceV5.sol\\\";\\n\\ninterface StorageInterface {\\n    enum LimitOrder {\\n        TP,\\n        SL,\\n        LIQ,\\n        OPEN,\\n        PAR_LIQ\\n    }\\n    struct Trade {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint initialPosToken; // 1e18\\n        uint positionSizeWETH; // 1e18\\n        uint openPrice; // PRECISION\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION\\n        uint sl; // PRECISION\\n    }\\n    struct TradeInfo {\\n        uint tokenId;\\n        uint tokenPriceWETH; // PRECISION\\n        uint openInterestWETH; // 1e18\\n        uint tpLastUpdated;\\n        uint slLastUpdated;\\n        bool beingMarketClosed;\\n    }\\n    struct OpenLimitOrder {\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        uint positionSize; // 1e18 (WETH or GFARM2)\\n        uint spreadReductionP;\\n        bool buy;\\n        uint leverage;\\n        uint tp; // PRECISION (%)\\n        uint sl; // PRECISION (%)\\n        uint minPrice; // PRECISION\\n        uint maxPrice; // PRECISION\\n        uint block;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingMarketOrder {\\n        Trade trade;\\n        uint block;\\n        uint wantedPrice; // PRECISION\\n        uint slippageP; // PRECISION (%)\\n        uint spreadReductionP;\\n        uint tokenId; // index in supportedTokens\\n    }\\n    struct PendingNftOrder {\\n        address nftHolder;\\n        uint nftId;\\n        address trader;\\n        uint pairIndex;\\n        uint index;\\n        LimitOrder orderType;\\n    }\\n\\n    event OpenningInterestUpated(\\n        uint256 indexed pairIndex,\\n        uint256 indexed openingInterestShort,\\n        uint256 indexed openingInterestLong\\n    );\\n\\n    event TradeOpen(Trade indexed t);\\n\\n    event TradeClose(Trade indexed t);\\n\\n    function PRECISION() external pure returns (uint);\\n\\n    function gov() external view returns (address);\\n\\n    function dev() external view returns (address);\\n\\n    function WETH() external view returns (TokenInterface);\\n\\n    function token() external view returns (TokenInterface);\\n\\n    function linkErc677() external view returns (TokenInterface);\\n\\n    function priceAggregator() external view returns (AggregatorInterfaceV1);\\n\\n    function vault() external view returns (address);\\n\\n    function trading() external view returns (PausableInterfaceV5);\\n\\n    function callbacks() external view returns (PausableInterfaceV5);\\n\\n    function handleTokens(address, uint, bool) external;\\n\\n    function transferWETH(address, address, uint) external;\\n\\n    function transferLinkToAggregator(address, uint, uint) external;\\n\\n    function unregisterTrade(address, uint, uint) external;\\n\\n    function unregisterPendingMarketOrder(uint, bool) external;\\n\\n    function unregisterOpenLimitOrder(address, uint, uint) external;\\n\\n    function hasOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (bool);\\n\\n    function storePendingMarketOrder(\\n        PendingMarketOrder memory,\\n        uint,\\n        bool\\n    ) external;\\n\\n    function getOpenTrades(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (Trade memory);\\n\\n    function getOpenTradesInfo(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (TradeInfo memory);\\n\\n    function updateSl(address, uint, uint, uint) external;\\n\\n    function updateTp(address, uint, uint, uint) external;\\n\\n    function getOpenLimitOrder(\\n        address,\\n        uint,\\n        uint\\n    ) external view returns (OpenLimitOrder memory);\\n\\n    function spreadReductionsP(uint) external view returns (uint);\\n\\n    function storeOpenLimitOrder(OpenLimitOrder memory) external;\\n\\n    function getPendingMarketOrder(\\n        uint\\n    ) external view returns (PendingMarketOrder memory);\\n\\n    function storePendingNftOrder(PendingNftOrder memory, uint) external;\\n\\n    function updateOpenLimitOrder(OpenLimitOrder calldata) external;\\n\\n    function firstEmptyTradeIndex(address, uint) external view returns (uint);\\n\\n    function firstEmptyOpenLimitIndex(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function increaseNftRewards(uint, uint) external;\\n\\n    function nftSuccessTimelock() external view returns (uint);\\n\\n    function getPendingNftOrder(\\n        uint\\n    ) external view returns (PendingNftOrder memory);\\n\\n    function updateTrade(Trade memory) external;\\n\\n    function nftLastSuccess(uint) external view returns (uint);\\n\\n    function unregisterPendingNftOrder(uint) external;\\n\\n    function handleDevGovFees(uint, uint, bool, bool) external returns (uint);\\n\\n    function distributeLpRewards(uint) external;\\n\\n    function storeTrade(Trade memory, TradeInfo memory) external;\\n\\n    function openLimitOrdersCount(address, uint) external view returns (uint);\\n\\n    function openTradesCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketOpenCount(address, uint) external view returns (uint);\\n\\n    function pendingMarketCloseCount(\\n        address,\\n        uint\\n    ) external view returns (uint);\\n\\n    function maxSlP() external view returns (uint);\\n\\n    function maxTradesPerPair() external view returns (uint);\\n\\n    function pendingOrderIdsCount(address) external view returns (uint);\\n\\n    function maxPendingMarketOrders() external view returns (uint);\\n\\n    function openInterestWETH(uint, uint) external view returns (uint);\\n\\n    function getPendingOrderIds(address) external view returns (uint[] memory);\\n\\n    function nfts(uint) external view returns (NftInterfaceV5);\\n\\n    // function fakeBlockNumber() external view returns (uint); // Testing\\n\\n    function getGov() external view returns (address); // checking\\n\\n    function mintWETH(address _to, uint _amount) external;\\n\\n    function oracle() external view returns (IOracle);\\n\\n    function getLiquidatableTrades()\\n        external\\n        view\\n        returns (\\n            uint[100] memory _orderTypes,\\n            address[100] memory traders,\\n            uint[100] memory pairIndexs,\\n            uint[100] memory indexs,\\n            uint256 index\\n        );\\n}\\n\",\"keccak256\":\"0x81e49fd166d6e22a4f7b811ccfc4c04183d38631f5ef6a7d08b0ee56750f4b5b\",\"license\":\"MIT\"},\"contracts/interfaces/TokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface TokenInterface {\\n    function burn(address, uint256) external;\\n\\n    function mint(address, uint256) external;\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function transferFrom(address, address, uint256) external returns (bool);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function hasRole(bytes32, address) external view returns (bool);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function allowance(address, address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b6f3ec1152b61791df030a08f58bb579f7e689138bb45b62925c8e07f986710\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xab9f85c7c003d7e1063f86c5d5262250b6807bfa8d23d8c18ddf409a6aa9ed56\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3356,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "storageT",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(StorageInterface)9154"
      },
      {
        "astId": 3359,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "nftRewards",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(NftRewardsInterfaceV6_3_1)8144"
      },
      {
        "astId": 3362,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairInfos",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(PairInfosInterface)8356"
      },
      {
        "astId": 3365,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "referrals",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ReferralsInterface)8597"
      },
      {
        "astId": 3368,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "staking",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(StakingInterface)8605"
      },
      {
        "astId": 3382,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "WETHVaultFeeP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 3384,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "lpFeeP",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 3386,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "sssFeeP",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3389,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "vaultFeeP",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 3392,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "liquidatorFeeP",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 3395,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "liquidationFeeP",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 3398,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "parLiquidationFeeP",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3400,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "openingFeeP",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 3402,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "closingFeeP",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3404,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isPaused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 3406,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "isDone",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 3408,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "canExecuteTimeout",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 3420,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeLastUpdated",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage))))"
      },
      {
        "astId": 3423,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "borrowingFees",
        "offset": 0,
        "slot": "17",
        "type": "t_contract(BorrowingFeesInterface)7754"
      },
      {
        "astId": 3427,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "pairMaxLeverage",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3439,
        "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
        "label": "tradeData",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage))))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(BorrowingFeesInterface)7754": {
        "encoding": "inplace",
        "label": "contract BorrowingFeesInterface",
        "numberOfBytes": "20"
      },
      "t_contract(NftRewardsInterfaceV6_3_1)8144": {
        "encoding": "inplace",
        "label": "contract NftRewardsInterfaceV6_3_1",
        "numberOfBytes": "20"
      },
      "t_contract(PairInfosInterface)8356": {
        "encoding": "inplace",
        "label": "contract PairInfosInterface",
        "numberOfBytes": "20"
      },
      "t_contract(ReferralsInterface)8597": {
        "encoding": "inplace",
        "label": "contract ReferralsInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StakingInterface)8605": {
        "encoding": "inplace",
        "label": "contract StakingInterface",
        "numberOfBytes": "20"
      },
      "t_contract(StorageInterface)9154": {
        "encoding": "inplace",
        "label": "contract StorageInterface",
        "numberOfBytes": "20"
      },
      "t_enum(TradeType)3575": {
        "encoding": "inplace",
        "label": "enum TradingCallbacks.TradeType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage)))"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage))))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage)))"
      },
      "t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3575",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)",
        "numberOfBytes": "32",
        "value": "t_struct(LastUpdated)3529_storage"
      },
      "t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage)": {
        "encoding": "mapping",
        "key": "t_enum(TradeType)3575",
        "label": "mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)",
        "numberOfBytes": "32",
        "value": "t_struct(TradeData)3534_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.LastUpdated)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(LastUpdated)3529_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(enum TradingCallbacks.TradeType => struct TradingCallbacks.TradeData)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_enum(TradeType)3575,t_struct(TradeData)3534_storage))"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LastUpdated)3529_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.LastUpdated",
        "members": [
          {
            "astId": 3522,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "tp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3524,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "sl",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3526,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "limit",
            "offset": 8,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3528,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "created",
            "offset": 12,
            "slot": "0",
            "type": "t_uint32"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TradeData)3534_storage": {
        "encoding": "inplace",
        "label": "struct TradingCallbacks.TradeData",
        "members": [
          {
            "astId": 3531,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "maxSlippageP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 3533,
            "contract": "contracts/TradingCallbacks.sol:TradingCallbacks",
            "label": "_placeholder",
            "offset": 5,
            "slot": "0",
            "type": "t_uint216"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}