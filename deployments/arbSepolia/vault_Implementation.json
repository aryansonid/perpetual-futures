{
  "address": "0xba63702A252cCeCECA803DCD1bB499298D9B6134",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAccValue",
          "type": "uint256"
        }
      ],
      "name": "AccBlockWeightedMarketCapStored",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newEpoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newEpochPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "newAccPnlPerTokenUsed",
          "type": "int256"
        }
      ],
      "name": "AccPnlPerTokenUsedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "AddressParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsLessDeplete",
          "type": "uint256"
        }
      ],
      "name": "AssetsReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "AssetsSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "CurrentMaxSupplyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Depleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IToken.LockedDeposit",
          "name": "d",
          "type": "tuple"
        }
      ],
      "name": "DepositLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IToken.LockedDeposit",
          "name": "d",
          "type": "tuple"
        }
      ],
      "name": "DepositUnlocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "NumberParamUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "OpenTradesPnlFeedCallFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Refilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "RewardDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "ShareToAssetsPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[2]",
          "name": "newValue",
          "type": "uint256[2]"
        }
      ],
      "name": "WithdrawLockThresholdsPUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currEpoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "WithdrawRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "dailyAccPnlDeltaReset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_LOCK_DURATION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBlockWeightedMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accBlockWeightedMarketCapLastStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accPnlPerToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accPnlPerTokenUsed",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accRewardsPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetsToDeplete",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "unlockEpoch",
          "type": "uint256"
        }
      ],
      "name": "cancelWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralizationP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentBalanceWETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochPositiveOpenPnl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochStart",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMaxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyAccPnlDelta",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dailyMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "depositWithDiscountAndLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "distributeReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        }
      ],
      "name": "getLockedDeposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "shares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDeposited",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "assetsDiscount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "atTimestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockDuration",
              "type": "uint256"
            }
          ],
          "internalType": "struct IToken.LockedDeposit",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        }
      ],
      "name": "getPendingAccBlockWeightedMarketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "manager",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "admin",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lockedDepositNft",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pnlHandler",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "openTradesPnlFeed",
              "type": "address"
            }
          ],
          "internalType": "struct Vault.ContractAddresses",
          "name": "_contractAddresses",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_MIN_LOCK_DURATION",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAccOpenPnlDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxdailyAccPnlDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "_withdrawLockThresholdsP",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupplyIncreaseDailyP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lossesBurnP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupplyMintDailyP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDiscountP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxDiscountThresholdP",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initializeV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastDailyAccPnlDeltaReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastMaxSupplyUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastdailyMintedReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collatP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "name": "lockDiscountP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedDepositNft",
      "outputs": [
        {
          "internalType": "contract INft",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedDeposits",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetsDeposited",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assetsDiscount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "atTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockedDepositsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lossesBurnP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "makeWithdrawRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAccOpenPnlDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAccPnlPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDiscountThresholdP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyIncreaseDailyP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyMintDailyP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxdailyAccPnlDelta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mintWithDiscountAndLock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "openTradesPnlFeed",
      "outputs": [
        {
          "internalType": "contract IOpenTradesPnlFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pnlHandler",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "receiveAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "sendAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shareToAssetsPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "storeAccBlockWeightedMarketCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalClosedPnl",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDeposited",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDiscounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiability",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLockedDiscounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "totalSharesBeingWithdrawn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryNewOpenPnlRequestOrEpoch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryResetdailyAccPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tryUpdateCurrentMaxSupply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depositId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "unlockDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "prevPositiveOpenPnl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newPositiveOpenPnl",
          "type": "uint256"
        }
      ],
      "name": "updateAccPnlPerTokenUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateLossesBurnP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxAccOpenPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDiscountP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDiscountThresholdP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updateMaxdailyAccPnlDelta",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updateOpenTradesPnlFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newValue",
          "type": "address"
        }
      ],
      "name": "updatePnlHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "newValue",
          "type": "uint256[2]"
        }
      ],
      "name": "updateWithdrawLockThresholdsP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updatemaxSupplyIncreaseDailyP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "updatemaxSupplyMintDailyP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawEpochsTimelock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockThresholdsP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "withdrawRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x39e0f0e3152448f51c91fe56eb6db1061b1c02ab718f020adf4c1af8fbe22cb0",
  "receipt": {
    "to": null,
    "from": "0xa667403454F483dE81A0363Af7FcEE563819D910",
    "contractAddress": "0xba63702A252cCeCECA803DCD1bB499298D9B6134",
    "transactionIndex": 1,
    "gasUsed": "71684705",
    "logsBloom": "0x
    "blockHash": "0xf91677237cb5fb4f20775b541f3e2400671d70dce0b6b8cd1a0880af83df0ea4",
    "transactionHash": "0x39e0f0e3152448f51c91fe56eb6db1061b1c02ab718f020adf4c1af8fbe22cb0",
    "logs": [],
    "blockNumber": 2733914,
    "cumulativeGasUsed": "71684705",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "435950a4e58c69db3af120deb50e79f1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAccValue\",\"type\":\"uint256\"}],\"name\":\"AccBlockWeightedMarketCapStored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newEpoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEpochPositiveOpenPnl\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newAccPnlPerTokenUsed\",\"type\":\"int256\"}],\"name\":\"AccPnlPerTokenUsedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"AddressParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsLessDeplete\",\"type\":\"uint256\"}],\"name\":\"AssetsReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"AssetsSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"CurrentMaxSupplyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Depleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IToken.LockedDeposit\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IToken.LockedDeposit\",\"name\":\"d\",\"type\":\"tuple\"}],\"name\":\"DepositUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"NumberParamUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"OpenTradesPnlFeedCallFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Refilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"RewardDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"ShareToAssetsPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"WithdrawCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[2]\",\"name\":\"newValue\",\"type\":\"uint256[2]\"}],\"name\":\"WithdrawLockThresholdsPUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currEpoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"WithdrawRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"dailyAccPnlDeltaReset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_LOCK_DURATION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBlockWeightedMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accBlockWeightedMarketCapLastStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPnlPerToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accPnlPerTokenUsed\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accRewardsPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetsToDeplete\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockEpoch\",\"type\":\"uint256\"}],\"name\":\"cancelWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralizationP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentBalanceWETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochPositiveOpenPnl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMaxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyAccPnlDelta\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositWithDiscountAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"distributeReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"}],\"name\":\"getLockedDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct IToken.LockedDeposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"}],\"name\":\"getPendingAccBlockWeightedMarketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lockedDepositNft\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pnlHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"openTradesPnlFeed\",\"type\":\"address\"}],\"internalType\":\"struct Vault.ContractAddresses\",\"name\":\"_contractAddresses\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_MIN_LOCK_DURATION\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAccOpenPnlDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxdailyAccPnlDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"_withdrawLockThresholdsP\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupplyIncreaseDailyP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lossesBurnP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupplyMintDailyP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscountP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxDiscountThresholdP\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastDailyAccPnlDeltaReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastMaxSupplyUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastdailyMintedReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collatP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"name\":\"lockDiscountP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDepositNft\",\"outputs\":[{\"internalType\":\"contract INft\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedDeposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetsDiscount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"atTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockedDepositsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossesBurnP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"makeWithdrawRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccOpenPnlDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAccPnlPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDiscountThresholdP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyIncreaseDailyP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyMintDailyP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxdailyAccPnlDelta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mintWithDiscountAndLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTradesPnlFeed\",\"outputs\":[{\"internalType\":\"contract IOpenTradesPnlFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pnlHandler\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"receiveAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"sendAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shareToAssetsPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storeAccBlockWeightedMarketCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalClosedPnl\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiability\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedDiscounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"totalSharesBeingWithdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryNewOpenPnlRequestOrEpoch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryResetdailyAccPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tryUpdateCurrentMaxSupply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"unlockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"prevPositiveOpenPnl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newPositiveOpenPnl\",\"type\":\"uint256\"}],\"name\":\"updateAccPnlPerTokenUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateLossesBurnP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxAccOpenPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxDiscountP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxDiscountThresholdP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updateMaxdailyAccPnlDelta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updateOpenTradesPnlFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"}],\"name\":\"updatePnlHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"newValue\",\"type\":\"uint256[2]\"}],\"name\":\"updateWithdrawLockThresholdsP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updatemaxSupplyIncreaseDailyP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"updatemaxSupplyMintDailyP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEpochsTimelock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawLockThresholdsP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"withdrawRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"asset()\":{\"details\":\"See {IERC4626-asset}. \"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"convertToAssets(uint256)\":{\"details\":\"See {IERC4626-convertToAssets}. \"},\"convertToShares(uint256)\":{\"details\":\"See {IERC4626-convertToShares}. \"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,address)\":{\"details\":\"See {IERC4626-deposit}. \"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"maxMint(address)\":{\"details\":\"See {IERC4626-maxMint}. \"},\"maxRedeem(address)\":{\"details\":\"See {IERC4626-maxRedeem}. \"},\"maxWithdraw(address)\":{\"details\":\"See {IERC4626-maxWithdraw}. \"},\"mint(uint256,address)\":{\"details\":\"See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"previewDeposit(uint256)\":{\"details\":\"See {IERC4626-previewDeposit}. \"},\"previewMint(uint256)\":{\"details\":\"See {IERC4626-previewMint}. \"},\"previewRedeem(uint256)\":{\"details\":\"See {IERC4626-previewRedeem}. \"},\"previewWithdraw(uint256)\":{\"details\":\"See {IERC4626-previewWithdraw}. \"},\"redeem(uint256,address,address)\":{\"details\":\"See {IERC4626-redeem}. \"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalAssets()\":{\"details\":\"See {IERC4626-totalAssets}. \"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256,address,address)\":{\"details\":\"See {IERC4626-withdraw}. \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":125},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20MetadataUpgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626Upgradeable is IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0xf867351fb48f5c0e3b45f085ce60f374b785417f84370cb2ffb57f421931e7eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../../../interfaces/IERC4626Upgradeable.sol\\\";\\nimport \\\"../../../utils/math/MathUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626Upgradeable is Initializable, ERC20Upgradeable, IERC4626Upgradeable {\\n    using MathUpgradeable for uint256;\\n\\n    IERC20Upgradeable private _asset;\\n    uint8 private _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    function __ERC4626_init(IERC20Upgradeable asset_) internal onlyInitializing {\\n        __ERC4626_init_unchained(asset_);\\n    }\\n\\n    function __ERC4626_init_unchained(IERC20Upgradeable asset_) internal onlyInitializing {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20Upgradeable asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20MetadataUpgradeable.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20MetadataUpgradeable, ERC20Upgradeable) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, MathUpgradeable.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, MathUpgradeable.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        console.log(balanceOf(owner), \\\"balance\\\");\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, MathUpgradeable.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20Upgradeable.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20Upgradeable.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x1dcacbaad010296060f41107212a77a63a80420e1e745ecd419554e92d2cd5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC4626Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IToken.sol\\\";\\nimport \\\"./interfaces/INft.sol\\\";\\nimport \\\"./interfaces/IOpenTradesPnlFeed.sol\\\";\\nimport \\\"./libraries/ChainUtils.sol\\\";\\n\\ncontract Vault is\\n    ERC20Upgradeable,\\n    ERC4626Upgradeable,\\n    OwnableUpgradeable,\\n    IToken\\n{\\n    using MathUpgradeable for uint;\\n\\n    // Contracts & Addresses (constant)\\n    // address public Token;\\n    INft public lockedDepositNft;\\n\\n    // Contracts & Addresses (adjustable)\\n    address public manager; // 3-day timelock contract\\n    address public admin; // bypasses timelock, access to emergency functions\\n\\n    address public pnlHandler;\\n    IOpenTradesPnlFeed public openTradesPnlFeed;\\n    // PriceProvider public PriceProvider;\\n\\n    // struct PriceProvider {\\n    //     address addr;\\n    //     bytes signature;\\n    // }\\n\\n    // Parameters (constant)\\n    uint constant PRECISION = 1e18; // 18 decimals (acc values & price)\\n    uint constant PRECISION_2 = 1e40; // 40 decimals (acc block weighted market cap)\\n    uint constant _PRECISION = 1e10; // 10 decimals (/asset oracle)\\n    uint constant MIN_WETHLY_ACC_PNL_DELTA = PRECISION / 10; // 0.1 (price delta)\\n    uint constant MAX_SUPPLY_INCREASE_DAILY_P = 50 * PRECISION; // 50% / day (when under collat)\\n    uint constant MAX_LOSSES_BURN_P = 25 * PRECISION; // 25% of all losses\\n    uint constant MAX__SUPPLY_MINT_DAILY_P = PRECISION / 20; // 0.05% / day (18.25% / yr max)\\n    uint constant MAX_DISCOUNT_P = 10 * PRECISION; // 10%\\n    uint public MIN_LOCK_DURATION; // min locked asset deposit duration\\n    uint constant MAX_LOCK_DURATION = 365 days; // max locked asset deposit duration\\n    uint[] WITHDRAW_EPOCHS_LOCKS; // epochs withdraw locks at over collat thresholds\\n\\n    // Parameters (adjustable)\\n    uint public maxAccOpenPnlDelta; // PRECISION (max price delta on new epochs from open pnl)\\n    uint public maxdailyAccPnlDelta; // PRECISION (max WETHly price delta from closed pnl)\\n    uint[2] public withdrawLockThresholdsP; // PRECISION (% of over collat, used with WITHDRAW_EPOCHS_LOCKS)\\n    uint public maxSupplyIncreaseDailyP; // PRECISION (% per day, when under collat)\\n    uint public lossesBurnP; // PRECISION (% of all losses)\\n    uint public maxSupplyMintDailyP; // PRECISION (% of  supply)\\n    uint public maxDiscountP; // PRECISION (%, maximum discount for locked deposits)\\n    uint public maxDiscountThresholdP; // PRECISION (maximum collat %, for locked deposits)\\n\\n    // Price state\\n    uint public shareToAssetsPrice; // PRECISION\\n    int public accPnlPerTokenUsed; // PRECISION (snapshot of accPnlPerToken)\\n    int public accPnlPerToken; // PRECISION (updated in real-time)\\n    uint public accRewardsPerToken; // PRECISION\\n\\n    // Closed Pnl state\\n    int public dailyAccPnlDelta; // PRECISION\\n    uint public lastDailyAccPnlDeltaReset; // timestamp\\n\\n    // Epochs state (withdrawals)\\n    uint public currentEpoch; // global id\\n    uint public currentEpochStart; // timestamp\\n    uint public currentEpochPositiveOpenPnl; // 1e18\\n\\n    // Deposit / Withdraw state\\n    uint public currentMaxSupply; // 1e18\\n    uint public lastMaxSupplyUpdate; // timestamp\\n    mapping(address => mapping(uint => uint)) public withdrawRequests; // owner => unlock epoch => shares\\n\\n    // Locked deposits state\\n    uint public lockedDepositsCount; // global id\\n    mapping(uint => LockedDeposit) public lockedDeposits;\\n\\n    // Deplete / Refill state\\n    uint public assetsToDeplete; // 1e18\\n    uint public dailyMinted; // 1e18\\n    uint public lastdailyMintedReset; // timestamp\\n\\n    // Statistics (not used for contract logic)\\n    uint public totalDeposited; // 1e18 (assets)\\n    int public totalClosedPnl; // 1e18 (assets)\\n    uint public totalRewards; // 1e18 (assets)\\n    int public totalLiability; // 1e18 (assets)\\n    uint public totalLockedDiscounts; // 1e18 (assets)\\n    uint public totalDiscounts; // 1e18 (assets)\\n    // uint public totalDepleted; // 1e18 (assets)\\n    // uint public totalDepleted; // 1e18 ()\\n    // uint public totalRefilled; // 1e18 (assets)\\n    // uint public totalRefilled; // 1e18 ()\\n\\n    // Useful acc values\\n    uint public accBlockWeightedMarketCap; // 1e40, acc sum of (blocks elapsed / market cap)\\n    uint public accBlockWeightedMarketCapLastStored; // block\\n\\n    // Events\\n    event AddressParamUpdated(string name, address newValue);\\n    // event PriceProviderUpdated(PriceProvider newValue);\\n    event NumberParamUpdated(string name, uint newValue);\\n    event WithdrawLockThresholdsPUpdated(uint[2] newValue);\\n\\n    event CurrentMaxSupplyUpdated(uint newValue);\\n    event dailyAccPnlDeltaReset();\\n    event ShareToAssetsPriceUpdated(uint newValue);\\n    event OpenTradesPnlFeedCallFailed();\\n\\n    event WithdrawRequested(\\n        address indexed sender,\\n        address indexed owner,\\n        uint shares,\\n        uint currEpoch,\\n        uint indexed unlockEpoch\\n    );\\n    event WithdrawCanceled(\\n        address indexed sender,\\n        address indexed owner,\\n        uint shares,\\n        uint currEpoch,\\n        uint indexed unlockEpoch\\n    );\\n\\n    event DepositLocked(\\n        address indexed sender,\\n        address indexed owner,\\n        uint depositId,\\n        LockedDeposit d\\n    );\\n    event DepositUnlocked(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint depositId,\\n        LockedDeposit d\\n    );\\n\\n    event RewardDistributed(address indexed sender, uint assets);\\n\\n    event AssetsSent(\\n        address indexed sender,\\n        address indexed receiver,\\n        uint assets\\n    );\\n    event AssetsReceived(\\n        address indexed sender,\\n        address indexed user,\\n        uint assets,\\n        uint assetsLessDeplete\\n    );\\n\\n    event Depleted(address indexed sender, uint assets, uint amount);\\n    event Refilled(address indexed sender, uint assets, uint amount);\\n\\n    event AccPnlPerTokenUsedUpdated(\\n        address indexed sender,\\n        uint indexed newEpoch,\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl,\\n        uint newEpochPositiveOpenPnl,\\n        int newAccPnlPerTokenUsed\\n    );\\n\\n    event AccBlockWeightedMarketCapStored(uint newAccValue);\\n\\n    // Prevent stack too deep error\\n    struct ContractAddresses {\\n        address asset;\\n        address owner; // 2-week timelock contract\\n        address manager; // 3-day timelock contract\\n        address admin; // bypasses timelock, access to emergency functions\\n        // address Token;\\n        address lockedDepositNft;\\n        address pnlHandler;\\n        address openTradesPnlFeed;\\n        // PriceProvider PriceProvider;\\n    }\\n\\n    // Initializer function called when this contract is deployed\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        ContractAddresses memory _contractAddresses,\\n        uint _MIN_LOCK_DURATION,\\n        uint _maxAccOpenPnlDelta,\\n        uint _maxdailyAccPnlDelta,\\n        uint[2] memory _withdrawLockThresholdsP,\\n        uint _maxSupplyIncreaseDailyP,\\n        uint _lossesBurnP,\\n        uint _maxSupplyMintDailyP,\\n        uint _maxDiscountP,\\n        uint _maxDiscountThresholdP\\n    ) external initializer {\\n        require(\\n            _contractAddresses.asset != address(0) &&\\n                _contractAddresses.owner != address(0) &&\\n                _contractAddresses.manager != address(0) &&\\n                _contractAddresses.admin != address(0) &&\\n                _contractAddresses.owner != _contractAddresses.manager &&\\n                _contractAddresses.manager != _contractAddresses.admin &&\\n                /*_contractAddresses.Token != address(0) &&*/\\n                _contractAddresses.lockedDepositNft != address(0) &&\\n                _contractAddresses.pnlHandler != address(0) &&\\n                _contractAddresses.openTradesPnlFeed != address(0) &&\\n                /*_contractAddresses.PriceProvider.addr != address(0) &&*/\\n                /*_contractAddresses.PriceProvider.signature.length > 0 &&*/\\n                _maxdailyAccPnlDelta >= MIN_WETHLY_ACC_PNL_DELTA &&\\n                _withdrawLockThresholdsP[1] > _withdrawLockThresholdsP[0] &&\\n                _maxSupplyIncreaseDailyP <= MAX_SUPPLY_INCREASE_DAILY_P &&\\n                _lossesBurnP <= MAX_LOSSES_BURN_P &&\\n                _maxSupplyMintDailyP <= MAX__SUPPLY_MINT_DAILY_P &&\\n                _maxDiscountP <= MAX_DISCOUNT_P &&\\n                _maxDiscountThresholdP >= 100 * PRECISION,\\n            \\\"WRONG_PARAMS\\\"\\n        );\\n\\n        __ERC20_init(_name, _symbol);\\n        __ERC4626_init(IERC20MetadataUpgradeable(_contractAddresses.asset));\\n        _transferOwnership(_contractAddresses.owner);\\n\\n        // Token = _contractAddresses.Token;\\n        lockedDepositNft = INft(_contractAddresses.lockedDepositNft);\\n        manager = _contractAddresses.manager;\\n        admin = _contractAddresses.admin;\\n        pnlHandler = _contractAddresses.pnlHandler;\\n        openTradesPnlFeed = IOpenTradesPnlFeed(\\n            _contractAddresses.openTradesPnlFeed\\n        );\\n        // PriceProvider = _contractAddresses.PriceProvider;\\n\\n        MIN_LOCK_DURATION = _MIN_LOCK_DURATION;\\n\\n        maxAccOpenPnlDelta = _maxAccOpenPnlDelta;\\n        maxdailyAccPnlDelta = _maxdailyAccPnlDelta;\\n        withdrawLockThresholdsP = _withdrawLockThresholdsP;\\n        maxSupplyIncreaseDailyP = _maxSupplyIncreaseDailyP;\\n        lossesBurnP = _lossesBurnP;\\n        maxSupplyMintDailyP = _maxSupplyMintDailyP;\\n        maxDiscountP = _maxDiscountP;\\n        maxDiscountThresholdP = _maxDiscountThresholdP;\\n\\n        shareToAssetsPrice = PRECISION;\\n        currentEpoch = 1;\\n        currentEpochStart = block.timestamp;\\n        WITHDRAW_EPOCHS_LOCKS = [3, 2, 1];\\n    }\\n\\n    function initializeV2() external reinitializer(2) {\\n        storeAccBlockWeightedMarketCap();\\n        totalDeposited += totalRewards; // include all already distributed rewards in totalDeposited\\n    }\\n\\n    // Modifiers\\n    modifier onlyManager() {\\n        require(_msgSender() == manager, \\\"ONLY_MANAGER\\\");\\n        _;\\n    }\\n\\n    modifier checks(uint assetsOrShares) {\\n        require(shareToAssetsPrice > 0, \\\"PRICE_0\\\");\\n        require(assetsOrShares > 0, \\\"VALUE_0\\\");\\n        _;\\n    }\\n\\n    modifier validDiscount(uint lockDuration) {\\n        require(maxDiscountP > 0, \\\"NO_ACTIVE_DISCOUNT\\\");\\n        require(lockDuration >= MIN_LOCK_DURATION, \\\"BELOW_MIN_LOCK_DURATION\\\");\\n        require(lockDuration <= MAX_LOCK_DURATION, \\\"ABOVE_MAX_LOCK_DURATION\\\");\\n        _;\\n    }\\n\\n    // Manage addresses\\n    function transferOwnership(address newOwner) public override onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        require(newOwner != manager && newOwner != admin, \\\"WRONG_VALUE\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    function updateManager(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        require(newValue != owner() && newValue != admin, \\\"WRONG_VALUE\\\");\\n        manager = newValue;\\n        emit AddressParamUpdated(\\\"manager\\\", newValue);\\n    }\\n\\n    function updateAdmin(address newValue) external onlyManager {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        require(newValue != owner() && newValue != manager, \\\"WRONG_VALUE\\\");\\n        admin = newValue;\\n        emit AddressParamUpdated(\\\"admin\\\", newValue);\\n    }\\n\\n    function updatePnlHandler(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        pnlHandler = newValue;\\n        emit AddressParamUpdated(\\\"pnlHandler\\\", newValue);\\n    }\\n\\n    // function updatePriceProvider(PriceProvider memory newValue) external onlyManager {\\n    //     require(newValue.addr != address(0), \\\"ADDRESS_0\\\");\\n    //     require(newValue.signature.length > 0, \\\"BYTES_0\\\");\\n    //     PriceProvider = newValue;\\n    //     emit PriceProviderUpdated(newValue);\\n    // }\\n\\n    function updateOpenTradesPnlFeed(address newValue) external onlyOwner {\\n        require(newValue != address(0), \\\"ADDRESS_0\\\");\\n        openTradesPnlFeed = IOpenTradesPnlFeed(newValue);\\n        emit AddressParamUpdated(\\\"openTradesPnlFeed\\\", newValue);\\n    }\\n\\n    // Manage parameters\\n    function updateMaxAccOpenPnlDelta(uint newValue) external onlyOwner {\\n        maxAccOpenPnlDelta = newValue;\\n        emit NumberParamUpdated(\\\"maxAccOpenPnlDelta\\\", newValue);\\n    }\\n\\n    function updateMaxdailyAccPnlDelta(uint newValue) external onlyManager {\\n        require(newValue >= MIN_WETHLY_ACC_PNL_DELTA, \\\"BELOW_MIN\\\");\\n        maxdailyAccPnlDelta = newValue;\\n        emit NumberParamUpdated(\\\"maxdailyAccPnlDelta\\\", newValue);\\n    }\\n\\n    function updateWithdrawLockThresholdsP(\\n        uint[2] memory newValue\\n    ) external onlyOwner {\\n        require(newValue[1] > newValue[0], \\\"WRONG_VALUES\\\");\\n        withdrawLockThresholdsP = newValue;\\n        emit WithdrawLockThresholdsPUpdated(newValue);\\n    }\\n\\n    function updatemaxSupplyIncreaseDailyP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_SUPPLY_INCREASE_DAILY_P, \\\"ABOVE_MAX\\\");\\n        maxSupplyIncreaseDailyP = newValue;\\n        emit NumberParamUpdated(\\\"maxSupplyIncreaseDailyP\\\", newValue);\\n    }\\n\\n    function updateLossesBurnP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_LOSSES_BURN_P, \\\"ABOVE_MAX\\\");\\n        lossesBurnP = newValue;\\n        emit NumberParamUpdated(\\\"lossesBurnP\\\", newValue);\\n    }\\n\\n    function updatemaxSupplyMintDailyP(uint newValue) external onlyManager {\\n        require(newValue <= MAX__SUPPLY_MINT_DAILY_P, \\\"ABOVE_MAX\\\");\\n        maxSupplyMintDailyP = newValue;\\n        emit NumberParamUpdated(\\\"maxSupplyMintDailyP\\\", newValue);\\n    }\\n\\n    function updateMaxDiscountP(uint newValue) external onlyManager {\\n        require(newValue <= MAX_DISCOUNT_P, \\\"ABOVE_MAX_DISCOUNT\\\");\\n        maxDiscountP = newValue;\\n        emit NumberParamUpdated(\\\"maxDiscountP\\\", newValue);\\n    }\\n\\n    function updateMaxDiscountThresholdP(uint newValue) external onlyManager {\\n        require(newValue >= 100 * PRECISION, \\\"BELOW_MIN\\\");\\n        maxDiscountThresholdP = newValue;\\n        emit NumberParamUpdated(\\\"maxDiscountThresholdP\\\", newValue);\\n    }\\n\\n    // View helper functions\\n    function maxAccPnlPerToken() public view returns (uint) {\\n        // PRECISION\\n        return PRECISION + accRewardsPerToken;\\n    }\\n\\n    function collateralizationP() public view returns (uint) {\\n        // PRECISION (%)\\n        uint _maxAccPnlPerToken = maxAccPnlPerToken();\\n\\n        return\\n            ((\\n                accPnlPerTokenUsed > 0\\n                    ? (_maxAccPnlPerToken - uint(accPnlPerTokenUsed))\\n                    : (_maxAccPnlPerToken + uint(accPnlPerTokenUsed * (-1)))\\n            ) *\\n                100 *\\n                PRECISION) / _maxAccPnlPerToken;\\n    }\\n\\n    // function TokenToAssetsPrice() public view returns (uint price) {\\n    //     // _PRECISION\\n    //     (bool success, bytes memory result) = PriceProvider.addr.staticcall(PriceProvider.signature);\\n\\n    //     require(success == true, \\\"_PRICE_CALL_FAILED\\\");\\n    //     (price) = abi.decode(result, (uint));\\n\\n    //     require(price > 0, \\\"_TOKEN_PRICE_0\\\");\\n    // }\\n\\n    function withdrawEpochsTimelock() public view returns (uint) {\\n        uint collatP = collateralizationP();\\n        uint overCollatP = (collatP -\\n            MathUpgradeable.min(collatP, 100 * PRECISION));\\n\\n        return\\n            overCollatP > withdrawLockThresholdsP[1]\\n                ? WITHDRAW_EPOCHS_LOCKS[2]\\n                : (\\n                    overCollatP > withdrawLockThresholdsP[0]\\n                        ? WITHDRAW_EPOCHS_LOCKS[1]\\n                        : WITHDRAW_EPOCHS_LOCKS[0]\\n                );\\n    }\\n\\n    function lockDiscountP(\\n        uint collatP,\\n        uint lockDuration\\n    ) public view returns (uint) {\\n        return\\n            ((\\n                collatP <= 100 * PRECISION\\n                    ? maxDiscountP\\n                    : (\\n                        collatP <= maxDiscountThresholdP\\n                            ? (maxDiscountP *\\n                                (maxDiscountThresholdP - collatP)) /\\n                                (maxDiscountThresholdP - 100 * PRECISION)\\n                            : 0\\n                    )\\n            ) * lockDuration) / MAX_LOCK_DURATION;\\n    }\\n\\n    function totalSharesBeingWithdrawn(\\n        address owner\\n    ) public view returns (uint shares) {\\n        for (\\n            uint i = currentEpoch;\\n            i <= currentEpoch + WITHDRAW_EPOCHS_LOCKS[0];\\n            i++\\n        ) {\\n            shares += withdrawRequests[owner][i];\\n        }\\n    }\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) public view returns (uint) {\\n        return\\n            accBlockWeightedMarketCap +\\n            ((currentBlock - accBlockWeightedMarketCapLastStored) *\\n                PRECISION_2) /\\n            MathUpgradeable.max(marketCap(), 1);\\n    }\\n\\n    // Public helper functions\\n    function tryUpdateCurrentMaxSupply() public {\\n        if (block.timestamp - lastMaxSupplyUpdate >= 24 hours) {\\n            currentMaxSupply =\\n                (totalSupply() * (PRECISION * 100 + maxSupplyIncreaseDailyP)) /\\n                (PRECISION * 100);\\n            lastMaxSupplyUpdate = block.timestamp;\\n\\n            emit CurrentMaxSupplyUpdated(currentMaxSupply);\\n        }\\n    }\\n\\n    function tryResetdailyAccPnlDelta() public {\\n        if (block.timestamp - lastDailyAccPnlDeltaReset >= 24 hours) {\\n            dailyAccPnlDelta = 0;\\n            lastDailyAccPnlDeltaReset = block.timestamp;\\n\\n            emit dailyAccPnlDeltaReset();\\n        }\\n    }\\n\\n    function tryNewOpenPnlRequestOrEpoch() public {\\n        // Fault tolerance so that activity can continue anyway\\n        (bool success, ) = address(openTradesPnlFeed).call(\\n            abi.encodeWithSignature(\\\"newOpenPnlRequestOrEpoch()\\\")\\n        );\\n        if (!success) {\\n            emit OpenTradesPnlFeedCallFailed();\\n        }\\n    }\\n\\n    function storeAccBlockWeightedMarketCap() public {\\n        uint currentBlock = ChainUtils.getBlockNumber();\\n        accBlockWeightedMarketCap = getPendingAccBlockWeightedMarketCap(\\n            currentBlock\\n        );\\n        accBlockWeightedMarketCapLastStored = currentBlock;\\n\\n        emit AccBlockWeightedMarketCapStored(accBlockWeightedMarketCap);\\n    }\\n\\n    // Private helper functions\\n    function updateShareToAssetsPrice() private {\\n        storeAccBlockWeightedMarketCap();\\n\\n        shareToAssetsPrice =\\n            maxAccPnlPerToken() -\\n            (accPnlPerTokenUsed > 0 ? uint(accPnlPerTokenUsed) : uint(0)); // PRECISION\\n        emit ShareToAssetsPriceUpdated(shareToAssetsPrice);\\n    }\\n\\n    function _assetIERC20() private view returns (IERC20Upgradeable) {\\n        return IERC20Upgradeable(asset());\\n    }\\n\\n    // Override ERC-20 functions (prevent sending to address that is withdrawing)\\n    function transfer(\\n        address to,\\n        uint amount\\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns (bool) {\\n        address sender = _msgSender();\\n        require(\\n            totalSharesBeingWithdrawn(sender) <= balanceOf(sender) - amount,\\n            \\\"PENDING_WITHDRAWAL\\\"\\n        );\\n        _transfer(sender, to, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint amount\\n    ) public override(ERC20Upgradeable, IERC20Upgradeable) returns (bool) {\\n        require(\\n            totalSharesBeingWithdrawn(from) <= balanceOf(from) - amount,\\n            \\\"PENDING_WITHDRAWAL\\\"\\n        );\\n        _spendAllowance(from, _msgSender(), amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    // Override ERC-4626 view functions\\n    function decimals()\\n        public\\n        view\\n        override(ERC20Upgradeable, ERC4626Upgradeable)\\n        returns (uint8)\\n    {\\n        return ERC4626Upgradeable.decimals();\\n    }\\n\\n    function _convertToShares(\\n        uint assets,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view override returns (uint shares) {\\n        return assets.mulDiv(PRECISION, shareToAssetsPrice, rounding);\\n    }\\n\\n    function _convertToAssets(\\n        uint shares,\\n        MathUpgradeable.Rounding rounding\\n    ) internal view override returns (uint assets) {\\n        // Prevent overflow when called from maxDeposit with maxMint = uint.max\\n        if (shares == type(uint).max && shareToAssetsPrice >= PRECISION) {\\n            return shares;\\n        }\\n        return shares.mulDiv(shareToAssetsPrice, PRECISION, rounding);\\n    }\\n\\n    function maxMint(address) public view override returns (uint) {\\n        return\\n            accPnlPerTokenUsed > 0\\n                ? currentMaxSupply -\\n                    MathUpgradeable.min(currentMaxSupply, totalSupply())\\n                : type(uint).max;\\n    }\\n\\n    function maxDeposit(address owner) public view override returns (uint) {\\n        return _convertToAssets(maxMint(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    function maxRedeem(address owner) public view override returns (uint) {\\n        return\\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0\\n                ? MathUpgradeable.min(\\n                    withdrawRequests[owner][currentEpoch],\\n                    totalSupply() - 1\\n                )\\n                : 0;\\n    }\\n\\n    function maxWithdraw(address owner) public view override returns (uint) {\\n        return\\n            _convertToAssets(maxRedeem(owner), MathUpgradeable.Rounding.Down);\\n    }\\n\\n    // Override ERC-4626 interactions (call scaleVariables on every deposit / withdrawal)\\n    function deposit(\\n        uint assets,\\n        address receiver\\n    ) public override checks(assets) returns (uint) {\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n\\n        uint shares = previewDeposit(assets);\\n        scaleVariables(shares, assets, true);\\n\\n        _deposit(_msgSender(), receiver, assets, shares);\\n        return shares;\\n    }\\n\\n    function mint(\\n        uint shares,\\n        address receiver\\n    ) public override checks(shares) returns (uint) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint assets = previewMint(shares);\\n        scaleVariables(shares, assets, true);\\n\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    function withdraw(\\n        uint assets,\\n        address receiver,\\n        address owner\\n    ) public override checks(assets) returns (uint) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n\\n        uint shares = previewWithdraw(assets);\\n        withdrawRequests[owner][currentEpoch] -= shares;\\n\\n        scaleVariables(shares, assets, false);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return shares;\\n    }\\n\\n    function redeem(\\n        uint shares,\\n        address receiver,\\n        address owner\\n    ) public override checks(shares) returns (uint) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        withdrawRequests[owner][currentEpoch] -= shares;\\n\\n        uint assets = previewRedeem(shares);\\n        scaleVariables(shares, assets, false);\\n\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n        return assets;\\n    }\\n\\n    function scaleVariables(uint shares, uint assets, bool isDeposit) private {\\n        uint supply = totalSupply();\\n\\n        if (accPnlPerToken < 0) {\\n            accPnlPerToken =\\n                (accPnlPerToken * int(supply)) /\\n                (isDeposit ? int(supply + shares) : int(supply - shares));\\n        } else if (accPnlPerToken > 0) {\\n            totalLiability +=\\n                ((int(shares) * totalLiability) / int(supply)) *\\n                (isDeposit ? int(1) : int(-1));\\n        }\\n\\n        totalDeposited = isDeposit\\n            ? totalDeposited + assets\\n            : totalDeposited - assets;\\n\\n        storeAccBlockWeightedMarketCap();\\n    }\\n\\n    // Withdraw requests (need to be done before calling 'withdraw' / 'redeem')\\n    function makeWithdrawRequest(uint shares, address owner) external {\\n        require(\\n            openTradesPnlFeed.nextEpochValuesRequestCount() == 0,\\n            \\\"END_OF_EPOCH\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        uint allowance = allowance(owner, sender);\\n        require(\\n            sender == owner || (allowance > 0 && allowance >= shares),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n\\n        require(\\n            totalSharesBeingWithdrawn(owner) + shares <= balanceOf(owner),\\n            \\\"MORE_THAN_BALANCE\\\"\\n        );\\n\\n        uint unlockEpoch = currentEpoch + withdrawEpochsTimelock();\\n        withdrawRequests[owner][unlockEpoch] += shares;\\n\\n        emit WithdrawRequested(\\n            sender,\\n            owner,\\n            shares,\\n            currentEpoch,\\n            unlockEpoch\\n        );\\n    }\\n\\n    function cancelWithdrawRequest(\\n        uint shares,\\n        address owner,\\n        uint unlockEpoch\\n    ) external {\\n        require(\\n            shares <= withdrawRequests[owner][unlockEpoch],\\n            \\\"MORE_THAN_WITHDRAW_AMOUNT\\\"\\n        );\\n\\n        address sender = _msgSender();\\n        uint allowance = allowance(owner, sender);\\n        require(\\n            sender == owner || (allowance > 0 && allowance >= shares),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n\\n        withdrawRequests[owner][unlockEpoch] -= shares;\\n\\n        emit WithdrawCanceled(sender, owner, shares, currentEpoch, unlockEpoch);\\n    }\\n\\n    // Locked and discounted deposits\\n    function depositWithDiscountAndLock(\\n        uint assets,\\n        uint lockDuration,\\n        address receiver\\n    ) external checks(assets) validDiscount(lockDuration) returns (uint) {\\n        uint simulatedAssets = (assets *\\n            (PRECISION *\\n                100 +\\n                lockDiscountP(collateralizationP(), lockDuration))) /\\n            (PRECISION * 100);\\n\\n        require(\\n            simulatedAssets <= maxDeposit(receiver),\\n            \\\"DEPOSIT_MORE_THAN_MAX\\\"\\n        );\\n\\n        return\\n            _executeDiscountAndLock(\\n                simulatedAssets,\\n                assets,\\n                previewDeposit(simulatedAssets),\\n                lockDuration,\\n                receiver\\n            );\\n    }\\n\\n    function mintWithDiscountAndLock(\\n        uint shares,\\n        uint lockDuration,\\n        address receiver\\n    ) external checks(shares) validDiscount(lockDuration) returns (uint) {\\n        require(shares <= maxMint(receiver), \\\"MINT_MORE_THAN_MAX\\\");\\n        uint assets = previewMint(shares);\\n\\n        return\\n            _executeDiscountAndLock(\\n                assets,\\n                (assets * (PRECISION * 100)) /\\n                    (PRECISION *\\n                        100 +\\n                        lockDiscountP(collateralizationP(), lockDuration)),\\n                shares,\\n                lockDuration,\\n                receiver\\n            );\\n    }\\n\\n    function _executeDiscountAndLock(\\n        uint assets,\\n        uint assetsDeposited,\\n        uint shares,\\n        uint lockDuration,\\n        address receiver\\n    ) private returns (uint) {\\n        require(assets > assetsDeposited, \\\"NO_DISCOUNT\\\");\\n\\n        uint depositId = ++lockedDepositsCount;\\n        uint assetsDiscount = assets - assetsDeposited;\\n\\n        LockedDeposit storage d = lockedDeposits[depositId];\\n        d.owner = receiver;\\n        d.shares = shares;\\n        d.assetsDeposited = assetsDeposited;\\n        d.assetsDiscount = assetsDiscount;\\n        d.atTimestamp = block.timestamp;\\n        d.lockDuration = lockDuration;\\n\\n        scaleVariables(shares, assetsDeposited, true);\\n        address sender = _msgSender();\\n        _deposit(sender, address(this), assetsDeposited, shares);\\n\\n        totalDiscounts += assetsDiscount;\\n        totalLockedDiscounts += assetsDiscount;\\n\\n        lockedDepositNft.mint(receiver, depositId);\\n\\n        emit DepositLocked(sender, d.owner, depositId, d);\\n        return depositId;\\n    }\\n\\n    function unlockDeposit(uint depositId, address receiver) external {\\n        LockedDeposit storage d = lockedDeposits[depositId];\\n\\n        address sender = _msgSender();\\n        address owner = lockedDepositNft.ownerOf(depositId);\\n\\n        require(\\n            owner == sender ||\\n                lockedDepositNft.getApproved(depositId) == sender ||\\n                lockedDepositNft.isApprovedForAll(owner, sender),\\n            \\\"NOT_ALLOWED\\\"\\n        );\\n        require(\\n            block.timestamp >= d.atTimestamp + d.lockDuration,\\n            \\\"NOT_UNLOCKED\\\"\\n        );\\n\\n        int accPnlDelta = int(\\n            d.assetsDiscount.mulDiv(\\n                PRECISION,\\n                totalSupply(),\\n                MathUpgradeable.Rounding.Up\\n            )\\n        );\\n\\n        accPnlPerToken += accPnlDelta;\\n        require(\\n            accPnlPerToken <= int(maxAccPnlPerToken()),\\n            \\\"NOT_ENOUGH_ASSETS\\\"\\n        );\\n\\n        lockedDepositNft.burn(depositId);\\n\\n        accPnlPerTokenUsed += accPnlDelta;\\n        updateShareToAssetsPrice();\\n\\n        totalLiability += int(d.assetsDiscount);\\n        totalLockedDiscounts -= d.assetsDiscount;\\n\\n        _transfer(address(this), receiver, d.shares);\\n\\n        emit DepositUnlocked(sender, receiver, owner, depositId, d);\\n    }\\n\\n    // Distributes a reward evenly to all stakers of the vault\\n    function distributeReward(uint assets) external {\\n        address sender = _msgSender();\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _assetIERC20(),\\n            sender,\\n            address(this),\\n            assets\\n        );\\n\\n        accRewardsPerToken += (assets * PRECISION) / totalSupply();\\n        updateShareToAssetsPrice();\\n\\n        totalRewards += assets;\\n        totalDeposited += assets;\\n\\n        emit RewardDistributed(sender, assets);\\n    }\\n\\n    // PnL interactions (happens often, so also used to trigger other actions)\\n    function sendAssets(uint assets, address receiver) external {\\n        address sender = _msgSender();\\n        require(sender == pnlHandler, \\\"ONLY_TRADING_PNL_HANDLER\\\");\\n\\n        int accPnlDelta = int(\\n            assets.mulDiv(PRECISION, totalSupply(), MathUpgradeable.Rounding.Up)\\n        );\\n\\n        accPnlPerToken += accPnlDelta;\\n        require(\\n            accPnlPerToken <= int(maxAccPnlPerToken()),\\n            \\\"NOT_ENOUGH_ASSETS\\\"\\n        );\\n\\n        tryResetdailyAccPnlDelta();\\n        dailyAccPnlDelta += accPnlDelta;\\n        require(dailyAccPnlDelta <= int(maxdailyAccPnlDelta), \\\"MAX_WETHLY_PNL\\\");\\n\\n        totalLiability += int(assets);\\n        totalClosedPnl += int(assets);\\n\\n        tryNewOpenPnlRequestOrEpoch();\\n        tryUpdateCurrentMaxSupply();\\n\\n        SafeERC20Upgradeable.safeTransfer(_assetIERC20(), receiver, assets);\\n\\n        emit AssetsSent(sender, receiver, assets);\\n    }\\n\\n    function receiveAssets(uint assets, address user) external {\\n        address sender = _msgSender();\\n        SafeERC20Upgradeable.safeTransferFrom(\\n            _assetIERC20(),\\n            sender,\\n            address(this),\\n            assets\\n        );\\n\\n        uint assetsLessDeplete = assets;\\n\\n        if (accPnlPerTokenUsed < 0 && accPnlPerToken < 0) {\\n            uint depleteAmount = (assets * lossesBurnP) / PRECISION / 100;\\n            assetsToDeplete += depleteAmount;\\n            assetsLessDeplete -= depleteAmount;\\n        }\\n\\n        int accPnlDelta = int((assetsLessDeplete * PRECISION) / totalSupply());\\n        accPnlPerToken -= accPnlDelta;\\n\\n        tryResetdailyAccPnlDelta();\\n        dailyAccPnlDelta -= accPnlDelta;\\n\\n        totalLiability -= int(assetsLessDeplete);\\n        totalClosedPnl -= int(assetsLessDeplete);\\n\\n        tryNewOpenPnlRequestOrEpoch();\\n        tryUpdateCurrentMaxSupply();\\n\\n        emit AssetsReceived(sender, user, assets, assetsLessDeplete);\\n    }\\n\\n    // //  mint / burn mechanism\\n    // function deplete(uint assets) external {\\n    //     require(assets <= assetsToDeplete, \\\"AMOUNT_TOO_BIG\\\");\\n    //     assetsToDeplete -= assets;\\n\\n    //     uint amount = assets.mulDiv(_PRECISION, TokenToAssetsPrice(), MathUpgradeable.Rounding.Up);\\n\\n    //     address sender = _msgSender();\\n    //     IToken(Token).burn(sender, amount);\\n\\n    //     totalDepleted += assets;\\n    //     totalDepleted += amount;\\n\\n    //     SafeERC20Upgradeable.safeTransfer(_assetIERC20(), sender, assets);\\n\\n    //     emit Depleted(sender, assets, amount);\\n    // }\\n\\n    // function refill(uint assets) external {\\n    //     require(accPnlPerTokenUsed > 0, \\\"NOT_UNDER_COLLATERALIZED\\\");\\n\\n    //     uint supply = totalSupply();\\n    //     require(assets <= (uint(accPnlPerTokenUsed) * supply) / PRECISION, \\\"AMOUNT_TOO_BIG\\\");\\n\\n    //     if (block.timestamp - lastdailyMintedReset >= 24 hours) {\\n    //         dailyMinted = 0;\\n    //         lastdailyMintedReset = block.timestamp;\\n    //     }\\n\\n    //     uint amount = (assets * _PRECISION) / TokenToAssetsPrice();\\n    //     dailyMinted += amount;\\n\\n    //     require(\\n    //         dailyMinted <= (maxSupplyMintDailyP * IERC20Upgradeable(Token).totalSupply()) / PRECISION / 100,\\n    //         \\\"ABOVE_INFLATION_LIMIT\\\"\\n    //     );\\n\\n    //     address sender = _msgSender();\\n    //     SafeERC20Upgradeable.safeTransferFrom(_assetIERC20(), sender, address(this), assets);\\n\\n    //     int accPnlDelta = int((assets * PRECISION) / supply);\\n    //     accPnlPerToken -= accPnlDelta;\\n    //     accPnlPerTokenUsed -= accPnlDelta;\\n    //     updateShareToAssetsPrice();\\n\\n    //     totalRefilled += assets;\\n    //     totalRefilled += amount;\\n\\n    //     IToken(Token).mint(sender, amount);\\n\\n    //     emit Refilled(sender, assets, amount);\\n    // }\\n\\n    // Updates shareToAssetsPrice based on the new PnL and starts a new epoch\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl, // 1e18\\n        uint newPositiveOpenPnl // 1e18\\n    ) external returns (uint) {\\n        address sender = _msgSender();\\n        require(sender == address(openTradesPnlFeed), \\\"ONLY_PNL_FEED\\\");\\n\\n        int delta = int(newPositiveOpenPnl) - int(prevPositiveOpenPnl); // 1e18\\n        uint supply = totalSupply();\\n\\n        int maxDelta = int(\\n            MathUpgradeable.min(\\n                (uint(int(maxAccPnlPerToken()) - accPnlPerToken) * supply) /\\n                    PRECISION,\\n                (maxAccOpenPnlDelta * supply) / PRECISION\\n            )\\n        ); // 1e18\\n\\n        delta = delta > maxDelta ? maxDelta : delta;\\n\\n        accPnlPerToken += (delta * int(PRECISION)) / int(supply);\\n        totalLiability += delta;\\n\\n        accPnlPerTokenUsed = accPnlPerToken;\\n        updateShareToAssetsPrice();\\n\\n        currentEpoch++;\\n        currentEpochStart = block.timestamp;\\n        currentEpochPositiveOpenPnl = uint(int(prevPositiveOpenPnl) + delta);\\n\\n        tryUpdateCurrentMaxSupply();\\n\\n        emit AccPnlPerTokenUsedUpdated(\\n            sender,\\n            currentEpoch,\\n            prevPositiveOpenPnl,\\n            newPositiveOpenPnl,\\n            currentEpochPositiveOpenPnl,\\n            accPnlPerTokenUsed\\n        );\\n\\n        return currentEpochPositiveOpenPnl;\\n    }\\n\\n    // Getters\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory) {\\n        return lockedDeposits[depositId];\\n    }\\n\\n    function tvl() public view returns (uint) {\\n        return (maxAccPnlPerToken() * totalSupply()) / PRECISION; // 1e18\\n    }\\n\\n    function availableAssets() public view returns (uint) {\\n        return\\n            (uint(int(maxAccPnlPerToken()) - accPnlPerTokenUsed) *\\n                totalSupply()) / PRECISION; // 1e18\\n    }\\n\\n    // To be compatible with old pairs storage contract v6 (to be used only with gWETH vault)\\n    function currentBalanceWETH() external view returns (uint) {\\n        return availableAssets(); // 1e18\\n    }\\n\\n    function marketCap() public view returns (uint) {\\n        return (totalSupply() * shareToAssetsPrice) / PRECISION; // 1e18\\n    }\\n}\\n\",\"keccak256\":\"0x6ee69088cd222891985d03e42e9edb02b6f881003bb63a7cf2bc98295987740b\",\"license\":\"MIT\"},\"contracts/interfaces/IArbSys.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.21 <0.9.0;\\n\\n/**\\n * @title Precompiled contract that exists in every Arbitrum chain at address(100), 0x0000000000000000000000000000000000000064. Exposes a variety of system-level functionality.\\n */\\ninterface IArbSys {\\n    /**\\n     * @notice Get internal version number identifying an ArbOS build\\n     * @return version number as int\\n     */\\n    function arbOSVersion() external pure returns (uint);\\n\\n    function arbChainID() external view returns (uint);\\n\\n    /**\\n     * @notice Get Arbitrum block number (distinct from L1 block number; Arbitrum genesis block has block number 0)\\n     * @return block number as int\\n     */\\n    function arbBlockNumber() external view returns (uint);\\n\\n    /**\\n     * @notice Send given amount of Eth to dest from sender.\\n     * This is a convenience function, which is equivalent to calling sendTxToL1 with empty calldataForL1.\\n     * @param destination recipient address on L1\\n     * @return unique identifier for this L2-to-L1 transaction.\\n     */\\n    function withdrawEth(address destination) external payable returns (uint);\\n\\n    /**\\n     * @notice Send a transaction to L1\\n     * @param destination recipient address on L1\\n     * @param calldataForL1 (optional) calldata for L1 contract call\\n     * @return a unique identifier for this L2-to-L1 transaction.\\n     */\\n    function sendTxToL1(address destination, bytes calldata calldataForL1) external payable returns (uint);\\n\\n    /**\\n     * @notice get the number of transactions issued by the given external account or the account sequence number of the given contract\\n     * @param account target account\\n     * @return the number of transactions issued by the given external account or the account sequence number of the given contract\\n     */\\n    function getTransactionCount(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice get the value of target L2 storage slot\\n     * This function is only callable from address 0 to prevent contracts from being able to call it\\n     * @param account target account\\n     * @param index target index of storage slot\\n     * @return stotage value for the given account at the given index\\n     */\\n    function getStorageAt(address account, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @notice check if current call is coming from l1\\n     * @return true if the caller of this was called directly from L1\\n     */\\n    function isTopLevelCall() external view returns (bool);\\n\\n    /**\\n     * @notice check if the caller (of this caller of this) is an aliased L1 contract address\\n     * @return true iff the caller's address is an alias for an L1 contract address\\n     */\\n    function wasMyCallersAddressAliased() external view returns (bool);\\n\\n    /**\\n     * @notice return the address of the caller (of this caller of this), without applying L1 contract address aliasing\\n     * @return address of the caller's caller, without applying L1 contract address aliasing\\n     */\\n    function myCallersAddressWithoutAliasing() external view returns (address);\\n\\n    /**\\n     * @notice map L1 sender contract address to its L2 alias\\n     * @param sender sender address\\n     * @param dest destination address\\n     * @return aliased sender address\\n     */\\n    function mapL1SenderContractAddressToL2Alias(address sender, address dest) external pure returns (address);\\n\\n    /**\\n     * @notice get the caller's amount of available storage gas\\n     * @return amount of storage gas available to the caller\\n     */\\n    function getStorageGasAvailable() external view returns (uint);\\n\\n    event L2ToL1Transaction(\\n        address caller,\\n        address indexed destination,\\n        uint indexed uniqueId,\\n        uint indexed batchNumber,\\n        uint indexInBatch,\\n        uint arbBlockNum,\\n        uint ethBlockNum,\\n        uint timestamp,\\n        uint callvalue,\\n        bytes data\\n    );\\n}\",\"keccak256\":\"0xce4af00225a25d02f66a33be0a71c3b3e4e462981c1c5087a7069d7ec84086b7\",\"license\":\"MIT\"},\"contracts/interfaces/INft.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\npragma solidity 0.8.23;\\n\\ninterface INft is IERC721 {\\n    function mint(address to, uint tokenId) external;\\n\\n    function burn(uint tokenId) external;\\n}\\n\",\"keccak256\":\"0xe5ab1a1ede11be91e3982fce7a67feb76ea09112036d43198ae0bf6f56c036a3\",\"license\":\"MIT\"},\"contracts/interfaces/IOpenTradesPnlFeed.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IOpenTradesPnlFeed {\\n    function nextEpochValuesRequestCount() external view returns (uint);\\n\\n    function newOpenPnlRequestOrEpoch() external;\\n}\\n\",\"keccak256\":\"0xc8c06c7bbe22b05aae8826b67a73ef22704cc5453b7e849410aa232278c0c523\",\"license\":\"MIT\"},\"contracts/interfaces/IToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\ninterface IToken {\\n    function manager() external view returns (address);\\n\\n    function admin() external view returns (address);\\n\\n    function currentEpoch() external view returns (uint);\\n\\n    function currentEpochStart() external view returns (uint);\\n\\n    function currentEpochPositiveOpenPnl() external view returns (uint);\\n\\n    function updateAccPnlPerTokenUsed(\\n        uint prevPositiveOpenPnl,\\n        uint newPositiveOpenPnl\\n    ) external returns (uint);\\n\\n    struct LockedDeposit {\\n        address owner;\\n        uint shares; // 1e18\\n        uint assetsDeposited; // 1e18\\n        uint assetsDiscount; // 1e18\\n        uint atTimestamp; // timestamp\\n        uint lockDuration; // timestamp\\n    }\\n\\n    function getLockedDeposit(\\n        uint depositId\\n    ) external view returns (LockedDeposit memory);\\n\\n    function sendAssets(uint assets, address receiver) external;\\n\\n    function receiveAssets(uint assets, address user) external;\\n\\n    function distributeReward(uint assets) external;\\n\\n    function currentBalanceWETH() external view returns (uint);\\n\\n    function tvl() external view returns (uint);\\n\\n    function marketCap() external view returns (uint);\\n\\n    function getPendingAccBlockWeightedMarketCap(\\n        uint currentBlock\\n    ) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x4cf9781a0df06a546607997f12d5d984942657e9eb908229ef5f7f6d5b2bd385\",\"license\":\"MIT\"},\"contracts/libraries/ChainUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport \\\"../interfaces/IArbSys.sol\\\";\\n\\nlibrary ChainUtils {\\n    uint256 public constant ARBITRUM_MAINNET = 42161;\\n    uint256 public constant ARBITRUM_GOERLI = 421613;\\n    IArbSys public constant ARB_SYS = IArbSys(address(100));\\n\\n    function getBlockNumber() internal view returns (uint) {\\n        if (\\n            block.chainid == ARBITRUM_MAINNET ||\\n            block.chainid == ARBITRUM_GOERLI\\n        ) {\\n            return ARB_SYS.arbBlockNumber();\\n        }\\n\\n        return block.number;\\n    }\\n\\n    function getUint48BlockNumber(\\n        uint blockNumber\\n    ) internal pure returns (uint48) {\\n        require(blockNumber <= type(uint48).max, \\\"OVERFLOW\\\");\\n        return uint48(blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xab9f85c7c003d7e1063f86c5d5262250b6807bfa8d23d8c18ddf409a6aa9ed56\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615459806100206000396000f3fe608060405234801561001057600080fd5b50600436106105a85760003560e01c806379431d9c116102f1578063ce96cb7711610193578063e5328e06116100ef578063f2fde38b1161009d578063f2fde38b14610c51578063f457fa9a14610c64578063f5521eaa14610c6c578063f851a44014610c7f578063f8fb10f714610c92578063faf33f2914610c9b578063ff50abdc14610ca457600080fd5b8063e5328e0614610bae578063e66a6e3b14610bb6578063e783967614610bc9578063e8e4311014610c2c578063ea5f2bba14610c3f578063ef8b30f714610acd578063f0a7744614610c4857600080fd5b8063d8bdfd481161014c578063d8bdfd4814610b52578063d905777e14610b5a578063db0447d514610b6d578063dd62ed3e14610b76578063ddd65e3114610b89578063e255cfa314610b92578063e2f273bd14610b9b57600080fd5b8063ce96cb7714610ae0578063ce9e1b2114610af3578063cf39c2db14610b06578063d1e08c2014610b19578063d229b2dd14610b2c578063d272df1014610b3f57600080fd5b8063a50043a01161024d578063b460af94116101fb578063b460af9414610a00578063b82c589914610a13578063ba08765214610a97578063be216e8314610aaa578063c63384ab14610ab2578063c63d75b614610aba578063c6e6f59214610acd57600080fd5b8063a50043a014610985578063a8abe90514610998578063a9059cbb146109ab578063ad00a5a4146109be578063b224e735146109d1578063b3c4850a146109da578063b3d7f6b9146109ed57600080fd5b806394bf804d116102aa57806394bf804d1461091557806395d89b4114610928578063979abb2514610930578063979b0895146109435780639aca06dc14610956578063a457c2d71461095f578063a481c14b1461097257600080fd5b806379431d9c146108c35780637dfc6922146108d65780637fcff2af146108df5780638d6cb288146108e85780638da5cb5b146108f1578063940a4e451461090257600080fd5b8063395093511161045a578063600d4c26116103b65780636ee432f2116103645780636ee432f21461086757806370a082311461087a578063715018a61461088d5780637361a5441461089557806375cd9da9146108a857806376671808146108b157806378b4330f146108ba57600080fd5b8063600d4c26146107f357806361a8c8c4146108065780636445ec001461080f57806366d8ecf11461081757806369994255146108205780636d6ca319146108295780636e553f651461085457600080fd5b80634cdad506116104135780634cdad506146106215780634ea0ddf7146107aa57806353409be2146107b357806358aba00f146107bc5780635a6953d3146107cf5780635cd8a76b146107e25780635e93f860146107ea57600080fd5b8063395093511461074d5780633d1c8013146107605780633d7e458714610773578063402d267d1461077b578063449957c11461078e578063481c6a751461079757600080fd5b80630fcc6f3111610509578063215e2fae116104c2578063215e2fae146106ed57806322b2ef85146106f657806323b872dd146106ff5780632c135b9314610712578063313ce5671461071a5780633623fa361461073457806338d52e0f1461073c57600080fd5b80630fcc6f311461068d578063104aeef81461069657806318160ddd1461069f5780631f91f287146106a757806320124bce146106d257806320e70a56146106da57600080fd5b806307a2d13a1161056657806307a2d13a14610621578063095ea7b3146106345780630a28a477146106575780630d5c44301461066a5780630dfb5287146106735780630e15561a1461067b5780630fc293491461068457600080fd5b8062d21ba5146105ad57806301e1d114146105c25780630287c573146105dd5780630307604f146105f05780630344e8a3146105f957806306fdde031461060c575b600080fd5b6105c06105bb366004614a67565b610cad565b005b6105ca611079565b6040519081526020015b60405180910390f35b6105c06105eb366004614b49565b6110eb565b6105ca60f05481565b6105c0610607366004614b62565b6111ab565b61061461153c565b6040516105d49190614bb6565b6105ca61062f366004614b49565b6115ce565b610647610642366004614be9565b6115e1565b60405190151581526020016105d4565b6105ca610665366004614b49565b6115f9565b6105ca60e85481565b6105c0611606565b6105ca60ec5481565b6105ca60ed5481565b6105ca60eb5481565b6105ca60e25481565b6035546105ca565b60cd546106ba906001600160a01b031681565b6040516001600160a01b0390911681526020016105d4565b6105ca6116c1565b6105c06106e8366004614c15565b6116fe565b6105ca60e55481565b6105ca60e35481565b61064761070d366004614c32565b611794565b6105ca6117ee565b610722611805565b60405160ff90911681526020016105d4565b6105c061180f565b6065546001600160a01b03166106ba565b61064761075b366004614be9565b61185b565b6105c061076e366004614b49565b61187d565b6105c0611932565b6105ca610789366004614c15565b611981565b6105ca60d15481565b60ca546106ba906001600160a01b031681565b6105ca60db5481565b6105ca60ee5481565b6105c06107ca366004614c15565b611996565b60cc546106ba906001600160a01b031681565b6105c0611a6a565b6105ca60dd5481565b6105c0610801366004614b49565b611b1b565b6105ca60e05481565b6105c0611bd0565b6105ca60e75481565b6105ca60e95481565b6105ca610837366004614be9565b60e460209081526000928352604080842090915290825290205481565b6105ca610862366004614b62565b611c70565b6105ca610875366004614b49565b611d3c565b6105ca610888366004614c15565b611d53565b6105c0611d6e565b6105ca6108a3366004614c73565b611d80565b6105ca60d55481565b6105ca60df5481565b6105ca60ce5481565b60c9546106ba906001600160a01b031681565b6105ca60d85481565b6105ca60dc5481565b6105ca60f15481565b6097546001600160a01b03166106ba565b6105c0610910366004614b49565b611f4c565b6105ca610923366004614b62565b612010565b6106146120d2565b6105c061093e366004614b49565b6120e1565b6105ca610951366004614b49565b6121b4565b6105ca60ef5481565b61064761096d366004614be9565b612209565b6105c0610980366004614b62565b61228f565b6105c0610993366004614c95565b612415565b6105c06109a6366004614b62565b612574565b6106476109b9366004614be9565b612783565b6105ca6109cc366004614c15565b6127cc565b6105ca60de5481565b6105ca6109e8366004614cbc565b61284d565b6105ca6109fb366004614b49565b6129c1565b6105ca610a0e366004614cf5565b6129ce565b610a60610a21366004614b49565b60e6602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909186565b604080516001600160a01b0390971687526020870195909552938501929092526060840152608083015260a082015260c0016105d4565b6105ca610aa5366004614cf5565b612ad8565b6105ca612bd6565b6105ca612bee565b6105ca610ac8366004614c15565b612c5f565b6105ca610adb366004614b49565b612c8e565b6105ca610aee366004614c15565b612c9b565b6105c0610b01366004614b49565b612ca9565b6105c0610b14366004614b49565b612d56565b6105ca610b27366004614c73565b612e0d565b6105c0610b3a366004614c15565b612ea2565b6105c0610b4d366004614b49565b612f31565b6105ca612f88565b6105ca610b68366004614c15565b61302c565b6105ca60d45481565b6105ca610b84366004614d2c565b6130e5565b6105ca60da5481565b6105ca60d65481565b6105c0610ba9366004614c15565b613110565b6105ca61320d565b6105c0610bc4366004614b62565b613229565b610bdc610bd7366004614b49565b6133ee565b6040516105d4919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b6105ca610c3a366004614cbc565b613492565b6105ca60d95481565b6105ca60d05481565b6105c0610c5f366004614c15565b6135fe565b6105ca6136bc565b6105c0610c7a366004614d5a565b6136c6565b60cb546106ba906001600160a01b031681565b6105ca60d75481565b6105ca60e15481565b6105ca60ea5481565b600054610100900460ff1615808015610ccd5750600054600160ff909116105b80610ce75750303b158015610ce7575060005460ff166001145b610d0c5760405162461bcd60e51b8152600401610d0390614d76565b60405180910390fd5b6000805460ff191660011790558015610d2f576000805461ff0019166101001790555b8a516001600160a01b031615801590610d54575060208b01516001600160a01b031615155b8015610d6c575060408b01516001600160a01b031615155b8015610d84575060608b01516001600160a01b031615155b8015610daa57508a604001516001600160a01b03168b602001516001600160a01b031614155b8015610dd057508a606001516001600160a01b03168b604001516001600160a01b031614155b8015610de8575060808b01516001600160a01b031615155b8015610e00575060a08b01516001600160a01b031615155b8015610e18575060c08b01516001600160a01b031615155b8015610e365750610e32600a670de0b6b3a7640000614df0565b8810155b8015610e46575086516020880151115b8015610e645750610e60670de0b6b3a76400006032614e1a565b8611155b8015610e825750610e7e670de0b6b3a76400006019614e1a565b8511155b8015610ea05750610e9c6014670de0b6b3a7640000614df0565b8411155b8015610ebe5750610eba670de0b6b3a7640000600a614e1a565b8311155b8015610edc5750610ed8670de0b6b3a76400006064614e1a565b8210155b610f175760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610d03565b610f218d8d61374e565b8a51610f2c90613783565b610f398b602001516137b3565b60808b015160c980546001600160a01b03199081166001600160a01b039384161790915560408d015160ca8054831691841691909117905560608d015160cb8054831691841691909117905560a08d015160cc8054831691841691909117905560c08d015160cd8054909216921691909117905560ce8a905560d089905560d1889055610fc960d28860026147e1565b5060d486905560d585905560d684905560d783905560d8829055670de0b6b3a764000060d955600160df8190554260e05560408051606081018252600380825260026020830152918101929092526110239160cf9161481f565b50801561106a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6065546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190614e31565b905090565b60ca546001600160a01b0316336001600160a01b03161461111e5760405162461bcd60e51b8152600401610d0390614e4a565b611131670de0b6b3a76400006032614e1a565b8111156111505760405162461bcd60e51b8152600401610d0390614e70565b60d4819055604080518181526017918101919091527606d6178537570706c79496e6372656173654461696c795604c1b6060820152602081018290526000805160206153c4833981519152906080015b60405180910390a150565b600082815260e660205260408120903360c9546040516331a9108f60e11b8152600481018790529192506000916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190614e93565b9050816001600160a01b0316816001600160a01b031614806112c5575060c95460405163020604bf60e21b8152600481018790526001600160a01b0384811692169063081812fc90602401602060405180830381865afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190614e93565b6001600160a01b0316145b80611341575060c95460405163e985e9c560e01b81526001600160a01b03838116600483015284811660248301529091169063e985e9c590604401602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190614eb0565b61135d5760405162461bcd60e51b8152600401610d0390614ed2565b826005015483600401546113719190614ef7565b4210156113af5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d5539313d0d2d15160a21b6044820152606401610d03565b60006113d4670de0b6b3a76400006113c660355490565b600387015491906001613805565b90508060db60008282546113e89190614f0a565b909155506113f69050612bd6565b60db5413156114175760405162461bcd60e51b8152600401610d0390614f32565b60c954604051630852cd8d60e31b8152600481018890526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561145d57600080fd5b505af1158015611471573d6000803e3d6000fd5b505050508060da60008282546114879190614f0a565b909155506114959050613864565b836003015460ed60008282546114ab9190614f0a565b9091555050600384015460ee80546000906114c7908490614f5d565b925050819055506114dd308686600101546138c8565b816001600160a01b0316856001600160a01b0316846001600160a01b03167fe37405a4f414fe3119839681cc26ea3462fc575fd2f81734417e52144d3f34b9898860405161152c929190614f70565b60405180910390a4505050505050565b60606036805461154b90614fba565b80601f016020809104026020016040519081016040528092919081815260200182805461157790614fba565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b5050505050905090565b60006115db826000613a5a565b92915050565b6000336115ef818585613a9b565b5060019392505050565b60006115db826001613bbf565b60cd5460408051600481526024810182526020810180516001600160e01b031663bef35b7960e01b17905290516000926001600160a01b03169161164991614fee565b6000604051808303816000865af19150503d8060008114611686576040519150601f19603f3d011682016040523d82523d6000602084013e61168b565b606091505b50509050806116be576040517f46f2d6138acb3be39ad6ae5c9279b648c2a2c68743d0ddc18cc3a81cedecebd590600090a15b50565b6000670de0b6b3a76400006116d560355490565b60da546116e0612bd6565b6116ea919061500a565b6116f49190614e1a565b6110e69190614df0565b611706613bdb565b6001600160a01b03811661172c5760405162461bcd60e51b8152600401610d039061502a565b60cd80546001600160a01b0319166001600160a01b03831690811790915560408051818152601191810191909152701bdc195b951c9859195cd41b9b11995959607a1b60608201526020810191909152600080516020615404833981519152906080016111a0565b6000816117a085611d53565b6117aa9190614f5d565b6117b3856127cc565b11156117d15760405162461bcd60e51b8152600401610d039061504d565b6117dc843384613c35565b6115ef8484846138c8565b9392505050565b6000670de0b6b3a764000060d9546116ea60355490565b60006110e6613ca9565b6201518060de54426118219190614f5d565b1061185957600060dd8190554260de556040517f27496921ae2aa4b5647b6540dbd476c9929dcf0a56ab8a3e529eb38dba384db19190a15b565b6000336115ef81858561186e83836130e5565b6118789190614ef7565b613a9b565b60ca546001600160a01b0316336001600160a01b0316146118b05760405162461bcd60e51b8152600401610d0390614e4a565b6118c3600a670de0b6b3a7640000614df0565b8110156118e25760405162461bcd60e51b8152600401610d0390615079565b60d181905560408051818152601391810191909152726d61786461696c79416363506e6c44656c746160681b6060820152602081018290526000805160206153c4833981519152906080016111a0565b600061193c613cc3565b9050611947816121b4565b60f081905560f18290556040519081527f9551c7fda0233728a7b7eae3d388b53a068086c3f7d613bdf74e6e58dd6b41ec906020016111a0565b60006115db61198f83612c5f565b6000613a5a565b61199e613bdb565b6001600160a01b0381166119c45760405162461bcd60e51b8152600401610d039061502a565b6097546001600160a01b038281169116148015906119f0575060cb546001600160a01b03828116911614155b611a0c5760405162461bcd60e51b8152600401610d039061509c565b60ca80546001600160a01b0319166001600160a01b038316908117909155604080518181526007918101919091526636b0b730b3b2b960c91b60608201526020810191909152600080516020615404833981519152906080016111a0565b600054600290610100900460ff16158015611a8c575060005460ff8083169116105b611aa85760405162461bcd60e51b8152600401610d0390614d76565b6000805461ffff191660ff831617610100179055611ac4611932565b60ec5460ea6000828254611ad89190614ef7565b90915550506000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016111a0565b60ca546001600160a01b0316336001600160a01b031614611b4e5760405162461bcd60e51b8152600401610d0390614e4a565b611b616014670de0b6b3a7640000614df0565b811115611b805760405162461bcd60e51b8152600401610d0390614e70565b60d6819055604080518181526013918101919091527206d6178537570706c794d696e744461696c795606c1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b6201518060e35442611be29190614f5d565b1061185957611bfa670de0b6b3a76400006064614e1a565b60d454611c10670de0b6b3a76400006064614e1a565b611c1a9190614ef7565b603554611c279190614e1a565b611c319190614df0565b60e28190554260e3556040519081527fd103db6eec024592fa6d47db028ec6408076ac4762eb021a6e52b525828bab9b906020015b60405180910390a1565b600082600060d95411611c955760405162461bcd60e51b8152600401610d03906150c1565b60008111611cb55760405162461bcd60e51b8152600401610d03906150e2565b611cbe83611981565b841115611d0d5760405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606401610d03565b6000611d1885612c8e565b9050611d2681866001613d20565b611d3233858784613dfc565b91505b5092915050565b60d28160028110611d4c57600080fd5b0154905081565b6001600160a01b031660009081526033602052604090205490565b611d76613bdb565b61185960006137b3565b60cd5460009033906001600160a01b03168114611dcf5760405162461bcd60e51b815260206004820152600d60248201526c13d3931657d4139317d1915151609a1b6044820152606401610d03565b6000611ddb858561500a565b90506000611de860355490565b90506000611e48670de0b6b3a76400008360db54611e04612bd6565b611e0e919061500a565b611e189190614e1a565b611e229190614df0565b670de0b6b3a76400008460d054611e399190614e1a565b611e439190614df0565b613e6c565b9050808313611e575782611e59565b805b925081611e6e670de0b6b3a764000085615103565b611e789190615133565b60db6000828254611e899190614f0a565b925050819055508260ed6000828254611ea29190614f0a565b909155505060db5460da55611eb5613864565b60df8054906000611ec583615161565b90915550504260e055611ed88388614f0a565b60e155611ee3611bd0565b60df5460e15460da54604080518b8152602081018b90529081019290925260608201526001600160a01b038616907f115621a72d6f59323a1d752b116219634bc004cadb85d6bdc8e7eb254905722d9060800160405180910390a3505060e15495945050505050565b33611f60611f58613e82565b823085613e96565b603554611f75670de0b6b3a764000084614e1a565b611f7f9190614df0565b60dc6000828254611f909190614ef7565b90915550611f9e9050613864565b8160ec6000828254611fb09190614ef7565b925050819055508160ea6000828254611fc99190614ef7565b90915550506040518281526001600160a01b038216907fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea69060200160405180910390a25050565b600082600060d954116120355760405162461bcd60e51b8152600401610d03906150c1565b600081116120555760405162461bcd60e51b8152600401610d03906150e2565b61205e83612c5f565b8411156120ad5760405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606401610d03565b60006120b8856129c1565b90506120c685826001613d20565b611d3233858388613dfc565b60606037805461154b90614fba565b60ca546001600160a01b0316336001600160a01b0316146121145760405162461bcd60e51b8152600401610d0390614e4a565b612127670de0b6b3a7640000600a614e1a565b81111561216b5760405162461bcd60e51b8152602060048201526012602482015271105093d59157d3505617d11254d0d3d5539560721b6044820152606401610d03565b60d781905560408051818152600c918101919091526b06d6178446973636f756e74560a41b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60006121c86121c16117ee565b6001613f01565b701d6329f1c35ca4bfabb9f561000000000060f154846121e89190614f5d565b6121f29190614e1a565b6121fc9190614df0565b60f0546115db9190614ef7565b6000338161221782866130e5565b9050838110156122775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d03565b6122848286868403613a9b565b506001949350505050565b336122a361229b613e82565b823086613e96565b60da54839060001380156122b95750600060db54125b156123155760006064670de0b6b3a764000060d554876122d99190614e1a565b6122e39190614df0565b6122ed9190614df0565b90508060e760008282546123019190614ef7565b9091555061231190508183614f5d565b9150505b600061232060355490565b612332670de0b6b3a764000084614e1a565b61233c9190614df0565b90508060db6000828254612350919061500a565b9091555061235e905061180f565b8060dd6000828254612370919061500a565b925050819055508160ed6000828254612389919061500a565b925050819055508160eb60008282546123a2919061500a565b909155506123b09050611606565b6123b8611bd0565b836001600160a01b0316836001600160a01b03167f2083893e39f8ae736fed502f7e149cc5bfe6159878615fae685a9a98bc452d5a8785604051612406929190918252602082015260400190565b60405180910390a35050505050565b6001600160a01b038216600090815260e4602090815260408083208484529091529020548311156124845760405162461bcd60e51b81526020600482015260196024820152781353d49157d512105397d5d2551211149055d7d05353d55395603a1b6044820152606401610d03565b33600061249184836130e5565b9050836001600160a01b0316826001600160a01b031614806124be57506000811180156124be5750848110155b6124da5760405162461bcd60e51b8152600401610d0390614ed2565b6001600160a01b038416600090815260e4602090815260408083208684529091528120805487929061250d908490614f5d565b9250508190555082846001600160a01b0316836001600160a01b03167f443ccdbbbde35bd48740a9ea14c47318b735db4631ed1ebcdaaaa9f4636c84ea8860df54604051612565929190918252602082015260400190565b60405180910390a45050505050565b60cd60009054906101000a90046001600160a01b03166001600160a01b031663b8feee646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb9190614e31565b156126275760405162461bcd60e51b815260206004820152600c60248201526b08a9c88be9e8cbe8aa09e86960a31b6044820152606401610d03565b33600061263483836130e5565b9050826001600160a01b0316826001600160a01b0316148061266157506000811180156126615750838110155b61267d5760405162461bcd60e51b8152600401610d0390614ed2565b61268683611d53565b84612690856127cc565b61269a9190614ef7565b11156126dc5760405162461bcd60e51b81526020600482015260116024820152704d4f52455f5448414e5f42414c414e434560781b6044820152606401610d03565b60006126e6612f88565b60df546126f39190614ef7565b6001600160a01b038516600090815260e46020908152604080832084845290915281208054929350879290919061272b908490614ef7565b9250508190555080846001600160a01b0316846001600160a01b03167f21b8e5e36008677ea26efbbc967e568e01b127f731ed0fda0a8685fda37d0d5f8860df54604051612565929190918252602082015260400190565b6000338261279082611d53565b61279a9190614f5d565b6127a3826127cc565b11156127c15760405162461bcd60e51b8152600401610d039061504d565b6115ef8185856138c8565b60df546000905b60cf6000815481106127e7576127e7614e04565b906000526020600020015460df546127ff9190614ef7565b8111612847576001600160a01b038316600090815260e4602090815260408083208484529091529020546128339083614ef7565b91508061283f81615161565b9150506127d3565b50919050565b600083600060d954116128725760405162461bcd60e51b8152600401610d03906150c1565b600081116128925760405162461bcd60e51b8152600401610d03906150e2565b83600060d754116128b55760405162461bcd60e51b8152600401610d039061517a565b60ce548110156128d75760405162461bcd60e51b8152600401610d03906151a6565b6301e133808111156128fb5760405162461bcd60e51b8152600401610d03906151d7565b61290484612c5f565b8611156129485760405162461bcd60e51b815260206004820152601260248201527109a929ca8be9a9ea48abea890829cbe9a82b60731b6044820152606401610d03565b6000612953876129c1565b90506129b68161296a612964612bee565b89612e0d565b61297d670de0b6b3a76400006064614e1a565b6129879190614ef7565b61299a670de0b6b3a76400006064614e1a565b6129a49085614e1a565b6129ae9190614df0565b898989613f10565b979650505050505050565b60006115db826001613a5a565b600083600060d954116129f35760405162461bcd60e51b8152600401610d03906150c1565b60008111612a135760405162461bcd60e51b8152600401610d03906150e2565b612a1c83612c9b565b851115612a6b5760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606401610d03565b6000612a76866115f9565b6001600160a01b038516600090815260e46020908152604080832060df548452909152812080549293508392909190612ab0908490614f5d565b90915550612ac2905081876000613d20565b612acf33868689856140cb565b95945050505050565b600083600060d95411612afd5760405162461bcd60e51b8152600401610d03906150c1565b60008111612b1d5760405162461bcd60e51b8152600401610d03906150e2565b612b268361302c565b851115612b755760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606401610d03565b6001600160a01b038316600090815260e46020908152604080832060df54845290915281208054879290612baa908490614f5d565b9091555060009050612bbb866115ce565b9050612bc986826000613d20565b612acf338686848a6140cb565b600060dc54670de0b6b3a76400006110e69190614ef7565b600080612bf9612bd6565b905080670de0b6b3a7640000600060da5413612c2d5760da54612c1e90600019615103565b612c289084614ef7565b612c3a565b60da54612c3a9084614f5d565b612c45906064614e1a565b612c4f9190614e1a565b612c599190614df0565b91505090565b60008060da5413612c72576000196115db565b612c8160e254611e4360355490565b60e2546115db9190614f5d565b60006115db826000613bbf565b60006115db61198f8361302c565b60ca546001600160a01b0316336001600160a01b031614612cdc5760405162461bcd60e51b8152600401610d0390614e4a565b612cef670de0b6b3a76400006019614e1a565b811115612d0e5760405162461bcd60e51b8152600401610d0390614e70565b60d581905560408051818152600b918101919091526a06c6f737365734275726e560ac1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60ca546001600160a01b0316336001600160a01b031614612d895760405162461bcd60e51b8152600401610d0390614e4a565b612d9c670de0b6b3a76400006064614e1a565b811015612dbb5760405162461bcd60e51b8152600401610d0390615079565b60d8819055604080518181526015918101919091527406d6178446973636f756e745468726573686f6c645605c1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60006301e1338082612e28670de0b6b3a76400006064614e1a565b851115612e8a5760d854851115612e40576000612e8e565b612e53670de0b6b3a76400006064614e1a565b60d854612e609190614f5d565b8560d854612e6e9190614f5d565b60d754612e7b9190614e1a565b612e859190614df0565b612e8e565b60d7545b612e989190614e1a565b6117e79190614df0565b612eaa613bdb565b6001600160a01b038116612ed05760405162461bcd60e51b8152600401610d039061502a565b60cc80546001600160a01b0319166001600160a01b03831690811790915560408051818152600a91810191909152693837362430b7323632b960b11b60608201526020810191909152600080516020615404833981519152906080016111a0565b612f39613bdb565b60d081905560408051818152601291810191909152716d61784163634f70656e506e6c44656c746160701b6060820152602081018290526000805160206153c4833981519152906080016111a0565b600080612f93612bee565b90506000612fae82611e43670de0b6b3a76400006064614e1a565b612fb89083614f5d565b60d35490915081116130055760d2548111612ff15760cf600081548110612fe157612fe1614e04565b9060005260206000200154613025565b60cf600181548110612fe157612fe1614e04565b60cf60028154811061301957613019614e04565b90600052602060002001545b9250505090565b60cd5460408051632e3fbb9960e21b815290516000926001600160a01b03169163b8feee649160048083019260209291908290030181865afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309a9190614e31565b156130a65760006115db565b6001600160a01b038216600090815260e46020908152604080832060df5484529091529020546115db9060016130db60355490565b611e439190614f5d565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60ca546001600160a01b0316336001600160a01b0316146131435760405162461bcd60e51b8152600401610d0390614e4a565b6001600160a01b0381166131695760405162461bcd60e51b8152600401610d039061502a565b6097546001600160a01b03828116911614801590613195575060ca546001600160a01b03828116911614155b6131b15760405162461bcd60e51b8152600401610d039061509c565b60cb80546001600160a01b0319166001600160a01b038316908117909155604080518181526005918101919091526430b236b4b760d91b60608201526020810191909152600080516020615404833981519152906080016111a0565b6000670de0b6b3a764000061322160355490565b6116ea612bd6565b60cc5433906001600160a01b031681146132805760405162461bcd60e51b815260206004820152601860248201527727a7262cafaa2920a224a723afa827262fa420a7222622a960411b6044820152606401610d03565b60006132a1670de0b6b3a764000061329760355490565b8691906001613805565b90508060db60008282546132b59190614f0a565b909155506132c39050612bd6565b60db5413156132e45760405162461bcd60e51b8152600401610d0390614f32565b6132ec61180f565b8060dd60008282546132fe9190614f0a565b909155505060d15460dd5413156133485760405162461bcd60e51b815260206004820152600e60248201526d13505617d5d15512131657d4139360921b6044820152606401610d03565b8360ed600082825461335a9190614f0a565b925050819055508360eb60008282546133739190614f0a565b909155506133819050611606565b613389611bd0565b61339b613394613e82565b8486614168565b826001600160a01b0316826001600160a01b03167f17ffe64fb2212f31d60284d6471e06abb7db8d66f0a60f9b884b29f1597d05da866040516133e091815260200190565b60405180910390a350505050565b6134306040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260e66020908152604091829020825160c08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b600083600060d954116134b75760405162461bcd60e51b8152600401610d03906150c1565b600081116134d75760405162461bcd60e51b8152600401610d03906150e2565b83600060d754116134fa5760405162461bcd60e51b8152600401610d039061517a565b60ce5481101561351c5760405162461bcd60e51b8152600401610d03906151a6565b6301e133808111156135405760405162461bcd60e51b8152600401610d03906151d7565b6000613555670de0b6b3a76400006064614e1a565b613566613560612bee565b88612e0d565b613579670de0b6b3a76400006064614e1a565b6135839190614ef7565b61358d9089614e1a565b6135979190614df0565b90506135a285611981565b8111156135e95760405162461bcd60e51b81526020600482015260156024820152740888aa09ea692a8be9a9ea48abea890829cbe9a82b605b1b6044820152606401610d03565b6129b681886135f784612c8e565b8989613f10565b613606613bdb565b6001600160a01b03811661366b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d03565b60ca546001600160a01b03828116911614801590613697575060cb546001600160a01b03828116911614155b6136b35760405162461bcd60e51b8152600401610d039061509c565b6116be816137b3565b60006110e66116c1565b6136ce613bdb565b80516020820151116137115760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f56414c55455360a01b6044820152606401610d03565b61371e60d28260026147e1565b507f8472b50e25b52d8de564f9719bd793b18d83cf59ce4d309e211fb6a4fdc14811816040516111a09190615208565b600054610100900460ff166137755760405162461bcd60e51b8152600401610d0390615239565b61377f828261419d565b5050565b600054610100900460ff166137aa5760405162461bcd60e51b8152600401610d0390615239565b6116be816141dd565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080613813868686614262565b9050600183600281111561382957613829615284565b14801561384657506000848061384157613841614dc4565b868809115b1561385957613856600182614ef7565b90505b90505b949350505050565b61386c611932565b600060da541361387d576000613881565b60da545b613889612bd6565b6138939190614f5d565b60d98190556040519081527f547c25b7a5677a006ff044a0e4b5e699598339825e7b42d3dc645117ceee805090602001611c66565b6001600160a01b03831661392c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d03565b6001600160a01b03821661398e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d03565b6001600160a01b03831660009081526033602052604090205481811015613a065760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d03565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591516000805160206153e4833981519152906133e09086815260200190565b50505050565b600060001983148015613a775750670de0b6b3a764000060d95410155b15613a835750816115db565b60d9546117e7908490670de0b6b3a764000085613805565b6001600160a01b038316613afd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d03565b6001600160a01b038216613b5e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d03565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60d9546000906117e7908490670de0b6b3a76400009085613805565b6097546001600160a01b031633146118595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d03565b6000613c4184846130e5565b90506000198114613a545781811015613c9c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d03565b613a548484848403613a9b565b6000806065546110e69190600160a01b900460ff1661529a565b600061a4b1461480613cd7575062066eed46145b15613d1b5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b504390565b6000613d2b60355490565b9050600060db541215613d765781613d4c57613d478482614f5d565b613d56565b613d568482614ef7565b8160db54613d649190615103565b613d6e9190615133565b60db55613dcb565b600060db541315613dcb5781613d8e57600019613d91565b60015b8160ed5486613da09190615103565b613daa9190615133565b613db49190615103565b60ed6000828254613dc59190614f0a565b90915550505b81613de3578260ea54613dde9190614f5d565b613df1565b8260ea54613df19190614ef7565b60ea55613a54611932565b606554613e14906001600160a01b0316853085613e96565b613e1e838261434c565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516133e0929190918252602082015260400190565b6000818310613e7b57816117e7565b5090919050565b60006110e66065546001600160a01b031690565b6040516001600160a01b0380851660248301528316604482015260648101829052613a549085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143fb565b6000818311613e7b57816117e7565b6000848611613f4f5760405162461bcd60e51b815260206004820152600b60248201526a1393d7d11254d0d3d5539560aa1b6044820152606401610d03565b600060e560008154613f6090615161565b918290555090506000613f738789614f5d565b600083815260e66020526040902080546001600160a01b0319166001600160a01b0387161781556001808201899055600282018a9055600382018390554260048301556005820188905591925090613fce9088908a90613d20565b33613fdb81308b8b613dfc565b8260ef6000828254613fed9190614ef7565b925050819055508260ee60008282546140069190614ef7565b909155505060c9546040516340c10f1960e01b81526001600160a01b03888116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b15801561405957600080fd5b505af115801561406d573d6000803e3d6000fd5b505083546040516001600160a01b03918216935090841691507f5d26cdffbd8401ba2a961d2094f7f008ee7bd735ac02a949721ee0fd0f0d5afc906140b59088908790614f70565b60405180910390a3509198975050505050505050565b826001600160a01b0316856001600160a01b0316146140ef576140ef838683613c35565b6140f983826144d0565b606554614110906001600160a01b03168584614168565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051612565929190918252602082015260400190565b6040516001600160a01b03831660248201526044810182905261419890849063a9059cbb60e01b90606401613eca565b505050565b600054610100900460ff166141c45760405162461bcd60e51b8152600401610d0390615239565b60366141d08382615303565b5060376141988282615303565b600054610100900460ff166142045760405162461bcd60e51b8152600401610d0390615239565b600080614210836145f2565b9150915081614220576012614222565b805b606580546001600160a01b039095166001600160a01b031960ff93909316600160a01b02929092166001600160a81b031990951694909417179092555050565b600080806000198587098587029250828110838203039150508060000361429c5783828161429257614292614dc4565b04925050506117e7565b8084116142e35760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610d03565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b0382166143a25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d03565b80603560008282546143b49190614ef7565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481526000805160206153e4833981519152910160405180910390a35050565b6000614450826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146ce9092919063ffffffff16565b90508051600014806144715750808060200190518101906144719190614eb0565b6141985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d03565b6001600160a01b0382166145305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d03565b6001600160a01b038216600090815260336020526040902054818110156145a45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d03565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192916000805160206153e4833981519152910160405180910390a3505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b0387169161463991614fee565b600060405180830381855afa9150503d8060008114614674576040519150601f19603f3d011682016040523d82523d6000602084013e614679565b606091505b509150915081801561468d57506020815110155b156146c1576000818060200190518101906146a89190614e31565b905060ff81116146bf576001969095509350505050565b505b5060009485945092505050565b606061385c848460008585600080866001600160a01b031685876040516146f59190614fee565b60006040518083038185875af1925050503d8060008114614732576040519150601f19603f3d011682016040523d82523d6000602084013e614737565b606091505b50915091506129b687838387606083156147b25782516000036147ab576001600160a01b0385163b6147ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d03565b508161385c565b61385c83838151156147c75781518083602001fd5b8060405162461bcd60e51b8152600401610d039190614bb6565b826002810192821561480f579160200282015b8281111561480f5782518255916020019190600101906147f4565b5061481b92915061485f565b5090565b82805482825590600052602060002090810192821561480f579160200282015b8281111561480f578251829060ff1690559160200191906001019061483f565b5b8082111561481b5760008155600101614860565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261489b57600080fd5b813567ffffffffffffffff808211156148b6576148b6614874565b604051601f8301601f19908116603f011681019082821181831017156148de576148de614874565b816040528381528660208588010111156148f757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146116be57600080fd5b803561493781614917565b919050565b600060e0828403121561494e57600080fd5b60405160e0810181811067ffffffffffffffff8211171561497157614971614874565b604052905080823561498281614917565b8152602083013561499281614917565b602082015260408301356149a581614917565b604082015260608301356149b881614917565b60608201526149c96080840161492c565b60808201526149da60a0840161492c565b60a08201526149eb60c0840161492c565b60c08201525092915050565b600082601f830112614a0857600080fd5b6040516040810181811067ffffffffffffffff82111715614a2b57614a2b614874565b8060405250806040840185811115614a4257600080fd5b845b81811015614a5c578035835260209283019201614a44565b509195945050505050565b6000806000806000806000806000806000806102608d8f031215614a8a57600080fd5b67ffffffffffffffff8d351115614aa057600080fd5b614aad8e8e358f0161488a565b9b5067ffffffffffffffff60208e01351115614ac857600080fd5b614ad88e60208f01358f0161488a565b9a50614ae78e60408f0161493c565b99506101208d013598506101408d013597506101608d01359650614b0f8e6101808f016149f7565b95506101c08d013594506101e08d013593506102008d013592506102208d013591506102408d013590509295989b509295989b509295989b565b600060208284031215614b5b57600080fd5b5035919050565b60008060408385031215614b7557600080fd5b823591506020830135614b8781614917565b809150509250929050565b60005b83811015614bad578181015183820152602001614b95565b50506000910152565b6020815260008251806020840152614bd5816040850160208701614b92565b601f01601f19169190910160400192915050565b60008060408385031215614bfc57600080fd5b8235614c0781614917565b946020939093013593505050565b600060208284031215614c2757600080fd5b81356117e781614917565b600080600060608486031215614c4757600080fd5b8335614c5281614917565b92506020840135614c6281614917565b929592945050506040919091013590565b60008060408385031215614c8657600080fd5b50508035926020909101359150565b600080600060608486031215614caa57600080fd5b833592506020840135614c6281614917565b600080600060608486031215614cd157600080fd5b83359250602084013591506040840135614cea81614917565b809150509250925092565b600080600060608486031215614d0a57600080fd5b833592506020840135614d1c81614917565b91506040840135614cea81614917565b60008060408385031215614d3f57600080fd5b8235614d4a81614917565b91506020830135614b8781614917565b600060408284031215614d6c57600080fd5b6117e783836149f7565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614dff57614dff614dc4565b500490565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176115db576115db614dda565b600060208284031215614e4357600080fd5b5051919050565b6020808252600c908201526b27a7262cafa6a0a720a3a2a960a11b604082015260600190565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b600060208284031215614ea557600080fd5b81516117e781614917565b600060208284031215614ec257600080fd5b815180151581146117e757600080fd5b6020808252600b908201526a1393d517d0531313d5d15160aa1b604082015260600190565b808201808211156115db576115db614dda565b8082018281126000831280158216821582161715614f2a57614f2a614dda565b505092915050565b6020808252601190820152704e4f545f454e4f5547485f41535345545360781b604082015260600190565b818103818111156115db576115db614dda565b91825280546001600160a01b03166020830152600181015460408301526002810154606083015260038101546080830152600481015460a08301526005015460c082015260e00190565b600181811c90821680614fce57607f821691505b60208210810361284757634e487b7160e01b600052602260045260246000fd5b60008251615000818460208701614b92565b9190910192915050565b8181036000831280158383131683831282161715611d3557611d35614dda565b6020808252600990820152680414444524553535f360bc1b604082015260600190565b60208082526012908201527114115391125391d7d5d2551211149055d05360721b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b6020808252600b908201526a57524f4e475f56414c554560a81b604082015260600190565b602080825260079082015266050524943455f360cc1b604082015260600190565b602080825260079082015266056414c55455f360cc1b604082015260600190565b80820260008212600160ff1b8414161561511f5761511f614dda565b81810583148215176115db576115db614dda565b60008261514257615142614dc4565b600160ff1b82146000198414161561515c5761515c614dda565b500590565b60006001820161517357615173614dda565b5060010190565b6020808252601290820152711393d7d050d512559157d11254d0d3d5539560721b604082015260600190565b6020808252601790820152762122a627abafa6a4a72fa627a1a5afa22aa920aa24a7a760491b604082015260600190565b60208082526017908201527620a127ab22afa6a0ac2fa627a1a5afa22aa920aa24a7a760491b604082015260600190565b60408101818360005b6002811015615230578151835260209283019290910190600101615211565b50505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b60ff81811683821601908111156115db576115db614dda565b601f821115614198576000816000526020600020601f850160051c810160208610156152dc5750805b601f850160051c820191505b818110156152fb578281556001016152e8565b505050505050565b815167ffffffffffffffff81111561531d5761531d614874565b6153318161532b8454614fba565b846152b3565b602080601f831160018114615366576000841561534e5750858301515b600019600386901b1c1916600185901b1785556152fb565b600085815260208120601f198616915b8281101561539557888601518255948401946001909101908401615376565b50858210156153b35787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60f89fdb372abe626eac485ef96b2a09f1cfbd7f225dd1e2b491a2b4069c2376a2646970667358221220e343fcef127e5a7782fc33e9f0bae55d7969c9a0ff9c1955e6b4326a6d568bd364736f6c63430008170033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106105a85760003560e01c806379431d9c116102f1578063ce96cb7711610193578063e5328e06116100ef578063f2fde38b1161009d578063f2fde38b14610c51578063f457fa9a14610c64578063f5521eaa14610c6c578063f851a44014610c7f578063f8fb10f714610c92578063faf33f2914610c9b578063ff50abdc14610ca457600080fd5b8063e5328e0614610bae578063e66a6e3b14610bb6578063e783967614610bc9578063e8e4311014610c2c578063ea5f2bba14610c3f578063ef8b30f714610acd578063f0a7744614610c4857600080fd5b8063d8bdfd481161014c578063d8bdfd4814610b52578063d905777e14610b5a578063db0447d514610b6d578063dd62ed3e14610b76578063ddd65e3114610b89578063e255cfa314610b92578063e2f273bd14610b9b57600080fd5b8063ce96cb7714610ae0578063ce9e1b2114610af3578063cf39c2db14610b06578063d1e08c2014610b19578063d229b2dd14610b2c578063d272df1014610b3f57600080fd5b8063a50043a01161024d578063b460af94116101fb578063b460af9414610a00578063b82c589914610a13578063ba08765214610a97578063be216e8314610aaa578063c63384ab14610ab2578063c63d75b614610aba578063c6e6f59214610acd57600080fd5b8063a50043a014610985578063a8abe90514610998578063a9059cbb146109ab578063ad00a5a4146109be578063b224e735146109d1578063b3c4850a146109da578063b3d7f6b9146109ed57600080fd5b806394bf804d116102aa57806394bf804d1461091557806395d89b4114610928578063979abb2514610930578063979b0895146109435780639aca06dc14610956578063a457c2d71461095f578063a481c14b1461097257600080fd5b806379431d9c146108c35780637dfc6922146108d65780637fcff2af146108df5780638d6cb288146108e85780638da5cb5b146108f1578063940a4e451461090257600080fd5b8063395093511161045a578063600d4c26116103b65780636ee432f2116103645780636ee432f21461086757806370a082311461087a578063715018a61461088d5780637361a5441461089557806375cd9da9146108a857806376671808146108b157806378b4330f146108ba57600080fd5b8063600d4c26146107f357806361a8c8c4146108065780636445ec001461080f57806366d8ecf11461081757806369994255146108205780636d6ca319146108295780636e553f651461085457600080fd5b80634cdad506116104135780634cdad506146106215780634ea0ddf7146107aa57806353409be2146107b357806358aba00f146107bc5780635a6953d3146107cf5780635cd8a76b146107e25780635e93f860146107ea57600080fd5b8063395093511461074d5780633d1c8013146107605780633d7e458714610773578063402d267d1461077b578063449957c11461078e578063481c6a751461079757600080fd5b80630fcc6f3111610509578063215e2fae116104c2578063215e2fae146106ed57806322b2ef85146106f657806323b872dd146106ff5780632c135b9314610712578063313ce5671461071a5780633623fa361461073457806338d52e0f1461073c57600080fd5b80630fcc6f311461068d578063104aeef81461069657806318160ddd1461069f5780631f91f287146106a757806320124bce146106d257806320e70a56146106da57600080fd5b806307a2d13a1161056657806307a2d13a14610621578063095ea7b3146106345780630a28a477146106575780630d5c44301461066a5780630dfb5287146106735780630e15561a1461067b5780630fc293491461068457600080fd5b8062d21ba5146105ad57806301e1d114146105c25780630287c573146105dd5780630307604f146105f05780630344e8a3146105f957806306fdde031461060c575b600080fd5b6105c06105bb366004614a67565b610cad565b005b6105ca611079565b6040519081526020015b60405180910390f35b6105c06105eb366004614b49565b6110eb565b6105ca60f05481565b6105c0610607366004614b62565b6111ab565b61061461153c565b6040516105d49190614bb6565b6105ca61062f366004614b49565b6115ce565b610647610642366004614be9565b6115e1565b60405190151581526020016105d4565b6105ca610665366004614b49565b6115f9565b6105ca60e85481565b6105c0611606565b6105ca60ec5481565b6105ca60ed5481565b6105ca60eb5481565b6105ca60e25481565b6035546105ca565b60cd546106ba906001600160a01b031681565b6040516001600160a01b0390911681526020016105d4565b6105ca6116c1565b6105c06106e8366004614c15565b6116fe565b6105ca60e55481565b6105ca60e35481565b61064761070d366004614c32565b611794565b6105ca6117ee565b610722611805565b60405160ff90911681526020016105d4565b6105c061180f565b6065546001600160a01b03166106ba565b61064761075b366004614be9565b61185b565b6105c061076e366004614b49565b61187d565b6105c0611932565b6105ca610789366004614c15565b611981565b6105ca60d15481565b60ca546106ba906001600160a01b031681565b6105ca60db5481565b6105ca60ee5481565b6105c06107ca366004614c15565b611996565b60cc546106ba906001600160a01b031681565b6105c0611a6a565b6105ca60dd5481565b6105c0610801366004614b49565b611b1b565b6105ca60e05481565b6105c0611bd0565b6105ca60e75481565b6105ca60e95481565b6105ca610837366004614be9565b60e460209081526000928352604080842090915290825290205481565b6105ca610862366004614b62565b611c70565b6105ca610875366004614b49565b611d3c565b6105ca610888366004614c15565b611d53565b6105c0611d6e565b6105ca6108a3366004614c73565b611d80565b6105ca60d55481565b6105ca60df5481565b6105ca60ce5481565b60c9546106ba906001600160a01b031681565b6105ca60d85481565b6105ca60dc5481565b6105ca60f15481565b6097546001600160a01b03166106ba565b6105c0610910366004614b49565b611f4c565b6105ca610923366004614b62565b612010565b6106146120d2565b6105c061093e366004614b49565b6120e1565b6105ca610951366004614b49565b6121b4565b6105ca60ef5481565b61064761096d366004614be9565b612209565b6105c0610980366004614b62565b61228f565b6105c0610993366004614c95565b612415565b6105c06109a6366004614b62565b612574565b6106476109b9366004614be9565b612783565b6105ca6109cc366004614c15565b6127cc565b6105ca60de5481565b6105ca6109e8366004614cbc565b61284d565b6105ca6109fb366004614b49565b6129c1565b6105ca610a0e366004614cf5565b6129ce565b610a60610a21366004614b49565b60e6602052600090815260409020805460018201546002830154600384015460048501546005909501546001600160a01b039094169492939192909186565b604080516001600160a01b0390971687526020870195909552938501929092526060840152608083015260a082015260c0016105d4565b6105ca610aa5366004614cf5565b612ad8565b6105ca612bd6565b6105ca612bee565b6105ca610ac8366004614c15565b612c5f565b6105ca610adb366004614b49565b612c8e565b6105ca610aee366004614c15565b612c9b565b6105c0610b01366004614b49565b612ca9565b6105c0610b14366004614b49565b612d56565b6105ca610b27366004614c73565b612e0d565b6105c0610b3a366004614c15565b612ea2565b6105c0610b4d366004614b49565b612f31565b6105ca612f88565b6105ca610b68366004614c15565b61302c565b6105ca60d45481565b6105ca610b84366004614d2c565b6130e5565b6105ca60da5481565b6105ca60d65481565b6105c0610ba9366004614c15565b613110565b6105ca61320d565b6105c0610bc4366004614b62565b613229565b610bdc610bd7366004614b49565b6133ee565b6040516105d4919081516001600160a01b031681526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0918201519181019190915260c00190565b6105ca610c3a366004614cbc565b613492565b6105ca60d95481565b6105ca60d05481565b6105c0610c5f366004614c15565b6135fe565b6105ca6136bc565b6105c0610c7a366004614d5a565b6136c6565b60cb546106ba906001600160a01b031681565b6105ca60d75481565b6105ca60e15481565b6105ca60ea5481565b600054610100900460ff1615808015610ccd5750600054600160ff909116105b80610ce75750303b158015610ce7575060005460ff166001145b610d0c5760405162461bcd60e51b8152600401610d0390614d76565b60405180910390fd5b6000805460ff191660011790558015610d2f576000805461ff0019166101001790555b8a516001600160a01b031615801590610d54575060208b01516001600160a01b031615155b8015610d6c575060408b01516001600160a01b031615155b8015610d84575060608b01516001600160a01b031615155b8015610daa57508a604001516001600160a01b03168b602001516001600160a01b031614155b8015610dd057508a606001516001600160a01b03168b604001516001600160a01b031614155b8015610de8575060808b01516001600160a01b031615155b8015610e00575060a08b01516001600160a01b031615155b8015610e18575060c08b01516001600160a01b031615155b8015610e365750610e32600a670de0b6b3a7640000614df0565b8810155b8015610e46575086516020880151115b8015610e645750610e60670de0b6b3a76400006032614e1a565b8611155b8015610e825750610e7e670de0b6b3a76400006019614e1a565b8511155b8015610ea05750610e9c6014670de0b6b3a7640000614df0565b8411155b8015610ebe5750610eba670de0b6b3a7640000600a614e1a565b8311155b8015610edc5750610ed8670de0b6b3a76400006064614e1a565b8210155b610f175760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f504152414d5360a01b6044820152606401610d03565b610f218d8d61374e565b8a51610f2c90613783565b610f398b602001516137b3565b60808b015160c980546001600160a01b03199081166001600160a01b039384161790915560408d015160ca8054831691841691909117905560608d015160cb8054831691841691909117905560a08d015160cc8054831691841691909117905560c08d015160cd8054909216921691909117905560ce8a905560d089905560d1889055610fc960d28860026147e1565b5060d486905560d585905560d684905560d783905560d8829055670de0b6b3a764000060d955600160df8190554260e05560408051606081018252600380825260026020830152918101929092526110239160cf9161481f565b50801561106a576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050505050505050505050565b6065546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110e69190614e31565b905090565b60ca546001600160a01b0316336001600160a01b03161461111e5760405162461bcd60e51b8152600401610d0390614e4a565b611131670de0b6b3a76400006032614e1a565b8111156111505760405162461bcd60e51b8152600401610d0390614e70565b60d4819055604080518181526017918101919091527606d6178537570706c79496e6372656173654461696c795604c1b6060820152602081018290526000805160206153c4833981519152906080015b60405180910390a150565b600082815260e660205260408120903360c9546040516331a9108f60e11b8152600481018790529192506000916001600160a01b0390911690636352211e90602401602060405180830381865afa15801561120a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061122e9190614e93565b9050816001600160a01b0316816001600160a01b031614806112c5575060c95460405163020604bf60e21b8152600481018790526001600160a01b0384811692169063081812fc90602401602060405180830381865afa158015611296573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112ba9190614e93565b6001600160a01b0316145b80611341575060c95460405163e985e9c560e01b81526001600160a01b03838116600483015284811660248301529091169063e985e9c590604401602060405180830381865afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190614eb0565b61135d5760405162461bcd60e51b8152600401610d0390614ed2565b826005015483600401546113719190614ef7565b4210156113af5760405162461bcd60e51b815260206004820152600c60248201526b1393d517d5539313d0d2d15160a21b6044820152606401610d03565b60006113d4670de0b6b3a76400006113c660355490565b600387015491906001613805565b90508060db60008282546113e89190614f0a565b909155506113f69050612bd6565b60db5413156114175760405162461bcd60e51b8152600401610d0390614f32565b60c954604051630852cd8d60e31b8152600481018890526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561145d57600080fd5b505af1158015611471573d6000803e3d6000fd5b505050508060da60008282546114879190614f0a565b909155506114959050613864565b836003015460ed60008282546114ab9190614f0a565b9091555050600384015460ee80546000906114c7908490614f5d565b925050819055506114dd308686600101546138c8565b816001600160a01b0316856001600160a01b0316846001600160a01b03167fe37405a4f414fe3119839681cc26ea3462fc575fd2f81734417e52144d3f34b9898860405161152c929190614f70565b60405180910390a4505050505050565b60606036805461154b90614fba565b80601f016020809104026020016040519081016040528092919081815260200182805461157790614fba565b80156115c45780601f10611599576101008083540402835291602001916115c4565b820191906000526020600020905b8154815290600101906020018083116115a757829003601f168201915b5050505050905090565b60006115db826000613a5a565b92915050565b6000336115ef818585613a9b565b5060019392505050565b60006115db826001613bbf565b60cd5460408051600481526024810182526020810180516001600160e01b031663bef35b7960e01b17905290516000926001600160a01b03169161164991614fee565b6000604051808303816000865af19150503d8060008114611686576040519150601f19603f3d011682016040523d82523d6000602084013e61168b565b606091505b50509050806116be576040517f46f2d6138acb3be39ad6ae5c9279b648c2a2c68743d0ddc18cc3a81cedecebd590600090a15b50565b6000670de0b6b3a76400006116d560355490565b60da546116e0612bd6565b6116ea919061500a565b6116f49190614e1a565b6110e69190614df0565b611706613bdb565b6001600160a01b03811661172c5760405162461bcd60e51b8152600401610d039061502a565b60cd80546001600160a01b0319166001600160a01b03831690811790915560408051818152601191810191909152701bdc195b951c9859195cd41b9b11995959607a1b60608201526020810191909152600080516020615404833981519152906080016111a0565b6000816117a085611d53565b6117aa9190614f5d565b6117b3856127cc565b11156117d15760405162461bcd60e51b8152600401610d039061504d565b6117dc843384613c35565b6115ef8484846138c8565b9392505050565b6000670de0b6b3a764000060d9546116ea60355490565b60006110e6613ca9565b6201518060de54426118219190614f5d565b1061185957600060dd8190554260de556040517f27496921ae2aa4b5647b6540dbd476c9929dcf0a56ab8a3e529eb38dba384db19190a15b565b6000336115ef81858561186e83836130e5565b6118789190614ef7565b613a9b565b60ca546001600160a01b0316336001600160a01b0316146118b05760405162461bcd60e51b8152600401610d0390614e4a565b6118c3600a670de0b6b3a7640000614df0565b8110156118e25760405162461bcd60e51b8152600401610d0390615079565b60d181905560408051818152601391810191909152726d61786461696c79416363506e6c44656c746160681b6060820152602081018290526000805160206153c4833981519152906080016111a0565b600061193c613cc3565b9050611947816121b4565b60f081905560f18290556040519081527f9551c7fda0233728a7b7eae3d388b53a068086c3f7d613bdf74e6e58dd6b41ec906020016111a0565b60006115db61198f83612c5f565b6000613a5a565b61199e613bdb565b6001600160a01b0381166119c45760405162461bcd60e51b8152600401610d039061502a565b6097546001600160a01b038281169116148015906119f0575060cb546001600160a01b03828116911614155b611a0c5760405162461bcd60e51b8152600401610d039061509c565b60ca80546001600160a01b0319166001600160a01b038316908117909155604080518181526007918101919091526636b0b730b3b2b960c91b60608201526020810191909152600080516020615404833981519152906080016111a0565b600054600290610100900460ff16158015611a8c575060005460ff8083169116105b611aa85760405162461bcd60e51b8152600401610d0390614d76565b6000805461ffff191660ff831617610100179055611ac4611932565b60ec5460ea6000828254611ad89190614ef7565b90915550506000805461ff001916905560405160ff821681527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020016111a0565b60ca546001600160a01b0316336001600160a01b031614611b4e5760405162461bcd60e51b8152600401610d0390614e4a565b611b616014670de0b6b3a7640000614df0565b811115611b805760405162461bcd60e51b8152600401610d0390614e70565b60d6819055604080518181526013918101919091527206d6178537570706c794d696e744461696c795606c1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b6201518060e35442611be29190614f5d565b1061185957611bfa670de0b6b3a76400006064614e1a565b60d454611c10670de0b6b3a76400006064614e1a565b611c1a9190614ef7565b603554611c279190614e1a565b611c319190614df0565b60e28190554260e3556040519081527fd103db6eec024592fa6d47db028ec6408076ac4762eb021a6e52b525828bab9b906020015b60405180910390a1565b600082600060d95411611c955760405162461bcd60e51b8152600401610d03906150c1565b60008111611cb55760405162461bcd60e51b8152600401610d03906150e2565b611cbe83611981565b841115611d0d5760405162461bcd60e51b815260206004820152601e60248201527f455243343632363a206465706f736974206d6f7265207468616e206d617800006044820152606401610d03565b6000611d1885612c8e565b9050611d2681866001613d20565b611d3233858784613dfc565b91505b5092915050565b60d28160028110611d4c57600080fd5b0154905081565b6001600160a01b031660009081526033602052604090205490565b611d76613bdb565b61185960006137b3565b60cd5460009033906001600160a01b03168114611dcf5760405162461bcd60e51b815260206004820152600d60248201526c13d3931657d4139317d1915151609a1b6044820152606401610d03565b6000611ddb858561500a565b90506000611de860355490565b90506000611e48670de0b6b3a76400008360db54611e04612bd6565b611e0e919061500a565b611e189190614e1a565b611e229190614df0565b670de0b6b3a76400008460d054611e399190614e1a565b611e439190614df0565b613e6c565b9050808313611e575782611e59565b805b925081611e6e670de0b6b3a764000085615103565b611e789190615133565b60db6000828254611e899190614f0a565b925050819055508260ed6000828254611ea29190614f0a565b909155505060db5460da55611eb5613864565b60df8054906000611ec583615161565b90915550504260e055611ed88388614f0a565b60e155611ee3611bd0565b60df5460e15460da54604080518b8152602081018b90529081019290925260608201526001600160a01b038616907f115621a72d6f59323a1d752b116219634bc004cadb85d6bdc8e7eb254905722d9060800160405180910390a3505060e15495945050505050565b33611f60611f58613e82565b823085613e96565b603554611f75670de0b6b3a764000084614e1a565b611f7f9190614df0565b60dc6000828254611f909190614ef7565b90915550611f9e9050613864565b8160ec6000828254611fb09190614ef7565b925050819055508160ea6000828254611fc99190614ef7565b90915550506040518281526001600160a01b038216907fe34918ff1c7084970068b53fd71ad6d8b04e9f15d3886cbf006443e6cdc52ea69060200160405180910390a25050565b600082600060d954116120355760405162461bcd60e51b8152600401610d03906150c1565b600081116120555760405162461bcd60e51b8152600401610d03906150e2565b61205e83612c5f565b8411156120ad5760405162461bcd60e51b815260206004820152601b60248201527f455243343632363a206d696e74206d6f7265207468616e206d617800000000006044820152606401610d03565b60006120b8856129c1565b90506120c685826001613d20565b611d3233858388613dfc565b60606037805461154b90614fba565b60ca546001600160a01b0316336001600160a01b0316146121145760405162461bcd60e51b8152600401610d0390614e4a565b612127670de0b6b3a7640000600a614e1a565b81111561216b5760405162461bcd60e51b8152602060048201526012602482015271105093d59157d3505617d11254d0d3d5539560721b6044820152606401610d03565b60d781905560408051818152600c918101919091526b06d6178446973636f756e74560a41b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60006121c86121c16117ee565b6001613f01565b701d6329f1c35ca4bfabb9f561000000000060f154846121e89190614f5d565b6121f29190614e1a565b6121fc9190614df0565b60f0546115db9190614ef7565b6000338161221782866130e5565b9050838110156122775760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610d03565b6122848286868403613a9b565b506001949350505050565b336122a361229b613e82565b823086613e96565b60da54839060001380156122b95750600060db54125b156123155760006064670de0b6b3a764000060d554876122d99190614e1a565b6122e39190614df0565b6122ed9190614df0565b90508060e760008282546123019190614ef7565b9091555061231190508183614f5d565b9150505b600061232060355490565b612332670de0b6b3a764000084614e1a565b61233c9190614df0565b90508060db6000828254612350919061500a565b9091555061235e905061180f565b8060dd6000828254612370919061500a565b925050819055508160ed6000828254612389919061500a565b925050819055508160eb60008282546123a2919061500a565b909155506123b09050611606565b6123b8611bd0565b836001600160a01b0316836001600160a01b03167f2083893e39f8ae736fed502f7e149cc5bfe6159878615fae685a9a98bc452d5a8785604051612406929190918252602082015260400190565b60405180910390a35050505050565b6001600160a01b038216600090815260e4602090815260408083208484529091529020548311156124845760405162461bcd60e51b81526020600482015260196024820152781353d49157d512105397d5d2551211149055d7d05353d55395603a1b6044820152606401610d03565b33600061249184836130e5565b9050836001600160a01b0316826001600160a01b031614806124be57506000811180156124be5750848110155b6124da5760405162461bcd60e51b8152600401610d0390614ed2565b6001600160a01b038416600090815260e4602090815260408083208684529091528120805487929061250d908490614f5d565b9250508190555082846001600160a01b0316836001600160a01b03167f443ccdbbbde35bd48740a9ea14c47318b735db4631ed1ebcdaaaa9f4636c84ea8860df54604051612565929190918252602082015260400190565b60405180910390a45050505050565b60cd60009054906101000a90046001600160a01b03166001600160a01b031663b8feee646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156125c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125eb9190614e31565b156126275760405162461bcd60e51b815260206004820152600c60248201526b08a9c88be9e8cbe8aa09e86960a31b6044820152606401610d03565b33600061263483836130e5565b9050826001600160a01b0316826001600160a01b0316148061266157506000811180156126615750838110155b61267d5760405162461bcd60e51b8152600401610d0390614ed2565b61268683611d53565b84612690856127cc565b61269a9190614ef7565b11156126dc5760405162461bcd60e51b81526020600482015260116024820152704d4f52455f5448414e5f42414c414e434560781b6044820152606401610d03565b60006126e6612f88565b60df546126f39190614ef7565b6001600160a01b038516600090815260e46020908152604080832084845290915281208054929350879290919061272b908490614ef7565b9250508190555080846001600160a01b0316846001600160a01b03167f21b8e5e36008677ea26efbbc967e568e01b127f731ed0fda0a8685fda37d0d5f8860df54604051612565929190918252602082015260400190565b6000338261279082611d53565b61279a9190614f5d565b6127a3826127cc565b11156127c15760405162461bcd60e51b8152600401610d039061504d565b6115ef8185856138c8565b60df546000905b60cf6000815481106127e7576127e7614e04565b906000526020600020015460df546127ff9190614ef7565b8111612847576001600160a01b038316600090815260e4602090815260408083208484529091529020546128339083614ef7565b91508061283f81615161565b9150506127d3565b50919050565b600083600060d954116128725760405162461bcd60e51b8152600401610d03906150c1565b600081116128925760405162461bcd60e51b8152600401610d03906150e2565b83600060d754116128b55760405162461bcd60e51b8152600401610d039061517a565b60ce548110156128d75760405162461bcd60e51b8152600401610d03906151a6565b6301e133808111156128fb5760405162461bcd60e51b8152600401610d03906151d7565b61290484612c5f565b8611156129485760405162461bcd60e51b815260206004820152601260248201527109a929ca8be9a9ea48abea890829cbe9a82b60731b6044820152606401610d03565b6000612953876129c1565b90506129b68161296a612964612bee565b89612e0d565b61297d670de0b6b3a76400006064614e1a565b6129879190614ef7565b61299a670de0b6b3a76400006064614e1a565b6129a49085614e1a565b6129ae9190614df0565b898989613f10565b979650505050505050565b60006115db826001613a5a565b600083600060d954116129f35760405162461bcd60e51b8152600401610d03906150c1565b60008111612a135760405162461bcd60e51b8152600401610d03906150e2565b612a1c83612c9b565b851115612a6b5760405162461bcd60e51b815260206004820152601f60248201527f455243343632363a207769746864726177206d6f7265207468616e206d6178006044820152606401610d03565b6000612a76866115f9565b6001600160a01b038516600090815260e46020908152604080832060df548452909152812080549293508392909190612ab0908490614f5d565b90915550612ac2905081876000613d20565b612acf33868689856140cb565b95945050505050565b600083600060d95411612afd5760405162461bcd60e51b8152600401610d03906150c1565b60008111612b1d5760405162461bcd60e51b8152600401610d03906150e2565b612b268361302c565b851115612b755760405162461bcd60e51b815260206004820152601d60248201527f455243343632363a2072656465656d206d6f7265207468616e206d61780000006044820152606401610d03565b6001600160a01b038316600090815260e46020908152604080832060df54845290915281208054879290612baa908490614f5d565b9091555060009050612bbb866115ce565b9050612bc986826000613d20565b612acf338686848a6140cb565b600060dc54670de0b6b3a76400006110e69190614ef7565b600080612bf9612bd6565b905080670de0b6b3a7640000600060da5413612c2d5760da54612c1e90600019615103565b612c289084614ef7565b612c3a565b60da54612c3a9084614f5d565b612c45906064614e1a565b612c4f9190614e1a565b612c599190614df0565b91505090565b60008060da5413612c72576000196115db565b612c8160e254611e4360355490565b60e2546115db9190614f5d565b60006115db826000613bbf565b60006115db61198f8361302c565b60ca546001600160a01b0316336001600160a01b031614612cdc5760405162461bcd60e51b8152600401610d0390614e4a565b612cef670de0b6b3a76400006019614e1a565b811115612d0e5760405162461bcd60e51b8152600401610d0390614e70565b60d581905560408051818152600b918101919091526a06c6f737365734275726e560ac1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60ca546001600160a01b0316336001600160a01b031614612d895760405162461bcd60e51b8152600401610d0390614e4a565b612d9c670de0b6b3a76400006064614e1a565b811015612dbb5760405162461bcd60e51b8152600401610d0390615079565b60d8819055604080518181526015918101919091527406d6178446973636f756e745468726573686f6c645605c1b6060820152602081018290526000805160206153c4833981519152906080016111a0565b60006301e1338082612e28670de0b6b3a76400006064614e1a565b851115612e8a5760d854851115612e40576000612e8e565b612e53670de0b6b3a76400006064614e1a565b60d854612e609190614f5d565b8560d854612e6e9190614f5d565b60d754612e7b9190614e1a565b612e859190614df0565b612e8e565b60d7545b612e989190614e1a565b6117e79190614df0565b612eaa613bdb565b6001600160a01b038116612ed05760405162461bcd60e51b8152600401610d039061502a565b60cc80546001600160a01b0319166001600160a01b03831690811790915560408051818152600a91810191909152693837362430b7323632b960b11b60608201526020810191909152600080516020615404833981519152906080016111a0565b612f39613bdb565b60d081905560408051818152601291810191909152716d61784163634f70656e506e6c44656c746160701b6060820152602081018290526000805160206153c4833981519152906080016111a0565b600080612f93612bee565b90506000612fae82611e43670de0b6b3a76400006064614e1a565b612fb89083614f5d565b60d35490915081116130055760d2548111612ff15760cf600081548110612fe157612fe1614e04565b9060005260206000200154613025565b60cf600181548110612fe157612fe1614e04565b60cf60028154811061301957613019614e04565b90600052602060002001545b9250505090565b60cd5460408051632e3fbb9960e21b815290516000926001600160a01b03169163b8feee649160048083019260209291908290030181865afa158015613076573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061309a9190614e31565b156130a65760006115db565b6001600160a01b038216600090815260e46020908152604080832060df5484529091529020546115db9060016130db60355490565b611e439190614f5d565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b60ca546001600160a01b0316336001600160a01b0316146131435760405162461bcd60e51b8152600401610d0390614e4a565b6001600160a01b0381166131695760405162461bcd60e51b8152600401610d039061502a565b6097546001600160a01b03828116911614801590613195575060ca546001600160a01b03828116911614155b6131b15760405162461bcd60e51b8152600401610d039061509c565b60cb80546001600160a01b0319166001600160a01b038316908117909155604080518181526005918101919091526430b236b4b760d91b60608201526020810191909152600080516020615404833981519152906080016111a0565b6000670de0b6b3a764000061322160355490565b6116ea612bd6565b60cc5433906001600160a01b031681146132805760405162461bcd60e51b815260206004820152601860248201527727a7262cafaa2920a224a723afa827262fa420a7222622a960411b6044820152606401610d03565b60006132a1670de0b6b3a764000061329760355490565b8691906001613805565b90508060db60008282546132b59190614f0a565b909155506132c39050612bd6565b60db5413156132e45760405162461bcd60e51b8152600401610d0390614f32565b6132ec61180f565b8060dd60008282546132fe9190614f0a565b909155505060d15460dd5413156133485760405162461bcd60e51b815260206004820152600e60248201526d13505617d5d15512131657d4139360921b6044820152606401610d03565b8360ed600082825461335a9190614f0a565b925050819055508360eb60008282546133739190614f0a565b909155506133819050611606565b613389611bd0565b61339b613394613e82565b8486614168565b826001600160a01b0316826001600160a01b03167f17ffe64fb2212f31d60284d6471e06abb7db8d66f0a60f9b884b29f1597d05da866040516133e091815260200190565b60405180910390a350505050565b6134306040518060c0016040528060006001600160a01b0316815260200160008152602001600081526020016000815260200160008152602001600081525090565b50600090815260e66020908152604091829020825160c08101845281546001600160a01b03168152600182015492810192909252600281015492820192909252600382015460608201526004820154608082015260059091015460a082015290565b600083600060d954116134b75760405162461bcd60e51b8152600401610d03906150c1565b600081116134d75760405162461bcd60e51b8152600401610d03906150e2565b83600060d754116134fa5760405162461bcd60e51b8152600401610d039061517a565b60ce5481101561351c5760405162461bcd60e51b8152600401610d03906151a6565b6301e133808111156135405760405162461bcd60e51b8152600401610d03906151d7565b6000613555670de0b6b3a76400006064614e1a565b613566613560612bee565b88612e0d565b613579670de0b6b3a76400006064614e1a565b6135839190614ef7565b61358d9089614e1a565b6135979190614df0565b90506135a285611981565b8111156135e95760405162461bcd60e51b81526020600482015260156024820152740888aa09ea692a8be9a9ea48abea890829cbe9a82b605b1b6044820152606401610d03565b6129b681886135f784612c8e565b8989613f10565b613606613bdb565b6001600160a01b03811661366b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d03565b60ca546001600160a01b03828116911614801590613697575060cb546001600160a01b03828116911614155b6136b35760405162461bcd60e51b8152600401610d039061509c565b6116be816137b3565b60006110e66116c1565b6136ce613bdb565b80516020820151116137115760405162461bcd60e51b815260206004820152600c60248201526b57524f4e475f56414c55455360a01b6044820152606401610d03565b61371e60d28260026147e1565b507f8472b50e25b52d8de564f9719bd793b18d83cf59ce4d309e211fb6a4fdc14811816040516111a09190615208565b600054610100900460ff166137755760405162461bcd60e51b8152600401610d0390615239565b61377f828261419d565b5050565b600054610100900460ff166137aa5760405162461bcd60e51b8152600401610d0390615239565b6116be816141dd565b609780546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080613813868686614262565b9050600183600281111561382957613829615284565b14801561384657506000848061384157613841614dc4565b868809115b1561385957613856600182614ef7565b90505b90505b949350505050565b61386c611932565b600060da541361387d576000613881565b60da545b613889612bd6565b6138939190614f5d565b60d98190556040519081527f547c25b7a5677a006ff044a0e4b5e699598339825e7b42d3dc645117ceee805090602001611c66565b6001600160a01b03831661392c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610d03565b6001600160a01b03821661398e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610d03565b6001600160a01b03831660009081526033602052604090205481811015613a065760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610d03565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591516000805160206153e4833981519152906133e09086815260200190565b50505050565b600060001983148015613a775750670de0b6b3a764000060d95410155b15613a835750816115db565b60d9546117e7908490670de0b6b3a764000085613805565b6001600160a01b038316613afd5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610d03565b6001600160a01b038216613b5e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610d03565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60d9546000906117e7908490670de0b6b3a76400009085613805565b6097546001600160a01b031633146118595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610d03565b6000613c4184846130e5565b90506000198114613a545781811015613c9c5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610d03565b613a548484848403613a9b565b6000806065546110e69190600160a01b900460ff1661529a565b600061a4b1461480613cd7575062066eed46145b15613d1b5760646001600160a01b031663a3b1b31d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110c2573d6000803e3d6000fd5b504390565b6000613d2b60355490565b9050600060db541215613d765781613d4c57613d478482614f5d565b613d56565b613d568482614ef7565b8160db54613d649190615103565b613d6e9190615133565b60db55613dcb565b600060db541315613dcb5781613d8e57600019613d91565b60015b8160ed5486613da09190615103565b613daa9190615133565b613db49190615103565b60ed6000828254613dc59190614f0a565b90915550505b81613de3578260ea54613dde9190614f5d565b613df1565b8260ea54613df19190614ef7565b60ea55613a54611932565b606554613e14906001600160a01b0316853085613e96565b613e1e838261434c565b826001600160a01b0316846001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d784846040516133e0929190918252602082015260400190565b6000818310613e7b57816117e7565b5090919050565b60006110e66065546001600160a01b031690565b6040516001600160a01b0380851660248301528316604482015260648101829052613a549085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143fb565b6000818311613e7b57816117e7565b6000848611613f4f5760405162461bcd60e51b815260206004820152600b60248201526a1393d7d11254d0d3d5539560aa1b6044820152606401610d03565b600060e560008154613f6090615161565b918290555090506000613f738789614f5d565b600083815260e66020526040902080546001600160a01b0319166001600160a01b0387161781556001808201899055600282018a9055600382018390554260048301556005820188905591925090613fce9088908a90613d20565b33613fdb81308b8b613dfc565b8260ef6000828254613fed9190614ef7565b925050819055508260ee60008282546140069190614ef7565b909155505060c9546040516340c10f1960e01b81526001600160a01b03888116600483015260248201879052909116906340c10f1990604401600060405180830381600087803b15801561405957600080fd5b505af115801561406d573d6000803e3d6000fd5b505083546040516001600160a01b03918216935090841691507f5d26cdffbd8401ba2a961d2094f7f008ee7bd735ac02a949721ee0fd0f0d5afc906140b59088908790614f70565b60405180910390a3509198975050505050505050565b826001600160a01b0316856001600160a01b0316146140ef576140ef838683613c35565b6140f983826144d0565b606554614110906001600160a01b03168584614168565b826001600160a01b0316846001600160a01b0316866001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8585604051612565929190918252602082015260400190565b6040516001600160a01b03831660248201526044810182905261419890849063a9059cbb60e01b90606401613eca565b505050565b600054610100900460ff166141c45760405162461bcd60e51b8152600401610d0390615239565b60366141d08382615303565b5060376141988282615303565b600054610100900460ff166142045760405162461bcd60e51b8152600401610d0390615239565b600080614210836145f2565b9150915081614220576012614222565b805b606580546001600160a01b039095166001600160a01b031960ff93909316600160a01b02929092166001600160a81b031990951694909417179092555050565b600080806000198587098587029250828110838203039150508060000361429c5783828161429257614292614dc4565b04925050506117e7565b8084116142e35760405162461bcd60e51b81526020600482015260156024820152744d6174683a206d756c446976206f766572666c6f7760581b6044820152606401610d03565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b6001600160a01b0382166143a25760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610d03565b80603560008282546143b49190614ef7565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481526000805160206153e4833981519152910160405180910390a35050565b6000614450826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166146ce9092919063ffffffff16565b90508051600014806144715750808060200190518101906144719190614eb0565b6141985760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610d03565b6001600160a01b0382166145305760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610d03565b6001600160a01b038216600090815260336020526040902054818110156145a45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610d03565b6001600160a01b03831660008181526033602090815260408083208686039055603580548790039055518581529192916000805160206153e4833981519152910160405180910390a3505050565b60408051600481526024810182526020810180516001600160e01b031663313ce56760e01b17905290516000918291829182916001600160a01b0387169161463991614fee565b600060405180830381855afa9150503d8060008114614674576040519150601f19603f3d011682016040523d82523d6000602084013e614679565b606091505b509150915081801561468d57506020815110155b156146c1576000818060200190518101906146a89190614e31565b905060ff81116146bf576001969095509350505050565b505b5060009485945092505050565b606061385c848460008585600080866001600160a01b031685876040516146f59190614fee565b60006040518083038185875af1925050503d8060008114614732576040519150601f19603f3d011682016040523d82523d6000602084013e614737565b606091505b50915091506129b687838387606083156147b25782516000036147ab576001600160a01b0385163b6147ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d03565b508161385c565b61385c83838151156147c75781518083602001fd5b8060405162461bcd60e51b8152600401610d039190614bb6565b826002810192821561480f579160200282015b8281111561480f5782518255916020019190600101906147f4565b5061481b92915061485f565b5090565b82805482825590600052602060002090810192821561480f579160200282015b8281111561480f578251829060ff1690559160200191906001019061483f565b5b8082111561481b5760008155600101614860565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261489b57600080fd5b813567ffffffffffffffff808211156148b6576148b6614874565b604051601f8301601f19908116603f011681019082821181831017156148de576148de614874565b816040528381528660208588010111156148f757600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b03811681146116be57600080fd5b803561493781614917565b919050565b600060e0828403121561494e57600080fd5b60405160e0810181811067ffffffffffffffff8211171561497157614971614874565b604052905080823561498281614917565b8152602083013561499281614917565b602082015260408301356149a581614917565b604082015260608301356149b881614917565b60608201526149c96080840161492c565b60808201526149da60a0840161492c565b60a08201526149eb60c0840161492c565b60c08201525092915050565b600082601f830112614a0857600080fd5b6040516040810181811067ffffffffffffffff82111715614a2b57614a2b614874565b8060405250806040840185811115614a4257600080fd5b845b81811015614a5c578035835260209283019201614a44565b509195945050505050565b6000806000806000806000806000806000806102608d8f031215614a8a57600080fd5b67ffffffffffffffff8d351115614aa057600080fd5b614aad8e8e358f0161488a565b9b5067ffffffffffffffff60208e01351115614ac857600080fd5b614ad88e60208f01358f0161488a565b9a50614ae78e60408f0161493c565b99506101208d013598506101408d013597506101608d01359650614b0f8e6101808f016149f7565b95506101c08d013594506101e08d013593506102008d013592506102208d013591506102408d013590509295989b509295989b509295989b565b600060208284031215614b5b57600080fd5b5035919050565b60008060408385031215614b7557600080fd5b823591506020830135614b8781614917565b809150509250929050565b60005b83811015614bad578181015183820152602001614b95565b50506000910152565b6020815260008251806020840152614bd5816040850160208701614b92565b601f01601f19169190910160400192915050565b60008060408385031215614bfc57600080fd5b8235614c0781614917565b946020939093013593505050565b600060208284031215614c2757600080fd5b81356117e781614917565b600080600060608486031215614c4757600080fd5b8335614c5281614917565b92506020840135614c6281614917565b929592945050506040919091013590565b60008060408385031215614c8657600080fd5b50508035926020909101359150565b600080600060608486031215614caa57600080fd5b833592506020840135614c6281614917565b600080600060608486031215614cd157600080fd5b83359250602084013591506040840135614cea81614917565b809150509250925092565b600080600060608486031215614d0a57600080fd5b833592506020840135614d1c81614917565b91506040840135614cea81614917565b60008060408385031215614d3f57600080fd5b8235614d4a81614917565b91506020830135614b8781614917565b600060408284031215614d6c57600080fd5b6117e783836149f7565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082614dff57614dff614dc4565b500490565b634e487b7160e01b600052603260045260246000fd5b80820281158282048414176115db576115db614dda565b600060208284031215614e4357600080fd5b5051919050565b6020808252600c908201526b27a7262cafa6a0a720a3a2a960a11b604082015260600190565b602080825260099082015268082849eac8abe9a82b60bb1b604082015260600190565b600060208284031215614ea557600080fd5b81516117e781614917565b600060208284031215614ec257600080fd5b815180151581146117e757600080fd5b6020808252600b908201526a1393d517d0531313d5d15160aa1b604082015260600190565b808201808211156115db576115db614dda565b8082018281126000831280158216821582161715614f2a57614f2a614dda565b505092915050565b6020808252601190820152704e4f545f454e4f5547485f41535345545360781b604082015260600190565b818103818111156115db576115db614dda565b91825280546001600160a01b03166020830152600181015460408301526002810154606083015260038101546080830152600481015460a08301526005015460c082015260e00190565b600181811c90821680614fce57607f821691505b60208210810361284757634e487b7160e01b600052602260045260246000fd5b60008251615000818460208701614b92565b9190910192915050565b8181036000831280158383131683831282161715611d3557611d35614dda565b6020808252600990820152680414444524553535f360bc1b604082015260600190565b60208082526012908201527114115391125391d7d5d2551211149055d05360721b604082015260600190565b6020808252600990820152682122a627abafa6a4a760b91b604082015260600190565b6020808252600b908201526a57524f4e475f56414c554560a81b604082015260600190565b602080825260079082015266050524943455f360cc1b604082015260600190565b602080825260079082015266056414c55455f360cc1b604082015260600190565b80820260008212600160ff1b8414161561511f5761511f614dda565b81810583148215176115db576115db614dda565b60008261514257615142614dc4565b600160ff1b82146000198414161561515c5761515c614dda565b500590565b60006001820161517357615173614dda565b5060010190565b6020808252601290820152711393d7d050d512559157d11254d0d3d5539560721b604082015260600190565b6020808252601790820152762122a627abafa6a4a72fa627a1a5afa22aa920aa24a7a760491b604082015260600190565b60208082526017908201527620a127ab22afa6a0ac2fa627a1a5afa22aa920aa24a7a760491b604082015260600190565b60408101818360005b6002811015615230578151835260209283019290910190600101615211565b50505092915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052602160045260246000fd5b60ff81811683821601908111156115db576115db614dda565b601f821115614198576000816000526020600020601f850160051c810160208610156152dc5750805b601f850160051c820191505b818110156152fb578281556001016152e8565b505050505050565b815167ffffffffffffffff81111561531d5761531d614874565b6153318161532b8454614fba565b846152b3565b602080601f831160018114615366576000841561534e5750858301515b600019600386901b1c1916600185901b1785556152fb565b600085815260208120601f198616915b8281101561539557888601518255948401946001909101908401615376565b50858210156153b35787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fe127735ae9d047cae55da37db2c8ee184c735aacd68cef068d4e70be6a41661d9ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60f89fdb372abe626eac485ef96b2a09f1cfbd7f225dd1e2b491a2b4069c2376a2646970667358221220e343fcef127e5a7782fc33e9f0bae55d7969c9a0ff9c1955e6b4326a6d568bd364736f6c63430008170033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "asset()": {
        "details": "See {IERC4626-asset}. "
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "convertToAssets(uint256)": {
        "details": "See {IERC4626-convertToAssets}. "
      },
      "convertToShares(uint256)": {
        "details": "See {IERC4626-convertToShares}. "
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,address)": {
        "details": "See {IERC4626-deposit}. "
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "maxMint(address)": {
        "details": "See {IERC4626-maxMint}. "
      },
      "maxRedeem(address)": {
        "details": "See {IERC4626-maxRedeem}. "
      },
      "maxWithdraw(address)": {
        "details": "See {IERC4626-maxWithdraw}. "
      },
      "mint(uint256,address)": {
        "details": "See {IERC4626-mint}. As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero. In this case, the shares will be minted without requiring any assets to be deposited."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "previewDeposit(uint256)": {
        "details": "See {IERC4626-previewDeposit}. "
      },
      "previewMint(uint256)": {
        "details": "See {IERC4626-previewMint}. "
      },
      "previewRedeem(uint256)": {
        "details": "See {IERC4626-previewRedeem}. "
      },
      "previewWithdraw(uint256)": {
        "details": "See {IERC4626-previewWithdraw}. "
      },
      "redeem(uint256,address,address)": {
        "details": "See {IERC4626-redeem}. "
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalAssets()": {
        "details": "See {IERC4626-totalAssets}. "
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256,address,address)": {
        "details": "See {IERC4626-withdraw}. "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 306,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 309,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2626,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 487,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 493,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 495,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 497,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 499,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 1079,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 1179,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_asset",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IERC20Upgradeable)1158"
      },
      {
        "astId": 1181,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_underlyingDecimals",
        "offset": 20,
        "slot": "101",
        "type": "t_uint8"
      },
      {
        "astId": 1817,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/Vault.sol:Vault",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3645,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockedDepositNft",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(INft)6612"
      },
      {
        "astId": 3647,
        "contract": "contracts/Vault.sol:Vault",
        "label": "manager",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 3649,
        "contract": "contracts/Vault.sol:Vault",
        "label": "admin",
        "offset": 0,
        "slot": "203",
        "type": "t_address"
      },
      {
        "astId": 3651,
        "contract": "contracts/Vault.sol:Vault",
        "label": "pnlHandler",
        "offset": 0,
        "slot": "204",
        "type": "t_address"
      },
      {
        "astId": 3654,
        "contract": "contracts/Vault.sol:Vault",
        "label": "openTradesPnlFeed",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IOpenTradesPnlFeed)6623"
      },
      {
        "astId": 3690,
        "contract": "contracts/Vault.sol:Vault",
        "label": "MIN_LOCK_DURATION",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 3696,
        "contract": "contracts/Vault.sol:Vault",
        "label": "WITHDRAW_EPOCHS_LOCKS",
        "offset": 0,
        "slot": "207",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3698,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxAccOpenPnlDelta",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 3700,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxdailyAccPnlDelta",
        "offset": 0,
        "slot": "209",
        "type": "t_uint256"
      },
      {
        "astId": 3704,
        "contract": "contracts/Vault.sol:Vault",
        "label": "withdrawLockThresholdsP",
        "offset": 0,
        "slot": "210",
        "type": "t_array(t_uint256)2_storage"
      },
      {
        "astId": 3706,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxSupplyIncreaseDailyP",
        "offset": 0,
        "slot": "212",
        "type": "t_uint256"
      },
      {
        "astId": 3708,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lossesBurnP",
        "offset": 0,
        "slot": "213",
        "type": "t_uint256"
      },
      {
        "astId": 3710,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxSupplyMintDailyP",
        "offset": 0,
        "slot": "214",
        "type": "t_uint256"
      },
      {
        "astId": 3712,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxDiscountP",
        "offset": 0,
        "slot": "215",
        "type": "t_uint256"
      },
      {
        "astId": 3714,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxDiscountThresholdP",
        "offset": 0,
        "slot": "216",
        "type": "t_uint256"
      },
      {
        "astId": 3716,
        "contract": "contracts/Vault.sol:Vault",
        "label": "shareToAssetsPrice",
        "offset": 0,
        "slot": "217",
        "type": "t_uint256"
      },
      {
        "astId": 3718,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accPnlPerTokenUsed",
        "offset": 0,
        "slot": "218",
        "type": "t_int256"
      },
      {
        "astId": 3720,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accPnlPerToken",
        "offset": 0,
        "slot": "219",
        "type": "t_int256"
      },
      {
        "astId": 3722,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accRewardsPerToken",
        "offset": 0,
        "slot": "220",
        "type": "t_uint256"
      },
      {
        "astId": 3724,
        "contract": "contracts/Vault.sol:Vault",
        "label": "dailyAccPnlDelta",
        "offset": 0,
        "slot": "221",
        "type": "t_int256"
      },
      {
        "astId": 3726,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastDailyAccPnlDeltaReset",
        "offset": 0,
        "slot": "222",
        "type": "t_uint256"
      },
      {
        "astId": 3728,
        "contract": "contracts/Vault.sol:Vault",
        "label": "currentEpoch",
        "offset": 0,
        "slot": "223",
        "type": "t_uint256"
      },
      {
        "astId": 3730,
        "contract": "contracts/Vault.sol:Vault",
        "label": "currentEpochStart",
        "offset": 0,
        "slot": "224",
        "type": "t_uint256"
      },
      {
        "astId": 3732,
        "contract": "contracts/Vault.sol:Vault",
        "label": "currentEpochPositiveOpenPnl",
        "offset": 0,
        "slot": "225",
        "type": "t_uint256"
      },
      {
        "astId": 3734,
        "contract": "contracts/Vault.sol:Vault",
        "label": "currentMaxSupply",
        "offset": 0,
        "slot": "226",
        "type": "t_uint256"
      },
      {
        "astId": 3736,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastMaxSupplyUpdate",
        "offset": 0,
        "slot": "227",
        "type": "t_uint256"
      },
      {
        "astId": 3742,
        "contract": "contracts/Vault.sol:Vault",
        "label": "withdrawRequests",
        "offset": 0,
        "slot": "228",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3744,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockedDepositsCount",
        "offset": 0,
        "slot": "229",
        "type": "t_uint256"
      },
      {
        "astId": 3749,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lockedDeposits",
        "offset": 0,
        "slot": "230",
        "type": "t_mapping(t_uint256,t_struct(LockedDeposit)6672_storage)"
      },
      {
        "astId": 3751,
        "contract": "contracts/Vault.sol:Vault",
        "label": "assetsToDeplete",
        "offset": 0,
        "slot": "231",
        "type": "t_uint256"
      },
      {
        "astId": 3753,
        "contract": "contracts/Vault.sol:Vault",
        "label": "dailyMinted",
        "offset": 0,
        "slot": "232",
        "type": "t_uint256"
      },
      {
        "astId": 3755,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastdailyMintedReset",
        "offset": 0,
        "slot": "233",
        "type": "t_uint256"
      },
      {
        "astId": 3757,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalDeposited",
        "offset": 0,
        "slot": "234",
        "type": "t_uint256"
      },
      {
        "astId": 3759,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalClosedPnl",
        "offset": 0,
        "slot": "235",
        "type": "t_int256"
      },
      {
        "astId": 3761,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalRewards",
        "offset": 0,
        "slot": "236",
        "type": "t_uint256"
      },
      {
        "astId": 3763,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalLiability",
        "offset": 0,
        "slot": "237",
        "type": "t_int256"
      },
      {
        "astId": 3765,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalLockedDiscounts",
        "offset": 0,
        "slot": "238",
        "type": "t_uint256"
      },
      {
        "astId": 3767,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalDiscounts",
        "offset": 0,
        "slot": "239",
        "type": "t_uint256"
      },
      {
        "astId": 3769,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accBlockWeightedMarketCap",
        "offset": 0,
        "slot": "240",
        "type": "t_uint256"
      },
      {
        "astId": 3771,
        "contract": "contracts/Vault.sol:Vault",
        "label": "accBlockWeightedMarketCapLastStored",
        "offset": 0,
        "slot": "241",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)2_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1158": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(INft)6612": {
        "encoding": "inplace",
        "label": "contract INft",
        "numberOfBytes": "20"
      },
      "t_contract(IOpenTradesPnlFeed)6623": {
        "encoding": "inplace",
        "label": "contract IOpenTradesPnlFeed",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(LockedDeposit)6672_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IToken.LockedDeposit)",
        "numberOfBytes": "32",
        "value": "t_struct(LockedDeposit)6672_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(LockedDeposit)6672_storage": {
        "encoding": "inplace",
        "label": "struct IToken.LockedDeposit",
        "members": [
          {
            "astId": 6661,
            "contract": "contracts/Vault.sol:Vault",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6663,
            "contract": "contracts/Vault.sol:Vault",
            "label": "shares",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6665,
            "contract": "contracts/Vault.sol:Vault",
            "label": "assetsDeposited",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6667,
            "contract": "contracts/Vault.sol:Vault",
            "label": "assetsDiscount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6669,
            "contract": "contracts/Vault.sol:Vault",
            "label": "atTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6671,
            "contract": "contracts/Vault.sol:Vault",
            "label": "lockDuration",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}